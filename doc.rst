

.. py:module:: pyopenms.Plotting




.. py:function:: mirror_plot_spectrum(spec_top: pyopenms.pyopenms_7.MSSpectrum, spec_bottom: pyopenms.pyopenms_7.MSSpectrum, alignment: Optional[List] = None, spectrum_top_kws: Optional[Dict] = None, spectrum_bottom_kws: Optional[Dict] = None, ax=None)
   :module: pyopenms.Plotting


Mirror plot two MS/MS spectra.


:param spec_top: The spectrum to be plotted on the top.
:type spec_top: MsmsSpectrum
:param spec_bottom: The spectrum to be plotted on the bottom.
:type spec_bottom: MsmsSpectrum
:param alignment: List of aligned peak pairs.
:type alignment: Optional[List], optional
:param spectrum_top_kws: Keyword arguments for `plot.spectrum` of top spepctrum.
:type spectrum_top_kws: Optional[Dict], optional
:param spectrum_bottom_kws: Keyword arguments for `plot.spectrum` of bottom spectrum.
:type spectrum_bottom_kws: Optional[Dict], optional
:param ax: Axes instance on which to plot the spectrum. If None the current Axes
           instance is used.
:type ax: Optional[plt.Axes], optional


:returns: The matplotlib Axes instance on which the spectra are plotted.
:rtype: plt.Axes




.. py:function:: plot_chromatogram(c: pyopenms.pyopenms_5.MSChromatogram)
   :module: pyopenms.Plotting


Plot chromatogram peaks.


:param c: The chromatogram to be plotted.
:type c: MSChromatogram




.. py:function:: plot_spectrum(spectrum: pyopenms.pyopenms_7.MSSpectrum, color_ions: bool = True, annotate_ions: bool = True, matched_peaks: Optional[Set] = None, annot_kws: Optional[Dict] = None, mirror_intensity: bool = False, grid: Union[bool, str] = True, ax=None)
   :module: pyopenms.Plotting


Plot an MS/MS spectrum.


:param spectrum: The spectrum to be plotted.
:type spectrum: MSSpectrum
:param color_ions: Flag indicating whether or not to color annotated fragment ions. The
                   default is True.
:type color_ions: bool, optional
:param annotate_ions: Flag indicating whether or not to annotate fragment ions. The default
                      is True.
:type annotate_ions: bool, optional
:param matched_peaks: Indices of matched peaks in a spectrum alignment.
:type matched_peaks: Optional[Set], optional
:param annot_kws: Keyword arguments for `ax.text` to customize peak annotations.
:type annot_kws: Optional[Dict], optional
:param mirror_intensity: Flag indicating whether to flip the intensity axis or not.
:type mirror_intensity: bool, optional
:param grid: Draw grid lines or not. Either a boolean to enable/disable both major
             and minor grid lines or 'major'/'minor' to enable major or minor grid
             lines respectively.
:type grid: Union[bool, str], optional
:param ax: Axes instance on which to plot the spectrum. If None the current Axes
           instance is used.
:type ax: Optional[plt.Axes], optional


:returns: The matplotlib Axes instance on which the spectrum is plotted.
:rtype: plt.Axes




.. py:module:: pyopenms.Constants




.. py:module:: pyopenms.Plotting




.. py:function:: mirror_plot_spectrum(spec_top: pyopenms.pyopenms_7.MSSpectrum, spec_bottom: pyopenms.pyopenms_7.MSSpectrum, alignment: Optional[List] = None, spectrum_top_kws: Optional[Dict] = None, spectrum_bottom_kws: Optional[Dict] = None, ax=None)
   :module: pyopenms.Plotting


Mirror plot two MS/MS spectra.


:param spec_top: The spectrum to be plotted on the top.
:type spec_top: MsmsSpectrum
:param spec_bottom: The spectrum to be plotted on the bottom.
:type spec_bottom: MsmsSpectrum
:param alignment: List of aligned peak pairs.
:type alignment: Optional[List], optional
:param spectrum_top_kws: Keyword arguments for `plot.spectrum` of top spepctrum.
:type spectrum_top_kws: Optional[Dict], optional
:param spectrum_bottom_kws: Keyword arguments for `plot.spectrum` of bottom spectrum.
:type spectrum_bottom_kws: Optional[Dict], optional
:param ax: Axes instance on which to plot the spectrum. If None the current Axes
           instance is used.
:type ax: Optional[plt.Axes], optional


:returns: The matplotlib Axes instance on which the spectra are plotted.
:rtype: plt.Axes




.. py:function:: plot_chromatogram(c: pyopenms.pyopenms_5.MSChromatogram)
   :module: pyopenms.Plotting


Plot chromatogram peaks.


:param c: The chromatogram to be plotted.
:type c: MSChromatogram




.. py:function:: plot_spectrum(spectrum: pyopenms.pyopenms_7.MSSpectrum, color_ions: bool = True, annotate_ions: bool = True, matched_peaks: Optional[Set] = None, annot_kws: Optional[Dict] = None, mirror_intensity: bool = False, grid: Union[bool, str] = True, ax=None)
   :module: pyopenms.Plotting


Plot an MS/MS spectrum.


:param spectrum: The spectrum to be plotted.
:type spectrum: MSSpectrum
:param color_ions: Flag indicating whether or not to color annotated fragment ions. The
                   default is True.
:type color_ions: bool, optional
:param annotate_ions: Flag indicating whether or not to annotate fragment ions. The default
                      is True.
:type annotate_ions: bool, optional
:param matched_peaks: Indices of matched peaks in a spectrum alignment.
:type matched_peaks: Optional[Set], optional
:param annot_kws: Keyword arguments for `ax.text` to customize peak annotations.
:type annot_kws: Optional[Dict], optional
:param mirror_intensity: Flag indicating whether to flip the intensity axis or not.
:type mirror_intensity: bool, optional
:param grid: Draw grid lines or not. Either a boolean to enable/disable both major
             and minor grid lines or 'major'/'minor' to enable major or minor grid
             lines respectively.
:type grid: Union[bool, str], optional
:param ax: Axes instance on which to plot the spectrum. If None the current Axes
           instance is used.
:type ax: Optional[plt.Axes], optional


:returns: The matplotlib Axes instance on which the spectrum is plotted.
:rtype: plt.Axes




.. py:module:: pyopenms.all_modules




.. py:module:: pyopenms.dataframes




.. py:attribute:: ConsensusMap
   :module: pyopenms.dataframes


alias of :py:class:`pyopenms.dataframes.ConsensusMapDF`


.. py:class:: ConsensusMapDF(*args, **kwargs)
   :module: pyopenms.dataframes


   Bases: :py:class:`pyopenms.pyopenms_6.ConsensusMap`




.. py:method:: ConsensusMapDF.get_df()
   :module: pyopenms.dataframes


Generates a pandas DataFrame with both consensus feature meta data and intensities from each sample.


Returns:
pandas.DataFrame: meta data and intensity DataFrame




.. py:method:: ConsensusMapDF.get_intensity_df()
   :module: pyopenms.dataframes


Generates a pandas DataFrame with feature intensities from each sample in long format (over files).


For labelled analyses channel intensities will be in one row, therefore resulting in a semi-long/block format.
Resulting DataFrame can be joined with result from get_metadata_df by their index 'id'.


Returns:
pandas.DataFrame: intensity DataFrame




.. py:method:: ConsensusMapDF.get_metadata_df()
   :module: pyopenms.dataframes


Generates a pandas DataFrame with feature meta data (sequence, charge, mz, RT, quality).


Resulting DataFrame can be joined with result from get_intensity_df by their index 'id'.


Returns:
pandas.DataFrame: DataFrame with metadata for each feature (such as: best identified sequence, charge, centroid RT/mz, fitting quality)




.. py:attribute:: FeatureMap
   :module: pyopenms.dataframes


alias of :py:class:`pyopenms.dataframes.FeatureMapDF`


.. py:class:: FeatureMapDF(*args, **kwargs)
   :module: pyopenms.dataframes


   Bases: :py:class:`pyopenms.pyopenms_3.FeatureMap`




.. py:method:: FeatureMapDF.get_assigned_peptide_identifications()
   :module: pyopenms.dataframes


Generates a list with peptide identifications assigned to a feature.


Adds 'ID_native_id' (feature spectrum id), 'ID_filename' (primary MS run path of corresponding ProteinIdentification)
and 'feature_id' (unique ID of corresponding Feature) as meta values to the peptide hits.
A DataFrame from the assigned peptides generated with peptide_identifications_to_df(assigned_peptides) can be
merged with the FeatureMap DataFrame with:
merged_df = pd.merge(feature_df, assigned_peptide_df, on=['feature_id', 'ID_native_id', 'ID_filename'])


Returns:
[PeptideIdentification]: list of PeptideIdentification objects




.. py:method:: FeatureMapDF.get_df(meta_values=None, export_peptide_identifications=True)
   :module: pyopenms.dataframes


Generates a pandas DataFrame with information contained in the FeatureMap.


Optionally the feature meta values and information for the assigned PeptideHit can be exported.


Parameters:
meta_values: meta values to include (None, [custom list of meta value names] or 'all')


export_peptide_identifications (bool): export sequence and score for best PeptideHit assigned to a feature.
Additionally the ID_filename (file name of the corresponding ProteinIdentification) and the ID_native_id
(spectrum ID of the corresponding Feature) are exported. They are also annotated as meta values when
collecting all assigned PeptideIdentifications from a FeatureMap with FeatureMap.get_assigned_peptide_identifications().
A DataFrame from the assigned peptides generated with peptide_identifications_to_df(assigned_peptides) can be
merged with the FeatureMap DataFrame with:
merged_df = pd.merge(feature_df, assigned_peptide_df, on=['feature_id', 'ID_native_id', 'ID_filename'])


Returns:
pandas.DataFrame: feature information stored in a DataFrame




.. py:attribute:: MSExperiment
   :module: pyopenms.dataframes


alias of :py:class:`pyopenms.dataframes.MSExperimentDF`


.. py:class:: MSExperimentDF(*args, **kwargs)
   :module: pyopenms.dataframes


   Bases: :py:class:`pyopenms.pyopenms_1.MSExperiment`




.. py:method:: MSExperimentDF.get_df(long: bool = False)
   :module: pyopenms.dataframes


Generates a pandas DataFrame with all peaks in the MSExperiment


Parameters:
long: set to True if you want to have a long/expanded/melted dataframe with one row per peak. Faster but
    replicated RT information. If False, returns rows in the style: rt, np.array(mz), np.array(int)


Returns:
pandas.DataFrame: feature information stored in a DataFrame




.. py:method:: MSExperimentDF.get_massql_df()
   :module: pyopenms.dataframes


Exports data from MSExperiment to pandas DataFrames to be used with MassQL.


The Python module massql allows queries in mass spectrometry data (MS1 and MS2
data frames) in a SQL like fashion (https://github.com/mwang87/MassQueryLanguage).


Both dataframes contain the columns:
'i': intensity of a peak
'i_norm': intensity normalized by the maximun intensity in the spectrum
'i_tic_norm': intensity normalized by the sum of intensities (TIC) in the spectrum
'mz': mass to charge of a peak
'scan': number of the spectrum
'rt': retention time of the spectrum
'polarity': ion mode of the spectrum as integer value (positive: 1, negative: 2)


The MS2 dataframe contains additional columns:
'precmz': mass to charge of the precursor ion
'ms1scan': number of the corresponding MS1 spectrum
'charge': charge of the precursor ion


Returns:
ms1_df (pandas.DataFrame): peak data of MS1 spectra
ms2_df (pandas.DataFrame): peak data of MS2 spectra with precursor information




.. py:attribute:: PeakMap
   :module: pyopenms.dataframes


alias of :py:class:`pyopenms.dataframes.MSExperimentDF`


.. py:function:: peptide_identifications_to_df(peps: List[pyopenms.pyopenms_3.PeptideIdentification], decode_ontology: bool = True, default_missing_values: dict = {<class 'bool'>: False, <class 'int'>: -9999, <class 'float'>: nan, <class 'str'>: ''}, export_unidentified: bool = True)
   :module: pyopenms.dataframes


Converts a list of peptide identifications to a pandas DataFrame.
Parameters:
peps (List[PeptideIdentification]): list of PeptideIdentification objects
decode_ontology (bool): decode meta value names
default_missing_values: default value for missing values for each data type
export_unidentified: export PeptideIdentifications without PeptideHit
Returns:
pandas.DataFrame: peptide identifications in a DataFrame




.. py:module:: pyopenms.pyopenms_1




.. py:class:: AbsoluteQuantitationStandardsFile
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _AbsoluteQuantitationStandardsFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1AbsoluteQuantitationStandardsFile.html




.. py:method:: AbsoluteQuantitationStandardsFile.load
   :module: pyopenms.pyopenms_1


Cython signature: void load(const String & filename, libcpp_vector[AQS_runConcentration] & run_concentrations)




.. py:class:: ActivationMethod
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`




.. py:attribute:: ActivationMethod.BIRD
   :module: pyopenms.pyopenms_1
   :value: 4




.. py:attribute:: ActivationMethod.CID
   :module: pyopenms.pyopenms_1
   :value: 0




.. py:attribute:: ActivationMethod.ECD
   :module: pyopenms.pyopenms_1
   :value: 5




.. py:attribute:: ActivationMethod.ETD
   :module: pyopenms.pyopenms_1
   :value: 11




.. py:attribute:: ActivationMethod.HCD
   :module: pyopenms.pyopenms_1
   :value: 14




.. py:attribute:: ActivationMethod.HCID
   :module: pyopenms.pyopenms_1
   :value: 8




.. py:attribute:: ActivationMethod.IMD
   :module: pyopenms.pyopenms_1
   :value: 6




.. py:attribute:: ActivationMethod.INSOURCE
   :module: pyopenms.pyopenms_1
   :value: 15




.. py:attribute:: ActivationMethod.LCID
   :module: pyopenms.pyopenms_1
   :value: 9




.. py:attribute:: ActivationMethod.LIFT
   :module: pyopenms.pyopenms_1
   :value: 16




.. py:attribute:: ActivationMethod.PD
   :module: pyopenms.pyopenms_1
   :value: 2




.. py:attribute:: ActivationMethod.PHD
   :module: pyopenms.pyopenms_1
   :value: 10




.. py:attribute:: ActivationMethod.PQD
   :module: pyopenms.pyopenms_1
   :value: 12




.. py:attribute:: ActivationMethod.PSD
   :module: pyopenms.pyopenms_1
   :value: 1




.. py:attribute:: ActivationMethod.SID
   :module: pyopenms.pyopenms_1
   :value: 3




.. py:attribute:: ActivationMethod.SIZE_OF_ACTIVATIONMETHOD
   :module: pyopenms.pyopenms_1
   :value: 17




.. py:attribute:: ActivationMethod.SORI
   :module: pyopenms.pyopenms_1
   :value: 7




.. py:attribute:: ActivationMethod.TRAP
   :module: pyopenms.pyopenms_1
   :value: 13




.. py:method:: ActivationMethod.getMapping
   :module: pyopenms.pyopenms_1




.. py:class:: ArrayWrapperFloat
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`




.. py:class:: CVReference
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _CVReference


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1CVReference.html




.. py:method:: CVReference.getIdentifier
   :module: pyopenms.pyopenms_1


Cython signature: String getIdentifier()
Returns the CV identifier which is referenced




.. py:method:: CVReference.getName
   :module: pyopenms.pyopenms_1


Cython signature: String getName()
Returns the name of the CV reference




.. py:method:: CVReference.setIdentifier
   :module: pyopenms.pyopenms_1


Cython signature: void setIdentifier(const String & identifier)
Sets the CV identifier which is referenced




.. py:method:: CVReference.setName
   :module: pyopenms.pyopenms_1


Cython signature: void setName(const String & name)
Sets the name of the CV reference




.. py:class:: CachedMzMLHandler
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _CachedMzMLHandler


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::Internal_1_1CachedMzMLHandler.html
 -- Inherits from ['ProgressLogger']




.. py:method:: CachedMzMLHandler.createMemdumpIndex
   :module: pyopenms.pyopenms_1


Cython signature: void createMemdumpIndex(String filename)
Create an index on the location of all the spectra and chromatograms




.. py:method:: CachedMzMLHandler.endProgress
   :module: pyopenms.pyopenms_1


Cython signature: void endProgress()
Ends the progress display




.. py:method:: CachedMzMLHandler.getChromatogramIndex
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[streampos] getChromatogramIndex()




.. py:method:: CachedMzMLHandler.getLogType
   :module: pyopenms.pyopenms_1


Cython signature: LogType getLogType()
Returns the type of progress log being used




.. py:method:: CachedMzMLHandler.getSpectraIndex
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[streampos] getSpectraIndex()




.. py:method:: CachedMzMLHandler.nextProgress
   :module: pyopenms.pyopenms_1


Cython signature: void nextProgress()
Increment progress by 1 (according to range begin-end)




.. py:method:: CachedMzMLHandler.readMemdump
   :module: pyopenms.pyopenms_1


Cython signature: void readMemdump(MSExperiment exp, String filename)
Read all spectra from a dump from the disk




.. py:method:: CachedMzMLHandler.setLogType
   :module: pyopenms.pyopenms_1


Cython signature: void setLogType(LogType)
Sets the progress log that should be used. The default type is NONE!




.. py:method:: CachedMzMLHandler.setProgress
   :module: pyopenms.pyopenms_1


Cython signature: void setProgress(ptrdiff_t value)
Sets the current progress




.. py:method:: CachedMzMLHandler.startProgress
   :module: pyopenms.pyopenms_1


Cython signature: void startProgress(ptrdiff_t begin, ptrdiff_t end, String label)




.. py:method:: CachedMzMLHandler.writeMemdump
   :module: pyopenms.pyopenms_1


Cython signature: void writeMemdump(MSExperiment exp, String out)
Write complete spectra as a dump to the disk




.. py:method:: CachedMzMLHandler.writeMetadata
   :module: pyopenms.pyopenms_1


Cython signature: void writeMetadata(MSExperiment exp, String out_meta)
Write only the meta data of an MSExperiment




.. py:class:: ChromatogramTools
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _ChromatogramTools


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ChromatogramTools.html




.. py:method:: ChromatogramTools.convertChromatogramsToSpectra
   :module: pyopenms.pyopenms_1


Cython signature: void convertChromatogramsToSpectra(MSExperiment & epx)
Converts the chromatogram to a list of spectra with instrument settings




.. py:method:: ChromatogramTools.convertSpectraToChromatograms
   :module: pyopenms.pyopenms_1


Cython signature: void convertSpectraToChromatograms(MSExperiment & epx, bool remove_spectra, bool force_conversion)
Converts e.g. SRM spectra to chromatograms




.. py:class:: ChromeleonFile
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _ChromeleonFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ChromeleonFile.html




.. py:method:: ChromeleonFile.load
   :module: pyopenms.pyopenms_1


Cython signature: void load(const String & filename, MSExperiment & experiment)
Load the file's data and metadata, and save it into a `MSExperiment`




.. py:class:: ConsensusFeature
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _ConsensusFeature


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ConsensusFeature.html
 -- Inherits from ['UniqueIdInterface', 'BaseFeature']


 A consensus feature spanning multiple LC-MS/MS experiments.
 -----
 A ConsensusFeature represents analytes that have been
 quantified across multiple LC-MS/MS experiments. Each analyte in a
 ConsensusFeature is linked to its original LC-MS/MS run through a
 unique identifier.
 -----
 Get access to the underlying features through getFeatureList()




.. py:method:: ConsensusFeature.addRatio
   :module: pyopenms.pyopenms_1


Cython signature: void addRatio(Ratio r)
Connects a ratio to the ConsensusFeature.




.. py:method:: ConsensusFeature.clear
   :module: pyopenms.pyopenms_1


Cython signature: void clear()




.. py:method:: ConsensusFeature.clearMetaInfo
   :module: pyopenms.pyopenms_1


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: ConsensusFeature.clearUniqueId
   :module: pyopenms.pyopenms_1


Cython signature: size_t clearUniqueId()
Clear the unique id. The new unique id will be invalid. Returns 1 if the unique id was changed, 0 otherwise




.. py:method:: ConsensusFeature.computeConsensus
   :module: pyopenms.pyopenms_1


Cython signature: void computeConsensus()
Computes and updates the consensus position, intensity, and charge




.. py:method:: ConsensusFeature.computeDechargeConsensus
   :module: pyopenms.pyopenms_1


Cython signature: void computeDechargeConsensus(FeatureMap, bool)
Computes the uncharged parent RT & mass, assuming the handles are charge variants




.. py:method:: ConsensusFeature.computeMonoisotopicConsensus
   :module: pyopenms.pyopenms_1


Cython signature: void computeMonoisotopicConsensus()
Computes and updates the consensus position, intensity, and charge




.. py:method:: ConsensusFeature.empty
   :module: pyopenms.pyopenms_1


Cython signature: bool empty()




.. py:method:: ConsensusFeature.ensureUniqueId
   :module: pyopenms.pyopenms_1


Cython signature: size_t ensureUniqueId()
Assigns a valid unique id, but only if the present one is invalid. Returns 1 if the unique id was changed, 0 otherwise




.. py:method:: ConsensusFeature.getAnnotationState
   :module: pyopenms.pyopenms_1


Cython signature: AnnotationState getAnnotationState()
State of peptide identifications attached to this feature. If one ID has multiple hits, the output depends on the top-hit only




.. py:method:: ConsensusFeature.getCharge
   :module: pyopenms.pyopenms_1


Cython signature: int getCharge()
Returns the charge state




.. py:method:: ConsensusFeature.getFeatureList
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[FeatureHandle] getFeatureList()




.. py:method:: ConsensusFeature.getIntensity
   :module: pyopenms.pyopenms_1


Cython signature: float getIntensity()
Returns the data point intensity (height)




.. py:method:: ConsensusFeature.getKeys
   :module: pyopenms.pyopenms_1


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: ConsensusFeature.getMZ
   :module: pyopenms.pyopenms_1


Cython signature: double getMZ()
Returns the m/z coordinate (index 1)




.. py:method:: ConsensusFeature.getMetaValue
   :module: pyopenms.pyopenms_1


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: ConsensusFeature.getPeptideIdentifications
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[PeptideIdentification] getPeptideIdentifications()
Returns the PeptideIdentification vector




.. py:method:: ConsensusFeature.getQuality
   :module: pyopenms.pyopenms_1


Cython signature: float getQuality()
Returns the overall quality




.. py:method:: ConsensusFeature.getRT
   :module: pyopenms.pyopenms_1


Cython signature: double getRT()
Returns the RT coordinate (index 0)




.. py:method:: ConsensusFeature.getRatios
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[Ratio] getRatios()
Get the ratio vector.




.. py:method:: ConsensusFeature.getUniqueId
   :module: pyopenms.pyopenms_1


Cython signature: size_t getUniqueId()
Returns the unique id




.. py:method:: ConsensusFeature.getWidth
   :module: pyopenms.pyopenms_1


Cython signature: float getWidth()
Returns the features width (full width at half max, FWHM)




.. py:method:: ConsensusFeature.hasInvalidUniqueId
   :module: pyopenms.pyopenms_1


Cython signature: size_t hasInvalidUniqueId()
Returns whether the unique id is invalid. Returns 1 if the unique id is invalid, 0 otherwise




.. py:method:: ConsensusFeature.hasValidUniqueId
   :module: pyopenms.pyopenms_1


Cython signature: size_t hasValidUniqueId()
Returns whether the unique id is valid. Returns 1 if the unique id is valid, 0 otherwise




.. py:method:: ConsensusFeature.insert
   :module: pyopenms.pyopenms_1


- Cython signature: void insert(uint64_t map_idx, Peak2D, uint64_t element_idx)
- Cython signature: void insert(uint64_t map_idx, BaseFeature)
- Cython signature: void insert(uint64_t map_idx, ConsensusFeature)




.. py:method:: ConsensusFeature.isMetaEmpty
   :module: pyopenms.pyopenms_1


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: ConsensusFeature.isValid
   :module: pyopenms.pyopenms_1


Cython signature: bool isValid(uint64_t unique_id)
Returns true if the unique_id is valid, false otherwise




.. py:method:: ConsensusFeature.metaRegistry
   :module: pyopenms.pyopenms_1


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: ConsensusFeature.metaValueExists
   :module: pyopenms.pyopenms_1


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: ConsensusFeature.removeMetaValue
   :module: pyopenms.pyopenms_1


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: ConsensusFeature.setCharge
   :module: pyopenms.pyopenms_1


Cython signature: void setCharge(int q)
Sets the charge state




.. py:method:: ConsensusFeature.setIntensity
   :module: pyopenms.pyopenms_1


Cython signature: void setIntensity(float)
Returns the data point intensity (height)




.. py:method:: ConsensusFeature.setMZ
   :module: pyopenms.pyopenms_1


Cython signature: void setMZ(double)
Returns the m/z coordinate (index 1)




.. py:method:: ConsensusFeature.setMetaValue
   :module: pyopenms.pyopenms_1


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:method:: ConsensusFeature.setPeptideIdentifications
   :module: pyopenms.pyopenms_1


Cython signature: void setPeptideIdentifications(libcpp_vector[PeptideIdentification] & peptides)
Sets the PeptideIdentification vector




.. py:method:: ConsensusFeature.setQuality
   :module: pyopenms.pyopenms_1


Cython signature: void setQuality(float q)
Sets the overall quality




.. py:method:: ConsensusFeature.setRT
   :module: pyopenms.pyopenms_1


Cython signature: void setRT(double)
Returns the RT coordinate (index 0)




.. py:method:: ConsensusFeature.setRatios
   :module: pyopenms.pyopenms_1


Cython signature: void setRatios(libcpp_vector[Ratio] rs)
Connects the ratios to the ConsensusFeature.




.. py:method:: ConsensusFeature.setUniqueId
   :module: pyopenms.pyopenms_1


Cython signature: void setUniqueId(uint64_t rhs)
Assigns a new, valid unique id. Always returns 1




.. py:method:: ConsensusFeature.setWidth
   :module: pyopenms.pyopenms_1


Cython signature: void setWidth(float q)
Sets the width of the feature (FWHM)




.. py:method:: ConsensusFeature.size
   :module: pyopenms.pyopenms_1


Cython signature: size_t size()




.. py:class:: DataFilter
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _DataFilter


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1DataFilter.html




.. py:attribute:: DataFilter.field
   :module: pyopenms.pyopenms_1




.. py:method:: DataFilter.fromString
   :module: pyopenms.pyopenms_1


Cython signature: void fromString(const String & filter_)




.. py:attribute:: DataFilter.meta_name
   :module: pyopenms.pyopenms_1




.. py:attribute:: DataFilter.op
   :module: pyopenms.pyopenms_1




.. py:method:: DataFilter.toString
   :module: pyopenms.pyopenms_1


Cython signature: String toString()




.. py:attribute:: DataFilter.value
   :module: pyopenms.pyopenms_1




.. py:attribute:: DataFilter.value_is_numerical
   :module: pyopenms.pyopenms_1




.. py:attribute:: DataFilter.value_string
   :module: pyopenms.pyopenms_1




.. py:class:: DataFilters
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _DataFilters


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1DataFilters.html




.. py:attribute:: DataFilters.FilterOperation
   :module: pyopenms.pyopenms_1


alias of :py:class:`pyopenms.pyopenms_1.__FilterOperation`


.. py:attribute:: DataFilters.FilterType
   :module: pyopenms.pyopenms_1


alias of :py:class:`pyopenms.pyopenms_1.__FilterType`


.. py:method:: DataFilters.add
   :module: pyopenms.pyopenms_1


Cython signature: void add(DataFilter & filter_)




.. py:method:: DataFilters.clear
   :module: pyopenms.pyopenms_1


Cython signature: void clear()




.. py:method:: DataFilters.isActive
   :module: pyopenms.pyopenms_1


Cython signature: bool isActive()




.. py:method:: DataFilters.passes
   :module: pyopenms.pyopenms_1


- Cython signature: bool passes(Feature & feature)
- Cython signature: bool passes(ConsensusFeature & consensus_feature)
- Cython signature: bool passes(MSSpectrum & spectrum, size_t peak_index)




.. py:method:: DataFilters.remove
   :module: pyopenms.pyopenms_1


Cython signature: void remove(size_t index)




.. py:method:: DataFilters.replace
   :module: pyopenms.pyopenms_1


Cython signature: void replace(size_t index, DataFilter & filter_)




.. py:method:: DataFilters.setActive
   :module: pyopenms.pyopenms_1


Cython signature: void setActive(bool is_active)




.. py:method:: DataFilters.size
   :module: pyopenms.pyopenms_1


Cython signature: size_t size()




.. py:class:: DataProcessing
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _DataProcessing


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1DataProcessing.html
 -- Inherits from ['MetaInfoInterface']




.. py:method:: DataProcessing.clearMetaInfo
   :module: pyopenms.pyopenms_1


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: DataProcessing.getCompletionTime
   :module: pyopenms.pyopenms_1


Cython signature: DateTime getCompletionTime()




.. py:method:: DataProcessing.getKeys
   :module: pyopenms.pyopenms_1


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: DataProcessing.getMetaValue
   :module: pyopenms.pyopenms_1


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: DataProcessing.getProcessingActions
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_set[ProcessingAction] getProcessingActions()




.. py:method:: DataProcessing.getSoftware
   :module: pyopenms.pyopenms_1


Cython signature: Software getSoftware()




.. py:method:: DataProcessing.isMetaEmpty
   :module: pyopenms.pyopenms_1


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: DataProcessing.metaRegistry
   :module: pyopenms.pyopenms_1


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: DataProcessing.metaValueExists
   :module: pyopenms.pyopenms_1


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: DataProcessing.removeMetaValue
   :module: pyopenms.pyopenms_1


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: DataProcessing.setCompletionTime
   :module: pyopenms.pyopenms_1


Cython signature: void setCompletionTime(DateTime t)




.. py:method:: DataProcessing.setMetaValue
   :module: pyopenms.pyopenms_1


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:method:: DataProcessing.setProcessingActions
   :module: pyopenms.pyopenms_1


Cython signature: void setProcessingActions(libcpp_set[ProcessingAction])




.. py:method:: DataProcessing.setSoftware
   :module: pyopenms.pyopenms_1


Cython signature: void setSoftware(Software s)




.. py:class:: DataType
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`




.. py:attribute:: DataType.DOUBLE_LIST
   :module: pyopenms.pyopenms_1
   :value: 5




.. py:attribute:: DataType.DOUBLE_VALUE
   :module: pyopenms.pyopenms_1
   :value: 2




.. py:attribute:: DataType.EMPTY_VALUE
   :module: pyopenms.pyopenms_1
   :value: 6




.. py:attribute:: DataType.INT_LIST
   :module: pyopenms.pyopenms_1
   :value: 4




.. py:attribute:: DataType.INT_VALUE
   :module: pyopenms.pyopenms_1
   :value: 1




.. py:attribute:: DataType.STRING_LIST
   :module: pyopenms.pyopenms_1
   :value: 3




.. py:attribute:: DataType.STRING_VALUE
   :module: pyopenms.pyopenms_1
   :value: 0




.. py:method:: DataType.getMapping
   :module: pyopenms.pyopenms_1




.. py:class:: DataValue
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _DataValue


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1DataValue.html




.. py:method:: DataValue.getUnit
   :module: pyopenms.pyopenms_1


Cython signature: int getUnit()




.. py:method:: DataValue.getUnitType
   :module: pyopenms.pyopenms_1


Cython signature: UnitType getUnitType()




.. py:method:: DataValue.hasUnit
   :module: pyopenms.pyopenms_1


Cython signature: bool hasUnit()




.. py:method:: DataValue.isEmpty
   :module: pyopenms.pyopenms_1


Cython signature: int isEmpty()




.. py:method:: DataValue.setUnit
   :module: pyopenms.pyopenms_1


Cython signature: void setUnit(int unit_id)




.. py:method:: DataValue.setUnitType
   :module: pyopenms.pyopenms_1


Cython signature: void setUnitType(UnitType u)




.. py:method:: DataValue.toBool
   :module: pyopenms.pyopenms_1


Cython signature: bool toBool()




.. py:method:: DataValue.toDouble
   :module: pyopenms.pyopenms_1




.. py:method:: DataValue.toDoubleList
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[double] toDoubleList()




.. py:method:: DataValue.toInt
   :module: pyopenms.pyopenms_1




.. py:method:: DataValue.toIntList
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[int] toIntList()




.. py:method:: DataValue.toString
   :module: pyopenms.pyopenms_1




.. py:method:: DataValue.toStringList
   :module: pyopenms.pyopenms_1


Cython signature: StringList toStringList()




.. py:method:: DataValue.valueType
   :module: pyopenms.pyopenms_1


Cython signature: DataType valueType()




.. py:class:: DateTime
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _DateTime


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1DateTime.html




.. py:method:: DateTime.clear
   :module: pyopenms.pyopenms_1


Cython signature: void clear()




.. py:method:: DateTime.get
   :module: pyopenms.pyopenms_1


Cython signature: String get()




.. py:method:: DateTime.getDate
   :module: pyopenms.pyopenms_1


Cython signature: String getDate()




.. py:method:: DateTime.getTime
   :module: pyopenms.pyopenms_1


Cython signature: String getTime()




.. py:method:: DateTime.now
   :module: pyopenms.pyopenms_1


Cython signature: DateTime now()




.. py:method:: DateTime.set
   :module: pyopenms.pyopenms_1


Cython signature: void set(String date)




.. py:method:: DateTime.setDate
   :module: pyopenms.pyopenms_1


Cython signature: void setDate(String date)




.. py:method:: DateTime.setTime
   :module: pyopenms.pyopenms_1


Cython signature: void setTime(String date)




.. py:class:: DigestionEnzyme
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _DigestionEnzyme


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1DigestionEnzyme.html


   Base class for digestion enzymes




.. py:method:: DigestionEnzyme.addSynonym
   :module: pyopenms.pyopenms_1


Cython signature: void addSynonym(const String & synonym)
Adds a synonym




.. py:method:: DigestionEnzyme.getName
   :module: pyopenms.pyopenms_1


Cython signature: String getName()
Returns the name of the enzyme




.. py:method:: DigestionEnzyme.getRegEx
   :module: pyopenms.pyopenms_1


Cython signature: String getRegEx()
Returns the cleavage regex




.. py:method:: DigestionEnzyme.getRegExDescription
   :module: pyopenms.pyopenms_1


Cython signature: String getRegExDescription()
Returns the regex description




.. py:method:: DigestionEnzyme.getSynonyms
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_set[String] getSynonyms()
Returns the synonyms




.. py:method:: DigestionEnzyme.setName
   :module: pyopenms.pyopenms_1


Cython signature: void setName(const String & name)
Sets the name of the enzyme




.. py:method:: DigestionEnzyme.setRegEx
   :module: pyopenms.pyopenms_1


Cython signature: void setRegEx(const String & cleavage_regex)
Sets the cleavage regex




.. py:method:: DigestionEnzyme.setRegExDescription
   :module: pyopenms.pyopenms_1


Cython signature: void setRegExDescription(const String & value)
Sets the regex description




.. py:method:: DigestionEnzyme.setSynonyms
   :module: pyopenms.pyopenms_1


Cython signature: void setSynonyms(libcpp_set[String] & synonyms)
Sets the synonyms




.. py:method:: DigestionEnzyme.setValueFromFile
   :module: pyopenms.pyopenms_1


Cython signature: bool setValueFromFile(String key, String value)
Sets the value of a member variable based on an entry from an input file




.. py:class:: ExperimentalSettings
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _ExperimentalSettings


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ExperimentalSettings.html
 -- Inherits from ['DocumentIdentifier', 'MetaInfoInterface']


 Description of the experimental settings, provides meta-information
 about an LC-MS/MS injection.




.. py:method:: ExperimentalSettings.clearMetaInfo
   :module: pyopenms.pyopenms_1


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: ExperimentalSettings.getComment
   :module: pyopenms.pyopenms_1


Cython signature: String getComment()
Returns the free-text comment




.. py:method:: ExperimentalSettings.getContacts
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[ContactPerson] getContacts()
Returns a reference to the list of contact persons




.. py:method:: ExperimentalSettings.getDateTime
   :module: pyopenms.pyopenms_1


Cython signature: DateTime getDateTime()
Returns the date the experiment was performed




.. py:method:: ExperimentalSettings.getFractionIdentifier
   :module: pyopenms.pyopenms_1


Cython signature: String getFractionIdentifier()
Returns fraction identifier




.. py:method:: ExperimentalSettings.getHPLC
   :module: pyopenms.pyopenms_1


Cython signature: HPLC getHPLC()
Returns a reference to the description of the HPLC run




.. py:method:: ExperimentalSettings.getIdentifier
   :module: pyopenms.pyopenms_1


Cython signature: String getIdentifier()
Retrieve document identifier (e.g. an LSID)




.. py:method:: ExperimentalSettings.getInstrument
   :module: pyopenms.pyopenms_1


Cython signature: Instrument getInstrument()
Returns a reference to the MS instrument description




.. py:method:: ExperimentalSettings.getKeys
   :module: pyopenms.pyopenms_1


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: ExperimentalSettings.getLoadedFilePath
   :module: pyopenms.pyopenms_1


Cython signature: String getLoadedFilePath()
Returns the file_name which is the absolute path to the file loaded




.. py:method:: ExperimentalSettings.getLoadedFileType
   :module: pyopenms.pyopenms_1


Cython signature: int getLoadedFileType()
Returns the file_type (e.g. featureXML, consensusXML, mzData, mzXML, mzML, ...) of the file loaded




.. py:method:: ExperimentalSettings.getMetaValue
   :module: pyopenms.pyopenms_1


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: ExperimentalSettings.getProteinIdentifications
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[ProteinIdentification] getProteinIdentifications()
Returns a reference to the protein ProteinIdentification vector




.. py:method:: ExperimentalSettings.getSample
   :module: pyopenms.pyopenms_1


Cython signature: Sample getSample()
Returns a reference to the sample description




.. py:method:: ExperimentalSettings.getSourceFiles
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[SourceFile] getSourceFiles()
Returns a reference to the source data file




.. py:method:: ExperimentalSettings.isMetaEmpty
   :module: pyopenms.pyopenms_1


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: ExperimentalSettings.metaRegistry
   :module: pyopenms.pyopenms_1


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: ExperimentalSettings.metaValueExists
   :module: pyopenms.pyopenms_1


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: ExperimentalSettings.removeMetaValue
   :module: pyopenms.pyopenms_1


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: ExperimentalSettings.setComment
   :module: pyopenms.pyopenms_1


Cython signature: void setComment(String comment)
Sets the free-text comment




.. py:method:: ExperimentalSettings.setContacts
   :module: pyopenms.pyopenms_1


Cython signature: void setContacts(libcpp_vector[ContactPerson] contacts)
Sets the list of contact persons




.. py:method:: ExperimentalSettings.setDateTime
   :module: pyopenms.pyopenms_1


Cython signature: void setDateTime(DateTime date_time)
Sets the date the experiment was performed




.. py:method:: ExperimentalSettings.setFractionIdentifier
   :module: pyopenms.pyopenms_1


Cython signature: void setFractionIdentifier(String fraction_identifier)
Sets the fraction identifier




.. py:method:: ExperimentalSettings.setHPLC
   :module: pyopenms.pyopenms_1


Cython signature: void setHPLC(HPLC hplc)
Sets the description of the HPLC run




.. py:method:: ExperimentalSettings.setIdentifier
   :module: pyopenms.pyopenms_1


Cython signature: void setIdentifier(String id)
Sets document identifier (e.g. an LSID)




.. py:method:: ExperimentalSettings.setInstrument
   :module: pyopenms.pyopenms_1


Cython signature: void setInstrument(Instrument instrument)
Sets the MS instrument description




.. py:method:: ExperimentalSettings.setLoadedFilePath
   :module: pyopenms.pyopenms_1


Cython signature: void setLoadedFilePath(String file_name)
Sets the file_name according to absolute path of the file loaded, preferably done whilst loading




.. py:method:: ExperimentalSettings.setLoadedFileType
   :module: pyopenms.pyopenms_1


Cython signature: void setLoadedFileType(String file_name)
Sets the file_type according to the type of the file loaded from, preferably done whilst loading




.. py:method:: ExperimentalSettings.setMetaValue
   :module: pyopenms.pyopenms_1


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:method:: ExperimentalSettings.setProteinIdentifications
   :module: pyopenms.pyopenms_1


Cython signature: void setProteinIdentifications(libcpp_vector[ProteinIdentification] protein_identifications)
Sets the protein ProteinIdentification vector




.. py:method:: ExperimentalSettings.setSample
   :module: pyopenms.pyopenms_1


Cython signature: void setSample(Sample sample)
Sets the sample description




.. py:method:: ExperimentalSettings.setSourceFiles
   :module: pyopenms.pyopenms_1


Cython signature: void setSourceFiles(libcpp_vector[SourceFile] source_files)
Sets the source data file




.. py:class:: FIAMSScheduler
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _FIAMSScheduler


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1FIAMSScheduler.html


   ADD PYTHON DOCUMENTATION HERE




.. py:method:: FIAMSScheduler.getBaseDir
   :module: pyopenms.pyopenms_1


Cython signature: String getBaseDir()
Returns the base directory for the relevant paths from the csv file




.. py:method:: FIAMSScheduler.run
   :module: pyopenms.pyopenms_1


Cython signature: void run()
Run the FIA-MS data analysis for the batch defined in the @filename_




.. py:class:: FeatureFinderMultiplexAlgorithm
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _FeatureFinderMultiplexAlgorithm


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1FeatureFinderMultiplexAlgorithm.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: FeatureFinderMultiplexAlgorithm.getConsensusMap
   :module: pyopenms.pyopenms_1


Cython signature: ConsensusMap getConsensusMap()




.. py:method:: FeatureFinderMultiplexAlgorithm.getDefaults
   :module: pyopenms.pyopenms_1


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: FeatureFinderMultiplexAlgorithm.getFeatureMap
   :module: pyopenms.pyopenms_1


Cython signature: FeatureMap getFeatureMap()




.. py:method:: FeatureFinderMultiplexAlgorithm.getName
   :module: pyopenms.pyopenms_1


Cython signature: String getName()
Returns the name




.. py:method:: FeatureFinderMultiplexAlgorithm.getParameters
   :module: pyopenms.pyopenms_1


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: FeatureFinderMultiplexAlgorithm.getSubsections
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: FeatureFinderMultiplexAlgorithm.run
   :module: pyopenms.pyopenms_1


Cython signature: void run(MSExperiment & exp, bool progress)
Main method for feature detection




.. py:method:: FeatureFinderMultiplexAlgorithm.setName
   :module: pyopenms.pyopenms_1


Cython signature: void setName(const String &)
Sets the name




.. py:method:: FeatureFinderMultiplexAlgorithm.setParameters
   :module: pyopenms.pyopenms_1


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: FeatureFindingMetabo
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _FeatureFindingMetabo


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1FeatureFindingMetabo.html
 -- Inherits from ['ProgressLogger', 'DefaultParamHandler']




.. py:method:: FeatureFindingMetabo.endProgress
   :module: pyopenms.pyopenms_1


Cython signature: void endProgress()
Ends the progress display




.. py:method:: FeatureFindingMetabo.getDefaults
   :module: pyopenms.pyopenms_1


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: FeatureFindingMetabo.getLogType
   :module: pyopenms.pyopenms_1


Cython signature: LogType getLogType()
Returns the type of progress log being used




.. py:method:: FeatureFindingMetabo.getName
   :module: pyopenms.pyopenms_1


Cython signature: String getName()
Returns the name




.. py:method:: FeatureFindingMetabo.getParameters
   :module: pyopenms.pyopenms_1


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: FeatureFindingMetabo.getSubsections
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: FeatureFindingMetabo.nextProgress
   :module: pyopenms.pyopenms_1


Cython signature: void nextProgress()
Increment progress by 1 (according to range begin-end)




.. py:method:: FeatureFindingMetabo.run
   :module: pyopenms.pyopenms_1


Cython signature: void run(libcpp_vector[Kernel_MassTrace] input_mtraces, FeatureMap & output_featmap, libcpp_vector[libcpp_vector[MSChromatogram]] & output_chromatograms)




.. py:method:: FeatureFindingMetabo.setLogType
   :module: pyopenms.pyopenms_1


Cython signature: void setLogType(LogType)
Sets the progress log that should be used. The default type is NONE!




.. py:method:: FeatureFindingMetabo.setName
   :module: pyopenms.pyopenms_1


Cython signature: void setName(const String &)
Sets the name




.. py:method:: FeatureFindingMetabo.setParameters
   :module: pyopenms.pyopenms_1


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: FeatureFindingMetabo.setProgress
   :module: pyopenms.pyopenms_1


Cython signature: void setProgress(ptrdiff_t value)
Sets the current progress




.. py:method:: FeatureFindingMetabo.startProgress
   :module: pyopenms.pyopenms_1


Cython signature: void startProgress(ptrdiff_t begin, ptrdiff_t end, String label)




.. py:class:: FeatureGroupingAlgorithmLabeled
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _FeatureGroupingAlgorithmLabeled


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1FeatureGroupingAlgorithmLabeled.html
 -- Inherits from ['FeatureGroupingAlgorithm']




.. py:method:: FeatureGroupingAlgorithmLabeled.getDefaults
   :module: pyopenms.pyopenms_1


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: FeatureGroupingAlgorithmLabeled.getName
   :module: pyopenms.pyopenms_1


Cython signature: String getName()
Returns the name




.. py:method:: FeatureGroupingAlgorithmLabeled.getParameters
   :module: pyopenms.pyopenms_1


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: FeatureGroupingAlgorithmLabeled.getProductName
   :module: pyopenms.pyopenms_1


Cython signature: String getProductName()




.. py:method:: FeatureGroupingAlgorithmLabeled.getSubsections
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: FeatureGroupingAlgorithmLabeled.group
   :module: pyopenms.pyopenms_1


Cython signature: void group(libcpp_vector[FeatureMap] & maps, ConsensusMap & out)




.. py:method:: FeatureGroupingAlgorithmLabeled.registerChildren
   :module: pyopenms.pyopenms_1


Cython signature: void registerChildren()
Register all derived classes in this method




.. py:method:: FeatureGroupingAlgorithmLabeled.setName
   :module: pyopenms.pyopenms_1


Cython signature: void setName(const String &)
Sets the name




.. py:method:: FeatureGroupingAlgorithmLabeled.setParameters
   :module: pyopenms.pyopenms_1


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: FeatureGroupingAlgorithmLabeled.transferSubelements
   :module: pyopenms.pyopenms_1


Cython signature: void transferSubelements(libcpp_vector[ConsensusMap] maps, ConsensusMap & out)
Transfers subelements (grouped features) from input consensus maps to the result consensus map




.. py:class:: FeatureHandle
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _FeatureHandle


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1FeatureHandle.html
 -- Inherits from ['Peak2D', 'UniqueIdInterface']




.. py:method:: FeatureHandle.clearUniqueId
   :module: pyopenms.pyopenms_1


Cython signature: size_t clearUniqueId()
Clear the unique id. The new unique id will be invalid. Returns 1 if the unique id was changed, 0 otherwise




.. py:method:: FeatureHandle.ensureUniqueId
   :module: pyopenms.pyopenms_1


Cython signature: size_t ensureUniqueId()
Assigns a valid unique id, but only if the present one is invalid. Returns 1 if the unique id was changed, 0 otherwise




.. py:method:: FeatureHandle.getCharge
   :module: pyopenms.pyopenms_1


Cython signature: int getCharge()
Returns the charge




.. py:method:: FeatureHandle.getIntensity
   :module: pyopenms.pyopenms_1


Cython signature: float getIntensity()
Returns the data point intensity (height)




.. py:method:: FeatureHandle.getMZ
   :module: pyopenms.pyopenms_1


Cython signature: double getMZ()
Returns the m/z coordinate (index 1)




.. py:method:: FeatureHandle.getMapIndex
   :module: pyopenms.pyopenms_1


Cython signature: uint64_t getMapIndex()
Returns the map index




.. py:method:: FeatureHandle.getRT
   :module: pyopenms.pyopenms_1


Cython signature: double getRT()
Returns the RT coordinate (index 0)




.. py:method:: FeatureHandle.getUniqueId
   :module: pyopenms.pyopenms_1


Cython signature: size_t getUniqueId()
Returns the unique id




.. py:method:: FeatureHandle.getWidth
   :module: pyopenms.pyopenms_1


Cython signature: float getWidth()
Returns the width (FWHM)




.. py:method:: FeatureHandle.hasInvalidUniqueId
   :module: pyopenms.pyopenms_1


Cython signature: size_t hasInvalidUniqueId()
Returns whether the unique id is invalid. Returns 1 if the unique id is invalid, 0 otherwise




.. py:method:: FeatureHandle.hasValidUniqueId
   :module: pyopenms.pyopenms_1


Cython signature: size_t hasValidUniqueId()
Returns whether the unique id is valid. Returns 1 if the unique id is valid, 0 otherwise




.. py:method:: FeatureHandle.isValid
   :module: pyopenms.pyopenms_1


Cython signature: bool isValid(uint64_t unique_id)
Returns true if the unique_id is valid, false otherwise




.. py:method:: FeatureHandle.setCharge
   :module: pyopenms.pyopenms_1


Cython signature: void setCharge(int charge)
Sets the charge




.. py:method:: FeatureHandle.setIntensity
   :module: pyopenms.pyopenms_1


Cython signature: void setIntensity(float)
Returns the data point intensity (height)




.. py:method:: FeatureHandle.setMZ
   :module: pyopenms.pyopenms_1


Cython signature: void setMZ(double)
Returns the m/z coordinate (index 1)




.. py:method:: FeatureHandle.setMapIndex
   :module: pyopenms.pyopenms_1


Cython signature: void setMapIndex(uint64_t i)
Sets the map index




.. py:method:: FeatureHandle.setRT
   :module: pyopenms.pyopenms_1


Cython signature: void setRT(double)
Returns the RT coordinate (index 0)




.. py:method:: FeatureHandle.setUniqueId
   :module: pyopenms.pyopenms_1


Cython signature: void setUniqueId(uint64_t rhs)
Assigns a new, valid unique id. Always returns 1




.. py:method:: FeatureHandle.setWidth
   :module: pyopenms.pyopenms_1


Cython signature: void setWidth(float width)
Sets the width (FWHM)




.. py:class:: Gradient
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _Gradient


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1Gradient.html




.. py:method:: Gradient.addEluent
   :module: pyopenms.pyopenms_1


Cython signature: void addEluent(String eluent)
Adds an eluent at the end of the eluent array




.. py:method:: Gradient.addTimepoint
   :module: pyopenms.pyopenms_1


Cython signature: void addTimepoint(int timepoint)
Adds a timepoint at the end of the timepoint array




.. py:method:: Gradient.clearEluents
   :module: pyopenms.pyopenms_1


Cython signature: void clearEluents()
Removes all eluents




.. py:method:: Gradient.clearPercentages
   :module: pyopenms.pyopenms_1


Cython signature: void clearPercentages()
Sets all percentage values to 0




.. py:method:: Gradient.clearTimepoints
   :module: pyopenms.pyopenms_1


Cython signature: void clearTimepoints()
Removes all timepoints




.. py:method:: Gradient.getEluents
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[String] getEluents()
Returns a reference to the list of eluents




.. py:method:: Gradient.getPercentage
   :module: pyopenms.pyopenms_1


Cython signature: unsigned int getPercentage(String eluent, int timepoint)
Returns a const reference to the percentages




.. py:method:: Gradient.getTimepoints
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[int] getTimepoints()
Returns a reference to the list of timepoints




.. py:method:: Gradient.isValid
   :module: pyopenms.pyopenms_1


Cython signature: bool isValid()
Checks if the percentages of all timepoints add up to 100%




.. py:method:: Gradient.setPercentage
   :module: pyopenms.pyopenms_1


Cython signature: void setPercentage(String eluent, int timepoint, unsigned int percentage)
Sets the percentage of 'eluent' at 'timepoint'




.. py:class:: IDFilter
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _IDFilter


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1IDFilter.html


 Finds the best-scoring hit in a vector of peptide or protein identifications
 -----
 This class provides functions for filtering collections of peptide or protein identifications according to various criteria.
 It also contains helper functions and classes (functors that implement predicates) that are used in this context.
 -----
 The filter functions modify their inputs, rather than creating filtered copies.
 -----
 Most filters work on the hit level, i.e. they remove peptide or protein hits from peptide or protein identifications (IDs).
 A few filters work on the ID level instead, i.e. they remove peptide or protein IDs from vectors thereof.
 Independent of this, the inputs for all filter functions are vectors of IDs, because the data most often comes in this form.
 This design also allows many helper objects to be set up only once per vector, rather than once per ID.
 -----
 The filter functions for vectors of peptide/protein IDs do not include clean-up steps (e.g. removal of IDs without hits, reassignment of hit ranks, ...).
 They only carry out their specific filtering operations.
 This is so filters can be chained without having to repeat clean-up operations.
 The group of clean-up functions provides helpers that are useful to ensure data integrity after filters have been applied, but it is up to the individual developer to use them when necessary.
 -----
 The filter functions for MS/MS experiments do include clean-up steps, because they filter peptide and protein IDs in conjunction and potential contradictions between the two must be eliminated.




.. py:attribute:: IDFilter.DigestionFilter
   :module: pyopenms.pyopenms_1


alias of :py:class:`pyopenms.pyopenms_1.__DigestionFilter`


.. py:method:: IDFilter.countHits
   :module: pyopenms.pyopenms_1


- Cython signature: size_t countHits(libcpp_vector[PeptideIdentification] identifications)
  Returns the total number of peptide hits in a vector of peptide identifications


- Cython signature: size_t countHits(libcpp_vector[ProteinIdentification] identifications)
  Returns the total number of protein hits in a vector of protein identifications




.. py:method:: IDFilter.extractPeptideSequences
   :module: pyopenms.pyopenms_1


Cython signature: void extractPeptideSequences(libcpp_vector[PeptideIdentification] & peptides, libcpp_set[String] & sequences, bool ignore_mods)


Extracts all unique peptide sequences from a list of peptide IDs
-----
:param peptides
:param ignore_mods: Boolean operator default to false in case of any modifications in sequences during extraction
:returns: Sequences




.. py:method:: IDFilter.filterHitsByRank
   :module: pyopenms.pyopenms_1


         - Cython signature: void filterHitsByRank(libcpp_vector[PeptideIdentification] & ids, size_t min_rank, size_t max_rank)


Filters peptide or protein identifications according to the ranking of the hits
-----
The hits between 'min_rank' and 'max_rank' (both inclusive) in each ID are kept
Counting starts at 1, i.e. the best (highest/lowest scoring) hit has rank 1
The ranks are (re-)computed before filtering
'max_rank' is ignored if it is smaller than 'min_rank'
-----
Note: that there may be several hits with the same rank in a peptide or protein ID (if the scores are the same)
This method is useful if a range of higher hits is needed for decoy fairness analysis
         - Cython signature: void filterHitsByRank(libcpp_vector[ProteinIdentification] & ids, size_t min_rank, size_t max_rank)


Filters peptide or protein identifications according to the ranking of the hits
-----
The hits between 'min_rank' and 'max_rank' (both inclusive) in each ID are kept
Counting starts at 1, i.e. the best (highest/lowest scoring) hit has rank 1
The ranks are (re-)computed before filtering
'max_rank' is ignored if it is smaller than 'min_rank'
-----
Note: that there may be several hits with the same rank in a peptide or protein ID (if the scores are the same)
This method is useful if a range of higher hits is needed for decoy fairness analysis




.. py:method:: IDFilter.filterHitsByScore
   :module: pyopenms.pyopenms_1


- Cython signature: void filterHitsByScore(libcpp_vector[PeptideIdentification] & ids, double threshold_score)
  Filters peptide or protein identifications according to the score of the hits. The score orientation has to be set to higherscorebetter in each PeptideIdentification. Only peptide/protein hits with a score at least as good as 'threshold_score' are kept


- Cython signature: void filterHitsByScore(libcpp_vector[ProteinIdentification] & ids, double threshold_score)
  Filters peptide or protein identifications according to the score of the hits. The score orientation has to be set to higherscorebetter in each PeptideIdentification/ProteinIdentifiation. Only peptide/protein hits with a score at least as good as 'threshold_score' are kept


- Cython signature: void filterHitsByScore(MSExperiment & experiment, double peptide_threshold_score, double protein_threshold_score)
  Filters an MS/MS experiment according to score thresholds




.. py:method:: IDFilter.filterPeptidesByCharge
   :module: pyopenms.pyopenms_1


Cython signature: void filterPeptidesByCharge(libcpp_vector[PeptideIdentification] & peptides, size_t min_charge, size_t max_charge)
Filters peptide identifications according to charge state




.. py:method:: IDFilter.filterPeptidesByLength
   :module: pyopenms.pyopenms_1


Cython signature: void filterPeptidesByLength(libcpp_vector[PeptideIdentification] & peptides, size_t min_length, size_t max_length)
Filters peptide identifications according to peptide sequence length




.. py:method:: IDFilter.filterPeptidesByMZ
   :module: pyopenms.pyopenms_1


Cython signature: void filterPeptidesByMZ(libcpp_vector[PeptideIdentification] & peptides, size_t min_mz, size_t max_mz)
Filters peptide identifications by precursor m/z, keeping only IDs in the given range




.. py:method:: IDFilter.filterPeptidesByMZError
   :module: pyopenms.pyopenms_1


Cython signature: void filterPeptidesByMZError(libcpp_vector[PeptideIdentification] & peptides, double mass_error, bool unit_ppm)
Filter peptide identifications according to mass deviation




.. py:method:: IDFilter.filterPeptidesByRT
   :module: pyopenms.pyopenms_1


Cython signature: void filterPeptidesByRT(libcpp_vector[PeptideIdentification] & peptides, size_t min_rt, size_t max_rt)
Filters peptide identifications by precursor RT, keeping only IDs in the given range




.. py:method:: IDFilter.filterPeptidesByRTPredictPValue
   :module: pyopenms.pyopenms_1


Cython signature: void filterPeptidesByRTPredictPValue(libcpp_vector[PeptideIdentification] & peptides, const String & metavalue_key, double threshold)


Filters peptide identifications according to p-values from RTPredict
-----
Filters the peptide hits by the probability (p-value) of a correct peptide identification having a deviation between observed and predicted RT equal to or greater than allowed
-----
:param peptides: Input/output
:param metavalue_key: Name of the meta value that holds the p-value: "predicted_RT_p_value" or "predicted_RT_p_value_first_dim"
:param threshold: P-value threshold




.. py:method:: IDFilter.getBestHit
   :module: pyopenms.pyopenms_1


         - Cython signature: bool getBestHit(libcpp_vector[PeptideIdentification] identifications, bool assume_sorted, PeptideHit & best_hit)


Finds the best-scoring hit in a vector of peptide or protein identifications
-----
If there are several hits with the best score, the first one is taken
-----
:param identifications: Vector of peptide or protein IDs, each containing one or more (peptide/protein) hits
:param assume_sorted: Are hits sorted by score (best score first) already? This allows for faster query, since only the first hit needs to be looked at
:param best_hit: Contains the best hit if successful in a vector of peptide identifications
:returns: true if a hit was present, false otherwise
Finds the best-scoring hit in a vector of peptide or protein identifications
-----
If there are several hits with the best score, the first one is taken
-----
:param identifications: Vector of peptide or protein IDs, each containing one or more (peptide/protein) hits
:param assume_sorted: Are hits sorted by score (best score first) already? This allows for faster query, since only the first hit needs to be looked at
:param best_hit: Contains the best hit if successful in a vector of protein identifications
:returns: true if a hit was present, false otherwise
         - Cython signature: bool getBestHit(libcpp_vector[ProteinIdentification] identifications, bool assume_sorted, ProteinHit & best_hit)


Finds the best-scoring hit in a vector of peptide or protein identifications
-----
If there are several hits with the best score, the first one is taken
-----
:param identifications: Vector of peptide or protein IDs, each containing one or more (peptide/protein) hits
:param assume_sorted: Are hits sorted by score (best score first) already? This allows for faster query, since only the first hit needs to be looked at
:param best_hit: Contains the best hit if successful in a vector of protein identifications
:returns: true if a hit was present, false otherwise




.. py:method:: IDFilter.keepBestPeptideHits
   :module: pyopenms.pyopenms_1


Cython signature: void keepBestPeptideHits(libcpp_vector[PeptideIdentification] & peptides, bool strict)


Filters peptide identifications keeping only the single best-scoring hit per ID
-----
:param peptides: Input/output
:param strict: If set, keep the best hit only if its score is unique - i.e. ties are not allowed. (Otherwise all hits with the best score is kept.)




.. py:method:: IDFilter.keepBestPerPeptide
   :module: pyopenms.pyopenms_1


Cython signature: void keepBestPerPeptide(libcpp_vector[PeptideIdentification] & peptides, bool ignore_mods, bool ignore_charges, size_t nr_best_spectrum)
Filters PeptideHits from PeptideIdentification by keeping only the best peptide hits for every peptide sequence




.. py:method:: IDFilter.keepBestPerPeptidePerRun
   :module: pyopenms.pyopenms_1


Cython signature: void keepBestPerPeptidePerRun(libcpp_vector[ProteinIdentification] & prot_ids, libcpp_vector[PeptideIdentification] & peptides, bool ignore_mods, bool ignore_charges, size_t nr_best_spectrum)
Filters PeptideHits from PeptideIdentification by keeping only the best peptide hits for every peptide sequence on a per run basis




.. py:method:: IDFilter.keepHitsMatchingProteins
   :module: pyopenms.pyopenms_1


- Cython signature: void keepHitsMatchingProteins(libcpp_vector[PeptideIdentification] & ids, libcpp_set[String] accessions)
  Filters peptide or protein identifications according to the given proteins (positive)


- Cython signature: void keepHitsMatchingProteins(libcpp_vector[ProteinIdentification] & ids, libcpp_set[String] accessions)
  Filters peptide or protein identifications according to the given proteins (positive)


- Cython signature: void keepHitsMatchingProteins(MSExperiment & experiment, libcpp_vector[FASTAEntry] & proteins)




.. py:method:: IDFilter.keepNBestHits
   :module: pyopenms.pyopenms_1


- Cython signature: void keepNBestHits(libcpp_vector[PeptideIdentification] & ids, size_t n)
- Cython signature: void keepNBestHits(libcpp_vector[ProteinIdentification] & ids, size_t n)
- Cython signature: void keepNBestHits(MSExperiment & experiment, size_t n)
  Filters an MS/MS experiment by keeping the N best peptide hits for every spectrum




.. py:method:: IDFilter.keepNBestSpectra
   :module: pyopenms.pyopenms_1


Cython signature: void keepNBestSpectra(libcpp_vector[PeptideIdentification] & peptides, size_t n)
Filter identifications by "N best" PeptideIdentification objects (better PeptideIdentification means better [best] PeptideHit than other)




.. py:method:: IDFilter.keepPeptidesWithMatchingModifications
   :module: pyopenms.pyopenms_1


Cython signature: void keepPeptidesWithMatchingModifications(libcpp_vector[PeptideIdentification] & peptides, libcpp_set[String] & modifications)
Keeps only peptide hits that have at least one of the given modifications




.. py:method:: IDFilter.keepPeptidesWithMatchingSequences
   :module: pyopenms.pyopenms_1


Cython signature: void keepPeptidesWithMatchingSequences(libcpp_vector[PeptideIdentification] & peptides, libcpp_vector[PeptideIdentification] & bad_peptides, bool ignore_mods)
Removes all peptide hits with a sequence that does not match one in 'good_peptides'




.. py:method:: IDFilter.keepUniquePeptidesPerProtein
   :module: pyopenms.pyopenms_1


Cython signature: void keepUniquePeptidesPerProtein(libcpp_vector[PeptideIdentification] & peptides)
Removes all peptides that are not annotated as unique for a protein (by PeptideIndexer)




.. py:method:: IDFilter.removeDecoyHits
   :module: pyopenms.pyopenms_1


- Cython signature: void removeDecoyHits(libcpp_vector[PeptideIdentification] & ids)
  Removes hits annotated as decoys from peptide or protein identifications. Checks for meta values named "target_decoy" and "isDecoy", and removes protein/peptide hits if the values are "decoy" and "true", respectively


- Cython signature: void removeDecoyHits(libcpp_vector[ProteinIdentification] & ids)
  Removes hits annotated as decoys from peptide or protein identifications. Checks for meta values named "target_decoy" and "isDecoy", and removes protein/peptide hits if the values are "decoy" and "true", respectively




.. py:method:: IDFilter.removeDuplicatePeptideHits
   :module: pyopenms.pyopenms_1


Cython signature: void removeDuplicatePeptideHits(libcpp_vector[PeptideIdentification] & peptides)
Removes duplicate peptide hits from each peptide identification, keeping only unique hits (per ID)




.. py:method:: IDFilter.removeEmptyIdentifications
   :module: pyopenms.pyopenms_1


- Cython signature: void removeEmptyIdentifications(libcpp_vector[PeptideIdentification] & ids)
  Removes peptide or protein identifications that have no hits in them


- Cython signature: void removeEmptyIdentifications(libcpp_vector[ProteinIdentification] & ids)
  Removes peptide or protein identifications that have no hits in them




.. py:method:: IDFilter.removeHitsMatchingProteins
   :module: pyopenms.pyopenms_1


- Cython signature: void removeHitsMatchingProteins(libcpp_vector[PeptideIdentification] & ids, libcpp_set[String] accessions)
  Filters peptide or protein identifications according to the given proteins (negative)


- Cython signature: void removeHitsMatchingProteins(libcpp_vector[ProteinIdentification] & ids, libcpp_set[String] accessions)
  Filters peptide or protein identifications according to the given proteins (negative)




.. py:method:: IDFilter.removePeptidesWithMatchingModifications
   :module: pyopenms.pyopenms_1


Cython signature: void removePeptidesWithMatchingModifications(libcpp_vector[PeptideIdentification] & peptides, libcpp_set[String] & modifications)
Removes all peptide hits that have at least one of the given modifications




.. py:method:: IDFilter.removePeptidesWithMatchingSequences
   :module: pyopenms.pyopenms_1


Cython signature: void removePeptidesWithMatchingSequences(libcpp_vector[PeptideIdentification] & peptides, libcpp_vector[PeptideIdentification] & bad_peptides, bool ignore_mods)
Removes all peptide hits with a sequence that matches one in 'bad_peptides'




.. py:method:: IDFilter.removeUnreferencedProteins
   :module: pyopenms.pyopenms_1


Cython signature: void removeUnreferencedProteins(libcpp_vector[ProteinIdentification] & proteins, libcpp_vector[PeptideIdentification] & peptides)
Removes protein hits from the protein IDs in a 'cmap' that are not referenced by a peptide in the features or if requested in the unassigned peptide list




.. py:method:: IDFilter.updateHitRanks
   :module: pyopenms.pyopenms_1


- Cython signature: void updateHitRanks(libcpp_vector[PeptideIdentification] & identifications)
  Updates the hit ranks on all peptide or protein IDs


- Cython signature: void updateHitRanks(libcpp_vector[ProteinIdentification] & identifications)
  Updates the hit ranks on all peptide or protein IDs




.. py:method:: IDFilter.updateProteinGroups
   :module: pyopenms.pyopenms_1


Cython signature: bool updateProteinGroups(libcpp_vector[ProteinGroup] & groups, libcpp_vector[ProteinHit] & hits)


Update protein groups after protein hits were filtered
-----
:param groups: Input/output protein groups
:param hits: Available protein hits (all others are removed from the groups)
:return: Returns whether the groups are still valid (which is the case if only whole groups, if any, were removed)




.. py:method:: IDFilter.updateProteinReferences
   :module: pyopenms.pyopenms_1


Cython signature: void updateProteinReferences(libcpp_vector[PeptideIdentification] & peptides, libcpp_vector[ProteinIdentification] & proteins, bool remove_peptides_without_reference)
Removes references to missing proteins. Only PeptideEvidence entries that reference protein hits in 'proteins' are kept in the peptide hits




.. py:class:: IMSAlphabet
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _IMSAlphabet


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::ims::IMSAlphabet_1_1IMSAlphabet.html


 Holds an indexed list of bio-chemical elements.
 -----
 Presents an indexed list of bio-chemical elements of type (or derived from
 type) 'Element'. Due to indexed structure 'Alphabet' can be used similar
 to std::vector, for example to add a new element to 'Alphabet' function
 push_back(element_type) can be used. Elements or their properties (such
 as element's mass) can be accessed by index in a constant time. On the other
 hand accessing elements by their names takes linear time. Due to this and
 also the fact that 'Alphabet' is 'heavy-weighted' (consisting of
 'Element' -s or their derivatives where the depth of derivation as well is
 undefined resulting in possibly 'heavy' access operations) it is recommended
 not use 'Alphabet' directly in operations where fast access to
 'Element' 's properties is required. Instead consider to use
 'light-weighted' equivalents, such as 'Weights'
 -----
 :param map: MSExperiment to receive the identifications
 :param fmap: FeatureMap with PeptideIdentifications for the MSExperiment
 :param clear_ids: Reset peptide and protein identifications of each scan before annotating
 :param map_ms1: Attach Ids to MS1 spectra using RT mapping only (without precursor, without m/z)




.. py:method:: IMSAlphabet.clear
   :module: pyopenms.pyopenms_1


Cython signature: void clear()
Clears the alphabet data




.. py:method:: IMSAlphabet.erase
   :module: pyopenms.pyopenms_1


Cython signature: bool erase(libcpp_string & name)
Removes the element with 'name' from the alphabet




.. py:method:: IMSAlphabet.getAverageMasses
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[double] getAverageMasses()
Gets average masses of elements




.. py:method:: IMSAlphabet.getElement
   :module: pyopenms.pyopenms_1


- Cython signature: IMSElement getElement(libcpp_string & name)
  Gets the element with 'index' and returns element with the given index in alphabet


- Cython signature: IMSElement getElement(int index)
  Gets the element with 'index'




.. py:method:: IMSAlphabet.getMass
   :module: pyopenms.pyopenms_1


- Cython signature: double getMass(libcpp_string & name)
  Gets mono isotopic mass of the element with the symbol 'name'
- Cython signature: double getMass(int index)
  Gets mass of the element with an 'index' in alphabet




.. py:method:: IMSAlphabet.getMasses
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[double] getMasses(int isotope_index)
Gets masses of elements isotopes given by 'isotope_index'




.. py:method:: IMSAlphabet.getName
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_string getName(int index)
Gets the symbol of the element with an 'index' in alphabet




.. py:method:: IMSAlphabet.hasName
   :module: pyopenms.pyopenms_1


Cython signature: bool hasName(libcpp_string & name)
Returns true if there is an element with symbol 'name' in the alphabet, false - otherwise




.. py:method:: IMSAlphabet.load
   :module: pyopenms.pyopenms_1


Cython signature: void load(String & fname)
Loads the alphabet data from the file 'fname' using the default parser. If there is no file 'fname', throws an 'IOException'




.. py:method:: IMSAlphabet.push_back
   :module: pyopenms.pyopenms_1


- Cython signature: void push_back(libcpp_string & name, double value)
  Adds a new element with 'name' and mass 'value'


- Cython signature: void push_back(IMSElement & element)
  Adds a new 'element' to the alphabet




.. py:method:: IMSAlphabet.setElement
   :module: pyopenms.pyopenms_1


Cython signature: void setElement(libcpp_string & name, double mass, bool forced)
Overwrites an element in the alphabet with the 'name' with a new element constructed from the given 'name' and 'mass'




.. py:method:: IMSAlphabet.size
   :module: pyopenms.pyopenms_1


Cython signature: int size()




.. py:method:: IMSAlphabet.sortByNames
   :module: pyopenms.pyopenms_1


Cython signature: void sortByNames()
Sorts the alphabet by names




.. py:method:: IMSAlphabet.sortByValues
   :module: pyopenms.pyopenms_1


Cython signature: void sortByValues()
Sorts the alphabet by mass values




.. py:class:: InclusionExclusionList
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _InclusionExclusionList


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1InclusionExclusionList.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: InclusionExclusionList.getDefaults
   :module: pyopenms.pyopenms_1


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: InclusionExclusionList.getName
   :module: pyopenms.pyopenms_1


Cython signature: String getName()
Returns the name




.. py:method:: InclusionExclusionList.getParameters
   :module: pyopenms.pyopenms_1


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: InclusionExclusionList.getSubsections
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: InclusionExclusionList.setName
   :module: pyopenms.pyopenms_1


Cython signature: void setName(const String &)
Sets the name




.. py:method:: InclusionExclusionList.setParameters
   :module: pyopenms.pyopenms_1


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: InclusionExclusionList.writeTargets
   :module: pyopenms.pyopenms_1


- Cython signature: void writeTargets(libcpp_vector[FASTAEntry] & fasta_entries, const String & out_path, IntList & charges, const String rt_model_path)
  Writes inclusion or exclusion list of tryptic peptides of the given proteins (tab-delimited)


- Cython signature: void writeTargets(FeatureMap & map_, const String & out_path)
  Writes inclusion or exclusion list of given feature map


- Cython signature: void writeTargets(libcpp_vector[PeptideIdentification] & pep_ids, const String & out_path, IntList & charges)
  Writes inclusion or exclusion list of given peptide ids (tab-delimited)




.. py:class:: IndexedMzMLFileLoader
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _IndexedMzMLFileLoader


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1IndexedMzMLFileLoader.html




.. py:method:: IndexedMzMLFileLoader.getOptions
   :module: pyopenms.pyopenms_1


Cython signature: PeakFileOptions getOptions()
Returns the options for loading/storing




.. py:method:: IndexedMzMLFileLoader.load
   :module: pyopenms.pyopenms_1


Cython signature: bool load(String, OnDiscMSExperiment &)


Load a file
-----
Tries to parse the file, success needs to be checked with the return value
-----
:param filename: Filename determines where the file is located
:param exp: Object which will contain the data after the call
:returns: Indicates whether parsing was successful (if it is false, the file most likely was not an mzML or not indexed)




.. py:method:: IndexedMzMLFileLoader.setOptions
   :module: pyopenms.pyopenms_1


Cython signature: void setOptions(PeakFileOptions)
Returns the options for loading/storing




.. py:method:: IndexedMzMLFileLoader.store
   :module: pyopenms.pyopenms_1


         - Cython signature: void store(String, OnDiscMSExperiment &)


Store a file from an on-disc data-structure
-----
:param filename: Filename determines where the file will be stored
:param exp: MS data to be stored
         - Cython signature: void store(String, MSExperiment &)


Store a file from an in-memory data-structure
-----
:param filename: Filename determines where the file will be stored
:param exp: MS data to be stored




.. py:class:: Interfaces()
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`




.. py:attribute:: Interfaces.BinaryDataArray
   :module: pyopenms.pyopenms_1


alias of :py:class:`pyopenms.pyopenms_2._Interfaces_BinaryDataArray`


.. py:attribute:: Interfaces.Chromatogram
   :module: pyopenms.pyopenms_1


alias of :py:class:`pyopenms.pyopenms_2._Interfaces_Chromatogram`


.. py:attribute:: Interfaces.Spectrum
   :module: pyopenms.pyopenms_1


alias of :py:class:`pyopenms.pyopenms_2._Interfaces_Spectrum`


.. py:class:: IonType
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _IonType


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1IonType.html




.. py:attribute:: IonType.charge
   :module: pyopenms.pyopenms_1




.. py:attribute:: IonType.loss
   :module: pyopenms.pyopenms_1




.. py:attribute:: IonType.residue
   :module: pyopenms.pyopenms_1




.. py:class:: IsobaricChannelInformation
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _IsobaricChannelInformation


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::IsobaricQuantitationMethod_1_1IsobaricChannelInformation.html




.. py:attribute:: IsobaricChannelInformation.center
   :module: pyopenms.pyopenms_1




.. py:attribute:: IsobaricChannelInformation.channel_id_minus_1
   :module: pyopenms.pyopenms_1




.. py:attribute:: IsobaricChannelInformation.channel_id_minus_2
   :module: pyopenms.pyopenms_1




.. py:attribute:: IsobaricChannelInformation.channel_id_plus_1
   :module: pyopenms.pyopenms_1




.. py:attribute:: IsobaricChannelInformation.channel_id_plus_2
   :module: pyopenms.pyopenms_1




.. py:attribute:: IsobaricChannelInformation.description
   :module: pyopenms.pyopenms_1




.. py:attribute:: IsobaricChannelInformation.id
   :module: pyopenms.pyopenms_1




.. py:attribute:: IsobaricChannelInformation.name
   :module: pyopenms.pyopenms_1




.. py:class:: IsotopeDistributionCache
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _IsotopeDistributionCache


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1IsotopeDistributionCache.html




.. py:method:: IsotopeDistributionCache.getIsotopeDistribution
   :module: pyopenms.pyopenms_1


Cython signature: TheoreticalIsotopePattern getIsotopeDistribution(double mass)
Returns the isotope distribution for a certain mass window




.. py:class:: IsotopeMarker
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _IsotopeMarker


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1IsotopeMarker.html
 -- Inherits from ['PeakMarker']




.. py:method:: IsotopeMarker.apply
   :module: pyopenms.pyopenms_1


Cython signature: void apply(libcpp_map[double,bool] &, MSSpectrum &)




.. py:method:: IsotopeMarker.create
   :module: pyopenms.pyopenms_1




.. py:method:: IsotopeMarker.getDefaults
   :module: pyopenms.pyopenms_1


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: IsotopeMarker.getName
   :module: pyopenms.pyopenms_1


Cython signature: String getName()
Returns the name




.. py:method:: IsotopeMarker.getParameters
   :module: pyopenms.pyopenms_1


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: IsotopeMarker.getProductName
   :module: pyopenms.pyopenms_1


Cython signature: String getProductName()
Returns the product name




.. py:method:: IsotopeMarker.getSubsections
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: IsotopeMarker.setName
   :module: pyopenms.pyopenms_1


Cython signature: void setName(const String &)
Sets the name




.. py:method:: IsotopeMarker.setParameters
   :module: pyopenms.pyopenms_1


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: Kernel_MassTrace
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _Kernel_MassTrace


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1Kernel_MassTrace.html




.. py:method:: Kernel_MassTrace.computeFwhmArea
   :module: pyopenms.pyopenms_1


Cython signature: double computeFwhmArea()




.. py:method:: Kernel_MassTrace.computeFwhmAreaSmooth
   :module: pyopenms.pyopenms_1


Cython signature: double computeFwhmAreaSmooth()
Computes chromatographic peak area within the FWHM range.




.. py:method:: Kernel_MassTrace.computePeakArea
   :module: pyopenms.pyopenms_1


Cython signature: double computePeakArea()
Sums intensities of all peaks in the mass trace




.. py:method:: Kernel_MassTrace.computeSmoothedPeakArea
   :module: pyopenms.pyopenms_1


Cython signature: double computeSmoothedPeakArea()
Sums all non-negative (smoothed!) intensities in the mass trace




.. py:method:: Kernel_MassTrace.estimateFWHM
   :module: pyopenms.pyopenms_1


Cython signature: size_t estimateFWHM(bool)
Estimates FWHM of chromatographic peak in seconds (based on either raw or smoothed intensities)




.. py:method:: Kernel_MassTrace.findMaxByIntPeak
   :module: pyopenms.pyopenms_1


Cython signature: size_t findMaxByIntPeak(bool)
Returns the index of the mass trace's highest peak within the MassTrace container (based either on raw or smoothed intensities)




.. py:attribute:: Kernel_MassTrace.fwhm_mz_avg
   :module: pyopenms.pyopenms_1




.. py:method:: Kernel_MassTrace.getAverageMS1CycleTime
   :module: pyopenms.pyopenms_1


Cython signature: double getAverageMS1CycleTime()
Returns average scan time of mass trace




.. py:method:: Kernel_MassTrace.getCentroidMZ
   :module: pyopenms.pyopenms_1


Cython signature: double getCentroidMZ()
Returns the centroid m/z




.. py:method:: Kernel_MassTrace.getCentroidRT
   :module: pyopenms.pyopenms_1


Cython signature: double getCentroidRT()
Returns the centroid RT




.. py:method:: Kernel_MassTrace.getCentroidSD
   :module: pyopenms.pyopenms_1


Cython signature: double getCentroidSD()
Returns the centroid SD




.. py:method:: Kernel_MassTrace.getConvexhull
   :module: pyopenms.pyopenms_1


Cython signature: ConvexHull2D getConvexhull()
Returns the mass trace's convex hull




.. py:method:: Kernel_MassTrace.getFWHM
   :module: pyopenms.pyopenms_1


Cython signature: double getFWHM()
Returns FWHM




.. py:method:: Kernel_MassTrace.getFWHMborders
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_pair[size_t,size_t] getFWHMborders()
Returns FWHM boarders




.. py:method:: Kernel_MassTrace.getIntensity
   :module: pyopenms.pyopenms_1


Cython signature: double getIntensity(bool)
Returns the intensity




.. py:method:: Kernel_MassTrace.getLabel
   :module: pyopenms.pyopenms_1


Cython signature: String getLabel()
Returns label of mass trace




.. py:method:: Kernel_MassTrace.getMaxIntensity
   :module: pyopenms.pyopenms_1


Cython signature: double getMaxIntensity(bool)
Returns the max intensity




.. py:method:: Kernel_MassTrace.getQuantMethod
   :module: pyopenms.pyopenms_1


Cython signature: MT_QUANTMETHOD getQuantMethod()
Check if area or median is used for quantification




.. py:method:: Kernel_MassTrace.getSize
   :module: pyopenms.pyopenms_1


Cython signature: size_t getSize()
Returns the number of peaks contained in the mass trace




.. py:method:: Kernel_MassTrace.getSmoothedIntensities
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[double] getSmoothedIntensities()
Returns smoothed intensities (empty if no smoothing was explicitly done beforehand!)




.. py:method:: Kernel_MassTrace.getTraceLength
   :module: pyopenms.pyopenms_1


Cython signature: double getTraceLength()
Returns the length of the trace (as difference in RT)




.. py:method:: Kernel_MassTrace.setCentroidSD
   :module: pyopenms.pyopenms_1


Cython signature: void setCentroidSD(double & tmp_sd)




.. py:method:: Kernel_MassTrace.setLabel
   :module: pyopenms.pyopenms_1


Cython signature: void setLabel(String label)
Sets label of mass trace




.. py:method:: Kernel_MassTrace.setQuantMethod
   :module: pyopenms.pyopenms_1


Cython signature: void setQuantMethod(MT_QUANTMETHOD method)
Determine if area or median is used for quantification




.. py:method:: Kernel_MassTrace.setSmoothedIntensities
   :module: pyopenms.pyopenms_1


Cython signature: void setSmoothedIntensities(libcpp_vector[double] & db_vec)
Sets smoothed intensities (smoothing is done externally, e.g. by LowessSmoothing)




.. py:method:: Kernel_MassTrace.updateMeanMZ
   :module: pyopenms.pyopenms_1


Cython signature: void updateMeanMZ()
Compute & update centroid m/z as mean of m/z values




.. py:method:: Kernel_MassTrace.updateMedianMZ
   :module: pyopenms.pyopenms_1


Cython signature: void updateMedianMZ()
Compute & update centroid m/z as median of m/z values




.. py:method:: Kernel_MassTrace.updateMedianRT
   :module: pyopenms.pyopenms_1


Cython signature: void updateMedianRT()
Compute & update centroid RT as median position of intensities




.. py:method:: Kernel_MassTrace.updateSmoothedMaxRT
   :module: pyopenms.pyopenms_1


Cython signature: void updateSmoothedMaxRT()




.. py:method:: Kernel_MassTrace.updateSmoothedWeightedMeanRT
   :module: pyopenms.pyopenms_1


Cython signature: void updateSmoothedWeightedMeanRT()




.. py:method:: Kernel_MassTrace.updateWeightedMZsd
   :module: pyopenms.pyopenms_1


Cython signature: void updateWeightedMZsd()


Compute & update m/z standard deviation of mass trace as weighted mean of m/z values
-----
Make sure to call update(Weighted)(Mean|Median)MZ() first! <br>
use getCentroidSD() to get result




.. py:method:: Kernel_MassTrace.updateWeightedMeanMZ
   :module: pyopenms.pyopenms_1


Cython signature: void updateWeightedMeanMZ()
Compute & update centroid m/z as weighted mean of m/z values




.. py:method:: Kernel_MassTrace.updateWeightedMeanRT
   :module: pyopenms.pyopenms_1


Cython signature: void updateWeightedMeanRT()
Compute & update centroid RT as a intensity-weighted mean of RTs




.. py:class:: MRMTransitionGroupPicker
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _MRMTransitionGroupPicker


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MRMTransitionGroupPicker.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: MRMTransitionGroupPicker.createMRMFeature
   :module: pyopenms.pyopenms_1


Cython signature: MRMFeature createMRMFeature(LightMRMTransitionGroupCP transition_group, libcpp_vector[MSChromatogram] & picked_chroms, libcpp_vector[MSChromatogram] & smoothed_chroms, const int chr_idx, const int peak_idx)




.. py:method:: MRMTransitionGroupPicker.findLargestPeak
   :module: pyopenms.pyopenms_1


Cython signature: void findLargestPeak(libcpp_vector[MSChromatogram] & picked_chroms, int & chr_idx, int & peak_idx)




.. py:method:: MRMTransitionGroupPicker.findWidestPeakIndices
   :module: pyopenms.pyopenms_1


Cython signature: void findWidestPeakIndices(libcpp_vector[MSChromatogram] & picked_chroms, int & chrom_idx, int & point_idx)




.. py:method:: MRMTransitionGroupPicker.getDefaults
   :module: pyopenms.pyopenms_1


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: MRMTransitionGroupPicker.getName
   :module: pyopenms.pyopenms_1


Cython signature: String getName()
Returns the name




.. py:method:: MRMTransitionGroupPicker.getParameters
   :module: pyopenms.pyopenms_1


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: MRMTransitionGroupPicker.getSubsections
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: MRMTransitionGroupPicker.pickTransitionGroup
   :module: pyopenms.pyopenms_1


- Cython signature: void pickTransitionGroup(LightMRMTransitionGroupCP transition_group)
- Cython signature: void pickTransitionGroup(MRMTransitionGroupCP transition_group)




.. py:method:: MRMTransitionGroupPicker.remove_overlapping_features
   :module: pyopenms.pyopenms_1


Cython signature: void remove_overlapping_features(libcpp_vector[MSChromatogram] & picked_chroms, double best_left, double best_right)




.. py:method:: MRMTransitionGroupPicker.setName
   :module: pyopenms.pyopenms_1


Cython signature: void setName(const String &)
Sets the name




.. py:method:: MRMTransitionGroupPicker.setParameters
   :module: pyopenms.pyopenms_1


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: MSExperiment
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _MSExperiment


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MSExperiment.html
 -- Inherits from ['ExperimentalSettings', 'RangeManagerRtMzInt']


 In-Memory representation of a mass spectrometry experiment.
 -----
 Contains the data and metadata of an experiment performed with an MS (or
 HPLC and MS). This representation of an MS experiment is organized as list
 of spectra and chromatograms and provides an in-memory representation of
 popular mass-spectrometric file formats such as mzXML or mzML. The
 meta-data associated with an experiment is contained in
 ExperimentalSettings (by inheritance) while the raw data (as well as
 spectra and chromatogram level meta data) is stored in objects of type
 MSSpectrum and MSChromatogram, which are accessible through the getSpectrum
 and getChromatogram functions.
 -----
 Spectra can be accessed by direct iteration or by getSpectrum(),
 while chromatograms are accessed through getChromatogram().
 See help(ExperimentalSettings) for information about meta-data.
 -----
 Usage:
   exp = MSExperiment()
   MzMLFile().load(path_to_file, exp)
   for spectrum in exp:
     print(spectrum.size()) # prints number of peaks
     mz, intensities = spectrum.get_peaks()
 -----




.. py:method:: MSExperiment.addChromatogram
   :module: pyopenms.pyopenms_1


Cython signature: void addChromatogram(MSChromatogram chromatogram)




.. py:method:: MSExperiment.addSpectrum
   :module: pyopenms.pyopenms_1


Cython signature: void addSpectrum(MSSpectrum spec)




.. py:method:: MSExperiment.calculateTIC
   :module: pyopenms.pyopenms_1


Cython signature: MSChromatogram calculateTIC()
Returns the total ion chromatogram




.. py:method:: MSExperiment.clear
   :module: pyopenms.pyopenms_1


Cython signature: void clear(bool clear_meta_data)
Clear all spectra data and meta data (if called with True)




.. py:method:: MSExperiment.clearMetaDataArrays
   :module: pyopenms.pyopenms_1


Cython signature: bool clearMetaDataArrays()




.. py:method:: MSExperiment.clearMetaInfo
   :module: pyopenms.pyopenms_1


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: MSExperiment.clearRanges
   :module: pyopenms.pyopenms_1


Cython signature: void clearRanges()
Resets all range dimensions as empty




.. py:method:: MSExperiment.empty
   :module: pyopenms.pyopenms_1


Cython signature: bool empty()




.. py:method:: MSExperiment.get2DPeakDataLong
   :module: pyopenms.pyopenms_1


Cython signature: tuple[np.array[float] rt, np.array[float] mz, np.array[float] inty] get2DPeakDataLong(float min_rt, float max_rt, float min_mz, float max_mz)




.. py:method:: MSExperiment.getChromatogram
   :module: pyopenms.pyopenms_1


Cython signature: MSChromatogram getChromatogram(size_t id_)




.. py:method:: MSExperiment.getChromatograms
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[MSChromatogram] getChromatograms()




.. py:method:: MSExperiment.getComment
   :module: pyopenms.pyopenms_1


Cython signature: String getComment()
Returns the free-text comment




.. py:method:: MSExperiment.getContacts
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[ContactPerson] getContacts()
Returns a reference to the list of contact persons




.. py:method:: MSExperiment.getDateTime
   :module: pyopenms.pyopenms_1


Cython signature: DateTime getDateTime()
Returns the date the experiment was performed




.. py:method:: MSExperiment.getExperimentalSettings
   :module: pyopenms.pyopenms_1


Cython signature: ExperimentalSettings getExperimentalSettings()




.. py:method:: MSExperiment.getFractionIdentifier
   :module: pyopenms.pyopenms_1


Cython signature: String getFractionIdentifier()
Returns fraction identifier




.. py:method:: MSExperiment.getHPLC
   :module: pyopenms.pyopenms_1


Cython signature: HPLC getHPLC()
Returns a reference to the description of the HPLC run




.. py:method:: MSExperiment.getIdentifier
   :module: pyopenms.pyopenms_1


Cython signature: String getIdentifier()
Retrieve document identifier (e.g. an LSID)




.. py:method:: MSExperiment.getInstrument
   :module: pyopenms.pyopenms_1


Cython signature: Instrument getInstrument()
Returns a reference to the MS instrument description




.. py:method:: MSExperiment.getKeys
   :module: pyopenms.pyopenms_1


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: MSExperiment.getLoadedFilePath
   :module: pyopenms.pyopenms_1


Cython signature: String getLoadedFilePath()
Returns the file_name which is the absolute path to the file loaded




.. py:method:: MSExperiment.getLoadedFileType
   :module: pyopenms.pyopenms_1


Cython signature: int getLoadedFileType()
Returns the file_type (e.g. featureXML, consensusXML, mzData, mzXML, mzML, ...) of the file loaded




.. py:method:: MSExperiment.getMSLevels
   :module: pyopenms.pyopenms_1


Cython signature: list[int] getMSLevels()




.. py:method:: MSExperiment.getMaxIntensity
   :module: pyopenms.pyopenms_1


Cython signature: double getMaxIntensity()
Returns the maximum intensity




.. py:method:: MSExperiment.getMaxMZ
   :module: pyopenms.pyopenms_1


Cython signature: double getMaxMZ()
Returns the maximum m/z




.. py:method:: MSExperiment.getMaxRT
   :module: pyopenms.pyopenms_1


Cython signature: double getMaxRT()
Returns the maximum RT




.. py:method:: MSExperiment.getMetaValue
   :module: pyopenms.pyopenms_1


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: MSExperiment.getMinIntensity
   :module: pyopenms.pyopenms_1


Cython signature: double getMinIntensity()
Returns the minimum intensity




.. py:method:: MSExperiment.getMinMZ
   :module: pyopenms.pyopenms_1


Cython signature: double getMinMZ()
Returns the minimum m/z




.. py:method:: MSExperiment.getMinRT
   :module: pyopenms.pyopenms_1


Cython signature: double getMinRT()
Returns the minimum RT




.. py:method:: MSExperiment.getNrChromatograms
   :module: pyopenms.pyopenms_1


Cython signature: size_t getNrChromatograms()
Returns the number of chromatograms




.. py:method:: MSExperiment.getNrSpectra
   :module: pyopenms.pyopenms_1


Cython signature: size_t getNrSpectra()
Returns the number of MS spectra




.. py:method:: MSExperiment.getPrecursorSpectrum
   :module: pyopenms.pyopenms_1


Cython signature: int getPrecursorSpectrum(int zero_based_index)
Returns the index of the precursor spectrum for spectrum at index @p zero_based_index




.. py:method:: MSExperiment.getPrimaryMSRunPath
   :module: pyopenms.pyopenms_1


Cython signature: void getPrimaryMSRunPath(StringList & toFill)
References to the first MS file(s) after conversions. Used to trace results back to original data.




.. py:method:: MSExperiment.getProteinIdentifications
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[ProteinIdentification] getProteinIdentifications()
Returns a reference to the protein ProteinIdentification vector




.. py:method:: MSExperiment.getSample
   :module: pyopenms.pyopenms_1


Cython signature: Sample getSample()
Returns a reference to the sample description




.. py:method:: MSExperiment.getSize
   :module: pyopenms.pyopenms_1


Cython signature: uint64_t getSize()
Returns the total number of peaks




.. py:method:: MSExperiment.getSourceFiles
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[SourceFile] getSourceFiles()
Returns a reference to the source data file




.. py:method:: MSExperiment.getSpectra
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[MSSpectrum] getSpectra()




.. py:method:: MSExperiment.getSpectrum
   :module: pyopenms.pyopenms_1


Cython signature: MSSpectrum getSpectrum(size_t id_)




.. py:method:: MSExperiment.isMetaEmpty
   :module: pyopenms.pyopenms_1


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: MSExperiment.isSorted
   :module: pyopenms.pyopenms_1


- Cython signature: bool isSorted(bool check_mz)
  Checks if all spectra are sorted with respect to ascending RT


- Cython signature: bool isSorted()




.. py:method:: MSExperiment.metaRegistry
   :module: pyopenms.pyopenms_1


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: MSExperiment.metaValueExists
   :module: pyopenms.pyopenms_1


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: MSExperiment.removeMetaValue
   :module: pyopenms.pyopenms_1


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: MSExperiment.reserve
   :module: pyopenms.pyopenms_1


Cython signature: void reserve(size_t s)




.. py:method:: MSExperiment.reserveSpaceChromatograms
   :module: pyopenms.pyopenms_1


Cython signature: void reserveSpaceChromatograms(size_t s)




.. py:method:: MSExperiment.reserveSpaceSpectra
   :module: pyopenms.pyopenms_1


Cython signature: void reserveSpaceSpectra(size_t s)




.. py:method:: MSExperiment.reset
   :module: pyopenms.pyopenms_1


Cython signature: void reset()




.. py:method:: MSExperiment.resize
   :module: pyopenms.pyopenms_1


Cython signature: void resize(size_t s)




.. py:method:: MSExperiment.setChromatograms
   :module: pyopenms.pyopenms_1


Cython signature: void setChromatograms(libcpp_vector[MSChromatogram] chromatograms)




.. py:method:: MSExperiment.setComment
   :module: pyopenms.pyopenms_1


Cython signature: void setComment(String comment)
Sets the free-text comment




.. py:method:: MSExperiment.setContacts
   :module: pyopenms.pyopenms_1


Cython signature: void setContacts(libcpp_vector[ContactPerson] contacts)
Sets the list of contact persons




.. py:method:: MSExperiment.setDateTime
   :module: pyopenms.pyopenms_1


Cython signature: void setDateTime(DateTime date_time)
Sets the date the experiment was performed




.. py:method:: MSExperiment.setFractionIdentifier
   :module: pyopenms.pyopenms_1


Cython signature: void setFractionIdentifier(String fraction_identifier)
Sets the fraction identifier




.. py:method:: MSExperiment.setHPLC
   :module: pyopenms.pyopenms_1


Cython signature: void setHPLC(HPLC hplc)
Sets the description of the HPLC run




.. py:method:: MSExperiment.setIdentifier
   :module: pyopenms.pyopenms_1


Cython signature: void setIdentifier(String id)
Sets document identifier (e.g. an LSID)




.. py:method:: MSExperiment.setInstrument
   :module: pyopenms.pyopenms_1


Cython signature: void setInstrument(Instrument instrument)
Sets the MS instrument description




.. py:method:: MSExperiment.setLoadedFilePath
   :module: pyopenms.pyopenms_1


Cython signature: void setLoadedFilePath(String file_name)
Sets the file_name according to absolute path of the file loaded, preferably done whilst loading




.. py:method:: MSExperiment.setLoadedFileType
   :module: pyopenms.pyopenms_1


Cython signature: void setLoadedFileType(String file_name)
Sets the file_type according to the type of the file loaded from, preferably done whilst loading




.. py:method:: MSExperiment.setMetaValue
   :module: pyopenms.pyopenms_1


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:method:: MSExperiment.setProteinIdentifications
   :module: pyopenms.pyopenms_1


Cython signature: void setProteinIdentifications(libcpp_vector[ProteinIdentification] protein_identifications)
Sets the protein ProteinIdentification vector




.. py:method:: MSExperiment.setSample
   :module: pyopenms.pyopenms_1


Cython signature: void setSample(Sample sample)
Sets the sample description




.. py:method:: MSExperiment.setSourceFiles
   :module: pyopenms.pyopenms_1


Cython signature: void setSourceFiles(libcpp_vector[SourceFile] source_files)
Sets the source data file




.. py:method:: MSExperiment.setSpectra
   :module: pyopenms.pyopenms_1


Cython signature: void setSpectra(libcpp_vector[MSSpectrum] & spectra)




.. py:method:: MSExperiment.size
   :module: pyopenms.pyopenms_1


Cython signature: int size()




.. py:method:: MSExperiment.sortChromatograms
   :module: pyopenms.pyopenms_1


- Cython signature: void sortChromatograms(bool sort_rt)
  Sorts chromatograms by m/z. If sort_rt=True also sort each chromatogram RT


- Cython signature: void sortChromatograms()




.. py:method:: MSExperiment.sortSpectra
   :module: pyopenms.pyopenms_1


- Cython signature: void sortSpectra(bool sort_mz)
  Sorts spectra by RT. If sort_mz=True also sort each peak in a spectrum by m/z


- Cython signature: void sortSpectra()




.. py:method:: MSExperiment.swap
   :module: pyopenms.pyopenms_1


Cython signature: void swap(MSExperiment)




.. py:method:: MSExperiment.updateRanges
   :module: pyopenms.pyopenms_1


- Cython signature: void updateRanges()
  Recalculate global RT and m/z ranges after changes to the data has been made.


- Cython signature: void updateRanges(int msLevel)
  Recalculate RT and m/z ranges for a specific MS level




.. py:class:: MSPFile
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _MSPFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MSPFile.html




.. py:method:: MSPFile.load
   :module: pyopenms.pyopenms_1


Cython signature: void load(String filename, libcpp_vector[PeptideIdentification] & ids, MSExperiment & exp)


Loads a map from a MSPFile file
-----
:param exp: PeakMap which contains the spectra after reading
:param filename: The filename of the experiment
:param ids: Output parameter which contains the peptide identifications from the spectra annotations




.. py:method:: MSPFile.store
   :module: pyopenms.pyopenms_1


Cython signature: void store(String filename, MSExperiment & exp)
Stores a map in a MSPFile file




.. py:class:: MT_QUANTMETHOD
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`




.. py:attribute:: MT_QUANTMETHOD.MT_QUANT_AREA
   :module: pyopenms.pyopenms_1
   :value: 0




.. py:attribute:: MT_QUANTMETHOD.MT_QUANT_MEDIAN
   :module: pyopenms.pyopenms_1
   :value: 1




.. py:attribute:: MT_QUANTMETHOD.SIZE_OF_MT_QUANTMETHOD
   :module: pyopenms.pyopenms_1
   :value: 2




.. py:method:: MT_QUANTMETHOD.getMapping
   :module: pyopenms.pyopenms_1




.. py:class:: MapAlignmentAlgorithmIdentification
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _MapAlignmentAlgorithmIdentification


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MapAlignmentAlgorithmIdentification.html
 -- Inherits from ['DefaultParamHandler', 'ProgressLogger']




.. py:method:: MapAlignmentAlgorithmIdentification.align
   :module: pyopenms.pyopenms_1


- Cython signature: void align(libcpp_vector[MSExperiment] &, libcpp_vector[TransformationDescription] &, int)
- Cython signature: void align(libcpp_vector[FeatureMap] &, libcpp_vector[TransformationDescription] &, int)
- Cython signature: void align(libcpp_vector[ConsensusMap] &, libcpp_vector[TransformationDescription] &, int)




.. py:method:: MapAlignmentAlgorithmIdentification.align_4
   :module: pyopenms.pyopenms_1


Parameters:
ids (list): list of lists of PeptideIdentification objects
trafos (list): list of TransformationDescription objects
ref_index (int)




.. py:method:: MapAlignmentAlgorithmIdentification.endProgress
   :module: pyopenms.pyopenms_1


Cython signature: void endProgress()
Ends the progress display




.. py:method:: MapAlignmentAlgorithmIdentification.getDefaults
   :module: pyopenms.pyopenms_1


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: MapAlignmentAlgorithmIdentification.getLogType
   :module: pyopenms.pyopenms_1


Cython signature: LogType getLogType()
Returns the type of progress log being used




.. py:method:: MapAlignmentAlgorithmIdentification.getName
   :module: pyopenms.pyopenms_1


Cython signature: String getName()
Returns the name




.. py:method:: MapAlignmentAlgorithmIdentification.getParameters
   :module: pyopenms.pyopenms_1


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: MapAlignmentAlgorithmIdentification.getSubsections
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: MapAlignmentAlgorithmIdentification.nextProgress
   :module: pyopenms.pyopenms_1


Cython signature: void nextProgress()
Increment progress by 1 (according to range begin-end)




.. py:method:: MapAlignmentAlgorithmIdentification.setLogType
   :module: pyopenms.pyopenms_1


Cython signature: void setLogType(LogType)
Sets the progress log that should be used. The default type is NONE!




.. py:method:: MapAlignmentAlgorithmIdentification.setName
   :module: pyopenms.pyopenms_1


Cython signature: void setName(const String &)
Sets the name




.. py:method:: MapAlignmentAlgorithmIdentification.setParameters
   :module: pyopenms.pyopenms_1


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: MapAlignmentAlgorithmIdentification.setProgress
   :module: pyopenms.pyopenms_1


Cython signature: void setProgress(ptrdiff_t value)
Sets the current progress




.. py:method:: MapAlignmentAlgorithmIdentification.setReference
   :module: pyopenms.pyopenms_1


- Cython signature: void setReference(MSExperiment &)
- Cython signature: void setReference(FeatureMap &)
- Cython signature: void setReference(ConsensusMap &)
- Cython signature: void setReference(libcpp_vector[PeptideIdentification] &)




.. py:method:: MapAlignmentAlgorithmIdentification.startProgress
   :module: pyopenms.pyopenms_1


Cython signature: void startProgress(ptrdiff_t begin, ptrdiff_t end, String label)




.. py:class:: MapAlignmentEvaluationAlgorithmPrecision
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _MapAlignmentEvaluationAlgorithmPrecision


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MapAlignmentEvaluationAlgorithmPrecision.html
 -- Inherits from ['MapAlignmentEvaluationAlgorithm']




.. py:method:: MapAlignmentEvaluationAlgorithmPrecision.getProductName
   :module: pyopenms.pyopenms_1


Cython signature: String getProductName()
Returns the product name (for the Factory)




.. py:method:: MapAlignmentEvaluationAlgorithmPrecision.registerChildren
   :module: pyopenms.pyopenms_1


Cython signature: void registerChildren()
Register all derived classes in this method




.. py:class:: ModificationsDB
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _ModificationsDB


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ModificationsDB.html




.. py:method:: ModificationsDB.addModification
   :module: pyopenms.pyopenms_1


Cython signature: const ResidueModification * addModification(const ResidueModification & new_mod)
Add a new modification to ModificationsDB. If the modification already exists (based on its fullID) it is not added. Returns the modification in the ModificationDB (which can differ from input if mod was already present).




.. py:method:: ModificationsDB.findModificationIndex
   :module: pyopenms.pyopenms_1


Cython signature: size_t findModificationIndex(const String & mod_name)
Returns the index of the modification in the mods_ vector; a unique name must be given




.. py:method:: ModificationsDB.getAllSearchModifications
   :module: pyopenms.pyopenms_1


Cython signature: void getAllSearchModifications(libcpp_vector[String] & modifications)
Collects all modifications that can be used for identification searches




.. py:method:: ModificationsDB.getBestModificationByDiffMonoMass
   :module: pyopenms.pyopenms_1


Cython signature: const ResidueModification * getBestModificationByDiffMonoMass(double mass, double max_error, const String & residue, TermSpecificity term_spec)


Returns the best matching modification for the given delta mass and residue
-----
Query the modifications DB to get the best matching modification with
the given delta mass at the given residue (NULL pointer means no result,
maybe the maximal error tolerance needs to be increased). Possible
input for CAM modification would be a delta mass of 57 and a residue
of "C".
-----
Note: If there are multiple possible matches with equal masses, it
will choose the _first_ match which defaults to the first matching
UniMod entry.
-----
:param residue: The residue at which the modifications occurs
:param mass: The monoisotopic mass of the residue including the mass of the modification
:param max_error: The maximal mass error in the modification search
:returns: A pointer to the best matching modification (or NULL if none was found)




.. py:method:: ModificationsDB.getModification
   :module: pyopenms.pyopenms_1


- Cython signature: const ResidueModification * getModification(size_t index)
  Returns the modification with the given index


- Cython signature: const ResidueModification * getModification(const String & mod_name)
  Returns the modification with the given name


- Cython signature: const ResidueModification * getModification(const String & mod_name, const String & residue, TermSpecificity term_spec)
  Returns the modification with the given arguments




.. py:method:: ModificationsDB.getNumberOfModifications
   :module: pyopenms.pyopenms_1


Cython signature: size_t getNumberOfModifications()
Returns the number of modifications read from the unimod.xml file




.. py:method:: ModificationsDB.has
   :module: pyopenms.pyopenms_1


Cython signature: bool has(String modification)
Returns true if the modification exists




.. py:method:: ModificationsDB.isInstantiated
   :module: pyopenms.pyopenms_1


Cython signature: bool isInstantiated()
Check whether ModificationsDB was instantiated before




.. py:method:: ModificationsDB.searchModifications
   :module: pyopenms.pyopenms_1


Cython signature: void searchModifications(libcpp_set[const ResidueModification *] & mods, const String & mod_name, const String & residue, TermSpecificity term_spec)


Collects all modifications which have the given name as synonym
-----
If `residue` is set, only modifications with matching residue of origin are considered
If `term_spec` is set, only modifications with matching term specificity are considered
The resulting set of modifications will be empty if no modification exists that fulfills the criteria




.. py:method:: ModificationsDB.searchModificationsByDiffMonoMass
   :module: pyopenms.pyopenms_1


Cython signature: void searchModificationsByDiffMonoMass(libcpp_vector[String] & mods, double mass, double max_error, const String & residue, TermSpecificity term_spec)
Collects all modifications with delta mass inside a tolerance window




.. py:class:: MorpheusScore
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _MorpheusScore


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MorpheusScore.html




.. py:method:: MorpheusScore.compute
   :module: pyopenms.pyopenms_1


Cython signature: MorpheusScore_Result compute(double fragment_mass_tolerance, bool fragment_mass_tolerance_unit_ppm, const MSSpectrum & exp_spectrum, const MSSpectrum & theo_spectrum)
Returns Morpheus Score




.. py:class:: MorpheusScore_Result
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _MorpheusScore_Result


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MorpheusScore_Result.html




.. py:attribute:: MorpheusScore_Result.MIC
   :module: pyopenms.pyopenms_1




.. py:attribute:: MorpheusScore_Result.TIC
   :module: pyopenms.pyopenms_1




.. py:attribute:: MorpheusScore_Result.err
   :module: pyopenms.pyopenms_1




.. py:attribute:: MorpheusScore_Result.matches
   :module: pyopenms.pyopenms_1




.. py:attribute:: MorpheusScore_Result.n_peaks
   :module: pyopenms.pyopenms_1




.. py:attribute:: MorpheusScore_Result.score
   :module: pyopenms.pyopenms_1




.. py:class:: MultiplexDeltaMasses
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _MultiplexDeltaMasses


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MultiplexDeltaMasses.html


 Data structure for mass shift pattern
 -----
 Groups of labelled peptides appear with characteristic mass shifts
 -----
 For example, for an Arg6 labeled SILAC peptide pair we expect to see
 mass shifts of 0 and 6 Da. Or as second example, for a
 peptide pair of a dimethyl labelled sample with a single lysine
 we will see mass shifts of 56 Da and 64 Da.
 28 Da (N-term) + 28 Da (K) and 34 Da (N-term) + 34 Da (K)
 for light and heavy partners respectively
 -----
 The data structure stores the mass shifts and corresponding labels
 for a group of matching peptide features




.. py:method:: MultiplexDeltaMasses.getDeltaMasses
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[MultiplexDeltaMasses_DeltaMass] getDeltaMasses()




.. py:class:: MultiplexDeltaMasses_DeltaMass
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _MultiplexDeltaMasses_DeltaMass


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MultiplexDeltaMasses_DeltaMass.html




.. py:attribute:: MultiplexDeltaMasses_DeltaMass.delta_mass
   :module: pyopenms.pyopenms_1




.. py:class:: MzDataFile
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _MzDataFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MzDataFile.html
 -- Inherits from ['ProgressLogger']




.. py:method:: MzDataFile.endProgress
   :module: pyopenms.pyopenms_1


Cython signature: void endProgress()
Ends the progress display




.. py:method:: MzDataFile.getLogType
   :module: pyopenms.pyopenms_1


Cython signature: LogType getLogType()
Returns the type of progress log being used




.. py:method:: MzDataFile.getOptions
   :module: pyopenms.pyopenms_1


Cython signature: PeakFileOptions getOptions()
Returns the options for loading/storing




.. py:method:: MzDataFile.isSemanticallyValid
   :module: pyopenms.pyopenms_1


Cython signature: bool isSemanticallyValid(const String & filename, StringList & errors, StringList & warnings)


Checks if a file is valid with respect to the mapping file and the controlled vocabulary
-----
:param filename: File name of the file to be checked
:param errors: Errors during the validation are returned in this output parameter
:param warnings: Warnings during the validation are returned in this output parameter
-----
:raises:
  Exception: FileNotFound is thrown if the file could not be opened




.. py:method:: MzDataFile.load
   :module: pyopenms.pyopenms_1


Cython signature: void load(const String & filename, MSExperiment & map)


Loads a map from a MzData file
-----
:param filename: Directory of the file with the file name
:param map: It has to be a MSExperiment or have the same interface
-----
:raises:
  Exception: FileNotFound is thrown if the file could not be opened
:raises:
  Exception: ParseError is thrown if an error occurs during parsing




.. py:method:: MzDataFile.nextProgress
   :module: pyopenms.pyopenms_1


Cython signature: void nextProgress()
Increment progress by 1 (according to range begin-end)




.. py:method:: MzDataFile.setLogType
   :module: pyopenms.pyopenms_1


Cython signature: void setLogType(LogType)
Sets the progress log that should be used. The default type is NONE!




.. py:method:: MzDataFile.setOptions
   :module: pyopenms.pyopenms_1


Cython signature: void setOptions(PeakFileOptions)
Sets options for loading/storing




.. py:method:: MzDataFile.setProgress
   :module: pyopenms.pyopenms_1


Cython signature: void setProgress(ptrdiff_t value)
Sets the current progress




.. py:method:: MzDataFile.startProgress
   :module: pyopenms.pyopenms_1


Cython signature: void startProgress(ptrdiff_t begin, ptrdiff_t end, String label)




.. py:method:: MzDataFile.store
   :module: pyopenms.pyopenms_1


Cython signature: void store(const String & filename, MSExperiment & map)


Stores a map in a MzData file
-----
:param filename: Directory of the file with the file name
:param map: It has to be a MSExperiment or have the same interface
-----
:raises:
  Exception: UnableToCreateFile is thrown if the file could not be created




.. py:class:: MzMLSpectrumDecoder
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _MzMLSpectrumDecoder


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MzMLSpectrumDecoder.html


 A class to decode input strings that contain an mzML chromatogram or spectrum tag
 -----
 It uses xercesc to parse a string containing either a exactly one mzML
 spectrum or chromatogram (from <chromatogram> to </chromatogram> or
 <spectrum> to </spectrum> tag). It returns the data contained in the
 binaryDataArray for Intensity / mass-to-charge or Intensity / time




.. py:method:: MzMLSpectrumDecoder.domParseChromatogram
   :module: pyopenms.pyopenms_1


Cython signature: void domParseChromatogram(String in_, shared_ptr[_Interfaces_Chromatogram] & cptr)


Extract data from a string which contains a full mzML chromatogram
-----
Extracts data from the input string which is expected to contain exactly
one <chromatogram> tag (from <chromatogram> to </chromatogram>). This
function will extract the contained binaryDataArray and provide the
result as Chromatogram
-----
:param in: Input string containing the raw XML
:param cptr: Resulting chromatogram




.. py:method:: MzMLSpectrumDecoder.domParseSpectrum
   :module: pyopenms.pyopenms_1


Cython signature: void domParseSpectrum(String in_, shared_ptr[_Interfaces_Spectrum] & cptr)


Extract data from a string which contains a full mzML spectrum
-----
Extracts data from the input string which is expected to contain exactly
one <spectrum> tag (from <spectrum> to </spectrum>). This function will
extract the contained binaryDataArray and provide the result as Spectrum
-----
:param in: Input string containing the raw XML
:param cptr: Resulting spectrum




.. py:method:: MzMLSpectrumDecoder.setSkipXMLChecks
   :module: pyopenms.pyopenms_1


Cython signature: void setSkipXMLChecks(bool only)
Whether to skip some XML checks (e.g. removing whitespace inside base64 arrays) and be fast instead




.. py:class:: MzXMLFile
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _MzXMLFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MzXMLFile.html
 -- Inherits from ['ProgressLogger']




.. py:method:: MzXMLFile.endProgress
   :module: pyopenms.pyopenms_1


Cython signature: void endProgress()
Ends the progress display




.. py:method:: MzXMLFile.getLogType
   :module: pyopenms.pyopenms_1


Cython signature: LogType getLogType()
Returns the type of progress log being used




.. py:method:: MzXMLFile.getOptions
   :module: pyopenms.pyopenms_1


Cython signature: PeakFileOptions getOptions()
Returns the options for loading/storing




.. py:method:: MzXMLFile.load
   :module: pyopenms.pyopenms_1


Cython signature: void load(String filename, MSExperiment & exp)


Loads a MSExperiment from a MzXML file
-----
:param exp: MSExperiment




.. py:method:: MzXMLFile.nextProgress
   :module: pyopenms.pyopenms_1


Cython signature: void nextProgress()
Increment progress by 1 (according to range begin-end)




.. py:method:: MzXMLFile.setLogType
   :module: pyopenms.pyopenms_1


Cython signature: void setLogType(LogType)
Sets the progress log that should be used. The default type is NONE!




.. py:method:: MzXMLFile.setOptions
   :module: pyopenms.pyopenms_1


Cython signature: void setOptions(PeakFileOptions)
Sets options for loading/storing




.. py:method:: MzXMLFile.setProgress
   :module: pyopenms.pyopenms_1


Cython signature: void setProgress(ptrdiff_t value)
Sets the current progress




.. py:method:: MzXMLFile.startProgress
   :module: pyopenms.pyopenms_1


Cython signature: void startProgress(ptrdiff_t begin, ptrdiff_t end, String label)




.. py:method:: MzXMLFile.store
   :module: pyopenms.pyopenms_1


Cython signature: void store(String filename, MSExperiment & exp)


Stores a MSExperiment in a MzXML file
-----
:param exp: MSExperiment




.. py:method:: MzXMLFile.transform
   :module: pyopenms.pyopenms_1




.. py:class:: Normalizer
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _Normalizer


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1Normalizer.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: Normalizer.filterPeakMap
   :module: pyopenms.pyopenms_1


Cython signature: void filterPeakMap(MSExperiment & exp)
Normalizes the peak map




.. py:method:: Normalizer.filterPeakSpectrum
   :module: pyopenms.pyopenms_1


Cython signature: void filterPeakSpectrum(MSSpectrum & spec)
Normalizes the peak spectrum




.. py:method:: Normalizer.filterSpectrum
   :module: pyopenms.pyopenms_1


Cython signature: void filterSpectrum(MSSpectrum & spec)
Normalizes the spectrum




.. py:method:: Normalizer.getDefaults
   :module: pyopenms.pyopenms_1


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: Normalizer.getName
   :module: pyopenms.pyopenms_1


Cython signature: String getName()
Returns the name




.. py:method:: Normalizer.getParameters
   :module: pyopenms.pyopenms_1


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: Normalizer.getSubsections
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: Normalizer.setName
   :module: pyopenms.pyopenms_1


Cython signature: void setName(const String &)
Sets the name




.. py:method:: Normalizer.setParameters
   :module: pyopenms.pyopenms_1


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: OPXLDataStructs
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _OPXLDataStructs


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1OPXLDataStructs.html




.. py:attribute:: OPXLDataStructs.PeptidePosition
   :module: pyopenms.pyopenms_1


alias of :py:class:`pyopenms.pyopenms_1.__PeptidePosition`


.. py:attribute:: OPXLDataStructs.ProteinProteinCrossLinkType
   :module: pyopenms.pyopenms_1


alias of :py:class:`pyopenms.pyopenms_1.__ProteinProteinCrossLinkType`


.. py:class:: OpenPepXLAlgorithm
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _OpenPepXLAlgorithm


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1OpenPepXLAlgorithm.html
 -- Inherits from ['DefaultParamHandler']




.. py:attribute:: OpenPepXLAlgorithm.OpenPepXLAlgorithm_ExitCodes
   :module: pyopenms.pyopenms_1


alias of :py:class:`pyopenms.pyopenms_1.__OpenPepXLAlgorithm_ExitCodes`


.. py:method:: OpenPepXLAlgorithm.getDefaults
   :module: pyopenms.pyopenms_1


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: OpenPepXLAlgorithm.getName
   :module: pyopenms.pyopenms_1


Cython signature: String getName()
Returns the name




.. py:method:: OpenPepXLAlgorithm.getParameters
   :module: pyopenms.pyopenms_1


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: OpenPepXLAlgorithm.getSubsections
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: OpenPepXLAlgorithm.run
   :module: pyopenms.pyopenms_1


Cython signature: OpenPepXLAlgorithm_ExitCodes run(MSExperiment & unprocessed_spectra, ConsensusMap & cfeatures, libcpp_vector[FASTAEntry] & fasta_db, libcpp_vector[ProteinIdentification] & protein_ids, libcpp_vector[PeptideIdentification] & peptide_ids, OPXL_PreprocessedPairSpectra & preprocessed_pair_spectra, libcpp_vector[libcpp_pair[size_t,size_t]] & spectrum_pairs, libcpp_vector[libcpp_vector[CrossLinkSpectrumMatch]] & all_top_csms, MSExperiment & spectra)


Performs the main function of this class, the search for cross-linked peptides
-----
:param unprocessed_spectra: The input PeakMap of experimental spectra
:param cfeatures: The input cfeatures
:param fasta_db: The protein database containing targets and decoys
:param protein_ids: A result vector containing search settings. Should contain one PeptideIdentification
:param peptide_ids: A result vector containing cross-link spectrum matches as PeptideIdentifications and PeptideHits. Should be empty
:param preprocessed_pair_spectra: A result structure containing linear and cross-linked ion spectra. Will be overwritten. This is only necessary for writing out xQuest type spectrum files
:param spectrum_pairs: A result vector containing paired spectra indices. Should be empty. This is only necessary for writing out xQuest type spectrum files
:param all_top_csms: A result vector containing cross-link spectrum matches as CrossLinkSpectrumMatches. Should be empty. This is only necessary for writing out xQuest type spectrum files
:param spectra: A result vector containing the input spectra after preprocessing and filtering. Should be empty. This is only necessary for writing out xQuest type spectrum files




.. py:method:: OpenPepXLAlgorithm.setName
   :module: pyopenms.pyopenms_1


Cython signature: void setName(const String &)
Sets the name




.. py:method:: OpenPepXLAlgorithm.setParameters
   :module: pyopenms.pyopenms_1


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: OptimizationFunctions_PenaltyFactors
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _OptimizationFunctions_PenaltyFactors


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1OptimizationFunctions_PenaltyFactors.html




.. py:attribute:: OptimizationFunctions_PenaltyFactors.lWidth
   :module: pyopenms.pyopenms_1




.. py:attribute:: OptimizationFunctions_PenaltyFactors.pos
   :module: pyopenms.pyopenms_1




.. py:attribute:: OptimizationFunctions_PenaltyFactors.rWidth
   :module: pyopenms.pyopenms_1




.. py:class:: OptimizePick
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _OptimizePick


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1OptimizePick.html


 This class provides the non-linear optimization of the peak parameters
 -----
 Given a vector of peak shapes, this class optimizes all peak shapes parameters using a non-linear optimization
 For the non-linear optimization we use the Levenberg-Marquardt algorithm provided by the Eigen




.. py:method:: OptimizePick.getNumberIterations
   :module: pyopenms.pyopenms_1


Cython signature: unsigned int getNumberIterations()
Returns the number of iterations




.. py:method:: OptimizePick.getPenalties
   :module: pyopenms.pyopenms_1


Cython signature: OptimizationFunctions_PenaltyFactors getPenalties()
Returns the penalty factors




.. py:method:: OptimizePick.setNumberIterations
   :module: pyopenms.pyopenms_1


Cython signature: void setNumberIterations(int max_iteration)
Sets the number of iterations




.. py:method:: OptimizePick.setPenalties
   :module: pyopenms.pyopenms_1


Cython signature: void setPenalties(OptimizationFunctions_PenaltyFactors penalties)
Sets the penalty factors




.. py:class:: OptimizePick_Data
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _OptimizePick_Data


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1OptimizePick_Data.html




.. py:attribute:: OptimizePick_Data.positions
   :module: pyopenms.pyopenms_1




.. py:attribute:: OptimizePick_Data.signal
   :module: pyopenms.pyopenms_1




.. py:class:: PScore
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _PScore


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1PScore.html




.. py:method:: PScore.calculateIntensityRankInMZWindow
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[size_t] calculateIntensityRankInMZWindow(libcpp_vector[double] & mz, libcpp_vector[double] & intensities, double mz_window)


Calculate local (windowed) peak ranks
-----
The peak rank is defined as the number of neighboring peaks in +/- (mz_window/2) that have higher intensity
The result can be used to efficiently filter spectra for top 1..n peaks in mass windows
-----
:param mz: The m/z positions of the peaks
:param intensities: The intensities of the peaks
:param mz_window: The window in Thomson centered at each peak




.. py:method:: PScore.calculatePeakLevelSpectra
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_map[size_t,MSSpectrum] calculatePeakLevelSpectra(MSSpectrum & spec, libcpp_vector[size_t] & ranks, size_t min_level, size_t max_level)


Calculates spectra for peak level between min_level to max_level and stores them in the map
-----
A spectrum of peak level n retains the (n+1) top intensity peaks in a sliding mz_window centered at each peak




.. py:method:: PScore.calculateRankMap
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[libcpp_vector[size_t]] calculateRankMap(MSExperiment & peak_map, double mz_window)


Precalculated, windowed peak ranks for a whole experiment
-----
The peak rank is defined as the number of neighboring peaks in +/- (mz_window/2) that have higher intensity
-----
:param peak_map: Fragment spectra used for rank calculation. Typically a peak map after removal of all MS1 spectra
:param mz_window: Window in Thomson centered at each peak




.. py:method:: PScore.computePScore
   :module: pyopenms.pyopenms_1


         - Cython signature: double computePScore(double fragment_mass_tolerance, bool fragment_mass_tolerance_unit_ppm, libcpp_map[size_t,MSSpectrum] & peak_level_spectra, libcpp_vector[MSSpectrum] & theo_spectra, double mz_window)


Computes the PScore for a vector of theoretical spectra
-----
Similar to Andromeda, a vector of theoretical spectra can be provided that e.g. contain loss spectra or higher charge spectra depending on the sequence.
The best score obtained by scoring all those theoretical spectra against the experimental ones is returned
-----
:param fragment_mass_tolerance: Mass tolerance for matching peaks
:param fragment_mass_tolerance_unit_ppm: Whether Thomson or ppm is used
:param peak_level_spectra: Spectra for different peak levels (=filtered by maximum rank).
:param theo_spectra: Theoretical spectra as obtained e.g. from TheoreticalSpectrumGenerator
:param mz_window: Window in Thomson centered at each peak
         - Cython signature: double computePScore(double fragment_mass_tolerance, bool fragment_mass_tolerance_unit_ppm, libcpp_map[size_t,MSSpectrum] & peak_level_spectra, MSSpectrum & theo_spectrum, double mz_window)


Computes the PScore for a single theoretical spectrum
-----
:param fragment_mass_tolerance: Mass tolerance for matching peaks
:param fragment_mass_tolerance_unit_ppm: Whether Thomson or ppm is used
:param peak_level_spectra: Spectra for different peak levels (=filtered by maximum rank)
:param theo_spectra: Theoretical spectra as obtained e.g. from TheoreticalSpectrumGenerator
:param mz_window: Window in Thomson centered at each peak




.. py:class:: ParamNode
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _ParamNode


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::Param_1_1ParamNode.html




.. py:attribute:: ParamNode.description
   :module: pyopenms.pyopenms_1




.. py:attribute:: ParamNode.entries
   :module: pyopenms.pyopenms_1




.. py:method:: ParamNode.findEntryRecursive
   :module: pyopenms.pyopenms_1


Cython signature: ParamEntry * findEntryRecursive(const String & name)




.. py:method:: ParamNode.findParentOf
   :module: pyopenms.pyopenms_1


Cython signature: ParamNode * findParentOf(const String & name)




.. py:method:: ParamNode.insert
   :module: pyopenms.pyopenms_1


- Cython signature: void insert(ParamNode & node, const String & prefix)
- Cython signature: void insert(ParamEntry & entry, const String & prefix)




.. py:attribute:: ParamNode.name
   :module: pyopenms.pyopenms_1




.. py:attribute:: ParamNode.nodes
   :module: pyopenms.pyopenms_1




.. py:method:: ParamNode.size
   :module: pyopenms.pyopenms_1


Cython signature: size_t size()




.. py:method:: ParamNode.suffix
   :module: pyopenms.pyopenms_1


Cython signature: String suffix(const String & key)




.. py:class:: ParamXMLFile
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _ParamXMLFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ParamXMLFile.html


 The file pendant of the Param class used to load and store the param
 datastructure as paramXML




.. py:method:: ParamXMLFile.load
   :module: pyopenms.pyopenms_1


Cython signature: void load(String, Param &)


Read XML file
-----
:param filename: The file from where to read the Param object
:param param: The param object where the read data should be stored
:raises:
  Exception: FileNotFound is thrown if the file could not be found
:raises:
  Exception: ParseError is thrown if an error occurs during parsing




.. py:method:: ParamXMLFile.store
   :module: pyopenms.pyopenms_1


Cython signature: void store(String, Param &)


Write XML file
-----
:param filename: The filename where the param data structure should be stored
:param param: The Param class that should be stored in the file




.. py:class:: PeakBoundary
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _PeakBoundary


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1PeakBoundary.html




.. py:attribute:: PeakBoundary.mz_max
   :module: pyopenms.pyopenms_1




.. py:attribute:: PeakBoundary.mz_min
   :module: pyopenms.pyopenms_1




.. py:attribute:: PeakMap
   :module: pyopenms.pyopenms_1


alias of :py:class:`pyopenms.pyopenms_1.MSExperiment`


.. py:class:: PeakPickerHiRes
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _PeakPickerHiRes


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1PeakPickerHiRes.html
 -- Inherits from ['DefaultParamHandler', 'ProgressLogger']




.. py:method:: PeakPickerHiRes.endProgress
   :module: pyopenms.pyopenms_1


Cython signature: void endProgress()
Ends the progress display




.. py:method:: PeakPickerHiRes.getDefaults
   :module: pyopenms.pyopenms_1


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: PeakPickerHiRes.getLogType
   :module: pyopenms.pyopenms_1


Cython signature: LogType getLogType()
Returns the type of progress log being used




.. py:method:: PeakPickerHiRes.getName
   :module: pyopenms.pyopenms_1


Cython signature: String getName()
Returns the name




.. py:method:: PeakPickerHiRes.getParameters
   :module: pyopenms.pyopenms_1


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: PeakPickerHiRes.getSubsections
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: PeakPickerHiRes.nextProgress
   :module: pyopenms.pyopenms_1


Cython signature: void nextProgress()
Increment progress by 1 (according to range begin-end)




.. py:method:: PeakPickerHiRes.pick
   :module: pyopenms.pyopenms_1


- Cython signature: void pick(MSSpectrum & input, MSSpectrum & output)
- Cython signature: void pick(MSChromatogram & input, MSChromatogram & output)




.. py:method:: PeakPickerHiRes.pickExperiment
   :module: pyopenms.pyopenms_1


         - Cython signature: void pickExperiment(MSExperiment & input, MSExperiment & output, bool check_spectrum_type)


Applies the peak-picking algorithm to a map (MSExperiment). This
method picks peaks for each scan in the map consecutively. The resulting
picked peaks are written to the output map
-----
:param input: Input map in profile mode
:param output: Output map with picked peaks
:param check_spectrum_type: If set, checks spectrum type and throws an exception if a centroided spectrum is passed
         - Cython signature: void pickExperiment(MSExperiment & input, MSExperiment & output, libcpp_vector[libcpp_vector[PeakBoundary]] & boundaries_spec, libcpp_vector[libcpp_vector[PeakBoundary]] & boundaries_chrom, bool check_spectrum_type)




.. py:method:: PeakPickerHiRes.setLogType
   :module: pyopenms.pyopenms_1


Cython signature: void setLogType(LogType)
Sets the progress log that should be used. The default type is NONE!




.. py:method:: PeakPickerHiRes.setName
   :module: pyopenms.pyopenms_1


Cython signature: void setName(const String &)
Sets the name




.. py:method:: PeakPickerHiRes.setParameters
   :module: pyopenms.pyopenms_1


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: PeakPickerHiRes.setProgress
   :module: pyopenms.pyopenms_1


Cython signature: void setProgress(ptrdiff_t value)
Sets the current progress




.. py:method:: PeakPickerHiRes.startProgress
   :module: pyopenms.pyopenms_1


Cython signature: void startProgress(ptrdiff_t begin, ptrdiff_t end, String label)




.. py:class:: PeakPickerSH
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _PeakPickerSH


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1PeakPickerSH.html
 -- Inherits from ['DefaultParamHandler', 'ProgressLogger']




.. py:method:: PeakPickerSH.endProgress
   :module: pyopenms.pyopenms_1


Cython signature: void endProgress()
Ends the progress display




.. py:method:: PeakPickerSH.getDefaults
   :module: pyopenms.pyopenms_1


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: PeakPickerSH.getLogType
   :module: pyopenms.pyopenms_1


Cython signature: LogType getLogType()
Returns the type of progress log being used




.. py:method:: PeakPickerSH.getName
   :module: pyopenms.pyopenms_1


Cython signature: String getName()
Returns the name




.. py:method:: PeakPickerSH.getParameters
   :module: pyopenms.pyopenms_1


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: PeakPickerSH.getSubsections
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: PeakPickerSH.nextProgress
   :module: pyopenms.pyopenms_1


Cython signature: void nextProgress()
Increment progress by 1 (according to range begin-end)




.. py:method:: PeakPickerSH.pick
   :module: pyopenms.pyopenms_1


Cython signature: void pick(MSSpectrum & input_, MSSpectrum & output, float fWindowWidth)
Applies the peak-picking algorithm to one spectrum




.. py:method:: PeakPickerSH.pickExperiment
   :module: pyopenms.pyopenms_1


Cython signature: void pickExperiment(MSExperiment & input_, MSExperiment & output)
Applies the peak-picking algorithm to a map (MSExperiment)




.. py:method:: PeakPickerSH.setLogType
   :module: pyopenms.pyopenms_1


Cython signature: void setLogType(LogType)
Sets the progress log that should be used. The default type is NONE!




.. py:method:: PeakPickerSH.setName
   :module: pyopenms.pyopenms_1


Cython signature: void setName(const String &)
Sets the name




.. py:method:: PeakPickerSH.setParameters
   :module: pyopenms.pyopenms_1


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: PeakPickerSH.setProgress
   :module: pyopenms.pyopenms_1


Cython signature: void setProgress(ptrdiff_t value)
Sets the current progress




.. py:method:: PeakPickerSH.startProgress
   :module: pyopenms.pyopenms_1


Cython signature: void startProgress(ptrdiff_t begin, ptrdiff_t end, String label)




.. py:class:: PeptideHit
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _PeptideHit


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1PeptideHit.html
 -- Inherits from ['MetaInfoInterface']




.. py:method:: PeptideHit.addAnalysisResults
   :module: pyopenms.pyopenms_1


Cython signature: void addAnalysisResults(PeptideHit_AnalysisResult aresult)
Add information on (search engine) sub scores associated with this PSM




.. py:method:: PeptideHit.addPeptideEvidence
   :module: pyopenms.pyopenms_1


Cython signature: void addPeptideEvidence(PeptideEvidence)
Adds information on a peptide that is (potentially) identified by this PSM




.. py:method:: PeptideHit.clearMetaInfo
   :module: pyopenms.pyopenms_1


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: PeptideHit.extractProteinAccessionsSet
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_set[String] extractProteinAccessionsSet()
Extracts the set of non-empty protein accessions from peptide evidences




.. py:method:: PeptideHit.getAnalysisResults
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[PeptideHit_AnalysisResult] getAnalysisResults()
Returns information on (search engine) sub scores associated with this PSM




.. py:method:: PeptideHit.getCharge
   :module: pyopenms.pyopenms_1


Cython signature: int getCharge()
Returns the charge of the peptide




.. py:method:: PeptideHit.getKeys
   :module: pyopenms.pyopenms_1


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: PeptideHit.getMetaValue
   :module: pyopenms.pyopenms_1


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: PeptideHit.getPeakAnnotations
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[PeptideHit_PeakAnnotation] getPeakAnnotations()
Returns the fragment annotations




.. py:method:: PeptideHit.getPeptideEvidences
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[PeptideEvidence] getPeptideEvidences()
Returns information on peptides (potentially) identified by this PSM




.. py:method:: PeptideHit.getRank
   :module: pyopenms.pyopenms_1


Cython signature: unsigned int getRank()
Returns the PSM rank




.. py:method:: PeptideHit.getScore
   :module: pyopenms.pyopenms_1


Cython signature: float getScore()
Returns the PSM score




.. py:method:: PeptideHit.getSequence
   :module: pyopenms.pyopenms_1


Cython signature: AASequence getSequence()
Returns the peptide sequence without trailing or following spaces




.. py:method:: PeptideHit.isMetaEmpty
   :module: pyopenms.pyopenms_1


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: PeptideHit.metaRegistry
   :module: pyopenms.pyopenms_1


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: PeptideHit.metaValueExists
   :module: pyopenms.pyopenms_1


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: PeptideHit.removeMetaValue
   :module: pyopenms.pyopenms_1


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: PeptideHit.setAnalysisResults
   :module: pyopenms.pyopenms_1


Cython signature: void setAnalysisResults(libcpp_vector[PeptideHit_AnalysisResult] aresult)
Sets information on (search engine) sub scores associated with this PSM




.. py:method:: PeptideHit.setCharge
   :module: pyopenms.pyopenms_1


Cython signature: void setCharge(int)
Sets the charge of the peptide




.. py:method:: PeptideHit.setMetaValue
   :module: pyopenms.pyopenms_1


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:method:: PeptideHit.setPeakAnnotations
   :module: pyopenms.pyopenms_1


Cython signature: void setPeakAnnotations(libcpp_vector[PeptideHit_PeakAnnotation])
Sets the fragment annotations




.. py:method:: PeptideHit.setPeptideEvidences
   :module: pyopenms.pyopenms_1


Cython signature: void setPeptideEvidences(libcpp_vector[PeptideEvidence])
Sets information on peptides (potentially) identified by this PSM




.. py:method:: PeptideHit.setRank
   :module: pyopenms.pyopenms_1


Cython signature: void setRank(unsigned int)
Sets the PSM rank




.. py:method:: PeptideHit.setScore
   :module: pyopenms.pyopenms_1


Cython signature: void setScore(double)
Sets the PSM score




.. py:method:: PeptideHit.setSequence
   :module: pyopenms.pyopenms_1


Cython signature: void setSequence(AASequence)
Sets the peptide sequence




.. py:class:: PeptideHit_AnalysisResult
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _PeptideHit_AnalysisResult


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1PeptideHit_AnalysisResult.html




.. py:attribute:: PeptideHit_AnalysisResult.higher_is_better
   :module: pyopenms.pyopenms_1




.. py:attribute:: PeptideHit_AnalysisResult.main_score
   :module: pyopenms.pyopenms_1




.. py:attribute:: PeptideHit_AnalysisResult.score_type
   :module: pyopenms.pyopenms_1




.. py:attribute:: PeptideHit_AnalysisResult.sub_scores
   :module: pyopenms.pyopenms_1




.. py:class:: PeptideHit_PeakAnnotation
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _PeptideHit_PeakAnnotation


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1PeptideHit_PeakAnnotation.html




.. py:attribute:: PeptideHit_PeakAnnotation.annotation
   :module: pyopenms.pyopenms_1




.. py:attribute:: PeptideHit_PeakAnnotation.charge
   :module: pyopenms.pyopenms_1




.. py:attribute:: PeptideHit_PeakAnnotation.intensity
   :module: pyopenms.pyopenms_1




.. py:attribute:: PeptideHit_PeakAnnotation.mz
   :module: pyopenms.pyopenms_1




.. py:method:: PeptideHit_PeakAnnotation.writePeakAnnotationsString_
   :module: pyopenms.pyopenms_1


Cython signature: void writePeakAnnotationsString_(String & annotation_string, libcpp_vector[PeptideHit_PeakAnnotation] annotations)




.. py:class:: PercolatorFeatureSetHelper
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _PercolatorFeatureSetHelper


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1PercolatorFeatureSetHelper.html


 Percolator feature set and integration helper
 -----
 This class contains functions to handle (compute, aggregate, integrate)
 Percolator features. This includes the calculation or extraction of
 Percolator features depending on the search engine(s) for later use with
 PercolatorAdapter. It also includes handling the reintegration of the
 percolator result into the set of Identifications




.. py:method:: PercolatorFeatureSetHelper.addCOMETFeatures
   :module: pyopenms.pyopenms_1


Cython signature: void addCOMETFeatures(libcpp_vector[PeptideIdentification] & peptide_ids, StringList & feature_set)


Creates and adds Comet specific Percolator features and registers them in feature_set
-----
:param peptide_ids: PeptideIdentification vector to create Percolator features in
:param feature_set: Register of added features




.. py:method:: PercolatorFeatureSetHelper.addCONCATSEFeatures
   :module: pyopenms.pyopenms_1


Cython signature: void addCONCATSEFeatures(libcpp_vector[PeptideIdentification] & peptide_id_list, StringList & search_engines_used, StringList & feature_set)


Adds multiple search engine specific Percolator features and registers them in feature_set
-----
This struct can be used to store both peak or feature indices
:param peptide_ids: PeptideIdentification vector to create Percolator features in
:param search_engines_used: The list of search engines to be considered
:param feature_set: Register of added features




.. py:method:: PercolatorFeatureSetHelper.addMASCOTFeatures
   :module: pyopenms.pyopenms_1


Cython signature: void addMASCOTFeatures(libcpp_vector[PeptideIdentification] & peptide_ids, StringList & feature_set)


Creates and adds Mascot specific Percolator features and registers them in feature_set
-----
:param peptide_ids: PeptideIdentification vector to create Percolator features in
:param feature_set: Register of added features




.. py:method:: PercolatorFeatureSetHelper.addMSGFFeatures
   :module: pyopenms.pyopenms_1


Cython signature: void addMSGFFeatures(libcpp_vector[PeptideIdentification] & peptide_ids, StringList & feature_set)


Creates and adds MSGF+ specific Percolator features and registers them in feature_set. MSGF+ should be run with the addFeatures flag enabled
-----
:param peptide_ids: PeptideIdentification vector to create Percolator features in
:param feature_set: Register of added features




.. py:method:: PercolatorFeatureSetHelper.addMULTISEFeatures
   :module: pyopenms.pyopenms_1


Cython signature: void addMULTISEFeatures(libcpp_vector[PeptideIdentification] & peptide_ids, StringList & search_engines_used, StringList & feature_set, bool complete_only, bool limits_imputation)


Adds multiple search engine specific Percolator features and registers them in feature_set
-----
:param peptide_ids: PeptideIdentification vector to create Percolator features in
:param search_engines_used: The list of search engines to be considered
:param feature_set: Register of added features
:param complete_only: Will only add features for PeptideIdentifications where all given search engines identified something
:param limits_imputation




.. py:method:: PercolatorFeatureSetHelper.addXTANDEMFeatures
   :module: pyopenms.pyopenms_1


Cython signature: void addXTANDEMFeatures(libcpp_vector[PeptideIdentification] & peptide_ids, StringList & feature_set)


Creates and adds X!Tandem specific Percolator features and registers them in feature_set
-----
:param peptide_ids: PeptideIdentification vector to create Percolator features in
:param feature_set: Register of added features




.. py:method:: PercolatorFeatureSetHelper.checkExtraFeatures
   :module: pyopenms.pyopenms_1


Cython signature: void checkExtraFeatures(libcpp_vector[PeptideHit] & psms, StringList & extra_features)


Checks and removes requested extra Percolator features that are actually unavailable (to compute)
-----
:param psms: The vector of PeptideHit to be checked
:param extra_features: The list of requested extra features




.. py:method:: PercolatorFeatureSetHelper.concatMULTISEPeptideIds
   :module: pyopenms.pyopenms_1


Cython signature: void concatMULTISEPeptideIds(libcpp_vector[PeptideIdentification] & all_peptide_ids, libcpp_vector[PeptideIdentification] & new_peptide_ids, String search_engine)


Appends a vector of PeptideIdentification to another and prepares Percolator features in MetaInfo (With the respective key "CONCAT:" + search_engine)
-----
:param all_peptide_ids: PeptideIdentification vector to append to
:param new_peptide_ids: PeptideIdentification vector to be appended
:param search_engine: Search engine to depend on for feature creation




.. py:method:: PercolatorFeatureSetHelper.mergeMULTISEPeptideIds
   :module: pyopenms.pyopenms_1


Cython signature: void mergeMULTISEPeptideIds(libcpp_vector[PeptideIdentification] & all_peptide_ids, libcpp_vector[PeptideIdentification] & new_peptide_ids, String search_engine)


Merges a vector of PeptideIdentification into another and prepares the merged MetaInfo and scores for collection in addMULTISEFeatures for feature registration
-----
:param all_peptide_idsL: PeptideIdentification vector to be merged into
:param new_peptide_idsL: PeptideIdentification vector to merge
:param search_engineL: Search engine to create features from their scores




.. py:method:: PercolatorFeatureSetHelper.mergeMULTISEProteinIds
   :module: pyopenms.pyopenms_1


Cython signature: void mergeMULTISEProteinIds(libcpp_vector[ProteinIdentification] & all_protein_ids, libcpp_vector[ProteinIdentification] & new_protein_ids)


Concatenates SearchParameter of multiple search engine runs and merges PeptideEvidences, collects used search engines in MetaInfo for collection in addMULTISEFeatures for feature registration
-----
:param all_protein_ids: ProteinIdentification vector to be merged into
:param new_protein_ids: ProteinIdentification vector to merge




.. py:class:: Precursor
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _Precursor


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1Precursor.html
 -- Inherits from ['Peak1D', 'CVTermList']




.. py:method:: Precursor.addCVTerm
   :module: pyopenms.pyopenms_1


Cython signature: void addCVTerm(CVTerm & term)
Adds a CV term




.. py:method:: Precursor.clearMetaInfo
   :module: pyopenms.pyopenms_1


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: Precursor.consumeCVTerms
   :module: pyopenms.pyopenms_1


Cython signature: void consumeCVTerms(Map[String,libcpp_vector[CVTerm]] cv_term_map)
Merges the given map into the member map, no duplicate checking




.. py:method:: Precursor.empty
   :module: pyopenms.pyopenms_1


Cython signature: bool empty()




.. py:method:: Precursor.getActivationEnergy
   :module: pyopenms.pyopenms_1


Cython signature: double getActivationEnergy()
Returns the activation energy (in electronvolt)




.. py:method:: Precursor.getActivationMethods
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_set[ActivationMethod] getActivationMethods()
Returns the activation methods




.. py:method:: Precursor.getCVTerms
   :module: pyopenms.pyopenms_1


Cython signature: Map[String,libcpp_vector[CVTerm]] getCVTerms()
Returns the accession string of the term




.. py:method:: Precursor.getCharge
   :module: pyopenms.pyopenms_1


Cython signature: int getCharge()
Returns the charge




.. py:method:: Precursor.getDriftTime
   :module: pyopenms.pyopenms_1


Cython signature: double getDriftTime()
Returns the ion mobility drift time in milliseconds (-1 means it is not set)




.. py:method:: Precursor.getDriftTimeWindowLowerOffset
   :module: pyopenms.pyopenms_1


Cython signature: double getDriftTimeWindowLowerOffset()
Returns the lower offset from the target ion mobility in milliseconds




.. py:method:: Precursor.getDriftTimeWindowUpperOffset
   :module: pyopenms.pyopenms_1


Cython signature: double getDriftTimeWindowUpperOffset()
Returns the upper offset from the target ion mobility in milliseconds




.. py:method:: Precursor.getIntensity
   :module: pyopenms.pyopenms_1


Cython signature: float getIntensity()




.. py:method:: Precursor.getIsolationWindowLowerOffset
   :module: pyopenms.pyopenms_1


Cython signature: double getIsolationWindowLowerOffset()
Returns the lower offset from the target m/z




.. py:method:: Precursor.getIsolationWindowUpperOffset
   :module: pyopenms.pyopenms_1


Cython signature: double getIsolationWindowUpperOffset()
Returns the upper offset from the target m/z




.. py:method:: Precursor.getKeys
   :module: pyopenms.pyopenms_1


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: Precursor.getMZ
   :module: pyopenms.pyopenms_1


Cython signature: double getMZ()




.. py:method:: Precursor.getMetaValue
   :module: pyopenms.pyopenms_1


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: Precursor.getPos
   :module: pyopenms.pyopenms_1


Cython signature: double getPos()




.. py:method:: Precursor.getPossibleChargeStates
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[int] getPossibleChargeStates()
Returns the possible charge states




.. py:method:: Precursor.getUnchargedMass
   :module: pyopenms.pyopenms_1


Cython signature: double getUnchargedMass()
Returns the uncharged mass of the precursor, if charge is unknown, i.e. 0 best guess is its doubly charged




.. py:method:: Precursor.hasCVTerm
   :module: pyopenms.pyopenms_1


Cython signature: bool hasCVTerm(String accession)




.. py:method:: Precursor.isMetaEmpty
   :module: pyopenms.pyopenms_1


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: Precursor.metaRegistry
   :module: pyopenms.pyopenms_1


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: Precursor.metaValueExists
   :module: pyopenms.pyopenms_1


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: Precursor.removeMetaValue
   :module: pyopenms.pyopenms_1


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: Precursor.replaceCVTerm
   :module: pyopenms.pyopenms_1


Cython signature: void replaceCVTerm(CVTerm & term)
Replaces the specified CV term




.. py:method:: Precursor.replaceCVTerms
   :module: pyopenms.pyopenms_1


Cython signature: void replaceCVTerms(libcpp_vector[CVTerm] cv_terms, String accession)




.. py:method:: Precursor.setActivationEnergy
   :module: pyopenms.pyopenms_1


Cython signature: void setActivationEnergy(double activation_energy)
Sets the activation energy (in electronvolt)




.. py:method:: Precursor.setActivationMethods
   :module: pyopenms.pyopenms_1


Cython signature: void setActivationMethods(libcpp_set[ActivationMethod] activation_methods)
Sets the activation methods




.. py:method:: Precursor.setCVTerms
   :module: pyopenms.pyopenms_1


Cython signature: void setCVTerms(libcpp_vector[CVTerm] & terms)
Sets the CV terms




.. py:method:: Precursor.setCharge
   :module: pyopenms.pyopenms_1


Cython signature: void setCharge(int charge)
Sets the charge




.. py:method:: Precursor.setDriftTime
   :module: pyopenms.pyopenms_1


Cython signature: void setDriftTime(double drift_time)
Sets the ion mobility drift time in milliseconds




.. py:method:: Precursor.setDriftTimeWindowLowerOffset
   :module: pyopenms.pyopenms_1


Cython signature: void setDriftTimeWindowLowerOffset(double drift_time)
Sets the lower offset from the target ion mobility




.. py:method:: Precursor.setDriftTimeWindowUpperOffset
   :module: pyopenms.pyopenms_1


Cython signature: void setDriftTimeWindowUpperOffset(double drift_time)
Sets the upper offset from the target ion mobility




.. py:method:: Precursor.setIntensity
   :module: pyopenms.pyopenms_1


Cython signature: void setIntensity(float)




.. py:method:: Precursor.setIsolationWindowLowerOffset
   :module: pyopenms.pyopenms_1


Cython signature: void setIsolationWindowLowerOffset(double bound)
Sets the lower offset from the target m/z




.. py:method:: Precursor.setIsolationWindowUpperOffset
   :module: pyopenms.pyopenms_1


Cython signature: void setIsolationWindowUpperOffset(double bound)
Sets the upper offset from the target m/z




.. py:method:: Precursor.setMZ
   :module: pyopenms.pyopenms_1


Cython signature: void setMZ(double)




.. py:method:: Precursor.setMetaValue
   :module: pyopenms.pyopenms_1


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:method:: Precursor.setPos
   :module: pyopenms.pyopenms_1


Cython signature: void setPos(double pos)




.. py:method:: Precursor.setPossibleChargeStates
   :module: pyopenms.pyopenms_1


Cython signature: void setPossibleChargeStates(libcpp_vector[int] possible_charge_states)
Sets the possible charge states




.. py:class:: ProcessingAction
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`




.. py:attribute:: ProcessingAction.ALIGNMENT
   :module: pyopenms.pyopenms_1
   :value: 8




.. py:attribute:: ProcessingAction.BASELINE_REDUCTION
   :module: pyopenms.pyopenms_1
   :value: 6




.. py:attribute:: ProcessingAction.CALIBRATION
   :module: pyopenms.pyopenms_1
   :value: 9




.. py:attribute:: ProcessingAction.CHARGE_CALCULATION
   :module: pyopenms.pyopenms_1
   :value: 4




.. py:attribute:: ProcessingAction.CHARGE_DECONVOLUTION
   :module: pyopenms.pyopenms_1
   :value: 1




.. py:attribute:: ProcessingAction.CONVERSION_DTA
   :module: pyopenms.pyopenms_1
   :value: 19




.. py:attribute:: ProcessingAction.CONVERSION_MZDATA
   :module: pyopenms.pyopenms_1
   :value: 16




.. py:attribute:: ProcessingAction.CONVERSION_MZML
   :module: pyopenms.pyopenms_1
   :value: 17




.. py:attribute:: ProcessingAction.CONVERSION_MZXML
   :module: pyopenms.pyopenms_1
   :value: 18




.. py:attribute:: ProcessingAction.DATA_PROCESSING
   :module: pyopenms.pyopenms_1
   :value: 0




.. py:attribute:: ProcessingAction.DEISOTOPING
   :module: pyopenms.pyopenms_1
   :value: 2




.. py:attribute:: ProcessingAction.FEATURE_GROUPING
   :module: pyopenms.pyopenms_1
   :value: 13




.. py:attribute:: ProcessingAction.FILTERING
   :module: pyopenms.pyopenms_1
   :value: 11




.. py:attribute:: ProcessingAction.FORMAT_CONVERSION
   :module: pyopenms.pyopenms_1
   :value: 15




.. py:attribute:: ProcessingAction.IDENTIFICATION_MAPPING
   :module: pyopenms.pyopenms_1
   :value: 14




.. py:attribute:: ProcessingAction.NORMALIZATION
   :module: pyopenms.pyopenms_1
   :value: 10




.. py:attribute:: ProcessingAction.PEAK_PICKING
   :module: pyopenms.pyopenms_1
   :value: 7




.. py:attribute:: ProcessingAction.PRECURSOR_RECALCULATION
   :module: pyopenms.pyopenms_1
   :value: 5




.. py:attribute:: ProcessingAction.QUANTITATION
   :module: pyopenms.pyopenms_1
   :value: 12




.. py:attribute:: ProcessingAction.SIZE_OF_PROCESSINGACTION
   :module: pyopenms.pyopenms_1
   :value: 20




.. py:attribute:: ProcessingAction.SMOOTHING
   :module: pyopenms.pyopenms_1
   :value: 3




.. py:method:: ProcessingAction.getMapping
   :module: pyopenms.pyopenms_1




.. py:class:: ProtonDistributionModel
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _ProtonDistributionModel


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ProtonDistributionModel.html
 -- Inherits from ['DefaultParamHandler']


 A proton distribution model to calculate the proton distribution over charged peptides
 -----
 The model uses proton affinity values of backbone nitrogens and sidechains to calculate the
 proton distribution of charged peptide among these sites. The possible sites are the peptide
 bonds between the amino acids, the side chains and the C-terminus and N-terminus. The calculation
 is done calculating a Boltzmann distribution of the sites
 -----
 Details and the proton affinities can be found in
 Z. Zhang, Prediction of Low-Energy Collision-Induced Dissociation Spectra of Peptides,
 Anal. Chem., 76 (14), 3908 - 3922, 2004
 -----
 A proton distribution can be calculated using the getProtonDistribution method. The backbone
 probabilities are reported in the first parameter (index 0 for the N-terminus, index 1 for the
 first peptide bond...), the site chain probabilities are reported in the second parameter
 (index 0, for the first amino acid...). The peptide and the number of protons as well as type
 of peptide (can be Reside::YIon for peptides and y-ions and any other ion type)
 -----
 Charge state intensities of differently charged equal (e.g. y7+ and y7++) ions can be calculated
 using the getChargeStateIntensities function




.. py:attribute:: ProtonDistributionModel.FragmentationType
   :module: pyopenms.pyopenms_1


alias of :py:class:`pyopenms.pyopenms_1.__FragmentationType`


.. py:method:: ProtonDistributionModel.getChargeStateIntensities
   :module: pyopenms.pyopenms_1


Cython signature: void getChargeStateIntensities(AASequence & peptide, AASequence & n_term_ion, AASequence & c_term_ion, int charge, ResidueType n_term_type, libcpp_vector[double] & n_term_intensities, libcpp_vector[double] & c_term_intensities, FragmentationType type_)


Calculates the charge state intensities of different charge states of the same ion
-----
:param peptide: The peptide
:param n_term_ion: The prefix ion sequence
:param c_term_ion: The suffix ion sequence
:param charge: The charge
:param n_term_type: The ion type of the N-terminal ion; valid values are Residue::AIon, Residue::BIon
:param n_term_intensities: The probability of seeing a charged prefix ions (first index corresponds to ion of charge 1)
:param c_term_intensities: The probability of seeing a charged suffix ions (first index corresponds to ion of charge 2)
:param type: The type of fragmentation (charge-directed, charge-remote of side chain)




.. py:method:: ProtonDistributionModel.getDefaults
   :module: pyopenms.pyopenms_1


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: ProtonDistributionModel.getName
   :module: pyopenms.pyopenms_1


Cython signature: String getName()
Returns the name




.. py:method:: ProtonDistributionModel.getParameters
   :module: pyopenms.pyopenms_1


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: ProtonDistributionModel.getProtonDistribution
   :module: pyopenms.pyopenms_1


Cython signature: void getProtonDistribution(libcpp_vector[double] & bb_charges, libcpp_vector[double] & sc_charges, AASequence & peptide, int charge, ResidueType res_type)


Calculates a proton distribution of the given charged peptide
-----
:param bb_charges: The calculated probabilities of the backbone sites (including N-terminus and C-terminus)
:param sc_charges: The calculated probabilities of the side chain sites
:param peptide The peptide
:param charge The charge
:param res_type: The type of the ion given in peptide. Peptides are handled as y-ions, i.e. Residue::YIon




.. py:method:: ProtonDistributionModel.getSubsections
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: ProtonDistributionModel.setName
   :module: pyopenms.pyopenms_1


Cython signature: void setName(const String &)
Sets the name




.. py:method:: ProtonDistributionModel.setParameters
   :module: pyopenms.pyopenms_1


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: ProtonDistributionModel.setPeptideProtonDistribution
   :module: pyopenms.pyopenms_1


Cython signature: void setPeptideProtonDistribution(libcpp_vector[double] & bb_charge, libcpp_vector[double] & sc_charge)




.. py:class:: QcMLFile
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _QcMLFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1QcMLFile.html
 -- Inherits from ['XMLHandler', 'XMLFile', 'ProgressLogger']




.. py:method:: QcMLFile.addRunAttachment
   :module: pyopenms.pyopenms_1


Cython signature: void addRunAttachment(String r, Attachment at)
Adds a attachment to run by the name r




.. py:method:: QcMLFile.addRunQualityParameter
   :module: pyopenms.pyopenms_1


Cython signature: void addRunQualityParameter(String r, QualityParameter qp)
Adds a QualityParameter to run by the name r




.. py:method:: QcMLFile.addSetAttachment
   :module: pyopenms.pyopenms_1


Cython signature: void addSetAttachment(String r, Attachment at)
Adds a attachment to set by the name r




.. py:method:: QcMLFile.addSetQualityParameter
   :module: pyopenms.pyopenms_1


Cython signature: void addSetQualityParameter(String r, QualityParameter qp)
Adds a QualityParameter to set by the name r




.. py:method:: QcMLFile.collectSetParameter
   :module: pyopenms.pyopenms_1


Cython signature: void collectSetParameter(String setname, String qp, libcpp_vector[String] & ret)
Collects the values of given QPs (as CVid) of the given set




.. py:method:: QcMLFile.endProgress
   :module: pyopenms.pyopenms_1


Cython signature: void endProgress()
Ends the progress display




.. py:method:: QcMLFile.error
   :module: pyopenms.pyopenms_1


Cython signature: void error(ActionMode mode, const String & msg, unsigned int line, unsigned int column)




.. py:method:: QcMLFile.errorString
   :module: pyopenms.pyopenms_1


Cython signature: String errorString()




.. py:method:: QcMLFile.existsRun
   :module: pyopenms.pyopenms_1


Cython signature: bool existsRun(String filename)
Returns true if the given run id is present in this file, if checkname is true it also checks the names




.. py:method:: QcMLFile.existsRunQualityParameter
   :module: pyopenms.pyopenms_1


Cython signature: void existsRunQualityParameter(String filename, String qpname, libcpp_vector[String] & ids)
Returns the ids of the parameter name given if found in given run empty else




.. py:method:: QcMLFile.existsSet
   :module: pyopenms.pyopenms_1


Cython signature: bool existsSet(String filename)
Returns true if the given set id is present in this file, if checkname is true it also checks the names




.. py:method:: QcMLFile.existsSetQualityParameter
   :module: pyopenms.pyopenms_1


Cython signature: void existsSetQualityParameter(String filename, String qpname, libcpp_vector[String] & ids)
Returns the ids of the parameter name given if found in given set, empty else




.. py:method:: QcMLFile.exportAttachment
   :module: pyopenms.pyopenms_1


Cython signature: String exportAttachment(String filename, String qpname)
Returns a String of a tab separated rows if found empty string else from run/set by the name filename of the qualityparameter by the name qpname




.. py:method:: QcMLFile.exportIDstats
   :module: pyopenms.pyopenms_1


Cython signature: String exportIDstats(const String & filename)




.. py:method:: QcMLFile.exportQP
   :module: pyopenms.pyopenms_1


Cython signature: String exportQP(String filename, String qpname)
Returns a String value in quotation of a QualityParameter by the name qpname in run/set by the name filename




.. py:method:: QcMLFile.exportQPs
   :module: pyopenms.pyopenms_1


Cython signature: String exportQPs(String filename, StringList qpnames)
Returns a String of a tab separated QualityParameter by the name qpname in run/set by the name filename




.. py:method:: QcMLFile.getLogType
   :module: pyopenms.pyopenms_1


Cython signature: LogType getLogType()
Returns the type of progress log being used




.. py:method:: QcMLFile.getRunIDs
   :module: pyopenms.pyopenms_1


Cython signature: void getRunIDs(libcpp_vector[String] & ids)
Gives the ids of the registered runs in the vector ids




.. py:method:: QcMLFile.getRunNames
   :module: pyopenms.pyopenms_1


Cython signature: void getRunNames(libcpp_vector[String] & ids)
Gives the names of the registered runs in the vector ids




.. py:method:: QcMLFile.getVersion
   :module: pyopenms.pyopenms_1


Cython signature: String getVersion()
Return the version of the schema




.. py:method:: QcMLFile.load
   :module: pyopenms.pyopenms_1


Cython signature: void load(const String & filename)
Load a QCFile




.. py:method:: QcMLFile.map2csv
   :module: pyopenms.pyopenms_1




.. py:method:: QcMLFile.merge
   :module: pyopenms.pyopenms_1


Cython signature: void merge(QcMLFile & addendum, String setname)
Merges the given QCFile into this one




.. py:method:: QcMLFile.nextProgress
   :module: pyopenms.pyopenms_1


Cython signature: void nextProgress()
Increment progress by 1 (according to range begin-end)




.. py:method:: QcMLFile.registerRun
   :module: pyopenms.pyopenms_1


Cython signature: void registerRun(String id_, String name)
Registers a run in the qcml file with the respective mappings




.. py:method:: QcMLFile.registerSet
   :module: pyopenms.pyopenms_1


Cython signature: void registerSet(String id_, String name, libcpp_set[String] & names)
Registers a set in the qcml file with the respective mappings




.. py:method:: QcMLFile.removeAllAttachments
   :module: pyopenms.pyopenms_1


Cython signature: void removeAllAttachments(String at)
Removes attachment with cv accession at from all runs/sets




.. py:method:: QcMLFile.removeAttachment
   :module: pyopenms.pyopenms_1


- Cython signature: void removeAttachment(String r, libcpp_vector[String] & ids, String at)
  Removes attachments referencing an id given in ids, from run/set r. All attachments if no attachment name is given with at


- Cython signature: void removeAttachment(String r, String at)
  Removes attachment with cv accession at from run/set r




.. py:method:: QcMLFile.removeQualityParameter
   :module: pyopenms.pyopenms_1


Cython signature: void removeQualityParameter(String r, libcpp_vector[String] & ids)
Removes QualityParameter going by one of the ID attributes given in ids




.. py:method:: QcMLFile.reset
   :module: pyopenms.pyopenms_1


Cython signature: void reset()




.. py:method:: QcMLFile.setLogType
   :module: pyopenms.pyopenms_1


Cython signature: void setLogType(LogType)
Sets the progress log that should be used. The default type is NONE!




.. py:method:: QcMLFile.setProgress
   :module: pyopenms.pyopenms_1


Cython signature: void setProgress(ptrdiff_t value)
Sets the current progress




.. py:method:: QcMLFile.startProgress
   :module: pyopenms.pyopenms_1


Cython signature: void startProgress(ptrdiff_t begin, ptrdiff_t end, String label)




.. py:method:: QcMLFile.store
   :module: pyopenms.pyopenms_1


Cython signature: void store(const String & filename)
Store the qcML file




.. py:method:: QcMLFile.warning
   :module: pyopenms.pyopenms_1


Cython signature: void warning(ActionMode mode, const String & msg, unsigned int line, unsigned int column)




.. py:class:: QualityParameter
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _QualityParameter


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1QualityParameter.html




.. py:attribute:: QualityParameter.cvAcc
   :module: pyopenms.pyopenms_1




.. py:attribute:: QualityParameter.cvRef
   :module: pyopenms.pyopenms_1




.. py:attribute:: QualityParameter.flag
   :module: pyopenms.pyopenms_1




.. py:attribute:: QualityParameter.id
   :module: pyopenms.pyopenms_1




.. py:attribute:: QualityParameter.name
   :module: pyopenms.pyopenms_1




.. py:method:: QualityParameter.toXMLString
   :module: pyopenms.pyopenms_1


Cython signature: String toXMLString(unsigned int indentation_level)




.. py:attribute:: QualityParameter.unitAcc
   :module: pyopenms.pyopenms_1




.. py:attribute:: QualityParameter.unitRef
   :module: pyopenms.pyopenms_1




.. py:attribute:: QualityParameter.value
   :module: pyopenms.pyopenms_1




.. py:class:: Ratio
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _Ratio


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1Ratio.html




.. py:attribute:: Ratio.denominator_ref_
   :module: pyopenms.pyopenms_1




.. py:attribute:: Ratio.description_
   :module: pyopenms.pyopenms_1




.. py:attribute:: Ratio.numerator_ref_
   :module: pyopenms.pyopenms_1




.. py:attribute:: Ratio.ratio_value_
   :module: pyopenms.pyopenms_1




.. py:class:: Residue
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _Residue


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1Residue.html




.. py:attribute:: Residue.ResidueType
   :module: pyopenms.pyopenms_1


alias of :py:class:`pyopenms.pyopenms_1.__ResidueType`


.. py:method:: Residue.addLossFormula
   :module: pyopenms.pyopenms_1


Cython signature: void addLossFormula(EmpiricalFormula)
Adds a neutral loss formula




.. py:method:: Residue.addLossName
   :module: pyopenms.pyopenms_1


Cython signature: void addLossName(String name)
Adds neutral loss molecule name




.. py:method:: Residue.addNTermLossFormula
   :module: pyopenms.pyopenms_1


Cython signature: void addNTermLossFormula(EmpiricalFormula)
Adds N-terminal losses




.. py:method:: Residue.addNTermLossName
   :module: pyopenms.pyopenms_1


Cython signature: void addNTermLossName(String name)
Adds a N-terminal loss name




.. py:method:: Residue.addResidueSet
   :module: pyopenms.pyopenms_1


Cython signature: void addResidueSet(String residue_sets)
Adds a residue set to the residue sets




.. py:method:: Residue.addSynonym
   :module: pyopenms.pyopenms_1


Cython signature: void addSynonym(String synonym)
Adds a synonym




.. py:method:: Residue.getAverageWeight
   :module: pyopenms.pyopenms_1


- Cython signature: double getAverageWeight()
  Returns average weight of the residue


- Cython signature: double getAverageWeight(ResidueType res_type)




.. py:method:: Residue.getBackboneBasicityLeft
   :module: pyopenms.pyopenms_1


Cython signature: double getBackboneBasicityLeft()
Returns the backbone basicitiy if located in N-terminal direction




.. py:method:: Residue.getBackboneBasicityRight
   :module: pyopenms.pyopenms_1


Cython signature: double getBackboneBasicityRight()
Returns the C-terminal direction backbone basicitiy




.. py:method:: Residue.getFormula
   :module: pyopenms.pyopenms_1


- Cython signature: EmpiricalFormula getFormula()
  Returns the empirical formula of the residue


- Cython signature: EmpiricalFormula getFormula(ResidueType res_type)




.. py:method:: Residue.getInternalToAIon
   :module: pyopenms.pyopenms_1


Cython signature: EmpiricalFormula getInternalToAIon()




.. py:method:: Residue.getInternalToBIon
   :module: pyopenms.pyopenms_1


Cython signature: EmpiricalFormula getInternalToBIon()




.. py:method:: Residue.getInternalToCIon
   :module: pyopenms.pyopenms_1


Cython signature: EmpiricalFormula getInternalToCIon()




.. py:method:: Residue.getInternalToCTerm
   :module: pyopenms.pyopenms_1


Cython signature: EmpiricalFormula getInternalToCTerm()




.. py:method:: Residue.getInternalToFull
   :module: pyopenms.pyopenms_1


Cython signature: EmpiricalFormula getInternalToFull()




.. py:method:: Residue.getInternalToNTerm
   :module: pyopenms.pyopenms_1


Cython signature: EmpiricalFormula getInternalToNTerm()




.. py:method:: Residue.getInternalToXIon
   :module: pyopenms.pyopenms_1


Cython signature: EmpiricalFormula getInternalToXIon()




.. py:method:: Residue.getInternalToYIon
   :module: pyopenms.pyopenms_1


Cython signature: EmpiricalFormula getInternalToYIon()




.. py:method:: Residue.getInternalToZIon
   :module: pyopenms.pyopenms_1


Cython signature: EmpiricalFormula getInternalToZIon()




.. py:method:: Residue.getLossFormulas
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[EmpiricalFormula] getLossFormulas()
Returns the neutral loss formulas




.. py:method:: Residue.getLossNames
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[String] getLossNames()
Gets neutral loss name (if there is one, else returns an empty string)




.. py:method:: Residue.getLowMassIons
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[EmpiricalFormula] getLowMassIons()
Returns a vector of formulas with the low mass markers of the residue




.. py:method:: Residue.getModification
   :module: pyopenms.pyopenms_1


Cython signature: const ResidueModification * getModification()




.. py:method:: Residue.getModificationName
   :module: pyopenms.pyopenms_1


Cython signature: String getModificationName()
Returns the name of the modification to the modification




.. py:method:: Residue.getMonoWeight
   :module: pyopenms.pyopenms_1


- Cython signature: double getMonoWeight()
  Returns monoisotopic weight of the residue


- Cython signature: double getMonoWeight(ResidueType res_type)




.. py:method:: Residue.getNTermLossFormulas
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[EmpiricalFormula] getNTermLossFormulas()
Returns N-terminal loss formulas




.. py:method:: Residue.getNTermLossNames
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[String] getNTermLossNames()
Returns the N-terminal loss names




.. py:method:: Residue.getName
   :module: pyopenms.pyopenms_1


Cython signature: String getName()
Returns the name of the residue




.. py:method:: Residue.getOneLetterCode
   :module: pyopenms.pyopenms_1


Cython signature: String getOneLetterCode()
Returns the name as one letter code




.. py:method:: Residue.getPiValue
   :module: pyopenms.pyopenms_1


Cython signature: double getPiValue()
Calculates the isoelectric point using the pk values




.. py:method:: Residue.getPka
   :module: pyopenms.pyopenms_1


Cython signature: double getPka()
Returns the pka of the residue




.. py:method:: Residue.getPkb
   :module: pyopenms.pyopenms_1


Cython signature: double getPkb()
Returns the pkb of the residue




.. py:method:: Residue.getPkc
   :module: pyopenms.pyopenms_1


Cython signature: double getPkc()
Returns the pkc of the residue if it exists otherwise -1




.. py:method:: Residue.getResidueSets
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_set[String] getResidueSets()
Returns the residue sets this residue is contained in




.. py:method:: Residue.getResidueTypeName
   :module: pyopenms.pyopenms_1


Cython signature: String getResidueTypeName(ResidueType res_type)
Returns the ion name given as a residue type




.. py:method:: Residue.getSideChainBasicity
   :module: pyopenms.pyopenms_1


Cython signature: double getSideChainBasicity()
Returns the side chain basicity




.. py:method:: Residue.getSynonyms
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_set[String] getSynonyms()
Returns the sysnonyms




.. py:method:: Residue.getThreeLetterCode
   :module: pyopenms.pyopenms_1


Cython signature: String getThreeLetterCode()
Returns the name of the residue as three letter code




.. py:method:: Residue.hasNTermNeutralLosses
   :module: pyopenms.pyopenms_1


Cython signature: bool hasNTermNeutralLosses()
True if N-terminal neutral losses are set




.. py:method:: Residue.hasNeutralLoss
   :module: pyopenms.pyopenms_1


Cython signature: bool hasNeutralLoss()
True if the residue has neutral loss




.. py:method:: Residue.isInResidueSet
   :module: pyopenms.pyopenms_1


Cython signature: bool isInResidueSet(String residue_set)
True if the residue is contained in the set




.. py:method:: Residue.isModified
   :module: pyopenms.pyopenms_1


Cython signature: bool isModified()
True if the residue is a modified one




.. py:method:: Residue.residueTypeToIonLetter
   :module: pyopenms.pyopenms_1


Cython signature: char residueTypeToIonLetter(ResidueType res_type)
Helper for mapping residue types to letters for Text annotations and labels




.. py:method:: Residue.setAverageWeight
   :module: pyopenms.pyopenms_1


Cython signature: void setAverageWeight(double weight)
Sets average weight of the residue (must be full, with N and C-terminus)




.. py:method:: Residue.setBackboneBasicityLeft
   :module: pyopenms.pyopenms_1


Cython signature: void setBackboneBasicityLeft(double gb_bb_l)
Sets the N-terminal direction backbone basicitiy




.. py:method:: Residue.setBackboneBasicityRight
   :module: pyopenms.pyopenms_1


Cython signature: void setBackboneBasicityRight(double gb_bb_r)
Sets the C-terminal direction backbone basicity




.. py:method:: Residue.setFormula
   :module: pyopenms.pyopenms_1


Cython signature: void setFormula(EmpiricalFormula formula)
Sets empirical formula of the residue (must be full, with N and C-terminus)




.. py:method:: Residue.setLossFormulas
   :module: pyopenms.pyopenms_1


Cython signature: void setLossFormulas(libcpp_vector[EmpiricalFormula])
Sets the neutral loss formulas




.. py:method:: Residue.setLossNames
   :module: pyopenms.pyopenms_1


Cython signature: void setLossNames(libcpp_vector[String] name)
Sets the neutral loss molecule name




.. py:method:: Residue.setLowMassIons
   :module: pyopenms.pyopenms_1


Cython signature: void setLowMassIons(libcpp_vector[EmpiricalFormula] low_mass_ions)
Sets the low mass marker ions as a vector of formulas




.. py:method:: Residue.setModification
   :module: pyopenms.pyopenms_1


- Cython signature: void setModification(String name)
  Sets the modification by name; the mod should be present in ModificationsDB


- Cython signature: void setModification(const ResidueModification & mod)
  Sets the modification by a ResidueModification object; checks if present in ModificationsDB and adds if not.




.. py:method:: Residue.setModificationByDiffMonoMass
   :module: pyopenms.pyopenms_1


Cython signature: void setModificationByDiffMonoMass(double diffMonoMass)
Sets the modification by monoisotopic mass difference in Da; checks if present in ModificationsDB with tolerance and adds a "user-defined" modification if not (for later lookups).




.. py:method:: Residue.setMonoWeight
   :module: pyopenms.pyopenms_1


Cython signature: void setMonoWeight(double weight)
Sets monoisotopic weight of the residue (must be full, with N and C-terminus)




.. py:method:: Residue.setNTermLossFormulas
   :module: pyopenms.pyopenms_1


Cython signature: void setNTermLossFormulas(libcpp_vector[EmpiricalFormula])
Sets the N-terminal losses




.. py:method:: Residue.setNTermLossNames
   :module: pyopenms.pyopenms_1


Cython signature: void setNTermLossNames(libcpp_vector[String] name)
Sets the N-terminal loss names




.. py:method:: Residue.setName
   :module: pyopenms.pyopenms_1


Cython signature: void setName(String name)
Sets the name of the residue




.. py:method:: Residue.setOneLetterCode
   :module: pyopenms.pyopenms_1


Cython signature: void setOneLetterCode(String one_letter_code)
Sets the name as one letter code




.. py:method:: Residue.setPka
   :module: pyopenms.pyopenms_1


Cython signature: void setPka(double value)
Sets the pka of the residue




.. py:method:: Residue.setPkb
   :module: pyopenms.pyopenms_1


Cython signature: void setPkb(double value)
Sets the pkb of the residue




.. py:method:: Residue.setPkc
   :module: pyopenms.pyopenms_1


Cython signature: void setPkc(double value)
Sets the pkc of the residue




.. py:method:: Residue.setResidueSets
   :module: pyopenms.pyopenms_1


Cython signature: void setResidueSets(libcpp_set[String] residues_sets)
Sets the residue sets the amino acid is contained in




.. py:method:: Residue.setSideChainBasicity
   :module: pyopenms.pyopenms_1


Cython signature: void setSideChainBasicity(double gb_sc)
Sets the side chain basicity




.. py:method:: Residue.setSynonyms
   :module: pyopenms.pyopenms_1


Cython signature: void setSynonyms(libcpp_set[String] synonyms)
Sets the synonyms




.. py:method:: Residue.setThreeLetterCode
   :module: pyopenms.pyopenms_1


Cython signature: void setThreeLetterCode(String three_letter_code)
Sets the name of the residue as three letter code




.. py:class:: SequestOutfile
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _SequestOutfile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SequestOutfile.html


 Representation of a Sequest output file




.. py:method:: SequestOutfile.getACAndACType
   :module: pyopenms.pyopenms_1


Cython signature: void getACAndACType(String line, String & accession, String & accession_type)
Retrieves the accession type and accession number from a protein description line




.. py:method:: SequestOutfile.getColumns
   :module: pyopenms.pyopenms_1


Cython signature: bool getColumns(const String & line, libcpp_vector[String] & substrings, size_t number_of_columns, size_t reference_column)
Retrieves columns from a Sequest outfile line




.. py:method:: SequestOutfile.getSequences
   :module: pyopenms.pyopenms_1




.. py:method:: SequestOutfile.load
   :module: pyopenms.pyopenms_1


Cython signature: void load(const String & result_filename, libcpp_vector[PeptideIdentification] & peptide_identifications, ProteinIdentification & protein_identification, double p_value_threshold, libcpp_vector[double] & pvalues, const String & database, bool ignore_proteins_per_peptide)


Loads data from a Sequest outfile
-----
:param result_filename: The file to be loaded
:param peptide_identifications: The identifications
:param protein_identification: The protein identifications
:param p_value_threshold: The significance level (for the peptide hit scores)
:param pvalues: A list with the pvalues of the peptides (pvalues computed with peptide prophet)
:param database: The database used for the search
:param ignore_proteins_per_peptide: This is a hack to deal with files that use a suffix like "+1" in column "Reference", but do not actually list extra protein references in subsequent lines




.. py:class:: SimProtein
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _SimProtein


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::SimTypes_1_1SimProtein.html




.. py:class:: SimRandomNumberGenerator
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _SimRandomNumberGenerator


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::SimTypes_1_1SimRandomNumberGenerator.html




.. py:method:: SimRandomNumberGenerator.initialize
   :module: pyopenms.pyopenms_1


Cython signature: void initialize(bool biological_random, bool technical_random)




.. py:class:: SimpleSearchEngineAlgorithm
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _SimpleSearchEngineAlgorithm


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SimpleSearchEngineAlgorithm.html
 -- Inherits from ['DefaultParamHandler', 'ProgressLogger']




.. py:method:: SimpleSearchEngineAlgorithm.endProgress
   :module: pyopenms.pyopenms_1


Cython signature: void endProgress()
Ends the progress display




.. py:method:: SimpleSearchEngineAlgorithm.getDefaults
   :module: pyopenms.pyopenms_1


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: SimpleSearchEngineAlgorithm.getLogType
   :module: pyopenms.pyopenms_1


Cython signature: LogType getLogType()
Returns the type of progress log being used




.. py:method:: SimpleSearchEngineAlgorithm.getName
   :module: pyopenms.pyopenms_1


Cython signature: String getName()
Returns the name




.. py:method:: SimpleSearchEngineAlgorithm.getParameters
   :module: pyopenms.pyopenms_1


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: SimpleSearchEngineAlgorithm.getSubsections
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: SimpleSearchEngineAlgorithm.nextProgress
   :module: pyopenms.pyopenms_1


Cython signature: void nextProgress()
Increment progress by 1 (according to range begin-end)




.. py:method:: SimpleSearchEngineAlgorithm.search
   :module: pyopenms.pyopenms_1


Cython signature: void search(const String & in_mzML, const String & in_db, libcpp_vector[ProteinIdentification] & prot_ids, libcpp_vector[PeptideIdentification] & pep_ids)




.. py:method:: SimpleSearchEngineAlgorithm.setLogType
   :module: pyopenms.pyopenms_1


Cython signature: void setLogType(LogType)
Sets the progress log that should be used. The default type is NONE!




.. py:method:: SimpleSearchEngineAlgorithm.setName
   :module: pyopenms.pyopenms_1


Cython signature: void setName(const String &)
Sets the name




.. py:method:: SimpleSearchEngineAlgorithm.setParameters
   :module: pyopenms.pyopenms_1


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: SimpleSearchEngineAlgorithm.setProgress
   :module: pyopenms.pyopenms_1


Cython signature: void setProgress(ptrdiff_t value)
Sets the current progress




.. py:method:: SimpleSearchEngineAlgorithm.startProgress
   :module: pyopenms.pyopenms_1


Cython signature: void startProgress(ptrdiff_t begin, ptrdiff_t end, String label)




.. py:class:: SiriusFragmentAnnotation
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _SiriusFragmentAnnotation


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SiriusFragmentAnnotation.html




.. py:method:: SiriusFragmentAnnotation.extractAndResolveSiriusAnnotations
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[SiriusFragmentAnnotation_SiriusTargetDecoySpectra] extractAndResolveSiriusAnnotations(libcpp_vector[String] & sirius_workspace_subdirs, double & score_threshold, bool use_exact_mass)




.. py:method:: SiriusFragmentAnnotation.extractSiriusFragmentAnnotationMapping
   :module: pyopenms.pyopenms_1


Cython signature: void extractSiriusFragmentAnnotationMapping(String & path_to_sirius_workspace, MSSpectrum & msspectrum_to_fill, bool use_exact_mass)




.. py:class:: SiriusFragmentAnnotation_SiriusTargetDecoySpectra
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _SiriusFragmentAnnotation_SiriusTargetDecoySpectra


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SiriusFragmentAnnotation_SiriusTargetDecoySpectra.html




.. py:class:: Software
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _Software


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1Software.html




.. py:method:: Software.getName
   :module: pyopenms.pyopenms_1


Cython signature: String getName()
Returns the name of the software




.. py:method:: Software.getVersion
   :module: pyopenms.pyopenms_1


Cython signature: String getVersion()
Returns the software version




.. py:method:: Software.setName
   :module: pyopenms.pyopenms_1


Cython signature: void setName(String)
Sets the name of the software




.. py:method:: Software.setVersion
   :module: pyopenms.pyopenms_1


Cython signature: void setVersion(String)
Sets the software version




.. py:class:: StablePairFinder
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _StablePairFinder


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1StablePairFinder.html
 -- Inherits from ['BaseGroupFinder']




.. py:method:: StablePairFinder.endProgress
   :module: pyopenms.pyopenms_1


Cython signature: void endProgress()
Ends the progress display




.. py:method:: StablePairFinder.getDefaults
   :module: pyopenms.pyopenms_1


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: StablePairFinder.getLogType
   :module: pyopenms.pyopenms_1


Cython signature: LogType getLogType()
Returns the type of progress log being used




.. py:method:: StablePairFinder.getName
   :module: pyopenms.pyopenms_1


Cython signature: String getName()
Returns the name




.. py:method:: StablePairFinder.getParameters
   :module: pyopenms.pyopenms_1


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: StablePairFinder.getProductName
   :module: pyopenms.pyopenms_1


Cython signature: String getProductName()




.. py:method:: StablePairFinder.getSubsections
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: StablePairFinder.nextProgress
   :module: pyopenms.pyopenms_1


Cython signature: void nextProgress()
Increment progress by 1 (according to range begin-end)




.. py:method:: StablePairFinder.registerChildren
   :module: pyopenms.pyopenms_1


Cython signature: void registerChildren()
Register all derived classes here




.. py:method:: StablePairFinder.run
   :module: pyopenms.pyopenms_1


Cython signature: void run(libcpp_vector[ConsensusMap] & input_maps, ConsensusMap & result_map)




.. py:method:: StablePairFinder.setLogType
   :module: pyopenms.pyopenms_1


Cython signature: void setLogType(LogType)
Sets the progress log that should be used. The default type is NONE!




.. py:method:: StablePairFinder.setName
   :module: pyopenms.pyopenms_1


Cython signature: void setName(const String &)
Sets the name




.. py:method:: StablePairFinder.setParameters
   :module: pyopenms.pyopenms_1


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: StablePairFinder.setProgress
   :module: pyopenms.pyopenms_1


Cython signature: void setProgress(ptrdiff_t value)
Sets the current progress




.. py:method:: StablePairFinder.startProgress
   :module: pyopenms.pyopenms_1


Cython signature: void startProgress(ptrdiff_t begin, ptrdiff_t end, String label)




.. py:class:: SvmModelParameterSet
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _SvmModelParameterSet


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SvmModelParameterSet.html




.. py:attribute:: SvmModelParameterSet.feature_max
   :module: pyopenms.pyopenms_1




.. py:attribute:: SvmModelParameterSet.feature_min
   :module: pyopenms.pyopenms_1




.. py:attribute:: SvmModelParameterSet.intensity_bin_boarders
   :module: pyopenms.pyopenms_1




.. py:attribute:: SvmModelParameterSet.intensity_bin_values
   :module: pyopenms.pyopenms_1




.. py:attribute:: SvmModelParameterSet.number_intensity_levels
   :module: pyopenms.pyopenms_1




.. py:attribute:: SvmModelParameterSet.number_regions
   :module: pyopenms.pyopenms_1




.. py:attribute:: SvmModelParameterSet.scaling_lower
   :module: pyopenms.pyopenms_1




.. py:attribute:: SvmModelParameterSet.scaling_upper
   :module: pyopenms.pyopenms_1




.. py:class:: SvmTheoreticalSpectrumGenerator
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _SvmTheoreticalSpectrumGenerator


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SvmTheoreticalSpectrumGenerator.html




.. py:method:: SvmTheoreticalSpectrumGenerator.getIonTypes
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[IonType] getIonTypes()




.. py:method:: SvmTheoreticalSpectrumGenerator.load
   :module: pyopenms.pyopenms_1


Cython signature: void load()




.. py:class:: SwathFile
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _SwathFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SwathFile.html
 -- Inherits from ['ProgressLogger']




.. py:method:: SwathFile.endProgress
   :module: pyopenms.pyopenms_1


Cython signature: void endProgress()
Ends the progress display




.. py:method:: SwathFile.getLogType
   :module: pyopenms.pyopenms_1


Cython signature: LogType getLogType()
Returns the type of progress log being used




.. py:method:: SwathFile.loadMzML
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[SwathMap] loadMzML(String file_, String tmp, shared_ptr[ExperimentalSettings] exp_meta, String readoptions)


Loads a Swath run from a single mzML file
-----
Using the `plugin_consumer`, you can provide a custom consumer which will be chained
into the process of loading the data and making it available (depending on `readoptions`).
This is useful if you want to modify the data a priori or extract some other information using
MSDataTransformingConsumer (for example). Make sure it leaves the data intact, such that the
returned SwathMaps are actually useful
-----
:param file: Input filename
:param tmp: Temporary directory (for cached data)
:param exp_meta: Experimental metadata from mzML file
:param readoptions: How are spectra accessed after reading - tradeoff between memory usage and time (disk caching)
:param plugin_consumer: An intermediate custom consumer
:returns: Swath maps for MS2 and MS1 (unless readoptions == split, which returns no data)




.. py:method:: SwathFile.loadMzXML
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[SwathMap] loadMzXML(String file_, String tmp, shared_ptr[ExperimentalSettings] exp_meta, String readoptions)
Loads a Swath run from a single mzXML file




.. py:method:: SwathFile.loadSplit
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[SwathMap] loadSplit(StringList file_list, String tmp, shared_ptr[ExperimentalSettings] exp_meta, String readoptions)
Loads a Swath run from a list of split mzML files




.. py:method:: SwathFile.nextProgress
   :module: pyopenms.pyopenms_1


Cython signature: void nextProgress()
Increment progress by 1 (according to range begin-end)




.. py:method:: SwathFile.setLogType
   :module: pyopenms.pyopenms_1


Cython signature: void setLogType(LogType)
Sets the progress log that should be used. The default type is NONE!




.. py:method:: SwathFile.setProgress
   :module: pyopenms.pyopenms_1


Cython signature: void setProgress(ptrdiff_t value)
Sets the current progress




.. py:method:: SwathFile.startProgress
   :module: pyopenms.pyopenms_1


Cython signature: void startProgress(ptrdiff_t begin, ptrdiff_t end, String label)




.. py:class:: TMTTenPlexQuantitationMethod
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _TMTTenPlexQuantitationMethod


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1TMTTenPlexQuantitationMethod.html
 -- Inherits from ['IsobaricQuantitationMethod']




.. py:method:: TMTTenPlexQuantitationMethod.getChannelInformation
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[IsobaricChannelInformation] getChannelInformation()




.. py:method:: TMTTenPlexQuantitationMethod.getDefaults
   :module: pyopenms.pyopenms_1


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: TMTTenPlexQuantitationMethod.getIsotopeCorrectionMatrix
   :module: pyopenms.pyopenms_1


Cython signature: MatrixDouble getIsotopeCorrectionMatrix()




.. py:method:: TMTTenPlexQuantitationMethod.getName
   :module: pyopenms.pyopenms_1


Cython signature: String getName()




.. py:method:: TMTTenPlexQuantitationMethod.getNumberOfChannels
   :module: pyopenms.pyopenms_1


Cython signature: size_t getNumberOfChannels()




.. py:method:: TMTTenPlexQuantitationMethod.getParameters
   :module: pyopenms.pyopenms_1


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: TMTTenPlexQuantitationMethod.getReferenceChannel
   :module: pyopenms.pyopenms_1


Cython signature: size_t getReferenceChannel()




.. py:method:: TMTTenPlexQuantitationMethod.getSubsections
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: TMTTenPlexQuantitationMethod.setName
   :module: pyopenms.pyopenms_1


Cython signature: void setName(const String &)
Sets the name




.. py:method:: TMTTenPlexQuantitationMethod.setParameters
   :module: pyopenms.pyopenms_1


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: TransformationModelBSpline
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _TransformationModelBSpline


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1TransformationModelBSpline.html
 -- Inherits from ['TransformationModel']




.. py:method:: TransformationModelBSpline.checkDatumRange
   :module: pyopenms.pyopenms_1


Cython signature: double checkDatumRange(const double & datum, const double & datum_min, const double & datum_max)
Check that the datum is within the valid min and max bounds




.. py:method:: TransformationModelBSpline.checkValidWeight
   :module: pyopenms.pyopenms_1


Cython signature: bool checkValidWeight(const String & weight, libcpp_vector[String] & valid_weights)
Check for a valid weighting function string




.. py:method:: TransformationModelBSpline.evaluate
   :module: pyopenms.pyopenms_1


Cython signature: double evaluate(double value)
Evaluates the model at the given values




.. py:method:: TransformationModelBSpline.getDefaultParameters
   :module: pyopenms.pyopenms_1


Cython signature: void getDefaultParameters(Param &)
Gets the default parameters




.. py:method:: TransformationModelBSpline.getParameters
   :module: pyopenms.pyopenms_1


Cython signature: Param getParameters()




.. py:method:: TransformationModelBSpline.getValidXWeights
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[String] getValidXWeights()
Returns a list of valid x weight function stringss




.. py:method:: TransformationModelBSpline.getValidYWeights
   :module: pyopenms.pyopenms_1


Cython signature: libcpp_vector[String] getValidYWeights()
Returns a list of valid y weight function strings




.. py:method:: TransformationModelBSpline.unWeightData
   :module: pyopenms.pyopenms_1


Cython signature: void unWeightData(libcpp_vector[TM_DataPoint] & data)
Unweight the data by the given weight function




.. py:method:: TransformationModelBSpline.unWeightDatum
   :module: pyopenms.pyopenms_1


Cython signature: double unWeightDatum(double & datum, const String & weight)
Apply the reverse of the weighting function to the data




.. py:method:: TransformationModelBSpline.weightData
   :module: pyopenms.pyopenms_1


Cython signature: void weightData(libcpp_vector[TM_DataPoint] & data)
Weight the data by the given weight function




.. py:method:: TransformationModelBSpline.weightDatum
   :module: pyopenms.pyopenms_1


Cython signature: double weightDatum(double & datum, const String & weight)
Weight the data according to the weighting function




.. py:class:: UnitType
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`




.. py:attribute:: UnitType.MS_ONTOLOGY
   :module: pyopenms.pyopenms_1
   :value: 1




.. py:attribute:: UnitType.OTHER
   :module: pyopenms.pyopenms_1
   :value: 2




.. py:attribute:: UnitType.UNIT_ONTOLOGY
   :module: pyopenms.pyopenms_1
   :value: 0




.. py:method:: UnitType.getMapping
   :module: pyopenms.pyopenms_1




.. py:class:: VersionDetails
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _VersionDetails


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1VersionDetails.html




.. py:method:: VersionDetails.create
   :module: pyopenms.pyopenms_1


Cython signature: VersionDetails create(String)




.. py:attribute:: VersionDetails.pre_release_identifier
   :module: pyopenms.pyopenms_1




.. py:attribute:: VersionDetails.version_major
   :module: pyopenms.pyopenms_1




.. py:attribute:: VersionDetails.version_minor
   :module: pyopenms.pyopenms_1




.. py:attribute:: VersionDetails.version_patch
   :module: pyopenms.pyopenms_1




.. py:class:: VersionInfo
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _VersionInfo


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1VersionInfo.html




.. py:method:: VersionInfo.getBranch
   :module: pyopenms.pyopenms_1


Cython signature: String getBranch()




.. py:method:: VersionInfo.getRevision
   :module: pyopenms.pyopenms_1


Cython signature: String getRevision()




.. py:method:: VersionInfo.getTime
   :module: pyopenms.pyopenms_1


Cython signature: String getTime()




.. py:method:: VersionInfo.getVersion
   :module: pyopenms.pyopenms_1


Cython signature: String getVersion()




.. py:method:: VersionInfo.getVersionStruct
   :module: pyopenms.pyopenms_1


Cython signature: VersionDetails getVersionStruct()




.. py:class:: streampos
   :module: pyopenms.pyopenms_1


   Bases: :py:class:`object`


Cython implementation of _streampos


Documentation is available at http://www.openms.de/current_doxygen/html/classstd_1_1streampos.html




.. py:module:: pyopenms.pyopenms_2




.. py:class:: AAIndex
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _AAIndex


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1AAIndex.html




.. py:method:: AAIndex.acidic
   :module: pyopenms.pyopenms_2


Cython signature: double acidic(char aa)




.. py:method:: AAIndex.aliphatic
   :module: pyopenms.pyopenms_2


Cython signature: double aliphatic(char aa)




.. py:method:: AAIndex.basic
   :module: pyopenms.pyopenms_2


Cython signature: double basic(char aa)




.. py:method:: AAIndex.calculateGB
   :module: pyopenms.pyopenms_2


Cython signature: double calculateGB(AASequence & seq, double T)




.. py:method:: AAIndex.getARGP820102
   :module: pyopenms.pyopenms_2


Cython signature: double getARGP820102(char aa)




.. py:method:: AAIndex.getFAUJ880111
   :module: pyopenms.pyopenms_2


Cython signature: double getFAUJ880111(char aa)




.. py:method:: AAIndex.getFINA770101
   :module: pyopenms.pyopenms_2


Cython signature: double getFINA770101(char aa)




.. py:method:: AAIndex.getKHAG800101
   :module: pyopenms.pyopenms_2


Cython signature: double getKHAG800101(char aa)




.. py:method:: AAIndex.getNADH010106
   :module: pyopenms.pyopenms_2


Cython signature: double getNADH010106(char aa)




.. py:method:: AAIndex.getNADH010107
   :module: pyopenms.pyopenms_2


Cython signature: double getNADH010107(char aa)




.. py:method:: AAIndex.getOOBM850104
   :module: pyopenms.pyopenms_2


Cython signature: double getOOBM850104(char aa)




.. py:method:: AAIndex.getROBB760107
   :module: pyopenms.pyopenms_2


Cython signature: double getROBB760107(char aa)




.. py:method:: AAIndex.getVASM830103
   :module: pyopenms.pyopenms_2


Cython signature: double getVASM830103(char aa)




.. py:method:: AAIndex.getWILM950102
   :module: pyopenms.pyopenms_2


Cython signature: double getWILM950102(char aa)




.. py:method:: AAIndex.polar
   :module: pyopenms.pyopenms_2


Cython signature: double polar(char aa)




.. py:class:: AnnotationState
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`




.. py:attribute:: AnnotationState.FEATURE_ID_MULTIPLE_DIVERGENT
   :module: pyopenms.pyopenms_2
   :value: 3




.. py:attribute:: AnnotationState.FEATURE_ID_MULTIPLE_SAME
   :module: pyopenms.pyopenms_2
   :value: 2




.. py:attribute:: AnnotationState.FEATURE_ID_NONE
   :module: pyopenms.pyopenms_2
   :value: 0




.. py:attribute:: AnnotationState.FEATURE_ID_SINGLE
   :module: pyopenms.pyopenms_2
   :value: 1




.. py:attribute:: AnnotationState.SIZE_OF_ANNOTATIONSTATE
   :module: pyopenms.pyopenms_2
   :value: 4




.. py:method:: AnnotationState.getMapping
   :module: pyopenms.pyopenms_2




.. py:class:: ArrayWrapperFloat
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`




.. py:class:: BaseFeature
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _BaseFeature


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1BaseFeature.html
 -- Inherits from ['UniqueIdInterface', 'RichPeak2D']




.. py:method:: BaseFeature.clearMetaInfo
   :module: pyopenms.pyopenms_2


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: BaseFeature.clearUniqueId
   :module: pyopenms.pyopenms_2


Cython signature: size_t clearUniqueId()
Clear the unique id. The new unique id will be invalid. Returns 1 if the unique id was changed, 0 otherwise




.. py:method:: BaseFeature.ensureUniqueId
   :module: pyopenms.pyopenms_2


Cython signature: size_t ensureUniqueId()
Assigns a valid unique id, but only if the present one is invalid. Returns 1 if the unique id was changed, 0 otherwise




.. py:method:: BaseFeature.getAnnotationState
   :module: pyopenms.pyopenms_2


Cython signature: AnnotationState getAnnotationState()
State of peptide identifications attached to this feature. If one ID has multiple hits, the output depends on the top-hit only




.. py:method:: BaseFeature.getCharge
   :module: pyopenms.pyopenms_2


Cython signature: int getCharge()
Returns the charge state




.. py:method:: BaseFeature.getIntensity
   :module: pyopenms.pyopenms_2


Cython signature: float getIntensity()
Returns the data point intensity (height)




.. py:method:: BaseFeature.getKeys
   :module: pyopenms.pyopenms_2


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: BaseFeature.getMZ
   :module: pyopenms.pyopenms_2


Cython signature: double getMZ()
Returns the m/z coordinate (index 1)




.. py:method:: BaseFeature.getMetaValue
   :module: pyopenms.pyopenms_2


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: BaseFeature.getPeptideIdentifications
   :module: pyopenms.pyopenms_2


Cython signature: libcpp_vector[PeptideIdentification] getPeptideIdentifications()
Returns the PeptideIdentification vector




.. py:method:: BaseFeature.getQuality
   :module: pyopenms.pyopenms_2


Cython signature: float getQuality()
Returns the overall quality




.. py:method:: BaseFeature.getRT
   :module: pyopenms.pyopenms_2


Cython signature: double getRT()
Returns the RT coordinate (index 0)




.. py:method:: BaseFeature.getUniqueId
   :module: pyopenms.pyopenms_2


Cython signature: size_t getUniqueId()
Returns the unique id




.. py:method:: BaseFeature.getWidth
   :module: pyopenms.pyopenms_2


Cython signature: float getWidth()
Returns the features width (full width at half max, FWHM)




.. py:method:: BaseFeature.hasInvalidUniqueId
   :module: pyopenms.pyopenms_2


Cython signature: size_t hasInvalidUniqueId()
Returns whether the unique id is invalid. Returns 1 if the unique id is invalid, 0 otherwise




.. py:method:: BaseFeature.hasValidUniqueId
   :module: pyopenms.pyopenms_2


Cython signature: size_t hasValidUniqueId()
Returns whether the unique id is valid. Returns 1 if the unique id is valid, 0 otherwise




.. py:method:: BaseFeature.isMetaEmpty
   :module: pyopenms.pyopenms_2


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: BaseFeature.isValid
   :module: pyopenms.pyopenms_2


Cython signature: bool isValid(uint64_t unique_id)
Returns true if the unique_id is valid, false otherwise




.. py:method:: BaseFeature.metaRegistry
   :module: pyopenms.pyopenms_2


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: BaseFeature.metaValueExists
   :module: pyopenms.pyopenms_2


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: BaseFeature.removeMetaValue
   :module: pyopenms.pyopenms_2


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: BaseFeature.setCharge
   :module: pyopenms.pyopenms_2


Cython signature: void setCharge(int q)
Sets the charge state




.. py:method:: BaseFeature.setIntensity
   :module: pyopenms.pyopenms_2


Cython signature: void setIntensity(float)
Returns the data point intensity (height)




.. py:method:: BaseFeature.setMZ
   :module: pyopenms.pyopenms_2


Cython signature: void setMZ(double)
Returns the m/z coordinate (index 1)




.. py:method:: BaseFeature.setMetaValue
   :module: pyopenms.pyopenms_2


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:method:: BaseFeature.setPeptideIdentifications
   :module: pyopenms.pyopenms_2


Cython signature: void setPeptideIdentifications(libcpp_vector[PeptideIdentification] & peptides)
Sets the PeptideIdentification vector




.. py:method:: BaseFeature.setQuality
   :module: pyopenms.pyopenms_2


Cython signature: void setQuality(float q)
Sets the overall quality




.. py:method:: BaseFeature.setRT
   :module: pyopenms.pyopenms_2


Cython signature: void setRT(double)
Returns the RT coordinate (index 0)




.. py:method:: BaseFeature.setUniqueId
   :module: pyopenms.pyopenms_2


Cython signature: void setUniqueId(uint64_t rhs)
Assigns a new, valid unique id. Always returns 1




.. py:method:: BaseFeature.setWidth
   :module: pyopenms.pyopenms_2


Cython signature: void setWidth(float q)
Sets the width of the feature (FWHM)




.. py:class:: CVTermList
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _CVTermList


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1CVTermList.html
 -- Inherits from ['MetaInfoInterface']




.. py:method:: CVTermList.addCVTerm
   :module: pyopenms.pyopenms_2


Cython signature: void addCVTerm(CVTerm & term)
Adds a CV term




.. py:method:: CVTermList.clearMetaInfo
   :module: pyopenms.pyopenms_2


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: CVTermList.consumeCVTerms
   :module: pyopenms.pyopenms_2


Cython signature: void consumeCVTerms(Map[String,libcpp_vector[CVTerm]] cv_term_map)
Merges the given map into the member map, no duplicate checking




.. py:method:: CVTermList.empty
   :module: pyopenms.pyopenms_2


Cython signature: bool empty()




.. py:method:: CVTermList.getCVTerms
   :module: pyopenms.pyopenms_2


Cython signature: Map[String,libcpp_vector[CVTerm]] getCVTerms()
Returns the accession string of the term




.. py:method:: CVTermList.getKeys
   :module: pyopenms.pyopenms_2


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: CVTermList.getMetaValue
   :module: pyopenms.pyopenms_2


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: CVTermList.hasCVTerm
   :module: pyopenms.pyopenms_2


Cython signature: bool hasCVTerm(String accession)




.. py:method:: CVTermList.isMetaEmpty
   :module: pyopenms.pyopenms_2


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: CVTermList.metaRegistry
   :module: pyopenms.pyopenms_2


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: CVTermList.metaValueExists
   :module: pyopenms.pyopenms_2


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: CVTermList.removeMetaValue
   :module: pyopenms.pyopenms_2


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: CVTermList.replaceCVTerm
   :module: pyopenms.pyopenms_2


Cython signature: void replaceCVTerm(CVTerm & term)
Replaces the specified CV term




.. py:method:: CVTermList.replaceCVTerms
   :module: pyopenms.pyopenms_2


Cython signature: void replaceCVTerms(libcpp_vector[CVTerm] cv_terms, String accession)




.. py:method:: CVTermList.setCVTerms
   :module: pyopenms.pyopenms_2


Cython signature: void setCVTerms(libcpp_vector[CVTerm] & terms)
Sets the CV terms




.. py:method:: CVTermList.setMetaValue
   :module: pyopenms.pyopenms_2


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:class:: ChromatogramExtractorAlgorithm
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _ChromatogramExtractorAlgorithm


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ChromatogramExtractorAlgorithm.html
 -- Inherits from ['ProgressLogger']




.. py:method:: ChromatogramExtractorAlgorithm.endProgress
   :module: pyopenms.pyopenms_2


Cython signature: void endProgress()
Ends the progress display




.. py:method:: ChromatogramExtractorAlgorithm.extractChromatograms
   :module: pyopenms.pyopenms_2


Cython signature: void extractChromatograms(shared_ptr[SpectrumAccessOpenMS] input, libcpp_vector[shared_ptr[OSChromatogram]] & output, libcpp_vector[ExtractionCoordinates] extraction_coordinates, double mz_extraction_window, bool ppm, double im_extraction_window, String filter)


Extract chromatograms at the m/z and RT defined by the ExtractionCoordinates
-----
:param: input Input spectral map
:param output: Output chromatograms (XICs)
:param extraction_coordinates: Extracts around these coordinates (from
 rt_start to rt_end in seconds - extracts the whole chromatogram if
 rt_end - rt_start < 0).
:param mz_extraction_window: Extracts a window of this size in m/z
dimension in Th or ppm (e.g. a window of 50 ppm means an extraction of
25 ppm on either side)
:param ppm: Whether mz_extraction_window is in ppm or in Th
:param filter: Which function to apply in m/z space (currently "tophat" only)




.. py:method:: ChromatogramExtractorAlgorithm.getLogType
   :module: pyopenms.pyopenms_2


Cython signature: LogType getLogType()
Returns the type of progress log being used




.. py:method:: ChromatogramExtractorAlgorithm.nextProgress
   :module: pyopenms.pyopenms_2


Cython signature: void nextProgress()
Increment progress by 1 (according to range begin-end)




.. py:method:: ChromatogramExtractorAlgorithm.setLogType
   :module: pyopenms.pyopenms_2


Cython signature: void setLogType(LogType)
Sets the progress log that should be used. The default type is NONE!




.. py:method:: ChromatogramExtractorAlgorithm.setProgress
   :module: pyopenms.pyopenms_2


Cython signature: void setProgress(ptrdiff_t value)
Sets the current progress




.. py:method:: ChromatogramExtractorAlgorithm.startProgress
   :module: pyopenms.pyopenms_2


Cython signature: void startProgress(ptrdiff_t begin, ptrdiff_t end, String label)




.. py:class:: CompNovoIonScoringCID
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _CompNovoIonScoringCID


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1CompNovoIonScoringCID.html




.. py:class:: ConfidenceScoring
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _ConfidenceScoring


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ConfidenceScoring.html




.. py:method:: ConfidenceScoring.initialize
   :module: pyopenms.pyopenms_2


Cython signature: void initialize(TargetedExperiment & targeted, size_t n_decoys, size_t n_transitions, TransformationDescription trafo)




.. py:method:: ConfidenceScoring.initializeGlm
   :module: pyopenms.pyopenms_2


Cython signature: void initializeGlm(double intercept, double rt_coef, double int_coef)




.. py:method:: ConfidenceScoring.scoreMap
   :module: pyopenms.pyopenms_2


Cython signature: void scoreMap(FeatureMap & map)
Score a feature map -> make sure the class is properly initialized




.. py:class:: ConsensusMapNormalizerAlgorithmQuantile
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _ConsensusMapNormalizerAlgorithmQuantile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ConsensusMapNormalizerAlgorithmQuantile.html




.. py:method:: ConsensusMapNormalizerAlgorithmQuantile.extractIntensityVectors
   :module: pyopenms.pyopenms_2


Cython signature: void extractIntensityVectors(ConsensusMap & map_, libcpp_vector[libcpp_vector[double]] & out_intensities)
Extracts the intensities of the features of the different maps




.. py:method:: ConsensusMapNormalizerAlgorithmQuantile.normalizeMaps
   :module: pyopenms.pyopenms_2


Cython signature: void normalizeMaps(ConsensusMap & input_map)




.. py:method:: ConsensusMapNormalizerAlgorithmQuantile.resample
   :module: pyopenms.pyopenms_2


Cython signature: void resample(libcpp_vector[double] & data_in, libcpp_vector[double] & data_out, unsigned int n_resampling_points)
Resamples data_in and writes the results to data_out




.. py:method:: ConsensusMapNormalizerAlgorithmQuantile.setNormalizedIntensityValues
   :module: pyopenms.pyopenms_2


Cython signature: void setNormalizedIntensityValues(libcpp_vector[libcpp_vector[double]] & feature_ints, ConsensusMap & map_)
Writes the intensity values in feature_ints to the corresponding features in map




.. py:class:: ContinuousWaveletTransform
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _ContinuousWaveletTransform


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ContinuousWaveletTransform.html




.. py:method:: ContinuousWaveletTransform.getLeftPaddingIndex
   :module: pyopenms.pyopenms_2


Cython signature: ptrdiff_t getLeftPaddingIndex()
Returns the position where the signal starts (in the interval [0,end_left_padding_) are the padded zeros)




.. py:method:: ContinuousWaveletTransform.getRightPaddingIndex
   :module: pyopenms.pyopenms_2


Cython signature: ptrdiff_t getRightPaddingIndex()
Returns the position where the signal ends (in the interval (begin_right_padding_,end] are the padded zeros)




.. py:method:: ContinuousWaveletTransform.getScale
   :module: pyopenms.pyopenms_2


Cython signature: double getScale()
Returns the scale of the wavelet




.. py:method:: ContinuousWaveletTransform.getSignal
   :module: pyopenms.pyopenms_2


Cython signature: libcpp_vector[Peak1D] getSignal()
Returns the wavelet transform of the signal




.. py:method:: ContinuousWaveletTransform.getSignalLength
   :module: pyopenms.pyopenms_2


Cython signature: ptrdiff_t getSignalLength()
Returns the signal length [end_left_padding,begin_right_padding]




.. py:method:: ContinuousWaveletTransform.getSize
   :module: pyopenms.pyopenms_2


Cython signature: int getSize()
Returns the signal length including padded zeros [0,end]




.. py:method:: ContinuousWaveletTransform.getSpacing
   :module: pyopenms.pyopenms_2


Cython signature: double getSpacing()
Returns the spacing of raw data




.. py:method:: ContinuousWaveletTransform.getWavelet
   :module: pyopenms.pyopenms_2


Cython signature: libcpp_vector[double] getWavelet()
Returns the wavelet




.. py:method:: ContinuousWaveletTransform.init
   :module: pyopenms.pyopenms_2


Cython signature: void init(double scale, double spacing)
Perform possibly necessary preprocessing steps, like tabulating the Wavelet




.. py:method:: ContinuousWaveletTransform.setLeftPaddingIndex
   :module: pyopenms.pyopenms_2


Cython signature: void setLeftPaddingIndex(ptrdiff_t end_left_padding)
Sets the position where the signal starts




.. py:method:: ContinuousWaveletTransform.setRightPaddingIndex
   :module: pyopenms.pyopenms_2


Cython signature: void setRightPaddingIndex(ptrdiff_t begin_right_padding)
Sets the position where the signal starts




.. py:method:: ContinuousWaveletTransform.setScale
   :module: pyopenms.pyopenms_2


Cython signature: void setScale(double scale)
Sets the spacing of raw data




.. py:method:: ContinuousWaveletTransform.setSignal
   :module: pyopenms.pyopenms_2


Cython signature: void setSignal(libcpp_vector[Peak1D] & signal)
Sets the wavelet transform of the signal




.. py:method:: ContinuousWaveletTransform.setSignalLength
   :module: pyopenms.pyopenms_2


Cython signature: void setSignalLength(ptrdiff_t signal_length)
Sets the signal length [end_left_padding,begin_right_padding]




.. py:method:: ContinuousWaveletTransform.setSpacing
   :module: pyopenms.pyopenms_2


Cython signature: void setSpacing(double spacing)
Sets the spacing of raw data




.. py:method:: ContinuousWaveletTransform.setWavelet
   :module: pyopenms.pyopenms_2


Cython signature: void setWavelet(libcpp_vector[double] & wavelet)
Sets the signal




.. py:class:: ContinuousWaveletTransformNumIntegration
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _ContinuousWaveletTransformNumIntegration


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ContinuousWaveletTransformNumIntegration.html
 -- Inherits from ['ContinuousWaveletTransform']




.. py:method:: ContinuousWaveletTransformNumIntegration.getLeftPaddingIndex
   :module: pyopenms.pyopenms_2


Cython signature: ptrdiff_t getLeftPaddingIndex()
Returns the position where the signal starts (in the interval [0,end_left_padding_) are the padded zeros)




.. py:method:: ContinuousWaveletTransformNumIntegration.getRightPaddingIndex
   :module: pyopenms.pyopenms_2


Cython signature: ptrdiff_t getRightPaddingIndex()
Returns the position where the signal ends (in the interval (begin_right_padding_,end] are the padded zeros)




.. py:method:: ContinuousWaveletTransformNumIntegration.getScale
   :module: pyopenms.pyopenms_2


Cython signature: double getScale()
Returns the scale of the wavelet




.. py:method:: ContinuousWaveletTransformNumIntegration.getSignal
   :module: pyopenms.pyopenms_2


Cython signature: libcpp_vector[Peak1D] getSignal()
Returns the wavelet transform of the signal




.. py:method:: ContinuousWaveletTransformNumIntegration.getSignalLength
   :module: pyopenms.pyopenms_2


Cython signature: ptrdiff_t getSignalLength()
Returns the signal length [end_left_padding,begin_right_padding]




.. py:method:: ContinuousWaveletTransformNumIntegration.getSize
   :module: pyopenms.pyopenms_2


Cython signature: int getSize()
Returns the signal length including padded zeros [0,end]




.. py:method:: ContinuousWaveletTransformNumIntegration.getSpacing
   :module: pyopenms.pyopenms_2


Cython signature: double getSpacing()
Returns the spacing of raw data




.. py:method:: ContinuousWaveletTransformNumIntegration.getWavelet
   :module: pyopenms.pyopenms_2


Cython signature: libcpp_vector[double] getWavelet()
Returns the wavelet




.. py:method:: ContinuousWaveletTransformNumIntegration.init
   :module: pyopenms.pyopenms_2


Cython signature: void init(double scale, double spacing)
Perform possibly necessary preprocessing steps, like tabulating the Wavelet




.. py:method:: ContinuousWaveletTransformNumIntegration.setLeftPaddingIndex
   :module: pyopenms.pyopenms_2


Cython signature: void setLeftPaddingIndex(ptrdiff_t end_left_padding)
Sets the position where the signal starts




.. py:method:: ContinuousWaveletTransformNumIntegration.setRightPaddingIndex
   :module: pyopenms.pyopenms_2


Cython signature: void setRightPaddingIndex(ptrdiff_t begin_right_padding)
Sets the position where the signal starts




.. py:method:: ContinuousWaveletTransformNumIntegration.setScale
   :module: pyopenms.pyopenms_2


Cython signature: void setScale(double scale)
Sets the spacing of raw data




.. py:method:: ContinuousWaveletTransformNumIntegration.setSignal
   :module: pyopenms.pyopenms_2


Cython signature: void setSignal(libcpp_vector[Peak1D] & signal)
Sets the wavelet transform of the signal




.. py:method:: ContinuousWaveletTransformNumIntegration.setSignalLength
   :module: pyopenms.pyopenms_2


Cython signature: void setSignalLength(ptrdiff_t signal_length)
Sets the signal length [end_left_padding,begin_right_padding]




.. py:method:: ContinuousWaveletTransformNumIntegration.setSpacing
   :module: pyopenms.pyopenms_2


Cython signature: void setSpacing(double spacing)
Sets the spacing of raw data




.. py:method:: ContinuousWaveletTransformNumIntegration.setWavelet
   :module: pyopenms.pyopenms_2


Cython signature: void setWavelet(libcpp_vector[double] & wavelet)
Sets the signal




.. py:class:: ConvexHull2D
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _ConvexHull2D


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ConvexHull2D.html




.. py:method:: ConvexHull2D.addPoint
   :module: pyopenms.pyopenms_2


Cython signature: bool addPoint(DPosition2 point)
Adds a point to the hull if it is not already contained. Returns if the point was added. This will trigger recomputation of the outer hull points (thus points set with setHullPoints() will be lost)




.. py:method:: ConvexHull2D.addPointXY
   :module: pyopenms.pyopenms_2


Parameters:
x (double)
y (double)




.. py:method:: ConvexHull2D.addPoints
   :module: pyopenms.pyopenms_2


Cython signature: void addPoints(libcpp_vector[DPosition2] points)
Adds points to the hull if it is not already contained. This will trigger recomputation of the outer hull points (thus points set with setHullPoints() will be lost)




.. py:method:: ConvexHull2D.addPointsNPY
   :module: pyopenms.pyopenms_2


Parameters:
points (np.ndarray[np.float32_t, ndim=2])




.. py:method:: ConvexHull2D.clear
   :module: pyopenms.pyopenms_2


Cython signature: void clear()
Removes all points




.. py:method:: ConvexHull2D.compress
   :module: pyopenms.pyopenms_2


Cython signature: size_t compress()
Allows to reduce the disk/memory footprint of a hull




.. py:method:: ConvexHull2D.encloses
   :module: pyopenms.pyopenms_2


Cython signature: bool encloses(DPosition2)
Returns if the `point` lies in the feature hull




.. py:method:: ConvexHull2D.enclosesXY
   :module: pyopenms.pyopenms_2


Parameters:
x (float)
y (float)


Returns:
int




.. py:method:: ConvexHull2D.expandToBoundingBox
   :module: pyopenms.pyopenms_2


Cython signature: void expandToBoundingBox()
Expand a convex hull to its bounding box.




.. py:method:: ConvexHull2D.getBoundingBox
   :module: pyopenms.pyopenms_2


Cython signature: DBoundingBox2 getBoundingBox()
Returns the bounding box of the feature hull points




.. py:method:: ConvexHull2D.getBoundingBox2D
   :module: pyopenms.pyopenms_2


Returns:
((double,double),(double,double))




.. py:method:: ConvexHull2D.getHullPoints
   :module: pyopenms.pyopenms_2


Cython signature: libcpp_vector[DPosition2] getHullPoints()
Accessor for the outer points




.. py:method:: ConvexHull2D.getHullPointsNPY
   :module: pyopenms.pyopenms_2


Returns:
result (np.ndarray[np.float32_t, ndim=2])




.. py:method:: ConvexHull2D.setHullPoints
   :module: pyopenms.pyopenms_2


Cython signature: void setHullPoints(libcpp_vector[DPosition2])
Accessor for the outer(!) points (no checking is performed if this is actually a convex hull)




.. py:method:: ConvexHull2D.setHullPointsNPY
   :module: pyopenms.pyopenms_2


Parameters:
points (np.ndarray[np.float32_t, ndim=2])




.. py:class:: CsiAdapterRun
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _CsiAdapterRun


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::CsiFingerIdMzTabWriter_1_1CsiAdapterRun.html




.. py:attribute:: CsiAdapterRun.identifications
   :module: pyopenms.pyopenms_2




.. py:class:: Digestion
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _Digestion


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1Digestion.html




.. py:method:: Digestion.getDigestionTime
   :module: pyopenms.pyopenms_2


Cython signature: double getDigestionTime()
Returns the digestion time in minutes (default is 0.0)




.. py:method:: Digestion.getEnzyme
   :module: pyopenms.pyopenms_2


Cython signature: String getEnzyme()
Returns the enzyme name (default is "")




.. py:method:: Digestion.getPh
   :module: pyopenms.pyopenms_2


Cython signature: double getPh()
Returns the pH value (default is 0.0)




.. py:method:: Digestion.getTemperature
   :module: pyopenms.pyopenms_2


Cython signature: double getTemperature()
Returns the temperature during digestion in degree C (default is 0.0)




.. py:method:: Digestion.setDigestionTime
   :module: pyopenms.pyopenms_2


Cython signature: void setDigestionTime(double digestion_time)
Sets the digestion time in minutes




.. py:method:: Digestion.setEnzyme
   :module: pyopenms.pyopenms_2


Cython signature: void setEnzyme(const String & enzyme)
Sets the enzyme name




.. py:method:: Digestion.setPh
   :module: pyopenms.pyopenms_2


Cython signature: void setPh(double ph)
Sets the pH value




.. py:method:: Digestion.setTemperature
   :module: pyopenms.pyopenms_2


Cython signature: void setTemperature(double temperature)
Sets the temperature during digestion in degree C




.. py:class:: DocumentIdentifier
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _DocumentIdentifier


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1DocumentIdentifier.html




.. py:method:: DocumentIdentifier.getIdentifier
   :module: pyopenms.pyopenms_2


Cython signature: String getIdentifier()
Retrieve document identifier (e.g. an LSID)




.. py:method:: DocumentIdentifier.getLoadedFilePath
   :module: pyopenms.pyopenms_2


Cython signature: String getLoadedFilePath()
Returns the file_name which is the absolute path to the file loaded




.. py:method:: DocumentIdentifier.getLoadedFileType
   :module: pyopenms.pyopenms_2


Cython signature: int getLoadedFileType()
Returns the file_type (e.g. featureXML, consensusXML, mzData, mzXML, mzML, ...) of the file loaded




.. py:method:: DocumentIdentifier.setIdentifier
   :module: pyopenms.pyopenms_2


Cython signature: void setIdentifier(String id)
Sets document identifier (e.g. an LSID)




.. py:method:: DocumentIdentifier.setLoadedFilePath
   :module: pyopenms.pyopenms_2


Cython signature: void setLoadedFilePath(String file_name)
Sets the file_name according to absolute path of the file loaded, preferably done whilst loading




.. py:method:: DocumentIdentifier.setLoadedFileType
   :module: pyopenms.pyopenms_2


Cython signature: void setLoadedFileType(String file_name)
Sets the file_type according to the type of the file loaded from, preferably done whilst loading




.. py:class:: ElutionModelFitter
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _ElutionModelFitter


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ElutionModelFitter.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: ElutionModelFitter.fitElutionModels
   :module: pyopenms.pyopenms_2


Cython signature: void fitElutionModels(FeatureMap & features)
Fit models of elution profiles to all features (and validate them)




.. py:method:: ElutionModelFitter.getDefaults
   :module: pyopenms.pyopenms_2


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: ElutionModelFitter.getName
   :module: pyopenms.pyopenms_2


Cython signature: String getName()
Returns the name




.. py:method:: ElutionModelFitter.getParameters
   :module: pyopenms.pyopenms_2


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: ElutionModelFitter.getSubsections
   :module: pyopenms.pyopenms_2


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: ElutionModelFitter.setName
   :module: pyopenms.pyopenms_2


Cython signature: void setName(const String &)
Sets the name




.. py:method:: ElutionModelFitter.setParameters
   :module: pyopenms.pyopenms_2


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: EmgScoring
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _EmgScoring


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1EmgScoring.html




.. py:method:: EmgScoring.elutionModelFit
   :module: pyopenms.pyopenms_2


Cython signature: double elutionModelFit(libcpp_vector[DPosition2] current_section, bool smooth_data)




.. py:method:: EmgScoring.getDefaults
   :module: pyopenms.pyopenms_2


Cython signature: Param getDefaults()




.. py:method:: EmgScoring.setFitterParam
   :module: pyopenms.pyopenms_2


Cython signature: void setFitterParam(Param param)




.. py:class:: ExtractionCoordinates
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _ExtractionCoordinates


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ExtractionCoordinates.html




.. py:attribute:: ExtractionCoordinates.id
   :module: pyopenms.pyopenms_2




.. py:attribute:: ExtractionCoordinates.ion_mobility
   :module: pyopenms.pyopenms_2




.. py:attribute:: ExtractionCoordinates.mz
   :module: pyopenms.pyopenms_2




.. py:attribute:: ExtractionCoordinates.mz_precursor
   :module: pyopenms.pyopenms_2




.. py:attribute:: ExtractionCoordinates.rt_end
   :module: pyopenms.pyopenms_2




.. py:attribute:: ExtractionCoordinates.rt_start
   :module: pyopenms.pyopenms_2




.. py:class:: Fitter1D
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _Fitter1D


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1Fitter1D.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: Fitter1D.getDefaults
   :module: pyopenms.pyopenms_2


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: Fitter1D.getName
   :module: pyopenms.pyopenms_2


Cython signature: String getName()
Returns the name




.. py:method:: Fitter1D.getParameters
   :module: pyopenms.pyopenms_2


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: Fitter1D.getSubsections
   :module: pyopenms.pyopenms_2


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: Fitter1D.registerChildren
   :module: pyopenms.pyopenms_2


Cython signature: void registerChildren()
Register all derived classes here




.. py:method:: Fitter1D.setName
   :module: pyopenms.pyopenms_2


Cython signature: void setName(const String &)
Sets the name




.. py:method:: Fitter1D.setParameters
   :module: pyopenms.pyopenms_2


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: GoodDiffFilter
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _GoodDiffFilter


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1GoodDiffFilter.html
 -- Inherits from ['FilterFunctor']




.. py:method:: GoodDiffFilter.apply
   :module: pyopenms.pyopenms_2


Cython signature: double apply(MSSpectrum &)




.. py:method:: GoodDiffFilter.getDefaults
   :module: pyopenms.pyopenms_2


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: GoodDiffFilter.getName
   :module: pyopenms.pyopenms_2


Cython signature: String getName()
Returns the name




.. py:method:: GoodDiffFilter.getParameters
   :module: pyopenms.pyopenms_2


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: GoodDiffFilter.getProductName
   :module: pyopenms.pyopenms_2


Cython signature: String getProductName()
Returns the final product name




.. py:method:: GoodDiffFilter.getSubsections
   :module: pyopenms.pyopenms_2


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: GoodDiffFilter.registerChildren
   :module: pyopenms.pyopenms_2


Cython signature: void registerChildren()




.. py:method:: GoodDiffFilter.setName
   :module: pyopenms.pyopenms_2


Cython signature: void setName(const String &)
Sets the name




.. py:method:: GoodDiffFilter.setParameters
   :module: pyopenms.pyopenms_2


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: IDMapper
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _IDMapper


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1IDMapper.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: IDMapper.annotate
   :module: pyopenms.pyopenms_2


         - Cython signature: void annotate(MSExperiment & map_, libcpp_vector[PeptideIdentification] & ids, libcpp_vector[ProteinIdentification] & protein_ids, bool clear_ids, bool mapMS1)


Mapping method for peak maps
-----
The identifications stored in a PeptideIdentification instance can be added to the
corresponding spectrum
Note that a PeptideIdentication is added to ALL spectra which are within the allowed RT and MZ boundaries
-----
:param map: MSExperiment to receive the identifications
:param peptide_ids: PeptideIdentification for the MSExperiment
:param protein_ids: ProteinIdentification for the MSExperiment
:param clear_ids: Reset peptide and protein identifications of each scan before annotating
:param map_ms1: Attach Ids to MS1 spectra using RT mapping only (without precursor, without m/z)
:raises:
  Exception: MissingInformation is thrown if entries of 'peptide_ids' do not contain 'MZ' and 'RT' information
         - Cython signature: void annotate(MSExperiment & map_, FeatureMap & fmap, bool clear_ids, bool mapMS1)


Mapping method for peak maps
-----
Add peptide identifications stored in a feature map to their
corresponding spectrum
This function converts the feature map to a vector of peptide identifications (all peptide IDs from each feature are taken)
and calls the respective annotate() function
RT and m/z are taken from the peptides, or (if missing) from the feature itself
-----
:param map: MSExperiment to receive the identifications
:param fmap: FeatureMap with PeptideIdentifications for the MSExperiment
:param clear_ids: Reset peptide and protein identifications of each scan before annotating
:param map_ms1: Attach Ids to MS1 spectra using RT mapping only (without precursor, without m/z)
         - Cython signature: void annotate(FeatureMap & map_, libcpp_vector[PeptideIdentification] & ids, libcpp_vector[ProteinIdentification] & protein_ids, bool use_centroid_rt, bool use_centroid_mz, MSExperiment & spectra)


Mapping method for peak maps
-----
If all features have at least one convex hull, peptide positions are matched against the bounding boxes of the convex hulls by default. If not, the positions of the feature centroids are used. The respective coordinates of the centroids are also used for matching (in place of the corresponding ranges from the bounding boxes) if 'use_centroid_rt' or 'use_centroid_mz' are true
-----
In any case, tolerance in RT and m/z dimension is applied according to the global parameters 'rt_tolerance' and 'mz_tolerance'. Tolerance is understood as "plus or minus x", so the matching range is actually increased by twice the tolerance value
-----
If several features (incl. tolerance) overlap the position of a peptide identification, the identification is annotated to all of them
-----
:param map: MSExperiment to receive the identifications
:param ids: PeptideIdentification for the MSExperiment
:param protein_ids: ProteinIdentification for the MSExperiment
:param use_centroid_rt: Whether to use the RT value of feature centroids even if convex hulls are present
:param use_centroid_mz: Whether to use the m/z value of feature centroids even if convex hulls are present
:param spectra: Whether precursors not contained in the identifications are annotated with an empty PeptideIdentification object containing the scan index
:raises:
  Exception: MissingInformation is thrown if entries of 'ids' do not contain 'MZ' and 'RT' information
         - Cython signature: void annotate(ConsensusMap & map_, libcpp_vector[PeptideIdentification] & ids, libcpp_vector[ProteinIdentification] & protein_ids, bool measure_from_subelements, bool annotate_ids_with_subelements, MSExperiment & spectra)


Mapping method for peak maps
-----
If all features have at least one convex hull, peptide positions are matched against the bounding boxes of the convex hulls by default. If not, the positions of the feature centroids are used. The respective coordinates of the centroids are also used for matching (in place of the corresponding ranges from the bounding boxes) if 'use_centroid_rt' or 'use_centroid_mz' are true
-----
In any case, tolerance in RT and m/z dimension is applied according to the global parameters 'rt_tolerance' and 'mz_tolerance'. Tolerance is understood as "plus or minus x", so the matching range is actually increased by twice the tolerance value
-----
If several features (incl. tolerance) overlap the position of a peptide identification, the identification is annotated to all of them
-----
:param map: MSExperiment to receive the identifications
:param ids: PeptideIdentification for the MSExperiment
:param protein_ids: ProteinIdentification for the MSExperiment
:param measure_from_subelements: Boolean operator set to true if distance estimate from FeatureHandles instead of Centroid
:param annotate_ids_with_subelements: Boolean operator set to true if store map index of FeatureHandle in peptide identification
:param spectra: Whether precursors not contained in the identifications are annotated with an empty PeptideIdentification object containing the scan index
:raises:
  Exception: MissingInformation is thrown if entries of 'ids' do not contain 'MZ' and 'RT' information




.. py:method:: IDMapper.getDefaults
   :module: pyopenms.pyopenms_2


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: IDMapper.getName
   :module: pyopenms.pyopenms_2


Cython signature: String getName()
Returns the name




.. py:method:: IDMapper.getParameters
   :module: pyopenms.pyopenms_2


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: IDMapper.getSubsections
   :module: pyopenms.pyopenms_2


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: IDMapper.mapPrecursorsToIdentifications
   :module: pyopenms.pyopenms_2


Cython signature: IDMapper_SpectraIdentificationState mapPrecursorsToIdentifications(MSExperiment spectra, libcpp_vector[PeptideIdentification] & ids, double mz_tol, double rt_tol)


Mapping of peptide identifications to spectra
This helper function partitions all spectra into those that had:
- no precursor (e.g. MS1 spectra),
- at least one identified precursor,
- or only unidentified precursor
-----
:param spectra: The mass spectra
:param ids: The peptide identifications
:param mz_tol: Tolerance used to map to precursor m/z
:param rt_tol: Tolerance used to map to spectrum retention time
:returns: A struct of vectors holding spectra indices of the partitioning




.. py:method:: IDMapper.setName
   :module: pyopenms.pyopenms_2


Cython signature: void setName(const String &)
Sets the name




.. py:method:: IDMapper.setParameters
   :module: pyopenms.pyopenms_2


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: IDMapper_SpectraIdentificationState
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _IDMapper_SpectraIdentificationState


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1IDMapper_SpectraIdentificationState.html




.. py:attribute:: IDMapper_SpectraIdentificationState.identified
   :module: pyopenms.pyopenms_2




.. py:attribute:: IDMapper_SpectraIdentificationState.no_precursors
   :module: pyopenms.pyopenms_2




.. py:attribute:: IDMapper_SpectraIdentificationState.unidentified
   :module: pyopenms.pyopenms_2




.. py:class:: IdentificationData
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _IdentificationData


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1IdentificationData.html
 -- Inherits from ['MetaInfoInterface']




.. py:method:: IdentificationData.clearMetaInfo
   :module: pyopenms.pyopenms_2


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: IdentificationData.getKeys
   :module: pyopenms.pyopenms_2


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: IdentificationData.getMetaValue
   :module: pyopenms.pyopenms_2


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: IdentificationData.isMetaEmpty
   :module: pyopenms.pyopenms_2


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: IdentificationData.metaRegistry
   :module: pyopenms.pyopenms_2


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: IdentificationData.metaValueExists
   :module: pyopenms.pyopenms_2


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: IdentificationData.removeMetaValue
   :module: pyopenms.pyopenms_2


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: IdentificationData.setMetaValue
   :module: pyopenms.pyopenms_2


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:class:: IntensityBalanceFilter
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _IntensityBalanceFilter


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1IntensityBalanceFilter.html
 -- Inherits from ['FilterFunctor']




.. py:method:: IntensityBalanceFilter.apply
   :module: pyopenms.pyopenms_2


Cython signature: double apply(MSSpectrum &)




.. py:method:: IntensityBalanceFilter.getDefaults
   :module: pyopenms.pyopenms_2


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: IntensityBalanceFilter.getName
   :module: pyopenms.pyopenms_2


Cython signature: String getName()
Returns the name




.. py:method:: IntensityBalanceFilter.getParameters
   :module: pyopenms.pyopenms_2


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: IntensityBalanceFilter.getProductName
   :module: pyopenms.pyopenms_2


Cython signature: String getProductName()




.. py:method:: IntensityBalanceFilter.getSubsections
   :module: pyopenms.pyopenms_2


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: IntensityBalanceFilter.registerChildren
   :module: pyopenms.pyopenms_2


Cython signature: void registerChildren()




.. py:method:: IntensityBalanceFilter.setName
   :module: pyopenms.pyopenms_2


Cython signature: void setName(const String &)
Sets the name




.. py:method:: IntensityBalanceFilter.setParameters
   :module: pyopenms.pyopenms_2


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: Interfaces()
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`




.. py:attribute:: Interfaces.BinaryDataArray
   :module: pyopenms.pyopenms_2


alias of :py:class:`pyopenms.pyopenms_2._Interfaces_BinaryDataArray`


.. py:attribute:: Interfaces.Chromatogram
   :module: pyopenms.pyopenms_2


alias of :py:class:`pyopenms.pyopenms_2._Interfaces_Chromatogram`


.. py:attribute:: Interfaces.Spectrum
   :module: pyopenms.pyopenms_2


alias of :py:class:`pyopenms.pyopenms_2._Interfaces_Spectrum`


.. py:class:: Internal_MzMLValidator
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _Internal_MzMLValidator


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::Internal_1_1Internal_MzMLValidator.html




.. py:class:: IsotopeLabelingMDVs
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _IsotopeLabelingMDVs


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1IsotopeLabelingMDVs.html




.. py:method:: IsotopeLabelingMDVs.calculateIsotopicPurity
   :module: pyopenms.pyopenms_2


Cython signature: void calculateIsotopicPurity(const Feature & normalized_feature, const libcpp_vector[double] & experiment_data, const String & isotopic_purity_name)


This function calculates the isotopic purity of the MDV using the following formula:
isotopic purity of tracer (atom % 13C) = n / [n + (M + n-1)/(M + n)],
where n in M+n is represented as the index of the result
The formula is extracted from "High-resolution 13C metabolic flux analysis",
Long et al, doi:10.1038/s41596-019-0204-0
-----
:param normalized_feature: Feature with normalized values for each component and the number of heavy labeled e.g., carbons. Out is a Feature with the calculated isotopic purity for the component group
:param experiment_data: Vector of experiment data in percent
:param isotopic_purity_name: Name of the isotopic purity tracer to be saved as a meta value




.. py:method:: IsotopeLabelingMDVs.calculateMDV
   :module: pyopenms.pyopenms_2


Cython signature: void calculateMDV(const Feature & measured_feature, Feature & normalized_feature, const MassIntensityType & mass_intensity_type, const String & feature_name)




.. py:method:: IsotopeLabelingMDVs.calculateMDVAccuracies
   :module: pyopenms.pyopenms_2


Cython signature: void calculateMDVAccuracies(const FeatureMap & normalized_featureMap, const String & feature_name, const libcpp_map[libcpp_string,libcpp_string] & fragment_isotopomer_theoretical_formulas)


This function calculates the accuracy of the MDV as compared to the theoretical MDV (only for 12C quality control experiments)
using average deviation to the mean
-----
param normalized_featuremap: FeatureMap with normalized values for each component and the chemical formula of the component group. Out is a FeatureMap with the component group accuracy and accuracy for the error for each component
param fragment_isotopomer_measured: Measured scan values
param fragment_isotopomer_theoretical_formula: A map of ProteinName/peptideRef to Empirical formula from which the theoretical values will be generated




.. py:method:: IsotopeLabelingMDVs.calculateMDVAccuracy
   :module: pyopenms.pyopenms_2


Cython signature: void calculateMDVAccuracy(const Feature & normalized_feature, const String & feature_name, const String & fragment_isotopomer_theoretical_formula)


This function calculates the accuracy of the MDV as compared to the theoretical MDV (only for 12C quality control experiments)
using average deviation to the mean. The result is mapped to the meta value "average_accuracy" in the updated feature
-----
:param normalized_feature: Feature with normalized values for each component and the chemical formula of the component group. Out is a Feature with the component group accuracy and accuracy for the error for each component
:param fragment_isotopomer_measured: Measured scan values
:param fragment_isotopomer_theoretical_formula: Empirical formula from which the theoretical values will be generated




.. py:method:: IsotopeLabelingMDVs.calculateMDVs
   :module: pyopenms.pyopenms_2


Cython signature: void calculateMDVs(const FeatureMap & measured_featureMap, FeatureMap & normalized_featureMap, const MassIntensityType & mass_intensity_type, const String & feature_name)




.. py:method:: IsotopeLabelingMDVs.isotopicCorrection
   :module: pyopenms.pyopenms_2


Cython signature: void isotopicCorrection(const Feature & normalized_feature, Feature & corrected_feature, MatrixDouble & correction_matrix, const DerivatizationAgent & correction_matrix_agent)


This function performs an isotopic correction to account for unlabeled abundances coming from
the derivatization agent (e.g., tBDMS) using correction matrix method and is calculated as follows:
-----
:param  normalized_feature: Feature with normalized values for each component and unlabeled chemical formula for each component group
:param  correction_matrix: Square matrix holding correction factors derived either experimentally or theoretically which describe how spectral peaks of naturally abundant 13C contribute to spectral peaks that overlap (or convolve) the spectral peaks of the corrected MDV of the derivatization agent
:param  correction_matrix_agent: Name of the derivatization agent, the internally stored correction matrix if the name of the agent is supplied, only "TBDMS" is supported for now
:returns: corrected_feature: Feature with corrected values for each component




.. py:method:: IsotopeLabelingMDVs.isotopicCorrections
   :module: pyopenms.pyopenms_2


Cython signature: void isotopicCorrections(const FeatureMap & normalized_featureMap, FeatureMap & corrected_featureMap, MatrixDouble & correction_matrix, const DerivatizationAgent & correction_matrix_agent)


This function performs an isotopic correction to account for unlabeled abundances coming from
the derivatization agent (e.g., tBDMS) using correction matrix method and is calculated as follows:
-----
:param  normalized_featuremap: FeatureMap with normalized values for each component and unlabeled chemical formula for each component group
:param  correction_matrix: Square matrix holding correction factors derived either experimentally or theoretically which describe how spectral peaks of naturally abundant 13C contribute to spectral peaks that overlap (or convolve) the spectral peaks of the corrected MDV of the derivatization agent
:param  correction_matrix_agent: Name of the derivatization agent, the internally stored correction matrix if the name of the agent is supplied, only "TBDMS" is supported for now
:returns corrected_featuremap: FeatureMap with corrected values for each component




.. py:class:: IsotopePattern
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _IsotopePattern


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::FeatureFinderAlgorithmPickedHelperStructs_1_1IsotopePattern.html




.. py:attribute:: IsotopePattern.intensity
   :module: pyopenms.pyopenms_2




.. py:attribute:: IsotopePattern.mz_score
   :module: pyopenms.pyopenms_2




.. py:attribute:: IsotopePattern.spectrum
   :module: pyopenms.pyopenms_2




.. py:attribute:: IsotopePattern.theoretical_mz
   :module: pyopenms.pyopenms_2




.. py:attribute:: IsotopePattern.theoretical_pattern
   :module: pyopenms.pyopenms_2




.. py:class:: IsotopeVariant
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`




.. py:attribute:: IsotopeVariant.HEAVY
   :module: pyopenms.pyopenms_2
   :value: 1




.. py:attribute:: IsotopeVariant.LIGHT
   :module: pyopenms.pyopenms_2
   :value: 0




.. py:attribute:: IsotopeVariant.SIZE_OF_ISOTOPEVARIANT
   :module: pyopenms.pyopenms_2
   :value: 2




.. py:method:: IsotopeVariant.getMapping
   :module: pyopenms.pyopenms_2




.. py:class:: IsotopeWavelet
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _IsotopeWavelet


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1IsotopeWavelet.html




.. py:method:: IsotopeWavelet.destroy
   :module: pyopenms.pyopenms_2


Cython signature: void destroy()
Deletes the singleton instance




.. py:method:: IsotopeWavelet.getExpTableMaxIndex
   :module: pyopenms.pyopenms_2


Cython signature: size_t getExpTableMaxIndex()
Returns the largest possible index for the pre-sampled exp table




.. py:method:: IsotopeWavelet.getGammaTableMaxIndex
   :module: pyopenms.pyopenms_2


Cython signature: size_t getGammaTableMaxIndex()
Returns the largest possible index for the pre-sampled gamma table




.. py:method:: IsotopeWavelet.getInvTableSteps
   :module: pyopenms.pyopenms_2


Cython signature: double getInvTableSteps()
Returns the inv_table_steps_ parameter




.. py:method:: IsotopeWavelet.getLambdaL
   :module: pyopenms.pyopenms_2


Cython signature: double getLambdaL(double m)
Returns the mass-parameter lambda (linear fit)




.. py:method:: IsotopeWavelet.getMaxCharge
   :module: pyopenms.pyopenms_2


Cython signature: unsigned int getMaxCharge()
Returns the largest charge state we will consider




.. py:method:: IsotopeWavelet.getMzPeakCutOffAtMonoPos
   :module: pyopenms.pyopenms_2


Cython signature: unsigned int getMzPeakCutOffAtMonoPos(double mass, unsigned int z)




.. py:method:: IsotopeWavelet.getNumPeakCutOff
   :module: pyopenms.pyopenms_2


- Cython signature: unsigned int getNumPeakCutOff(double mass, unsigned int z)
- Cython signature: unsigned int getNumPeakCutOff(double mz)




.. py:method:: IsotopeWavelet.getTableSteps
   :module: pyopenms.pyopenms_2


Cython signature: double getTableSteps()
Returns the table_steps_ parameter




.. py:method:: IsotopeWavelet.getValueByLambda
   :module: pyopenms.pyopenms_2


Cython signature: double getValueByLambda(double lambda_, double tz1)


Returns the value of the isotope wavelet at position `t` via a fast table lookup
-----
Usually, you do not need to call this function
Please use `sampleTheWavelet` instead
Note that this functions returns the pure function value of psi and not the normalized (average=0)
value given by Psi
-----
:param lambda: The mass-parameter lambda
:param tz1: t (the position) times the charge (z) plus 1




.. py:method:: IsotopeWavelet.getValueByLambdaExact
   :module: pyopenms.pyopenms_2


Cython signature: double getValueByLambdaExact(double lambda_, double tz1)




.. py:method:: IsotopeWavelet.getValueByLambdaExtrapol
   :module: pyopenms.pyopenms_2


Cython signature: double getValueByLambdaExtrapol(double lambda_, double tz1)


Returns the value of the isotope wavelet at position `t`
-----
This function is usually significantly slower than the table lookup performed in @see getValueByLambda
Nevertheless, it might be necessary to call this function due to extrapolating reasons caused by the
alignment of the wavelet
-----
Usually, you do not need to call this function
Please use `sampleTheWavelet` instead
Note that this functions returns the pure function value of psi and not the normalized (average=0)
value given by Psi
-----
:param lambda: The mass-parameter lambda
:param tz1: t (the position) times the charge (z) plus 1




.. py:method:: IsotopeWavelet.getValueByMass
   :module: pyopenms.pyopenms_2


Cython signature: double getValueByMass(double t, double m, unsigned int z, int mode)


Returns the value of the isotope wavelet at position `t`. Usually, you do not need to call this function
-----
Note that this functions returns the pure function value of psi and not the normalized (average=0)
value given by Psi
-----
:param t: The position at which the wavelet has to be drawn (within the coordinate system of the wavelet)
:param m: The m/z position within the signal (i.e. the mass not de-charged) within the signal
:param z: The charge `z` we want to detect
:param mode: Indicates whether positive mode (+1) or negative mode (-1) has been used for ionization




.. py:method:: IsotopeWavelet.myPow
   :module: pyopenms.pyopenms_2


Cython signature: float myPow(float a, float b)
Internally used function; uses register shifts for fast computation of the power function




.. py:method:: IsotopeWavelet.setMaxCharge
   :module: pyopenms.pyopenms_2


Cython signature: void setMaxCharge(unsigned int max_charge)
Sets the `max_charge` parameter




.. py:method:: IsotopeWavelet.setTableSteps
   :module: pyopenms.pyopenms_2


Cython signature: void setTableSteps(double table_steps)
Sets the `table_steps` parameter




.. py:class:: LLMParam
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _LLMParam


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1LLMParam.html




.. py:attribute:: LLMParam.radius
   :module: pyopenms.pyopenms_2




.. py:attribute:: LLMParam.xdim
   :module: pyopenms.pyopenms_2




.. py:attribute:: LLMParam.ydim
   :module: pyopenms.pyopenms_2




.. py:class:: LPWrapper
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _LPWrapper


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1LPWrapper.html




.. py:attribute:: LPWrapper.LPWrapper_Type
   :module: pyopenms.pyopenms_2


alias of :py:class:`pyopenms.pyopenms_2.__LPWrapper_Type`


.. py:attribute:: LPWrapper.SOLVER
   :module: pyopenms.pyopenms_2


alias of :py:class:`pyopenms.pyopenms_2.__SOLVER`


.. py:attribute:: LPWrapper.Sense
   :module: pyopenms.pyopenms_2


alias of :py:class:`pyopenms.pyopenms_2.__Sense`


.. py:attribute:: LPWrapper.SolverStatus
   :module: pyopenms.pyopenms_2


alias of :py:class:`pyopenms.pyopenms_2.__SolverStatus`


.. py:attribute:: LPWrapper.VariableType
   :module: pyopenms.pyopenms_2


alias of :py:class:`pyopenms.pyopenms_2.__VariableType`


.. py:attribute:: LPWrapper.WriteFormat
   :module: pyopenms.pyopenms_2


alias of :py:class:`pyopenms.pyopenms_2.__WriteFormat`


.. py:method:: LPWrapper.addColumn
   :module: pyopenms.pyopenms_2


- Cython signature: int addColumn()
  Adds an empty column to the LP matrix, returns index


- Cython signature: int addColumn(libcpp_vector[int] column_indices, libcpp_vector[double] column_values, const String & name)
  Adds a column to the LP matrix, returns index


- Cython signature: int addColumn(libcpp_vector[int] & column_indices, libcpp_vector[double] & column_values, const String & name, double lower_bound, double upper_bound, LPWrapper_Type type_)
  Adds a column with boundaries to the LP matrix, returns index




.. py:method:: LPWrapper.addRow
   :module: pyopenms.pyopenms_2


- Cython signature: int addRow(libcpp_vector[int] row_indices, libcpp_vector[double] row_values, const String & name)
  Adds a row to the LP matrix, returns index


- Cython signature: int addRow(libcpp_vector[int] & row_indices, libcpp_vector[double] & row_values, const String & name, double lower_bound, double upper_bound, LPWrapper_Type type_)
  Adds a row with boundaries to the LP matrix, returns index




.. py:method:: LPWrapper.deleteRow
   :module: pyopenms.pyopenms_2


Cython signature: void deleteRow(int index)
Delete index-th row




.. py:method:: LPWrapper.getColumnIndex
   :module: pyopenms.pyopenms_2


Cython signature: int getColumnIndex(const String & name)
Returns index of the column with name




.. py:method:: LPWrapper.getColumnLowerBound
   :module: pyopenms.pyopenms_2


Cython signature: double getColumnLowerBound(int index)
Returns column's lower bound




.. py:method:: LPWrapper.getColumnName
   :module: pyopenms.pyopenms_2


Cython signature: String getColumnName(int index)
Returns name of the index-th column




.. py:method:: LPWrapper.getColumnType
   :module: pyopenms.pyopenms_2


Cython signature: VariableType getColumnType(int index)
Returns column/variable type.




.. py:method:: LPWrapper.getColumnUpperBound
   :module: pyopenms.pyopenms_2


Cython signature: double getColumnUpperBound(int index)
Returns column's upper bound




.. py:method:: LPWrapper.getColumnValue
   :module: pyopenms.pyopenms_2


Cython signature: double getColumnValue(int index)




.. py:method:: LPWrapper.getElement
   :module: pyopenms.pyopenms_2


Cython signature: double getElement(int row_index, int column_index)
Returns the element




.. py:method:: LPWrapper.getMatrixRow
   :module: pyopenms.pyopenms_2


Cython signature: void getMatrixRow(int idx, libcpp_vector[int] & indexes)




.. py:method:: LPWrapper.getNumberOfColumns
   :module: pyopenms.pyopenms_2


Cython signature: int getNumberOfColumns()
Returns number of columns




.. py:method:: LPWrapper.getNumberOfNonZeroEntriesInRow
   :module: pyopenms.pyopenms_2


Cython signature: int getNumberOfNonZeroEntriesInRow(int idx)




.. py:method:: LPWrapper.getNumberOfRows
   :module: pyopenms.pyopenms_2


Cython signature: int getNumberOfRows()
Returns number of rows




.. py:method:: LPWrapper.getObjective
   :module: pyopenms.pyopenms_2


Cython signature: double getObjective(int index)
Returns objective value for column with index




.. py:method:: LPWrapper.getObjectiveSense
   :module: pyopenms.pyopenms_2


Cython signature: Sense getObjectiveSense()
Returns objective sense




.. py:method:: LPWrapper.getObjectiveValue
   :module: pyopenms.pyopenms_2


Cython signature: double getObjectiveValue()




.. py:method:: LPWrapper.getRowIndex
   :module: pyopenms.pyopenms_2


Cython signature: int getRowIndex(const String & name)
Returns index of the row with name




.. py:method:: LPWrapper.getRowLowerBound
   :module: pyopenms.pyopenms_2


Cython signature: double getRowLowerBound(int index)
Returns row's lower bound




.. py:method:: LPWrapper.getRowName
   :module: pyopenms.pyopenms_2


Cython signature: String getRowName(int index)
Sets name of the index-th row




.. py:method:: LPWrapper.getRowUpperBound
   :module: pyopenms.pyopenms_2


Cython signature: double getRowUpperBound(int index)
Returns row's upper bound




.. py:method:: LPWrapper.getSolver
   :module: pyopenms.pyopenms_2


Cython signature: SOLVER getSolver()
Returns currently active solver




.. py:method:: LPWrapper.getStatus
   :module: pyopenms.pyopenms_2


Cython signature: SolverStatus getStatus()


Returns solution status
-----
:returns: status: 1 - undefined, 2 - integer optimal, 3- integer feasible (no optimality proven), 4- no integer feasible solution




.. py:method:: LPWrapper.readProblem
   :module: pyopenms.pyopenms_2


Cython signature: void readProblem(String filename, String format_)


Read LP from file
-----
:param filename: Filename where to store the LP problem
:param format: LP, MPS or GLPK




.. py:method:: LPWrapper.setColumnBounds
   :module: pyopenms.pyopenms_2


Cython signature: void setColumnBounds(int index, double lower_bound, double upper_bound, LPWrapper_Type type_)
Sets column bounds




.. py:method:: LPWrapper.setColumnName
   :module: pyopenms.pyopenms_2


Cython signature: void setColumnName(int index, const String & name)
Sets name of the index-th column




.. py:method:: LPWrapper.setColumnType
   :module: pyopenms.pyopenms_2


Cython signature: void setColumnType(int index, VariableType type_)
Sets column/variable type.




.. py:method:: LPWrapper.setElement
   :module: pyopenms.pyopenms_2


Cython signature: void setElement(int row_index, int column_index, double value)
Sets the element




.. py:method:: LPWrapper.setObjective
   :module: pyopenms.pyopenms_2


Cython signature: void setObjective(int index, double obj_value)
Sets objective value for column with index




.. py:method:: LPWrapper.setObjectiveSense
   :module: pyopenms.pyopenms_2


Cython signature: void setObjectiveSense(Sense sense)
Sets objective direction




.. py:method:: LPWrapper.setRowBounds
   :module: pyopenms.pyopenms_2


Cython signature: void setRowBounds(int index, double lower_bound, double upper_bound, LPWrapper_Type type_)
Sets row bounds




.. py:method:: LPWrapper.setRowName
   :module: pyopenms.pyopenms_2


Cython signature: void setRowName(int index, const String & name)
Sets name of the index-th row




.. py:method:: LPWrapper.solve
   :module: pyopenms.pyopenms_2


Cython signature: int solve(SolverParam & solver_param, size_t verbose_level)


Solve problems, parameters like enabled heuristics can be given via solver_param
-----
The verbose level (0,1,2) determines if the solver prints status messages and internals
-----
:param solver_param: Parameters of the solver introduced by SolverParam
:param verbose_level: Sets verbose level
:returns: solver dependent




.. py:method:: LPWrapper.writeProblem
   :module: pyopenms.pyopenms_2


Cython signature: void writeProblem(const String & filename, WriteFormat format_)


Write LP formulation to a file
-----
:param filename: Output filename, if the filename ends with '.gz' it will be compressed
:param format: MPS-format is supported by GLPK and COIN-OR; LP and GLPK-formats only by GLPK




.. py:class:: LightCompound
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _LightCompound


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenSwath_1_1LightCompound.html




.. py:attribute:: LightCompound.charge
   :module: pyopenms.pyopenms_2




.. py:attribute:: LightCompound.compound_name
   :module: pyopenms.pyopenms_2




.. py:attribute:: LightCompound.drift_time
   :module: pyopenms.pyopenms_2




.. py:method:: LightCompound.getChargeState
   :module: pyopenms.pyopenms_2


Cython signature: int getChargeState()




.. py:method:: LightCompound.getDriftTime
   :module: pyopenms.pyopenms_2


Cython signature: double getDriftTime()




.. py:attribute:: LightCompound.id
   :module: pyopenms.pyopenms_2




.. py:method:: LightCompound.isPeptide
   :module: pyopenms.pyopenms_2


Cython signature: bool isPeptide()




.. py:attribute:: LightCompound.modifications
   :module: pyopenms.pyopenms_2




.. py:attribute:: LightCompound.peptide_group_label
   :module: pyopenms.pyopenms_2




.. py:attribute:: LightCompound.protein_refs
   :module: pyopenms.pyopenms_2




.. py:attribute:: LightCompound.rt
   :module: pyopenms.pyopenms_2




.. py:attribute:: LightCompound.sequence
   :module: pyopenms.pyopenms_2




.. py:method:: LightCompound.setChargeState
   :module: pyopenms.pyopenms_2


Cython signature: void setChargeState(int ch)




.. py:method:: LightCompound.setDriftTime
   :module: pyopenms.pyopenms_2


Cython signature: void setDriftTime(double d)




.. py:attribute:: LightCompound.sum_formula
   :module: pyopenms.pyopenms_2




.. py:class:: LightModification
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _LightModification


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenSwath_1_1LightModification.html




.. py:attribute:: LightModification.location
   :module: pyopenms.pyopenms_2




.. py:attribute:: LightModification.unimod_id
   :module: pyopenms.pyopenms_2




.. py:class:: LightProtein
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _LightProtein


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenSwath_1_1LightProtein.html




.. py:attribute:: LightProtein.id
   :module: pyopenms.pyopenms_2




.. py:attribute:: LightProtein.sequence
   :module: pyopenms.pyopenms_2




.. py:class:: LightTargetedExperiment
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _LightTargetedExperiment


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenSwath_1_1LightTargetedExperiment.html




.. py:attribute:: LightTargetedExperiment.compounds
   :module: pyopenms.pyopenms_2




.. py:method:: LightTargetedExperiment.getCompoundByRef
   :module: pyopenms.pyopenms_2


Cython signature: LightCompound getCompoundByRef(libcpp_string & ref)




.. py:method:: LightTargetedExperiment.getCompounds
   :module: pyopenms.pyopenms_2


Cython signature: libcpp_vector[LightCompound] getCompounds()




.. py:method:: LightTargetedExperiment.getPeptideByRef
   :module: pyopenms.pyopenms_2


Cython signature: LightCompound getPeptideByRef(libcpp_string & ref)




.. py:method:: LightTargetedExperiment.getProteins
   :module: pyopenms.pyopenms_2


Cython signature: libcpp_vector[LightProtein] getProteins()




.. py:method:: LightTargetedExperiment.getTransitions
   :module: pyopenms.pyopenms_2


Cython signature: libcpp_vector[LightTransition] getTransitions()




.. py:attribute:: LightTargetedExperiment.proteins
   :module: pyopenms.pyopenms_2




.. py:attribute:: LightTargetedExperiment.transitions
   :module: pyopenms.pyopenms_2




.. py:class:: LightTransition
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _LightTransition


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenSwath_1_1LightTransition.html




.. py:attribute:: LightTransition.decoy
   :module: pyopenms.pyopenms_2




.. py:attribute:: LightTransition.detecting_transition
   :module: pyopenms.pyopenms_2




.. py:attribute:: LightTransition.fragment_charge
   :module: pyopenms.pyopenms_2




.. py:method:: LightTransition.getCompoundRef
   :module: pyopenms.pyopenms_2


Cython signature: libcpp_string getCompoundRef()




.. py:method:: LightTransition.getLibraryIntensity
   :module: pyopenms.pyopenms_2


Cython signature: double getLibraryIntensity()




.. py:method:: LightTransition.getNativeID
   :module: pyopenms.pyopenms_2


Cython signature: libcpp_string getNativeID()




.. py:method:: LightTransition.getPeptideRef
   :module: pyopenms.pyopenms_2


Cython signature: libcpp_string getPeptideRef()




.. py:method:: LightTransition.getPrecursorMZ
   :module: pyopenms.pyopenms_2


Cython signature: double getPrecursorMZ()




.. py:method:: LightTransition.getProductChargeState
   :module: pyopenms.pyopenms_2


Cython signature: int getProductChargeState()




.. py:method:: LightTransition.getProductMZ
   :module: pyopenms.pyopenms_2


Cython signature: double getProductMZ()




.. py:attribute:: LightTransition.identifying_transition
   :module: pyopenms.pyopenms_2




.. py:method:: LightTransition.isDetectingTransition
   :module: pyopenms.pyopenms_2


Cython signature: bool isDetectingTransition()




.. py:method:: LightTransition.isIdentifyingTransition
   :module: pyopenms.pyopenms_2


Cython signature: bool isIdentifyingTransition()




.. py:method:: LightTransition.isProductChargeStateSet
   :module: pyopenms.pyopenms_2


Cython signature: bool isProductChargeStateSet()




.. py:method:: LightTransition.isQuantifyingTransition
   :module: pyopenms.pyopenms_2


Cython signature: bool isQuantifyingTransition()




.. py:attribute:: LightTransition.library_intensity
   :module: pyopenms.pyopenms_2




.. py:attribute:: LightTransition.peptide_ref
   :module: pyopenms.pyopenms_2




.. py:attribute:: LightTransition.precursor_mz
   :module: pyopenms.pyopenms_2




.. py:attribute:: LightTransition.product_mz
   :module: pyopenms.pyopenms_2




.. py:attribute:: LightTransition.quantifying_transition
   :module: pyopenms.pyopenms_2




.. py:method:: LightTransition.setDetectingTransition
   :module: pyopenms.pyopenms_2


Cython signature: void setDetectingTransition(bool d)




.. py:method:: LightTransition.setIdentifyingTransition
   :module: pyopenms.pyopenms_2


Cython signature: void setIdentifyingTransition(bool i)




.. py:method:: LightTransition.setLibraryIntensity
   :module: pyopenms.pyopenms_2


Cython signature: void setLibraryIntensity(double l)




.. py:method:: LightTransition.setQuantifyingTransition
   :module: pyopenms.pyopenms_2


Cython signature: void setQuantifyingTransition(bool q)




.. py:attribute:: LightTransition.transition_name
   :module: pyopenms.pyopenms_2




.. py:class:: LocalLinearMap
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _LocalLinearMap


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1LocalLinearMap.html


 Trained Local Linear Map (LLM) model for peak intensity prediction
 -----
 This class offers a model for predictions of peptide peak heights
 (referred to as intensities) by a Local Linear Map (LLM) model and
 is the basis of PeakIntensityPredictor
 -----
 A general introduction to the Peak Intensity Predictor (PIP)
 can be found in the PIP Tutorial
 -----
 The model trained needs two files for storing the position of the
 codebook vectors and the linear mappings (codebooks.data, linearMapping.data)
 This is the default model used by PeakIntensityPredictor




.. py:method:: LocalLinearMap.getCodebooks
   :module: pyopenms.pyopenms_2


Cython signature: MatrixDouble getCodebooks()
Returns position of the codebook vectors (18-dim)




.. py:method:: LocalLinearMap.getLLMParam
   :module: pyopenms.pyopenms_2


Cython signature: LLMParam getLLMParam()
Returns parameters of the LocalLinearMap model




.. py:method:: LocalLinearMap.getMatrixA
   :module: pyopenms.pyopenms_2


Cython signature: MatrixDouble getMatrixA()
Returns linear mappings of the codebooks




.. py:method:: LocalLinearMap.getVectorWout
   :module: pyopenms.pyopenms_2


Cython signature: libcpp_vector[double] getVectorWout()
Returns linear bias




.. py:method:: LocalLinearMap.normalizeVector
   :module: pyopenms.pyopenms_2


Cython signature: void normalizeVector(libcpp_vector[double] & aaIndexVariables)
Calculates and returns the normalized amino acid index variables from string representation of peptide




.. py:class:: MRMFeatureQCFile
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _MRMFeatureQCFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MRMFeatureQCFile.html


 File adapter for MRMFeatureQC files
 -----
 Loads and stores .csv or .tsv files describing an MRMFeatureQC




.. py:method:: MRMFeatureQCFile.load
   :module: pyopenms.pyopenms_2


Cython signature: void load(const String & filename, MRMFeatureQC & mrmfqc, const bool is_component_group)


Loads an MRMFeatureQC file
-----
:param filename: The path to the input file
:param mrmfqc: The output class which will contain the criteria
:param is_component_group: True if the user intends to load ComponentGroupQCs data, false otherwise
-----
:raises:
  Exception: FileNotFound is thrown if the file could not be opened
:raises:
  Exception: ParseError is thrown if an error occurs during parsing




.. py:class:: MSDataSqlConsumer
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _MSDataSqlConsumer


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MSDataSqlConsumer.html




.. py:method:: MSDataSqlConsumer.consumeChromatogram
   :module: pyopenms.pyopenms_2


Cython signature: void consumeChromatogram(MSChromatogram & c)
Write a chromatogram to the output file




.. py:method:: MSDataSqlConsumer.consumeSpectrum
   :module: pyopenms.pyopenms_2


Cython signature: void consumeSpectrum(MSSpectrum & s)
Write a spectrum to the output file




.. py:method:: MSDataSqlConsumer.flush
   :module: pyopenms.pyopenms_2


Cython signature: void flush()


Flushes the data for good
-----
After calling this function, no more data is held in the buffer but the
class is still able to receive new data




.. py:method:: MSDataSqlConsumer.setExpectedSize
   :module: pyopenms.pyopenms_2


Cython signature: void setExpectedSize(size_t expectedSpectra, size_t expectedChromatograms)




.. py:method:: MSDataSqlConsumer.setExperimentalSettings
   :module: pyopenms.pyopenms_2


Cython signature: void setExperimentalSettings(ExperimentalSettings & exp)




.. py:class:: MascotGenericFile
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _MascotGenericFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MascotGenericFile.html
 -- Inherits from ['ProgressLogger', 'DefaultParamHandler']




.. py:method:: MascotGenericFile.endProgress
   :module: pyopenms.pyopenms_2


Cython signature: void endProgress()
Ends the progress display




.. py:method:: MascotGenericFile.getDefaults
   :module: pyopenms.pyopenms_2


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: MascotGenericFile.getHTTPPeakListEnclosure
   :module: pyopenms.pyopenms_2


Cython signature: libcpp_pair[String,String] getHTTPPeakListEnclosure(const String & filename)


Enclosing Strings of the peak list body for HTTP submission
-----
Can be used to embed custom content into HTTP submission (when writing only the MGF header in HTTP format and then
adding the peaks (in whatever format, e.g. mzXML) enclosed in this body
The `filename` can later be found in the Mascot response




.. py:method:: MascotGenericFile.getLogType
   :module: pyopenms.pyopenms_2


Cython signature: LogType getLogType()
Returns the type of progress log being used




.. py:method:: MascotGenericFile.getName
   :module: pyopenms.pyopenms_2


Cython signature: String getName()
Returns the name




.. py:method:: MascotGenericFile.getParameters
   :module: pyopenms.pyopenms_2


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: MascotGenericFile.getSubsections
   :module: pyopenms.pyopenms_2


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: MascotGenericFile.load
   :module: pyopenms.pyopenms_2


Cython signature: void load(const String & filename, MSExperiment & exp)


Loads a Mascot Generic File into a PeakMap
-----
:param filename: File name which the map should be read from
:param exp: The map which is filled with the data from the given file
:raises:
  Exception: FileNotFound is thrown if the given file could not be found




.. py:method:: MascotGenericFile.nextProgress
   :module: pyopenms.pyopenms_2


Cython signature: void nextProgress()
Increment progress by 1 (according to range begin-end)




.. py:method:: MascotGenericFile.setLogType
   :module: pyopenms.pyopenms_2


Cython signature: void setLogType(LogType)
Sets the progress log that should be used. The default type is NONE!




.. py:method:: MascotGenericFile.setName
   :module: pyopenms.pyopenms_2


Cython signature: void setName(const String &)
Sets the name




.. py:method:: MascotGenericFile.setParameters
   :module: pyopenms.pyopenms_2


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: MascotGenericFile.setProgress
   :module: pyopenms.pyopenms_2


Cython signature: void setProgress(ptrdiff_t value)
Sets the current progress




.. py:method:: MascotGenericFile.startProgress
   :module: pyopenms.pyopenms_2


Cython signature: void startProgress(ptrdiff_t begin, ptrdiff_t end, String label)




.. py:method:: MascotGenericFile.store
   :module: pyopenms.pyopenms_2


Cython signature: void store(const String & filename, MSExperiment & experiment)




.. py:method:: MascotGenericFile.updateMembers_
   :module: pyopenms.pyopenms_2


Cython signature: void updateMembers_()
Docu in base class




.. py:class:: MascotInfile
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _MascotInfile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MascotInfile.html
 -- Inherits from ['ProgressLogger']




.. py:method:: MascotInfile.endProgress
   :module: pyopenms.pyopenms_2


Cython signature: void endProgress()
Ends the progress display




.. py:method:: MascotInfile.getBoundary
   :module: pyopenms.pyopenms_2


Cython signature: String getBoundary()
Returns the boundary used for the MIME format




.. py:method:: MascotInfile.getCharges
   :module: pyopenms.pyopenms_2


Cython signature: String getCharges()
Returns the charges




.. py:method:: MascotInfile.getCleavage
   :module: pyopenms.pyopenms_2


Cython signature: String getCleavage()
Returns the enzyme used for cleavage




.. py:method:: MascotInfile.getDB
   :module: pyopenms.pyopenms_2


Cython signature: String getDB()
Returns the DB to use




.. py:method:: MascotInfile.getFormVersion
   :module: pyopenms.pyopenms_2


Cython signature: String getFormVersion()
Returns the Mascot form version




.. py:method:: MascotInfile.getHits
   :module: pyopenms.pyopenms_2


Cython signature: String getHits()
Returns the number of hits to report back




.. py:method:: MascotInfile.getInstrument
   :module: pyopenms.pyopenms_2


Cython signature: String getInstrument()
Returns the instrument type




.. py:method:: MascotInfile.getLogType
   :module: pyopenms.pyopenms_2


Cython signature: LogType getLogType()
Returns the type of progress log being used




.. py:method:: MascotInfile.getMassType
   :module: pyopenms.pyopenms_2


Cython signature: String getMassType()
Returns the used mass type ("Monoisotopic" or "Average")




.. py:method:: MascotInfile.getMissedCleavages
   :module: pyopenms.pyopenms_2


Cython signature: unsigned int getMissedCleavages()
Returns the number of allowed missed cleavages




.. py:method:: MascotInfile.getModifications
   :module: pyopenms.pyopenms_2


Cython signature: libcpp_vector[String] getModifications()
Returns a vector containing the fixed modifications (default none)




.. py:method:: MascotInfile.getPeakMassTolerance
   :module: pyopenms.pyopenms_2


Cython signature: float getPeakMassTolerance()
Returns the peak mass tolerance in Da




.. py:method:: MascotInfile.getPrecursorMassTolerance
   :module: pyopenms.pyopenms_2


Cython signature: float getPrecursorMassTolerance()
Returns the precursor mass tolerance




.. py:method:: MascotInfile.getSearchType
   :module: pyopenms.pyopenms_2


Cython signature: String getSearchType()
Returns the search type




.. py:method:: MascotInfile.getTaxonomy
   :module: pyopenms.pyopenms_2


Cython signature: String getTaxonomy()
Returns the taxonomy




.. py:method:: MascotInfile.getVariableModifications
   :module: pyopenms.pyopenms_2


Cython signature: libcpp_vector[String] getVariableModifications()
Returns a vector containing the variable modifications (default none)




.. py:method:: MascotInfile.load
   :module: pyopenms.pyopenms_2


Cython signature: void load(const String & filename, MSExperiment & exp)


Loads a Mascot Generic File into a PeakMap
-----
:param filename: File name which the map should be read from
:param exp: The map which is filled with the data from the given file
:raises:
  Exception: FileNotFound is thrown if the given file could not be found




.. py:method:: MascotInfile.nextProgress
   :module: pyopenms.pyopenms_2


Cython signature: void nextProgress()
Increment progress by 1 (according to range begin-end)




.. py:method:: MascotInfile.setBoundary
   :module: pyopenms.pyopenms_2


Cython signature: void setBoundary(const String & boundary)
Sets the boundary used for the MIME format.By default a 22 character random string is used




.. py:method:: MascotInfile.setCharges
   :module: pyopenms.pyopenms_2


Cython signature: void setCharges(libcpp_vector[int] & charges)
Sets the charges (default 1+, 2+ and 3+)




.. py:method:: MascotInfile.setCleavage
   :module: pyopenms.pyopenms_2


Cython signature: void setCleavage(const String & cleavage)
Sets the enzyme used for cleavage (default Trypsin). See mascot path /config/enzymes for possible settings




.. py:method:: MascotInfile.setDB
   :module: pyopenms.pyopenms_2


Cython signature: void setDB(const String & db)
Sets the DB (default MSDB). See mascot path /config/mascot.dat in "Databases" section for possible settings




.. py:method:: MascotInfile.setFormVersion
   :module: pyopenms.pyopenms_2


Cython signature: void setFormVersion(const String & form_version)
Sets the Mascot form version (default 1.01)




.. py:method:: MascotInfile.setHits
   :module: pyopenms.pyopenms_2


Cython signature: void setHits(const String & hits)
Sets the number of hits to report back (default 20)




.. py:method:: MascotInfile.setInstrument
   :module: pyopenms.pyopenms_2


Cython signature: void setInstrument(const String & instrument)
Sets the instrument type (Default Default). Possible instruments are ESI-QUAD-TOF, MALDI-TOF-PSD, ESI-TRAP, ESI-QUAD, ESI-FTICR, MALDI-TOF-TOF, ESI-4SECTOR, FTMS-ECD, MALDI-QUAD-TOF, MALDI-QIT-TOF




.. py:method:: MascotInfile.setLogType
   :module: pyopenms.pyopenms_2


Cython signature: void setLogType(LogType)
Sets the progress log that should be used. The default type is NONE!




.. py:method:: MascotInfile.setMassType
   :module: pyopenms.pyopenms_2


Cython signature: void setMassType(const String & mass_type)
Sets the used mass type "Monoisotopic" or "Average" (default Monoisotopic)




.. py:method:: MascotInfile.setMissedCleavages
   :module: pyopenms.pyopenms_2


Cython signature: void setMissedCleavages(unsigned int missed_cleavages)
Sets the number of allowed missed cleavages (default 1)




.. py:method:: MascotInfile.setModifications
   :module: pyopenms.pyopenms_2


Cython signature: void setModifications(libcpp_vector[String] & mods)
Sets the fixed modifications (default none). See mascot path /config/mod_file for possible settings




.. py:method:: MascotInfile.setPeakMassTolerance
   :module: pyopenms.pyopenms_2


Cython signature: void setPeakMassTolerance(float ion_mass_tolerance)
Sets the peak mass tolerance in Da (default 1.0)




.. py:method:: MascotInfile.setPrecursorMassTolerance
   :module: pyopenms.pyopenms_2


Cython signature: void setPrecursorMassTolerance(float precursor_mass_tolerance)
Sets the precursor mass tolerance in Da (default 2.0)




.. py:method:: MascotInfile.setProgress
   :module: pyopenms.pyopenms_2


Cython signature: void setProgress(ptrdiff_t value)
Sets the current progress




.. py:method:: MascotInfile.setSearchType
   :module: pyopenms.pyopenms_2


Cython signature: void setSearchType(const String & search_type)
Sets the search type (default MIS). So far only MIS is supported!Valid types are "MIS" (MS/MS Ion Search), "PMF" (Peptide Mass Fingerprint) , "SQ" (Sequence Query)




.. py:method:: MascotInfile.setTaxonomy
   :module: pyopenms.pyopenms_2


Cython signature: void setTaxonomy(const String & taxonomy)
Sets the taxonomy (default All entries). See mascot path /config/taxonomy for possible settings




.. py:method:: MascotInfile.setVariableModifications
   :module: pyopenms.pyopenms_2


Cython signature: void setVariableModifications(libcpp_vector[String] & mods)
Sets the fixed modifications (default none). See mascot path /config/mod_file for possible settings




.. py:method:: MascotInfile.startProgress
   :module: pyopenms.pyopenms_2


Cython signature: void startProgress(ptrdiff_t begin, ptrdiff_t end, String label)




.. py:method:: MascotInfile.store
   :module: pyopenms.pyopenms_2


- Cython signature: void store(const String & filename, MSSpectrum & spec, double mz, double retention_time, String search_title)
  Stores the peak list in a MascotInfile that can be used as input for MASCOT shell execution


- Cython signature: void store(const String & filename, MSExperiment & experiment, String search_title)
  Stores the experiment data in a MascotInfile that can be used as input for MASCOT shell execution




.. py:class:: MassAnalyzer
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _MassAnalyzer


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MassAnalyzer.html
 -- Inherits from ['MetaInfoInterface']




.. py:attribute:: MassAnalyzer.AnalyzerType
   :module: pyopenms.pyopenms_2


alias of :py:class:`pyopenms.pyopenms_2.__AnalyzerType`


.. py:attribute:: MassAnalyzer.ReflectronState
   :module: pyopenms.pyopenms_2


alias of :py:class:`pyopenms.pyopenms_2.__ReflectronState`


.. py:attribute:: MassAnalyzer.ResolutionMethod
   :module: pyopenms.pyopenms_2


alias of :py:class:`pyopenms.pyopenms_2.__ResolutionMethod`


.. py:attribute:: MassAnalyzer.ResolutionType
   :module: pyopenms.pyopenms_2


alias of :py:class:`pyopenms.pyopenms_2.__ResolutionType`


.. py:attribute:: MassAnalyzer.ScanDirection
   :module: pyopenms.pyopenms_2


alias of :py:class:`pyopenms.pyopenms_2.__ScanDirection`


.. py:attribute:: MassAnalyzer.ScanLaw
   :module: pyopenms.pyopenms_2


alias of :py:class:`pyopenms.pyopenms_2.__ScanLaw`


.. py:method:: MassAnalyzer.clearMetaInfo
   :module: pyopenms.pyopenms_2


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: MassAnalyzer.getAccuracy
   :module: pyopenms.pyopenms_2


Cython signature: double getAccuracy()
Returns the mass accuracy i.e. how much the theoretical mass may differ from the measured mass (in ppm)




.. py:method:: MassAnalyzer.getFinalMSExponent
   :module: pyopenms.pyopenms_2


Cython signature: int getFinalMSExponent()
Returns the final MS exponent




.. py:method:: MassAnalyzer.getIsolationWidth
   :module: pyopenms.pyopenms_2


Cython signature: double getIsolationWidth()
Returns the isolation width i.e. in which m/z range the precursor ion is selected for MS to the n (in m/z)




.. py:method:: MassAnalyzer.getKeys
   :module: pyopenms.pyopenms_2


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: MassAnalyzer.getMagneticFieldStrength
   :module: pyopenms.pyopenms_2


Cython signature: double getMagneticFieldStrength()
Returns the strength of the magnetic field (in T)




.. py:method:: MassAnalyzer.getMetaValue
   :module: pyopenms.pyopenms_2


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: MassAnalyzer.getOrder
   :module: pyopenms.pyopenms_2


Cython signature: int getOrder()
Returns the position of this part in the whole Instrument




.. py:method:: MassAnalyzer.getReflectronState
   :module: pyopenms.pyopenms_2


Cython signature: ReflectronState getReflectronState()
Returns the reflectron state (for TOF)




.. py:method:: MassAnalyzer.getResolution
   :module: pyopenms.pyopenms_2


Cython signature: double getResolution()
Returns the resolution. The maximum m/z value at which two peaks can be resolved, according to one of the standard measures




.. py:method:: MassAnalyzer.getResolutionMethod
   :module: pyopenms.pyopenms_2


Cython signature: ResolutionMethod getResolutionMethod()
Returns the method used for determination of the resolution




.. py:method:: MassAnalyzer.getResolutionType
   :module: pyopenms.pyopenms_2


Cython signature: ResolutionType getResolutionType()
Returns the resolution type




.. py:method:: MassAnalyzer.getScanDirection
   :module: pyopenms.pyopenms_2


Cython signature: ScanDirection getScanDirection()
Returns the direction of scanning




.. py:method:: MassAnalyzer.getScanLaw
   :module: pyopenms.pyopenms_2


Cython signature: ScanLaw getScanLaw()
Returns the scan law




.. py:method:: MassAnalyzer.getScanRate
   :module: pyopenms.pyopenms_2


Cython signature: double getScanRate()
Returns the scan rate (in s)




.. py:method:: MassAnalyzer.getScanTime
   :module: pyopenms.pyopenms_2


Cython signature: double getScanTime()
Returns the scan time for a single scan (in s)




.. py:method:: MassAnalyzer.getTOFTotalPathLength
   :module: pyopenms.pyopenms_2


Cython signature: double getTOFTotalPathLength()
Returns the path length for a TOF mass analyzer (in meter)




.. py:method:: MassAnalyzer.getType
   :module: pyopenms.pyopenms_2


Cython signature: AnalyzerType getType()
Returns the analyzer type




.. py:method:: MassAnalyzer.isMetaEmpty
   :module: pyopenms.pyopenms_2


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: MassAnalyzer.metaRegistry
   :module: pyopenms.pyopenms_2


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: MassAnalyzer.metaValueExists
   :module: pyopenms.pyopenms_2


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: MassAnalyzer.removeMetaValue
   :module: pyopenms.pyopenms_2


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: MassAnalyzer.setAccuracy
   :module: pyopenms.pyopenms_2


Cython signature: void setAccuracy(double accuracy)
Sets the accuracy i.e. how much the theoretical mass may differ from the measured mass (in ppm)




.. py:method:: MassAnalyzer.setFinalMSExponent
   :module: pyopenms.pyopenms_2


Cython signature: void setFinalMSExponent(int final_MS_exponent)
Sets the final MS exponent




.. py:method:: MassAnalyzer.setIsolationWidth
   :module: pyopenms.pyopenms_2


Cython signature: void setIsolationWidth(double isolation_width)
Sets the isolation width i.e. in which m/z range the precursor ion is selected for MS to the n (in m/z)




.. py:method:: MassAnalyzer.setMagneticFieldStrength
   :module: pyopenms.pyopenms_2


Cython signature: void setMagneticFieldStrength(double magnetic_field_strength)
Sets the strength of the magnetic field (in T)




.. py:method:: MassAnalyzer.setMetaValue
   :module: pyopenms.pyopenms_2


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:method:: MassAnalyzer.setOrder
   :module: pyopenms.pyopenms_2


Cython signature: void setOrder(int order)
Sets the order




.. py:method:: MassAnalyzer.setReflectronState
   :module: pyopenms.pyopenms_2


Cython signature: void setReflectronState(ReflectronState reflecton_state)
Sets the reflectron state (for TOF)




.. py:method:: MassAnalyzer.setResolution
   :module: pyopenms.pyopenms_2


Cython signature: void setResolution(double resolution)
Sets the resolution




.. py:method:: MassAnalyzer.setResolutionMethod
   :module: pyopenms.pyopenms_2


Cython signature: void setResolutionMethod(ResolutionMethod resolution_method)
Sets the method used for determination of the resolution




.. py:method:: MassAnalyzer.setResolutionType
   :module: pyopenms.pyopenms_2


Cython signature: void setResolutionType(ResolutionType resolution_type)
Sets the resolution type




.. py:method:: MassAnalyzer.setScanDirection
   :module: pyopenms.pyopenms_2


Cython signature: void setScanDirection(ScanDirection scan_direction)
Sets the direction of scanning




.. py:method:: MassAnalyzer.setScanLaw
   :module: pyopenms.pyopenms_2


Cython signature: void setScanLaw(ScanLaw scan_law)
Sets the scan law




.. py:method:: MassAnalyzer.setScanRate
   :module: pyopenms.pyopenms_2


Cython signature: void setScanRate(double scan_rate)
Sets the scan rate (in s)




.. py:method:: MassAnalyzer.setScanTime
   :module: pyopenms.pyopenms_2


Cython signature: void setScanTime(double scan_time)
Sets the scan time for a single scan (in s)




.. py:method:: MassAnalyzer.setTOFTotalPathLength
   :module: pyopenms.pyopenms_2


Cython signature: void setTOFTotalPathLength(double TOF_total_path_length)
Sets the path length for a TOF mass analyzer (in meter)




.. py:method:: MassAnalyzer.setType
   :module: pyopenms.pyopenms_2


Cython signature: void setType(AnalyzerType type)
Sets the analyzer type




.. py:class:: MassDecomposition
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _MassDecomposition


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MassDecomposition.html


 Class represents a decomposition of a mass into amino acids
 -----
 This class represents a mass decomposition into amino acids. A
 decomposition are amino acids given with frequencies which add
 up to a specific mass.




.. py:method:: MassDecomposition.compatible
   :module: pyopenms.pyopenms_2


Cython signature: bool compatible(MassDecomposition & deco)
Returns true if the mass decomposition if contained in this instance




.. py:method:: MassDecomposition.containsTag
   :module: pyopenms.pyopenms_2


Cython signature: bool containsTag(const String & tag)
Returns true if tag is contained in the mass decomposition




.. py:method:: MassDecomposition.getNumberOfMaxAA
   :module: pyopenms.pyopenms_2


Cython signature: size_t getNumberOfMaxAA()
Returns the max frequency of this composition




.. py:method:: MassDecomposition.toExpandedString
   :module: pyopenms.pyopenms_2


Cython signature: String toExpandedString()
Returns the decomposition as a string; instead of frequencies the amino acids are repeated




.. py:method:: MassDecomposition.toString
   :module: pyopenms.pyopenms_2


Cython signature: String toString()
Returns the decomposition as a string




.. py:class:: MassTrace
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _MassTrace


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::FeatureFinderAlgorithmPickedHelperStructs_1_1MassTrace.html




.. py:method:: MassTrace.getAvgMZ
   :module: pyopenms.pyopenms_2


Cython signature: double getAvgMZ()




.. py:method:: MassTrace.getConvexhull
   :module: pyopenms.pyopenms_2


Cython signature: ConvexHull2D getConvexhull()




.. py:method:: MassTrace.isValid
   :module: pyopenms.pyopenms_2


Cython signature: bool isValid()




.. py:attribute:: MassTrace.max_rt
   :module: pyopenms.pyopenms_2




.. py:attribute:: MassTrace.theoretical_int
   :module: pyopenms.pyopenms_2




.. py:method:: MassTrace.updateMaximum
   :module: pyopenms.pyopenms_2


Cython signature: void updateMaximum()




.. py:class:: MassTraceDetection
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _MassTraceDetection


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MassTraceDetection.html
 -- Inherits from ['ProgressLogger', 'DefaultParamHandler']




.. py:method:: MassTraceDetection.endProgress
   :module: pyopenms.pyopenms_2


Cython signature: void endProgress()
Ends the progress display




.. py:method:: MassTraceDetection.getDefaults
   :module: pyopenms.pyopenms_2


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: MassTraceDetection.getLogType
   :module: pyopenms.pyopenms_2


Cython signature: LogType getLogType()
Returns the type of progress log being used




.. py:method:: MassTraceDetection.getName
   :module: pyopenms.pyopenms_2


Cython signature: String getName()
Returns the name




.. py:method:: MassTraceDetection.getParameters
   :module: pyopenms.pyopenms_2


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: MassTraceDetection.getSubsections
   :module: pyopenms.pyopenms_2


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: MassTraceDetection.nextProgress
   :module: pyopenms.pyopenms_2


Cython signature: void nextProgress()
Increment progress by 1 (according to range begin-end)




.. py:method:: MassTraceDetection.run
   :module: pyopenms.pyopenms_2


Cython signature: void run(MSExperiment & input_map, libcpp_vector[Kernel_MassTrace] & traces, size_t max_traces)




.. py:method:: MassTraceDetection.setLogType
   :module: pyopenms.pyopenms_2


Cython signature: void setLogType(LogType)
Sets the progress log that should be used. The default type is NONE!




.. py:method:: MassTraceDetection.setName
   :module: pyopenms.pyopenms_2


Cython signature: void setName(const String &)
Sets the name




.. py:method:: MassTraceDetection.setParameters
   :module: pyopenms.pyopenms_2


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: MassTraceDetection.setProgress
   :module: pyopenms.pyopenms_2


Cython signature: void setProgress(ptrdiff_t value)
Sets the current progress




.. py:method:: MassTraceDetection.startProgress
   :module: pyopenms.pyopenms_2


Cython signature: void startProgress(ptrdiff_t begin, ptrdiff_t end, String label)




.. py:class:: MassTraces
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _MassTraces


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::FeatureFinderAlgorithmPickedHelperStructs_1_1MassTraces.html




.. py:attribute:: MassTraces.baseline
   :module: pyopenms.pyopenms_2




.. py:method:: MassTraces.getPeakCount
   :module: pyopenms.pyopenms_2


Cython signature: size_t getPeakCount()




.. py:method:: MassTraces.getRTBounds
   :module: pyopenms.pyopenms_2


Cython signature: libcpp_pair[double,double] getRTBounds()




.. py:method:: MassTraces.getTheoreticalmaxPosition
   :module: pyopenms.pyopenms_2


Cython signature: size_t getTheoreticalmaxPosition()




.. py:method:: MassTraces.isValid
   :module: pyopenms.pyopenms_2


Cython signature: bool isValid(double seed_mz, double trace_tolerance)




.. py:attribute:: MassTraces.max_trace
   :module: pyopenms.pyopenms_2




.. py:method:: MassTraces.updateBaseline
   :module: pyopenms.pyopenms_2


Cython signature: void updateBaseline()




.. py:class:: Measure
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`




.. py:attribute:: Measure.MEASURE_DA
   :module: pyopenms.pyopenms_2
   :value: 1




.. py:attribute:: Measure.MEASURE_PPM
   :module: pyopenms.pyopenms_2
   :value: 0




.. py:method:: Measure.getMapping
   :module: pyopenms.pyopenms_2




.. py:class:: Modification
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _Modification


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1Modification.html
 -- Inherits from ['SampleTreatment']




.. py:attribute:: Modification.Modification_SpecificityType
   :module: pyopenms.pyopenms_2


alias of :py:class:`pyopenms.pyopenms_2.__Modification_SpecificityType`


.. py:method:: Modification.clearMetaInfo
   :module: pyopenms.pyopenms_2


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: Modification.getAffectedAminoAcids
   :module: pyopenms.pyopenms_2


Cython signature: String getAffectedAminoAcids()
Returns a string containing the one letter code of the amino acids that are affected by the reagent (default "")




.. py:method:: Modification.getComment
   :module: pyopenms.pyopenms_2


Cython signature: String getComment()
Returns the description of the sample treatment




.. py:method:: Modification.getKeys
   :module: pyopenms.pyopenms_2


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: Modification.getMass
   :module: pyopenms.pyopenms_2


Cython signature: double getMass()
Returns the mass change (default 0.0)




.. py:method:: Modification.getMetaValue
   :module: pyopenms.pyopenms_2


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: Modification.getReagentName
   :module: pyopenms.pyopenms_2


Cython signature: String getReagentName()
Returns the name of the reagent that was used (default "")




.. py:method:: Modification.getSpecificityType
   :module: pyopenms.pyopenms_2


Cython signature: Modification_SpecificityType getSpecificityType()
Returns the specificity of the reagent (default AA)




.. py:method:: Modification.getType
   :module: pyopenms.pyopenms_2


Cython signature: String getType()
Returns the treatment type




.. py:method:: Modification.isMetaEmpty
   :module: pyopenms.pyopenms_2


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: Modification.metaRegistry
   :module: pyopenms.pyopenms_2


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: Modification.metaValueExists
   :module: pyopenms.pyopenms_2


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: Modification.removeMetaValue
   :module: pyopenms.pyopenms_2


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: Modification.setAffectedAminoAcids
   :module: pyopenms.pyopenms_2


Cython signature: void setAffectedAminoAcids(const String & affected_amino_acids)
Returns a string containing the one letter code of the amino acids that are affected by the reagent. Do not separate them by space, tab or comma!




.. py:method:: Modification.setComment
   :module: pyopenms.pyopenms_2


Cython signature: void setComment(const String & comment)
Sets the description of the sample treatment




.. py:method:: Modification.setMass
   :module: pyopenms.pyopenms_2


Cython signature: void setMass(double mass)
Sets the mass change




.. py:method:: Modification.setMetaValue
   :module: pyopenms.pyopenms_2


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:method:: Modification.setReagentName
   :module: pyopenms.pyopenms_2


Cython signature: void setReagentName(const String & reagent_name)
Sets the name of the reagent that was used




.. py:method:: Modification.setSpecificityType
   :module: pyopenms.pyopenms_2


Cython signature: void setSpecificityType(Modification_SpecificityType & specificity_type)
Sets the specificity of the reagent




.. py:class:: NonNegativeLeastSquaresSolver
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _NonNegativeLeastSquaresSolver


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1NonNegativeLeastSquaresSolver.html




.. py:attribute:: NonNegativeLeastSquaresSolver.RETURN_STATUS
   :module: pyopenms.pyopenms_2


alias of :py:class:`pyopenms.pyopenms_2.__RETURN_STATUS`


.. py:method:: NonNegativeLeastSquaresSolver.solve
   :module: pyopenms.pyopenms_2


Cython signature: int solve(MatrixDouble & A, MatrixDouble & b, MatrixDouble & x)




.. py:class:: OPXLSpectrumProcessingAlgorithms
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _OPXLSpectrumProcessingAlgorithms


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1OPXLSpectrumProcessingAlgorithms.html




.. py:method:: OPXLSpectrumProcessingAlgorithms.getSpectrumAlignmentFastCharge
   :module: pyopenms.pyopenms_2


Cython signature: void getSpectrumAlignmentFastCharge(libcpp_vector[libcpp_pair[size_t,size_t]] & alignment, double fragment_mass_tolerance, bool fragment_mass_tolerance_unit_ppm, const MSSpectrum & theo_spectrum, const MSSpectrum & exp_spectrum, const IntegerDataArray & theo_charges, const IntegerDataArray & exp_charges, FloatDataArray & ppm_error_array, double intensity_cutoff)




.. py:method:: OPXLSpectrumProcessingAlgorithms.getSpectrumAlignmentSimple
   :module: pyopenms.pyopenms_2


Cython signature: void getSpectrumAlignmentSimple(libcpp_vector[libcpp_pair[size_t,size_t]] & alignment, double fragment_mass_tolerance, bool fragment_mass_tolerance_unit_ppm, const libcpp_vector[SimplePeak] & theo_spectrum, const MSSpectrum & exp_spectrum, const IntegerDataArray & exp_charges)




.. py:method:: OPXLSpectrumProcessingAlgorithms.mergeAnnotatedSpectra
   :module: pyopenms.pyopenms_2


Cython signature: MSSpectrum mergeAnnotatedSpectra(MSSpectrum & first_spectrum, MSSpectrum & second_spectrum)




.. py:method:: OPXLSpectrumProcessingAlgorithms.preprocessSpectra
   :module: pyopenms.pyopenms_2


Cython signature: MSExperiment preprocessSpectra(MSExperiment & exp, double fragment_mass_tolerance, bool fragment_mass_tolerance_unit_ppm, size_t peptide_min_size, int min_precursor_charge, int max_precursor_charge, bool deisotope, bool labeled)




.. py:class:: OpenSwathOSWWriter
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _OpenSwathOSWWriter


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1OpenSwathOSWWriter.html




.. py:method:: OpenSwathOSWWriter.isActive
   :module: pyopenms.pyopenms_2


Cython signature: bool isActive()




.. py:method:: OpenSwathOSWWriter.prepareLine
   :module: pyopenms.pyopenms_2


Cython signature: String prepareLine(LightCompound & compound, LightTransition * tr, FeatureMap & output, String id_)


Prepare a single line (feature) for output
-----
The result can be flushed to disk using writeLines (either line by line or after collecting several lines)
-----
:param pep: The compound (peptide/metabolite) used for extraction
:param transition: The transition used for extraction
:param output: The feature map containing all features (each feature will generate one entry in the output)
:param id: The transition group identifier (peptide/metabolite id)
:returns: A String to be written using writeLines




.. py:method:: OpenSwathOSWWriter.writeHeader
   :module: pyopenms.pyopenms_2


Cython signature: void writeHeader()
Initializes file by generating SQLite tables




.. py:method:: OpenSwathOSWWriter.writeLines
   :module: pyopenms.pyopenms_2


Cython signature: void writeLines(libcpp_vector[String] to_osw_output)


Write data to disk
-----
Takes a set of pre-prepared data statements from prepareLine and flushes them to disk
-----
:param to_osw_output: Statements generated by prepareLine




.. py:class:: PSProteinInference
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _PSProteinInference


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1PSProteinInference.html




.. py:method:: PSProteinInference.calculateProteinProbabilities
   :module: pyopenms.pyopenms_2


Cython signature: void calculateProteinProbabilities(libcpp_vector[PeptideIdentification] & ids)




.. py:method:: PSProteinInference.findMinimalProteinList
   :module: pyopenms.pyopenms_2


Cython signature: size_t findMinimalProteinList(libcpp_vector[PeptideIdentification] & peptide_ids)




.. py:method:: PSProteinInference.getNumberOfProtIds
   :module: pyopenms.pyopenms_2


Cython signature: int getNumberOfProtIds(double protein_id_threshold)




.. py:method:: PSProteinInference.getProteinProbability
   :module: pyopenms.pyopenms_2


Cython signature: double getProteinProbability(const String & acc)




.. py:method:: PSProteinInference.getSolver
   :module: pyopenms.pyopenms_2


Cython signature: SOLVER getSolver()




.. py:method:: PSProteinInference.isProteinInMinimalList
   :module: pyopenms.pyopenms_2


Cython signature: bool isProteinInMinimalList(const String & acc)




.. py:class:: ParamCTDFile
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _ParamCTDFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ParamCTDFile.html




.. py:method:: ParamCTDFile.store
   :module: pyopenms.pyopenms_2


Cython signature: void store(libcpp_utf8_string filename, Param param, ToolInfo tool_info)




.. py:class:: PeakFileOptions
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _PeakFileOptions


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1PeakFileOptions.html


 Options for loading files containing peak data




.. py:method:: PeakFileOptions.addMSLevel
   :module: pyopenms.pyopenms_2


Cython signature: void addMSLevel(int level)
Adds a desired MS level for peaks to load




.. py:method:: PeakFileOptions.clearMSLevels
   :module: pyopenms.pyopenms_2


Cython signature: void clearMSLevels()
Clears the MS levels




.. py:method:: PeakFileOptions.containsMSLevel
   :module: pyopenms.pyopenms_2


Cython signature: bool containsMSLevel(int level)
Returns true, if MS level `level` has been set




.. py:method:: PeakFileOptions.getCompression
   :module: pyopenms.pyopenms_2


Cython signature: bool getCompression()
Returns true, if data should be compressed when writing




.. py:method:: PeakFileOptions.getFillData
   :module: pyopenms.pyopenms_2


Cython signature: bool getFillData()
Returns whether to fill the actual data into the container (spectrum/chromatogram)




.. py:method:: PeakFileOptions.getForceMQCompatability
   :module: pyopenms.pyopenms_2


Cython signature: bool getForceMQCompatability()
[mzXML only!]Returns Whether to write a scan-index and meta data to indicate a Thermo FTMS/ITMS instrument (required to have parameter control in MQ)




.. py:method:: PeakFileOptions.getForceTPPCompatability
   :module: pyopenms.pyopenms_2


Cython signature: bool getForceTPPCompatability()
[mzML only!]Returns Whether to skip writing the \<isolationWindow\> tag so that TPP finds the correct precursor m/z




.. py:method:: PeakFileOptions.getIntensity32Bit
   :module: pyopenms.pyopenms_2


Cython signature: bool getIntensity32Bit()
Returns true, if intensity data should be stored with 32bit precision




.. py:method:: PeakFileOptions.getIntensityRange
   :module: pyopenms.pyopenms_2


Cython signature: DRange1 getIntensityRange()
Returns the intensity range




.. py:method:: PeakFileOptions.getMSLevels
   :module: pyopenms.pyopenms_2


Cython signature: libcpp_vector[int] getMSLevels()
Returns the set MS levels




.. py:method:: PeakFileOptions.getMZRange
   :module: pyopenms.pyopenms_2


Cython signature: DRange1 getMZRange()
Returns the MZ range




.. py:method:: PeakFileOptions.getMaxDataPoolSize
   :module: pyopenms.pyopenms_2


Cython signature: size_t getMaxDataPoolSize()
Returns maximal size of the data pool




.. py:method:: PeakFileOptions.getMetadataOnly
   :module: pyopenms.pyopenms_2


Cython signature: bool getMetadataOnly()
Returns whether or not to load only meta data




.. py:method:: PeakFileOptions.getMz32Bit
   :module: pyopenms.pyopenms_2


Cython signature: bool getMz32Bit()
Returns true, if mz-data and rt-data should be stored with 32bit precision




.. py:method:: PeakFileOptions.getNumpressConfigurationFloatDataArray
   :module: pyopenms.pyopenms_2


Cython signature: NumpressConfig getNumpressConfigurationFloatDataArray()
Sets numpress configuration options for float data arrays




.. py:method:: PeakFileOptions.getNumpressConfigurationIntensity
   :module: pyopenms.pyopenms_2


Cython signature: NumpressConfig getNumpressConfigurationIntensity()
Sets numpress configuration options for intensity dimension




.. py:method:: PeakFileOptions.getNumpressConfigurationMassTime
   :module: pyopenms.pyopenms_2


Cython signature: NumpressConfig getNumpressConfigurationMassTime()
Sets numpress configuration options for m/z or rt dimension




.. py:method:: PeakFileOptions.getRTRange
   :module: pyopenms.pyopenms_2


Cython signature: DRange1 getRTRange()
Returns the RT range




.. py:method:: PeakFileOptions.getSkipXMLChecks
   :module: pyopenms.pyopenms_2


Cython signature: bool getSkipXMLChecks()
Returns whether to skip some XML checks and be fast instead




.. py:method:: PeakFileOptions.getSortChromatogramsByRT
   :module: pyopenms.pyopenms_2


Cython signature: bool getSortChromatogramsByRT()
Returns whether or not peaks in chromatograms should be sorted




.. py:method:: PeakFileOptions.getSortSpectraByMZ
   :module: pyopenms.pyopenms_2


Cython signature: bool getSortSpectraByMZ()
Returns whether or not peaks in spectra should be sorted




.. py:method:: PeakFileOptions.getWriteIndex
   :module: pyopenms.pyopenms_2


Cython signature: bool getWriteIndex()
Returns whether to write an index at the end of the file (e.g. indexedmzML file format)




.. py:method:: PeakFileOptions.getWriteSupplementalData
   :module: pyopenms.pyopenms_2


Cython signature: bool getWriteSupplementalData()
Returns whether or not to write supplemental peak data in MzData files




.. py:method:: PeakFileOptions.hasFilters
   :module: pyopenms.pyopenms_2


Cython signature: bool hasFilters()




.. py:method:: PeakFileOptions.hasIntensityRange
   :module: pyopenms.pyopenms_2


Cython signature: bool hasIntensityRange()
Returns true if an intensity range has been set




.. py:method:: PeakFileOptions.hasMSLevels
   :module: pyopenms.pyopenms_2


Cython signature: bool hasMSLevels()
Returns true, if MS levels have been set




.. py:method:: PeakFileOptions.hasMZRange
   :module: pyopenms.pyopenms_2


Cython signature: bool hasMZRange()
Returns true if an MZ range has been set




.. py:method:: PeakFileOptions.hasRTRange
   :module: pyopenms.pyopenms_2


Cython signature: bool hasRTRange()
Returns true if an RT range has been set




.. py:method:: PeakFileOptions.setCompression
   :module: pyopenms.pyopenms_2


Cython signature: void setCompression(bool)
Sets if data should be compressed when writing




.. py:method:: PeakFileOptions.setFillData
   :module: pyopenms.pyopenms_2


Cython signature: void setFillData(bool only)
Sets whether to fill the actual data into the container (spectrum/chromatogram)




.. py:method:: PeakFileOptions.setForceMQCompatability
   :module: pyopenms.pyopenms_2


Cython signature: void setForceMQCompatability(bool forceMQ)
[mzXML only!]Returns Whether to write a scan-index and meta data to indicate a Thermo FTMS/ITMS instrument (required to have parameter control in MQ)




.. py:method:: PeakFileOptions.setForceTPPCompatability
   :module: pyopenms.pyopenms_2


Cython signature: void setForceTPPCompatability(bool forceTPP)
[ mzML only!]Returns Whether to skip writing the \<isolationWindow\> tag so that TPP finds the correct precursor m/z




.. py:method:: PeakFileOptions.setIntensity32Bit
   :module: pyopenms.pyopenms_2


Cython signature: void setIntensity32Bit(bool int_32_bit)
Sets if intensity data should be stored with 32bit or 64bit precision




.. py:method:: PeakFileOptions.setIntensityRange
   :module: pyopenms.pyopenms_2


Cython signature: void setIntensityRange(DRange1 & range_)
Restricts the range of intensity values for peaks to load




.. py:method:: PeakFileOptions.setMSLevels
   :module: pyopenms.pyopenms_2


Cython signature: void setMSLevels(libcpp_vector[int] levels)
Sets the desired MS levels for peaks to load




.. py:method:: PeakFileOptions.setMZRange
   :module: pyopenms.pyopenms_2


Cython signature: void setMZRange(DRange1 & range_)
Restricts the range of MZ values for peaks to load




.. py:method:: PeakFileOptions.setMaxDataPoolSize
   :module: pyopenms.pyopenms_2


Cython signature: void setMaxDataPoolSize(size_t s)
Sets maximal size of the data pool




.. py:method:: PeakFileOptions.setMetadataOnly
   :module: pyopenms.pyopenms_2


Cython signature: void setMetadataOnly(bool)
Sets whether or not to load only meta data




.. py:method:: PeakFileOptions.setMz32Bit
   :module: pyopenms.pyopenms_2


Cython signature: void setMz32Bit(bool mz_32_bit)
Sets if mz-data and rt-data should be stored with 32bit or 64bit precision




.. py:method:: PeakFileOptions.setNumpressConfigurationFloatDataArray
   :module: pyopenms.pyopenms_2


Cython signature: void setNumpressConfigurationFloatDataArray(NumpressConfig config)
Returns numpress configuration options for float data arrays




.. py:method:: PeakFileOptions.setNumpressConfigurationIntensity
   :module: pyopenms.pyopenms_2


Cython signature: void setNumpressConfigurationIntensity(NumpressConfig config)
Returns numpress configuration options for intensity dimension




.. py:method:: PeakFileOptions.setNumpressConfigurationMassTime
   :module: pyopenms.pyopenms_2


Cython signature: void setNumpressConfigurationMassTime(NumpressConfig config)
Returns numpress configuration options for m/z or rt dimension




.. py:method:: PeakFileOptions.setRTRange
   :module: pyopenms.pyopenms_2


Cython signature: void setRTRange(DRange1 & range_)
Restricts the range of RT values for peaks to load




.. py:method:: PeakFileOptions.setSkipXMLChecks
   :module: pyopenms.pyopenms_2


Cython signature: void setSkipXMLChecks(bool only)
Sets whether to skip some XML checks and be fast instead




.. py:method:: PeakFileOptions.setSortChromatogramsByRT
   :module: pyopenms.pyopenms_2


Cython signature: void setSortChromatogramsByRT(bool doSort)
Sets whether or not to sort peaks in chromatograms




.. py:method:: PeakFileOptions.setSortSpectraByMZ
   :module: pyopenms.pyopenms_2


Cython signature: void setSortSpectraByMZ(bool doSort)
Sets whether or not to sort peaks in spectra




.. py:method:: PeakFileOptions.setWriteIndex
   :module: pyopenms.pyopenms_2


Cython signature: void setWriteIndex(bool write_index)
Returns whether to write an index at the end of the file (e.g. indexedmzML file format)




.. py:method:: PeakFileOptions.setWriteSupplementalData
   :module: pyopenms.pyopenms_2


Cython signature: void setWriteSupplementalData(bool)
Sets whether or not to write supplemental peak data in MzData files




.. py:class:: PeakIndex
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _PeakIndex


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1PeakIndex.html


 Index of a peak or feature
 -----
 This struct can be used to store both peak or feature indices




.. py:method:: PeakIndex.clear
   :module: pyopenms.pyopenms_2


Cython signature: void clear()
Invalidates the current index




.. py:method:: PeakIndex.getFeature
   :module: pyopenms.pyopenms_2


Cython signature: Feature getFeature(FeatureMap & map_)


Returns the feature (or consensus feature) corresponding to this index
-----
This method is intended for arrays of features e.g. FeatureMap
-----
The main advantage of using this method instead accessing the data directly is that range
check performed in debug mode
-----
:raises:
  Exception: Precondition is thrown if this index is invalid for the `map` (only in debug mode)




.. py:method:: PeakIndex.getPeak
   :module: pyopenms.pyopenms_2


Cython signature: Peak1D getPeak(MSExperiment & map_)


Returns a peak corresponding to this index
-----
This method is intended for arrays of DSpectra e.g. MSExperiment
-----
The main advantage of using this method instead accessing the data directly is that range
check performed in debug mode
-----
:raises:
  Exception: Precondition is thrown if this index is invalid for the `map` (only in debug mode)




.. py:method:: PeakIndex.getSpectrum
   :module: pyopenms.pyopenms_2


Cython signature: MSSpectrum getSpectrum(MSExperiment & map_)


Returns a spectrum corresponding to this index
-----
This method is intended for arrays of DSpectra e.g. MSExperiment
-----
The main advantage of using this method instead accessing the data directly is that range
check performed in debug mode
-----
:raises:
  Exception: Precondition is thrown if this index is invalid for the `map` (only in debug mode)




.. py:method:: PeakIndex.isValid
   :module: pyopenms.pyopenms_2


Cython signature: bool isValid()
Returns if the current peak ref is valid




.. py:attribute:: PeakIndex.peak
   :module: pyopenms.pyopenms_2




.. py:attribute:: PeakIndex.spectrum
   :module: pyopenms.pyopenms_2




.. py:class:: PeakPickerCWT
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _PeakPickerCWT


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1PeakPickerCWT.html
 -- Inherits from ['DefaultParamHandler', 'ProgressLogger']




.. py:method:: PeakPickerCWT.endProgress
   :module: pyopenms.pyopenms_2


Cython signature: void endProgress()
Ends the progress display




.. py:method:: PeakPickerCWT.estimatePeakWidth
   :module: pyopenms.pyopenms_2


Cython signature: double estimatePeakWidth(MSExperiment & input)


Estimates average peak width that can then be used for peak picking
-----
The spectra with the highest TICs are used to estimate an average peak width that
can be used as the peak_width parameter for picking the complete data set.
Typically, the number of peaks increases with decreasing peak width until a plateau
is reached. The beginning of this plateau is our estimate for the peak width.
This estimate is averaged over several spectra




.. py:method:: PeakPickerCWT.getDefaults
   :module: pyopenms.pyopenms_2


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: PeakPickerCWT.getLogType
   :module: pyopenms.pyopenms_2


Cython signature: LogType getLogType()
Returns the type of progress log being used




.. py:method:: PeakPickerCWT.getName
   :module: pyopenms.pyopenms_2


Cython signature: String getName()
Returns the name




.. py:method:: PeakPickerCWT.getParameters
   :module: pyopenms.pyopenms_2


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: PeakPickerCWT.getSubsections
   :module: pyopenms.pyopenms_2


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: PeakPickerCWT.nextProgress
   :module: pyopenms.pyopenms_2


Cython signature: void nextProgress()
Increment progress by 1 (according to range begin-end)




.. py:method:: PeakPickerCWT.pick
   :module: pyopenms.pyopenms_2


Cython signature: void pick(MSSpectrum & input, MSSpectrum & output)


Applies the peak picking algorithm to a single spectrum
-----
Picks the peaks in the input spectrum and writes the resulting peaks to the output container




.. py:method:: PeakPickerCWT.pickExperiment
   :module: pyopenms.pyopenms_2


Cython signature: void pickExperiment(MSExperiment & input, MSExperiment & output)


Picks the peaks in an MSExperiment
-----
Picks the peaks successive in every scan in the spectrum range. The detected peaks are stored in the output MSExperiment




.. py:method:: PeakPickerCWT.setLogType
   :module: pyopenms.pyopenms_2


Cython signature: void setLogType(LogType)
Sets the progress log that should be used. The default type is NONE!




.. py:method:: PeakPickerCWT.setName
   :module: pyopenms.pyopenms_2


Cython signature: void setName(const String &)
Sets the name




.. py:method:: PeakPickerCWT.setParameters
   :module: pyopenms.pyopenms_2


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: PeakPickerCWT.setProgress
   :module: pyopenms.pyopenms_2


Cython signature: void setProgress(ptrdiff_t value)
Sets the current progress




.. py:method:: PeakPickerCWT.startProgress
   :module: pyopenms.pyopenms_2


Cython signature: void startProgress(ptrdiff_t begin, ptrdiff_t end, String label)




.. py:class:: PeptideIndexing
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _PeptideIndexing


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1PeptideIndexing.html
 -- Inherits from ['DefaultParamHandler']




.. py:attribute:: PeptideIndexing.PeptideIndexing_ExitCodes
   :module: pyopenms.pyopenms_2


alias of :py:class:`pyopenms.pyopenms_2.__PeptideIndexing_ExitCodes`


.. py:method:: PeptideIndexing.getDecoyString
   :module: pyopenms.pyopenms_2


Cython signature: String getDecoyString()




.. py:method:: PeptideIndexing.getDefaults
   :module: pyopenms.pyopenms_2


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: PeptideIndexing.getName
   :module: pyopenms.pyopenms_2


Cython signature: String getName()
Returns the name




.. py:method:: PeptideIndexing.getParameters
   :module: pyopenms.pyopenms_2


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: PeptideIndexing.getSubsections
   :module: pyopenms.pyopenms_2


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: PeptideIndexing.isPrefix
   :module: pyopenms.pyopenms_2


Cython signature: bool isPrefix()




.. py:method:: PeptideIndexing.run
   :module: pyopenms.pyopenms_2


Cython signature: PeptideIndexing_ExitCodes run(libcpp_vector[FASTAEntry] & proteins, libcpp_vector[ProteinIdentification] & prot_ids, libcpp_vector[PeptideIdentification] & pep_ids)




.. py:method:: PeptideIndexing.setName
   :module: pyopenms.pyopenms_2


Cython signature: void setName(const String &)
Sets the name




.. py:method:: PeptideIndexing.setParameters
   :module: pyopenms.pyopenms_2


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: ProteinInference
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _ProteinInference


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ProteinInference.html


 [experimental class] given a peptide quantitation, infer corresponding protein quantities
 -----
 Infers protein ratios from peptide ratios (currently using unique peptides only).
 Use the IDMapper class to add protein and peptide information to a
 quantitative ConsensusMap prior to this step




.. py:method:: ProteinInference.infer
   :module: pyopenms.pyopenms_2


Cython signature: void infer(ConsensusMap & consensus_map, unsigned int reference_map)


Given a peptide quantitation, infer corresponding protein quantities
-----
Infers protein ratios from peptide ratios (currently using unique peptides only).
Use the IDMapper class to add protein and peptide information to a
quantitative ConsensusMap prior to this step
-----
:param consensus_map: Peptide quantitation with ProteinIdentifications attached, where
     Protein quantitation will be attached
:param reference_map: Index of (iTRAQ) reference channel within the consensus map




.. py:class:: ResidueDB
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _ResidueDB


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ResidueDB.html




.. py:method:: ResidueDB.getModifiedResidue
   :module: pyopenms.pyopenms_2


- Cython signature: const Residue * getModifiedResidue(const String & name)
  Returns a pointer to a modified residue given a modification name


- Cython signature: const Residue * getModifiedResidue(Residue * residue, const String & name)
  Returns a pointer to a modified residue given a residue and a modification name




.. py:method:: ResidueDB.getNumberOfModifiedResidues
   :module: pyopenms.pyopenms_2


Cython signature: size_t getNumberOfModifiedResidues()
Returns the number of modified residues stored




.. py:method:: ResidueDB.getNumberOfResidues
   :module: pyopenms.pyopenms_2


Cython signature: size_t getNumberOfResidues()
Returns the number of residues stored




.. py:method:: ResidueDB.getResidue
   :module: pyopenms.pyopenms_2


Cython signature: const Residue * getResidue(const String & name)
Returns a pointer to the residue with name, 3 letter code or 1 letter code name




.. py:method:: ResidueDB.getResidueSets
   :module: pyopenms.pyopenms_2


Cython signature: libcpp_set[String] getResidueSets()
Returns all residue sets that are registered which this instance




.. py:method:: ResidueDB.getResidues
   :module: pyopenms.pyopenms_2


Cython signature: libcpp_set[const Residue *] getResidues(const String & residue_set)
Returns a set of all residues stored in this residue db




.. py:method:: ResidueDB.hasResidue
   :module: pyopenms.pyopenms_2


Cython signature: bool hasResidue(const String & name)
Returns true if the db contains a residue with the given name




.. py:class:: Sample
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _Sample


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1Sample.html
 -- Inherits from ['MetaInfoInterface']




.. py:attribute:: Sample.SampleState
   :module: pyopenms.pyopenms_2


alias of :py:class:`pyopenms.pyopenms_2.__SampleState`


.. py:method:: Sample.clearMetaInfo
   :module: pyopenms.pyopenms_2


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: Sample.countTreatments
   :module: pyopenms.pyopenms_2


Cython signature: int countTreatments()
Returns the number of sample treatments




.. py:method:: Sample.getComment
   :module: pyopenms.pyopenms_2


Cython signature: String getComment()
Returns the comment (default "")




.. py:method:: Sample.getConcentration
   :module: pyopenms.pyopenms_2


Cython signature: double getConcentration()
Returns the concentration (in g/l) (default 0.0)




.. py:method:: Sample.getKeys
   :module: pyopenms.pyopenms_2


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: Sample.getMass
   :module: pyopenms.pyopenms_2


Cython signature: double getMass()
Returns the mass (in gram) (default 0.0)




.. py:method:: Sample.getMetaValue
   :module: pyopenms.pyopenms_2


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: Sample.getName
   :module: pyopenms.pyopenms_2


Cython signature: String getName()




.. py:method:: Sample.getNumber
   :module: pyopenms.pyopenms_2


Cython signature: String getNumber()
Returns the sample number




.. py:method:: Sample.getOrganism
   :module: pyopenms.pyopenms_2


Cython signature: String getOrganism()




.. py:method:: Sample.getState
   :module: pyopenms.pyopenms_2


Cython signature: SampleState getState()
Returns the state of aggregation (default SAMPLENULL)




.. py:method:: Sample.getSubsamples
   :module: pyopenms.pyopenms_2


Cython signature: libcpp_vector[Sample] getSubsamples()
Returns a reference to the vector of subsamples that were combined to create this sample




.. py:method:: Sample.getVolume
   :module: pyopenms.pyopenms_2


Cython signature: double getVolume()
Returns the volume (in ml) (default 0.0)




.. py:method:: Sample.isMetaEmpty
   :module: pyopenms.pyopenms_2


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: Sample.metaRegistry
   :module: pyopenms.pyopenms_2


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: Sample.metaValueExists
   :module: pyopenms.pyopenms_2


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: Sample.removeMetaValue
   :module: pyopenms.pyopenms_2


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: Sample.removeTreatment
   :module: pyopenms.pyopenms_2


Cython signature: void removeTreatment(unsigned int position)
Brief removes the sample treatment at the given position




.. py:method:: Sample.setComment
   :module: pyopenms.pyopenms_2


Cython signature: void setComment(String comment)
Sets the comment (may contain newline characters)




.. py:method:: Sample.setConcentration
   :module: pyopenms.pyopenms_2


Cython signature: void setConcentration(double concentration)
Sets the concentration (in g/l)




.. py:method:: Sample.setMass
   :module: pyopenms.pyopenms_2


Cython signature: void setMass(double mass)
Sets the mass (in gram)




.. py:method:: Sample.setMetaValue
   :module: pyopenms.pyopenms_2


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:method:: Sample.setName
   :module: pyopenms.pyopenms_2


Cython signature: void setName(String name)




.. py:method:: Sample.setNumber
   :module: pyopenms.pyopenms_2


Cython signature: void setNumber(String number)
Sets the sample number (e.g. sample ID)




.. py:method:: Sample.setOrganism
   :module: pyopenms.pyopenms_2


Cython signature: void setOrganism(String organism)




.. py:method:: Sample.setState
   :module: pyopenms.pyopenms_2


Cython signature: void setState(SampleState state)
Sets the state of aggregation




.. py:method:: Sample.setSubsamples
   :module: pyopenms.pyopenms_2


Cython signature: void setSubsamples(libcpp_vector[Sample] subsamples)
Sets the vector of subsamples that were combined to create this sample




.. py:method:: Sample.setVolume
   :module: pyopenms.pyopenms_2


Cython signature: void setVolume(double volume)
Sets the volume (in ml)




.. py:class:: Seed
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _Seed


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::FeatureFinderAlgorithmPickedHelperStructs_1_1Seed.html




.. py:attribute:: Seed.intensity
   :module: pyopenms.pyopenms_2




.. py:attribute:: Seed.peak
   :module: pyopenms.pyopenms_2




.. py:attribute:: Seed.spectrum
   :module: pyopenms.pyopenms_2




.. py:class:: SolverParam
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _SolverParam


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SolverParam.html




.. py:attribute:: SolverParam.backtrack_tech
   :module: pyopenms.pyopenms_2




.. py:attribute:: SolverParam.branching_tech
   :module: pyopenms.pyopenms_2




.. py:attribute:: SolverParam.enable_binarization
   :module: pyopenms.pyopenms_2




.. py:attribute:: SolverParam.enable_clq_cuts
   :module: pyopenms.pyopenms_2




.. py:attribute:: SolverParam.enable_cov_cuts
   :module: pyopenms.pyopenms_2




.. py:attribute:: SolverParam.enable_feas_pump_heuristic
   :module: pyopenms.pyopenms_2




.. py:attribute:: SolverParam.enable_gmi_cuts
   :module: pyopenms.pyopenms_2




.. py:attribute:: SolverParam.enable_mir_cuts
   :module: pyopenms.pyopenms_2




.. py:attribute:: SolverParam.enable_presolve
   :module: pyopenms.pyopenms_2




.. py:attribute:: SolverParam.message_level
   :module: pyopenms.pyopenms_2




.. py:attribute:: SolverParam.mip_gap
   :module: pyopenms.pyopenms_2




.. py:attribute:: SolverParam.output_delay
   :module: pyopenms.pyopenms_2




.. py:attribute:: SolverParam.output_freq
   :module: pyopenms.pyopenms_2




.. py:attribute:: SolverParam.preprocessing_tech
   :module: pyopenms.pyopenms_2




.. py:attribute:: SolverParam.time_limit
   :module: pyopenms.pyopenms_2




.. py:class:: SpectraMerger
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _SpectraMerger


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SpectraMerger.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: SpectraMerger.average
   :module: pyopenms.pyopenms_2


Cython signature: void average(MSExperiment & exp, String average_type)


Average over neighbouring spectra
-----
:param exp: Experimental data to be averaged
:param average_type: Averaging type to be used ("gaussian" or "tophat")




.. py:method:: SpectraMerger.getDefaults
   :module: pyopenms.pyopenms_2


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: SpectraMerger.getName
   :module: pyopenms.pyopenms_2


Cython signature: String getName()
Returns the name




.. py:method:: SpectraMerger.getParameters
   :module: pyopenms.pyopenms_2


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: SpectraMerger.getSubsections
   :module: pyopenms.pyopenms_2


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: SpectraMerger.mergeSpectraBlockWise
   :module: pyopenms.pyopenms_2


Cython signature: void mergeSpectraBlockWise(MSExperiment & exp)




.. py:method:: SpectraMerger.mergeSpectraPrecursors
   :module: pyopenms.pyopenms_2


Cython signature: void mergeSpectraPrecursors(MSExperiment & exp)
Merges spectra with similar precursors (must have MS2 level)




.. py:method:: SpectraMerger.setName
   :module: pyopenms.pyopenms_2


Cython signature: void setName(const String &)
Sets the name




.. py:method:: SpectraMerger.setParameters
   :module: pyopenms.pyopenms_2


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: SpectrumAlignment
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _SpectrumAlignment


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SpectrumAlignment.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: SpectrumAlignment.getDefaults
   :module: pyopenms.pyopenms_2


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: SpectrumAlignment.getName
   :module: pyopenms.pyopenms_2


Cython signature: String getName()
Returns the name




.. py:method:: SpectrumAlignment.getParameters
   :module: pyopenms.pyopenms_2


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: SpectrumAlignment.getSpectrumAlignment
   :module: pyopenms.pyopenms_2




.. py:method:: SpectrumAlignment.getSubsections
   :module: pyopenms.pyopenms_2


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: SpectrumAlignment.setName
   :module: pyopenms.pyopenms_2


Cython signature: void setName(const String &)
Sets the name




.. py:method:: SpectrumAlignment.setParameters
   :module: pyopenms.pyopenms_2


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: SpectrumSettings
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _SpectrumSettings


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SpectrumSettings.html
 -- Inherits from ['MetaInfoInterface']




.. py:attribute:: SpectrumSettings.SpectrumType
   :module: pyopenms.pyopenms_2


alias of :py:class:`pyopenms.pyopenms_2.__SpectrumType`


.. py:method:: SpectrumSettings.clearMetaInfo
   :module: pyopenms.pyopenms_2


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: SpectrumSettings.getAcquisitionInfo
   :module: pyopenms.pyopenms_2


Cython signature: AcquisitionInfo getAcquisitionInfo()
Returns a const reference to the acquisition info




.. py:method:: SpectrumSettings.getComment
   :module: pyopenms.pyopenms_2


Cython signature: String getComment()
Returns the free-text comment




.. py:method:: SpectrumSettings.getDataProcessing
   :module: pyopenms.pyopenms_2


Cython signature: libcpp_vector[shared_ptr[DataProcessing]] getDataProcessing()




.. py:method:: SpectrumSettings.getInstrumentSettings
   :module: pyopenms.pyopenms_2


Cython signature: InstrumentSettings getInstrumentSettings()
Returns a const reference to the instrument settings of the current spectrum




.. py:method:: SpectrumSettings.getKeys
   :module: pyopenms.pyopenms_2


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: SpectrumSettings.getMetaValue
   :module: pyopenms.pyopenms_2


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: SpectrumSettings.getNativeID
   :module: pyopenms.pyopenms_2


Cython signature: String getNativeID()
Returns the native identifier for the spectrum, used by the acquisition software




.. py:method:: SpectrumSettings.getPeptideIdentifications
   :module: pyopenms.pyopenms_2


Cython signature: libcpp_vector[PeptideIdentification] getPeptideIdentifications()
Returns a const reference to the PeptideIdentification vector




.. py:method:: SpectrumSettings.getPrecursors
   :module: pyopenms.pyopenms_2


Cython signature: libcpp_vector[Precursor] getPrecursors()
Returns a const reference to the precursors




.. py:method:: SpectrumSettings.getProducts
   :module: pyopenms.pyopenms_2


Cython signature: libcpp_vector[Product] getProducts()
Returns a const reference to the products




.. py:method:: SpectrumSettings.getSourceFile
   :module: pyopenms.pyopenms_2


Cython signature: SourceFile getSourceFile()
Returns a const reference to the source file




.. py:method:: SpectrumSettings.getType
   :module: pyopenms.pyopenms_2


Cython signature: int getType()
Returns the spectrum type (centroided (PEAKS) or profile data (RAW))




.. py:method:: SpectrumSettings.isMetaEmpty
   :module: pyopenms.pyopenms_2


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: SpectrumSettings.metaRegistry
   :module: pyopenms.pyopenms_2


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: SpectrumSettings.metaValueExists
   :module: pyopenms.pyopenms_2


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: SpectrumSettings.removeMetaValue
   :module: pyopenms.pyopenms_2


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: SpectrumSettings.setAcquisitionInfo
   :module: pyopenms.pyopenms_2


Cython signature: void setAcquisitionInfo(AcquisitionInfo)
Sets the acquisition info




.. py:method:: SpectrumSettings.setComment
   :module: pyopenms.pyopenms_2


Cython signature: void setComment(String)
Sets the free-text comment




.. py:method:: SpectrumSettings.setDataProcessing
   :module: pyopenms.pyopenms_2


Cython signature: void setDataProcessing(libcpp_vector[shared_ptr[DataProcessing]])




.. py:method:: SpectrumSettings.setInstrumentSettings
   :module: pyopenms.pyopenms_2


Cython signature: void setInstrumentSettings(InstrumentSettings)
Sets the instrument settings of the current spectrum




.. py:method:: SpectrumSettings.setMetaValue
   :module: pyopenms.pyopenms_2


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:method:: SpectrumSettings.setNativeID
   :module: pyopenms.pyopenms_2


Cython signature: void setNativeID(String)
Sets the native identifier for the spectrum, used by the acquisition software




.. py:method:: SpectrumSettings.setPeptideIdentifications
   :module: pyopenms.pyopenms_2


Cython signature: void setPeptideIdentifications(libcpp_vector[PeptideIdentification])
Sets the PeptideIdentification vector




.. py:method:: SpectrumSettings.setPrecursors
   :module: pyopenms.pyopenms_2


Cython signature: void setPrecursors(libcpp_vector[Precursor])
Sets the precursors




.. py:method:: SpectrumSettings.setProducts
   :module: pyopenms.pyopenms_2


Cython signature: void setProducts(libcpp_vector[Product])
Sets the products




.. py:method:: SpectrumSettings.setSourceFile
   :module: pyopenms.pyopenms_2


Cython signature: void setSourceFile(SourceFile)
Sets the source file




.. py:method:: SpectrumSettings.setType
   :module: pyopenms.pyopenms_2


Cython signature: void setType(SpectrumType)
Sets the spectrum type




.. py:method:: SpectrumSettings.unify
   :module: pyopenms.pyopenms_2


Cython signature: void unify(SpectrumSettings)




.. py:class:: StringView
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _StringView


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1StringView.html




.. py:method:: StringView.getString
   :module: pyopenms.pyopenms_2


Cython signature: String getString()




.. py:method:: StringView.size
   :module: pyopenms.pyopenms_2


Cython signature: size_t size()




.. py:method:: StringView.substr
   :module: pyopenms.pyopenms_2


Cython signature: StringView substr(size_t start, size_t end)




.. py:class:: SwathMapMassCorrection
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _SwathMapMassCorrection


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SwathMapMassCorrection.html




.. py:class:: Tagging
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _Tagging


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1Tagging.html


 Meta information about tagging of a sample e.g. ICAT labeling
 -----
 Holds information about the mass difference between light and heavy tag
 All other relevant information is provided by Modification




.. py:method:: Tagging.getMassShift
   :module: pyopenms.pyopenms_2


Cython signature: double getMassShift()
Returns the mass difference between light and heavy variant (default is 0.0)




.. py:method:: Tagging.getVariant
   :module: pyopenms.pyopenms_2


Cython signature: IsotopeVariant getVariant()
Returns the isotope variant of the tag (default is LIGHT)




.. py:method:: Tagging.setMassShift
   :module: pyopenms.pyopenms_2


Cython signature: void setMassShift(double mass_shift)
Sets the mass difference between light and heavy variant




.. py:method:: Tagging.setVariant
   :module: pyopenms.pyopenms_2


Cython signature: void setVariant(IsotopeVariant variant)
Sets the isotope variant of the tag




.. py:class:: TheoreticalIsotopePattern
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _TheoreticalIsotopePattern


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::FeatureFinderAlgorithmPickedHelperStructs_1_1TheoreticalIsotopePattern.html




.. py:attribute:: TheoreticalIsotopePattern.intensity
   :module: pyopenms.pyopenms_2




.. py:attribute:: TheoreticalIsotopePattern.max
   :module: pyopenms.pyopenms_2




.. py:attribute:: TheoreticalIsotopePattern.optional_begin
   :module: pyopenms.pyopenms_2




.. py:attribute:: TheoreticalIsotopePattern.optional_end
   :module: pyopenms.pyopenms_2




.. py:method:: TheoreticalIsotopePattern.size
   :module: pyopenms.pyopenms_2


Cython signature: size_t size()




.. py:attribute:: TheoreticalIsotopePattern.trimmed_left
   :module: pyopenms.pyopenms_2




.. py:class:: ThresholdMower
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _ThresholdMower


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ThresholdMower.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: ThresholdMower.filterPeakMap
   :module: pyopenms.pyopenms_2


Cython signature: void filterPeakMap(MSExperiment & exp)




.. py:method:: ThresholdMower.filterPeakSpectrum
   :module: pyopenms.pyopenms_2


Cython signature: void filterPeakSpectrum(MSSpectrum & spec)




.. py:method:: ThresholdMower.filterSpectrum
   :module: pyopenms.pyopenms_2


Cython signature: void filterSpectrum(MSSpectrum & spec)




.. py:method:: ThresholdMower.getDefaults
   :module: pyopenms.pyopenms_2


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: ThresholdMower.getName
   :module: pyopenms.pyopenms_2


Cython signature: String getName()
Returns the name




.. py:method:: ThresholdMower.getParameters
   :module: pyopenms.pyopenms_2


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: ThresholdMower.getSubsections
   :module: pyopenms.pyopenms_2


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: ThresholdMower.setName
   :module: pyopenms.pyopenms_2


Cython signature: void setName(const String &)
Sets the name




.. py:method:: ThresholdMower.setParameters
   :module: pyopenms.pyopenms_2


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: ToolInfo
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _ToolInfo


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ToolInfo.html




.. py:class:: XFDRAlgorithm
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _XFDRAlgorithm


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1XFDRAlgorithm.html
 -- Inherits from ['DefaultParamHandler']




.. py:attribute:: XFDRAlgorithm.XFDRAlgorithm_ExitCodes
   :module: pyopenms.pyopenms_2


alias of :py:class:`pyopenms.pyopenms_2.__XFDRAlgorithm_ExitCodes`


.. py:method:: XFDRAlgorithm.getDefaults
   :module: pyopenms.pyopenms_2


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: XFDRAlgorithm.getName
   :module: pyopenms.pyopenms_2


Cython signature: String getName()
Returns the name




.. py:method:: XFDRAlgorithm.getParameters
   :module: pyopenms.pyopenms_2


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: XFDRAlgorithm.getSubsections
   :module: pyopenms.pyopenms_2


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: XFDRAlgorithm.run
   :module: pyopenms.pyopenms_2


Cython signature: XFDRAlgorithm_ExitCodes run(libcpp_vector[PeptideIdentification] & peptide_ids, ProteinIdentification & protein_id)




.. py:method:: XFDRAlgorithm.setName
   :module: pyopenms.pyopenms_2


Cython signature: void setName(const String &)
Sets the name




.. py:method:: XFDRAlgorithm.setParameters
   :module: pyopenms.pyopenms_2


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: XFDRAlgorithm.validateClassArguments
   :module: pyopenms.pyopenms_2


Cython signature: XFDRAlgorithm_ExitCodes validateClassArguments()




.. py:class:: XLPrecursor
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _XLPrecursor


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1XLPrecursor.html




.. py:attribute:: XLPrecursor.alpha_index
   :module: pyopenms.pyopenms_2




.. py:attribute:: XLPrecursor.beta_index
   :module: pyopenms.pyopenms_2




.. py:attribute:: XLPrecursor.precursor_mass
   :module: pyopenms.pyopenms_2




.. py:class:: XMLFile
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _XMLFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::Internal_1_1XMLFile.html




.. py:method:: XMLFile.getVersion
   :module: pyopenms.pyopenms_2


Cython signature: String getVersion()
Return the version of the schema




.. py:class:: XMLHandler
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _XMLHandler


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::Internal_1_1XMLHandler.html




.. py:attribute:: XMLHandler.ActionMode
   :module: pyopenms.pyopenms_2


alias of :py:class:`pyopenms.pyopenms_2.__ActionMode`


.. py:method:: XMLHandler.error
   :module: pyopenms.pyopenms_2


Cython signature: void error(ActionMode mode, const String & msg, unsigned int line, unsigned int column)




.. py:method:: XMLHandler.errorString
   :module: pyopenms.pyopenms_2


Cython signature: String errorString()




.. py:method:: XMLHandler.reset
   :module: pyopenms.pyopenms_2


Cython signature: void reset()




.. py:method:: XMLHandler.warning
   :module: pyopenms.pyopenms_2


Cython signature: void warning(ActionMode mode, const String & msg, unsigned int line, unsigned int column)




.. py:class:: XTandemInfile
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _XTandemInfile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1XTandemInfile.html




.. py:attribute:: XTandemInfile.ErrorUnit
   :module: pyopenms.pyopenms_2


alias of :py:class:`pyopenms.pyopenms_2.__ErrorUnit`


.. py:attribute:: XTandemInfile.MassType
   :module: pyopenms.pyopenms_2


alias of :py:class:`pyopenms.pyopenms_2.__MassType`


.. py:method:: XTandemInfile.getCleavageSite
   :module: pyopenms.pyopenms_2


Cython signature: String getCleavageSite()




.. py:method:: XTandemInfile.getDefaultParametersFilename
   :module: pyopenms.pyopenms_2


Cython signature: String getDefaultParametersFilename()




.. py:method:: XTandemInfile.getFragmentMassErrorUnit
   :module: pyopenms.pyopenms_2


Cython signature: ErrorUnit getFragmentMassErrorUnit()




.. py:method:: XTandemInfile.getFragmentMassTolerance
   :module: pyopenms.pyopenms_2


Cython signature: double getFragmentMassTolerance()




.. py:method:: XTandemInfile.getInputFilename
   :module: pyopenms.pyopenms_2


Cython signature: String getInputFilename()




.. py:method:: XTandemInfile.getMaxPrecursorCharge
   :module: pyopenms.pyopenms_2


Cython signature: int getMaxPrecursorCharge()




.. py:method:: XTandemInfile.getMaxValidEValue
   :module: pyopenms.pyopenms_2


Cython signature: double getMaxValidEValue()




.. py:method:: XTandemInfile.getModifications
   :module: pyopenms.pyopenms_2


Cython signature: ModificationDefinitionsSet getModifications()




.. py:method:: XTandemInfile.getNumberOfMissedCleavages
   :module: pyopenms.pyopenms_2


Cython signature: unsigned int getNumberOfMissedCleavages()




.. py:method:: XTandemInfile.getNumberOfThreads
   :module: pyopenms.pyopenms_2


Cython signature: unsigned int getNumberOfThreads()




.. py:method:: XTandemInfile.getOutputFilename
   :module: pyopenms.pyopenms_2


Cython signature: String getOutputFilename()




.. py:method:: XTandemInfile.getOutputResults
   :module: pyopenms.pyopenms_2


Cython signature: String getOutputResults()




.. py:method:: XTandemInfile.getPrecursorErrorType
   :module: pyopenms.pyopenms_2


Cython signature: MassType getPrecursorErrorType()




.. py:method:: XTandemInfile.getPrecursorMassErrorUnit
   :module: pyopenms.pyopenms_2


Cython signature: ErrorUnit getPrecursorMassErrorUnit()




.. py:method:: XTandemInfile.getPrecursorMassToleranceMinus
   :module: pyopenms.pyopenms_2


Cython signature: double getPrecursorMassToleranceMinus()




.. py:method:: XTandemInfile.getPrecursorMassTolerancePlus
   :module: pyopenms.pyopenms_2


Cython signature: double getPrecursorMassTolerancePlus()




.. py:method:: XTandemInfile.getTaxon
   :module: pyopenms.pyopenms_2


Cython signature: String getTaxon()




.. py:method:: XTandemInfile.getTaxonomyFilename
   :module: pyopenms.pyopenms_2


Cython signature: String getTaxonomyFilename()




.. py:method:: XTandemInfile.setAllowIsotopeError
   :module: pyopenms.pyopenms_2


Cython signature: void setAllowIsotopeError(bool allow_isotope_error)




.. py:method:: XTandemInfile.setCleavageSite
   :module: pyopenms.pyopenms_2


Cython signature: void setCleavageSite(String cleavage_site)




.. py:method:: XTandemInfile.setDefaultParametersFilename
   :module: pyopenms.pyopenms_2


Cython signature: void setDefaultParametersFilename(const String & filename)




.. py:method:: XTandemInfile.setFragmentMassErrorUnit
   :module: pyopenms.pyopenms_2


Cython signature: void setFragmentMassErrorUnit(ErrorUnit unit)




.. py:method:: XTandemInfile.setFragmentMassTolerance
   :module: pyopenms.pyopenms_2


Cython signature: void setFragmentMassTolerance(double tolerance)




.. py:method:: XTandemInfile.setInputFilename
   :module: pyopenms.pyopenms_2


Cython signature: void setInputFilename(const String & input_file)




.. py:method:: XTandemInfile.setMaxPrecursorCharge
   :module: pyopenms.pyopenms_2


Cython signature: void setMaxPrecursorCharge(int max_charge)




.. py:method:: XTandemInfile.setMaxValidEValue
   :module: pyopenms.pyopenms_2


Cython signature: void setMaxValidEValue(double value)




.. py:method:: XTandemInfile.setModifications
   :module: pyopenms.pyopenms_2


Cython signature: void setModifications(ModificationDefinitionsSet & mods)




.. py:method:: XTandemInfile.setNumberOfMissedCleavages
   :module: pyopenms.pyopenms_2


Cython signature: void setNumberOfMissedCleavages(unsigned int missed_cleavages)




.. py:method:: XTandemInfile.setNumberOfThreads
   :module: pyopenms.pyopenms_2


Cython signature: void setNumberOfThreads(unsigned int threads)




.. py:method:: XTandemInfile.setOutputFilename
   :module: pyopenms.pyopenms_2


Cython signature: void setOutputFilename(const String & output)




.. py:method:: XTandemInfile.setOutputResults
   :module: pyopenms.pyopenms_2


Cython signature: void setOutputResults(String result)




.. py:method:: XTandemInfile.setPrecursorErrorType
   :module: pyopenms.pyopenms_2


Cython signature: void setPrecursorErrorType(MassType mono_isotopic)




.. py:method:: XTandemInfile.setPrecursorMassErrorUnit
   :module: pyopenms.pyopenms_2


Cython signature: void setPrecursorMassErrorUnit(ErrorUnit unit)




.. py:method:: XTandemInfile.setPrecursorMassToleranceMinus
   :module: pyopenms.pyopenms_2


Cython signature: void setPrecursorMassToleranceMinus(double tol)




.. py:method:: XTandemInfile.setPrecursorMassTolerancePlus
   :module: pyopenms.pyopenms_2


Cython signature: void setPrecursorMassTolerancePlus(double tol)




.. py:method:: XTandemInfile.setSemiCleavage
   :module: pyopenms.pyopenms_2


Cython signature: void setSemiCleavage(bool semi_cleavage)




.. py:method:: XTandemInfile.setTaxon
   :module: pyopenms.pyopenms_2


Cython signature: void setTaxon(const String & taxon)




.. py:method:: XTandemInfile.setTaxonomyFilename
   :module: pyopenms.pyopenms_2


Cython signature: void setTaxonomyFilename(const String & filename)




.. py:method:: XTandemInfile.write
   :module: pyopenms.pyopenms_2


Cython signature: void write(String filename, bool ignore_member_parameters, bool force_default_mods)




.. py:class:: XTandemXMLFile
   :module: pyopenms.pyopenms_2


   Bases: :py:class:`object`


Cython implementation of _XTandemXMLFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1XTandemXMLFile.html




.. py:method:: XTandemXMLFile.load
   :module: pyopenms.pyopenms_2


Cython signature: void load(String filename, ProteinIdentification & protein_identification, libcpp_vector[PeptideIdentification] & id_data, ModificationDefinitionsSet & mod_def_set)




.. py:module:: pyopenms.pyopenms_3




.. py:class:: AccurateMassSearchResult
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _AccurateMassSearchResult


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1AccurateMassSearchResult.html




.. py:method:: AccurateMassSearchResult.getCalculatedMZ
   :module: pyopenms.pyopenms_3


Cython signature: double getCalculatedMZ()




.. py:method:: AccurateMassSearchResult.getCharge
   :module: pyopenms.pyopenms_3


Cython signature: double getCharge()




.. py:method:: AccurateMassSearchResult.getFormulaString
   :module: pyopenms.pyopenms_3


Cython signature: String getFormulaString()




.. py:method:: AccurateMassSearchResult.getFoundAdduct
   :module: pyopenms.pyopenms_3


Cython signature: String getFoundAdduct()




.. py:method:: AccurateMassSearchResult.getFoundMass
   :module: pyopenms.pyopenms_3


Cython signature: double getFoundMass()




.. py:method:: AccurateMassSearchResult.getIndividualIntensities
   :module: pyopenms.pyopenms_3


Cython signature: libcpp_vector[double] getIndividualIntensities()




.. py:method:: AccurateMassSearchResult.getIsotopesSimScore
   :module: pyopenms.pyopenms_3


Cython signature: double getIsotopesSimScore()




.. py:method:: AccurateMassSearchResult.getMZErrorPPM
   :module: pyopenms.pyopenms_3


Cython signature: double getMZErrorPPM()




.. py:method:: AccurateMassSearchResult.getMasstraceIntensities
   :module: pyopenms.pyopenms_3


Cython signature: libcpp_vector[double] getMasstraceIntensities()




.. py:method:: AccurateMassSearchResult.getMatchingHMDBids
   :module: pyopenms.pyopenms_3


Cython signature: libcpp_vector[String] getMatchingHMDBids()




.. py:method:: AccurateMassSearchResult.getMatchingIndex
   :module: pyopenms.pyopenms_3


Cython signature: double getMatchingIndex()




.. py:method:: AccurateMassSearchResult.getObservedIntensity
   :module: pyopenms.pyopenms_3


Cython signature: double getObservedIntensity()




.. py:method:: AccurateMassSearchResult.getObservedMZ
   :module: pyopenms.pyopenms_3


Cython signature: double getObservedMZ()




.. py:method:: AccurateMassSearchResult.getObservedRT
   :module: pyopenms.pyopenms_3


Cython signature: double getObservedRT()




.. py:method:: AccurateMassSearchResult.getQueryMass
   :module: pyopenms.pyopenms_3


Cython signature: double getQueryMass()




.. py:method:: AccurateMassSearchResult.getSourceFeatureIndex
   :module: pyopenms.pyopenms_3


Cython signature: size_t getSourceFeatureIndex()




.. py:method:: AccurateMassSearchResult.setCalculatedMZ
   :module: pyopenms.pyopenms_3


Cython signature: void setCalculatedMZ(double & m)




.. py:method:: AccurateMassSearchResult.setCharge
   :module: pyopenms.pyopenms_3


Cython signature: void setCharge(double & ch)




.. py:method:: AccurateMassSearchResult.setEmpiricalFormula
   :module: pyopenms.pyopenms_3


Cython signature: void setEmpiricalFormula(const String & ep)




.. py:method:: AccurateMassSearchResult.setFoundAdduct
   :module: pyopenms.pyopenms_3


Cython signature: void setFoundAdduct(const String & add)




.. py:method:: AccurateMassSearchResult.setFoundMass
   :module: pyopenms.pyopenms_3


Cython signature: void setFoundMass(double & m)




.. py:method:: AccurateMassSearchResult.setIndividualIntensities
   :module: pyopenms.pyopenms_3


Cython signature: void setIndividualIntensities(libcpp_vector[double])




.. py:method:: AccurateMassSearchResult.setIsotopesSimScore
   :module: pyopenms.pyopenms_3


Cython signature: void setIsotopesSimScore(double & sim_score)




.. py:method:: AccurateMassSearchResult.setMZErrorPPM
   :module: pyopenms.pyopenms_3


Cython signature: void setMZErrorPPM(double & ppm)




.. py:method:: AccurateMassSearchResult.setMasstraceIntensities
   :module: pyopenms.pyopenms_3


Cython signature: void setMasstraceIntensities(libcpp_vector[double] &)




.. py:method:: AccurateMassSearchResult.setMatchingHMDBids
   :module: pyopenms.pyopenms_3


Cython signature: void setMatchingHMDBids(libcpp_vector[String] & match_ids)




.. py:method:: AccurateMassSearchResult.setMatchingIndex
   :module: pyopenms.pyopenms_3


Cython signature: void setMatchingIndex(double & idx)




.. py:method:: AccurateMassSearchResult.setObservedIntensity
   :module: pyopenms.pyopenms_3


Cython signature: void setObservedIntensity(double & intensity)




.. py:method:: AccurateMassSearchResult.setObservedMZ
   :module: pyopenms.pyopenms_3


Cython signature: void setObservedMZ(double & m)




.. py:method:: AccurateMassSearchResult.setObservedRT
   :module: pyopenms.pyopenms_3


Cython signature: void setObservedRT(double & rt)




.. py:method:: AccurateMassSearchResult.setQueryMass
   :module: pyopenms.pyopenms_3


Cython signature: void setQueryMass(double & m)




.. py:method:: AccurateMassSearchResult.setSourceFeatureIndex
   :module: pyopenms.pyopenms_3


Cython signature: void setSourceFeatureIndex(size_t)




.. py:class:: Acquisition
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _Acquisition


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1Acquisition.html
 -- Inherits from ['MetaInfoInterface']




.. py:method:: Acquisition.clearMetaInfo
   :module: pyopenms.pyopenms_3


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: Acquisition.getIdentifier
   :module: pyopenms.pyopenms_3


Cython signature: String getIdentifier()




.. py:method:: Acquisition.getKeys
   :module: pyopenms.pyopenms_3


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: Acquisition.getMetaValue
   :module: pyopenms.pyopenms_3


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: Acquisition.isMetaEmpty
   :module: pyopenms.pyopenms_3


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: Acquisition.metaRegistry
   :module: pyopenms.pyopenms_3


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: Acquisition.metaValueExists
   :module: pyopenms.pyopenms_3


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: Acquisition.removeMetaValue
   :module: pyopenms.pyopenms_3


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: Acquisition.setIdentifier
   :module: pyopenms.pyopenms_3


Cython signature: void setIdentifier(const String & identifier)




.. py:method:: Acquisition.setMetaValue
   :module: pyopenms.pyopenms_3


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:class:: ArrayWrapperFloat
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`




.. py:class:: Attachment
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _Attachment


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::QcMLFile_1_1Attachment.html




.. py:attribute:: Attachment.binary
   :module: pyopenms.pyopenms_3




.. py:attribute:: Attachment.colTypes
   :module: pyopenms.pyopenms_3




.. py:attribute:: Attachment.cvAcc
   :module: pyopenms.pyopenms_3




.. py:attribute:: Attachment.cvRef
   :module: pyopenms.pyopenms_3




.. py:attribute:: Attachment.id
   :module: pyopenms.pyopenms_3




.. py:attribute:: Attachment.name
   :module: pyopenms.pyopenms_3




.. py:attribute:: Attachment.qualityRef
   :module: pyopenms.pyopenms_3




.. py:attribute:: Attachment.tableRows
   :module: pyopenms.pyopenms_3




.. py:method:: Attachment.toCSVString
   :module: pyopenms.pyopenms_3


Cython signature: String toCSVString(String separator)




.. py:method:: Attachment.toXMLString
   :module: pyopenms.pyopenms_3


Cython signature: String toXMLString(unsigned int indentation_level)




.. py:attribute:: Attachment.unitAcc
   :module: pyopenms.pyopenms_3




.. py:attribute:: Attachment.unitRef
   :module: pyopenms.pyopenms_3




.. py:attribute:: Attachment.value
   :module: pyopenms.pyopenms_3




.. py:class:: Base64
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _Base64


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1Base64.html




.. py:attribute:: Base64.ByteOrder
   :module: pyopenms.pyopenms_3


alias of :py:class:`pyopenms.pyopenms_3.__ByteOrder`


.. py:method:: Base64.decode32
   :module: pyopenms.pyopenms_3


Cython signature: void decode32(const String & in_, ByteOrder from_byte_order, libcpp_vector[float] & out, bool zlib_compression)




.. py:method:: Base64.decode64
   :module: pyopenms.pyopenms_3


Cython signature: void decode64(const String & in_, ByteOrder from_byte_order, libcpp_vector[double] & out, bool zlib_compression)




.. py:method:: Base64.decodeIntegers
   :module: pyopenms.pyopenms_3


Cython signature: void decodeIntegers(const String & in_, ByteOrder from_byte_order, libcpp_vector[int] & out, bool zlib_compression)
Decodes a Base64 string to a vector of integer numbers




.. py:method:: Base64.decodeStrings
   :module: pyopenms.pyopenms_3


Cython signature: void decodeStrings(const String & in_, libcpp_vector[String] & out, bool zlib_compression)
Decodes a Base64 string to a vector of (null-terminated) strings




.. py:method:: Base64.encode32
   :module: pyopenms.pyopenms_3


Cython signature: void encode32(libcpp_vector[float] & in_, ByteOrder to_byte_order, String & out, bool zlib_compression)




.. py:method:: Base64.encode64
   :module: pyopenms.pyopenms_3


Cython signature: void encode64(libcpp_vector[double] & in_, ByteOrder to_byte_order, String & out, bool zlib_compression)




.. py:method:: Base64.encodeIntegers
   :module: pyopenms.pyopenms_3


Cython signature: void encodeIntegers(libcpp_vector[int] & in_, ByteOrder to_byte_order, String & out, bool zlib_compression)
Encodes a vector of integer point numbers to a Base64 string




.. py:method:: Base64.encodeStrings
   :module: pyopenms.pyopenms_3


Cython signature: void encodeStrings(libcpp_vector[String] & in_, String & out, bool zlib_compression)
Encodes a vector of strings to a Base64 string




.. py:class:: BayesianProteinInferenceAlgorithm
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _BayesianProteinInferenceAlgorithm


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1BayesianProteinInferenceAlgorithm.html
 -- Inherits from ['DefaultParamHandler', 'ProgressLogger']


 Performs a Bayesian protein inference on Protein/Peptide identifications or ConsensusMap.
 -----
 - Filters for best n PSMs per spectrum.
 - Calculates and filters for best peptide per spectrum.
 - Builds a k-partite graph from the structures.
 - Finds and splits into connected components by DFS
 - Extends the graph by adding layers from indist. protein groups, peptides with the same parents and optionally
   some additional layers (peptide sequence, charge, replicate -> extended model = experimental)
 - Builds a factor graph representation of a Bayesian network using the Evergreen library
   See model param section. It is based on the Fido noisy-OR model with an option for
   regularizing the number of proteins per peptide.
 - Performs loopy belief propagation on the graph and queries protein, protein group and/or peptide posteriors
   See loopy_belief_propagation param section.
 - Learns best parameters via grid search if the parameters were not given in the param section.
 - Writes posteriors to peptides and/or proteins and adds indistinguishable protein groups to the underlying
   data structures.
 - Can make use of OpenMP to parallelize over connected components.
 -----
 Usage:
   from pyopenms import *
   from urllib.request import urlretrieve
   urlretrieve("https://raw.githubusercontent.com/OpenMS/OpenMS/develop/src/tests/class_tests/openms/data/BayesianProteinInference_test.idXML", "BayesianProteinInference_test.idXML")
   proteins = []
   peptides = []
   idf = IdXMLFile()
   idf.load("BayesianProteinInference_test.idXML", proteins, peptides)
   bpia = BayesianProteinInferenceAlgorithm()
   p = bpia.getParameters()
   p.setValue("update_PSM_probabilities", "false")
   bpia.setParameters(p)
   bpia.inferPosteriorProbabilities(proteins, peptides)
   #
   print(len(peptides)) # 9
   print(peptides[0].getHits()[0].getScore()) # 0.6
   print(proteins[0].getHits()[0].getScore()) # 0.624641
   print(proteins[0].getHits()[1].getScore()) # 0.648346
 -----




.. py:method:: BayesianProteinInferenceAlgorithm.endProgress
   :module: pyopenms.pyopenms_3


Cython signature: void endProgress()
Ends the progress display




.. py:method:: BayesianProteinInferenceAlgorithm.getDefaults
   :module: pyopenms.pyopenms_3


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: BayesianProteinInferenceAlgorithm.getLogType
   :module: pyopenms.pyopenms_3


Cython signature: LogType getLogType()
Returns the type of progress log being used




.. py:method:: BayesianProteinInferenceAlgorithm.getName
   :module: pyopenms.pyopenms_3


Cython signature: String getName()
Returns the name




.. py:method:: BayesianProteinInferenceAlgorithm.getParameters
   :module: pyopenms.pyopenms_3


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: BayesianProteinInferenceAlgorithm.getSubsections
   :module: pyopenms.pyopenms_3


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: BayesianProteinInferenceAlgorithm.inferPosteriorProbabilities
   :module: pyopenms.pyopenms_3


         - Cython signature: void inferPosteriorProbabilities(libcpp_vector[ProteinIdentification] & proteinIDs, libcpp_vector[PeptideIdentification] & peptideIDs, bool greedy_group_resolution)


Performs inference
-----
Optionally adds indistinguishable protein groups with separate scores, too
Currently only takes first proteinID run and all peptides
-----
:param proteinIDs: Vector of protein identifications
:param peptideIDs: Vector of peptide identifications
:return: Writes its results into protein and (optionally also) peptide hits (as new score)
         - Cython signature: void inferPosteriorProbabilities(libcpp_vector[ProteinIdentification] & proteinIDs, libcpp_vector[PeptideIdentification] & peptideIDs, bool greedy_group_resolution, ExperimentalDesign exp_des)


Performs inference
-----
Writes its results into protein and (optionally also) peptide hits (as new score).
Optionally adds indistinguishable protein groups with separate scores, too
Currently only takes first proteinID run and all peptides
Experimental design can be used to create an extended graph with replicate information. (experimental)
-----
:param proteinIDs: Vector of protein identifications
:param peptideIDs: Vector of peptide identifications
:param exp_des: Experimental Design
:return: Writes its results into protein and (optionally also) peptide hits (as new score)
         - Cython signature: void inferPosteriorProbabilities(ConsensusMap & cmap, bool greedy_group_resolution)


Performs inference
-----
Writes its results into protein and (optionally also) peptide hits (as new score)
Optionally adds indistinguishable protein groups with separate scores, too
Loops over all runs in the ConsensusMaps' protein IDs (experimental)
-----
:param cmap: ConsensusMaps with protein IDs
:param greedy_group_resolution: Adds indistinguishable protein groups with separate scores
:return: Writes its protein ID results into the ConsensusMap
         - Cython signature: void inferPosteriorProbabilities(ConsensusMap & cmap, bool greedy_group_resolution, ExperimentalDesign exp_des)


Performs inference
-----
Writes its results into protein and (optionally also) peptide hits (as new score)
Optionally adds indistinguishable protein groups with separate scores, too
Loops over all runs in the ConsensusMaps' protein IDs (experimental)
-----
:param cmap: ConsensusMaps with protein IDs.
:param greedy_group_resolution: Adds indistinguishable protein groups with separate scores
:param exp_des: Experimental Design
:return: Writes its protein ID results into the ConsensusMap




.. py:method:: BayesianProteinInferenceAlgorithm.nextProgress
   :module: pyopenms.pyopenms_3


Cython signature: void nextProgress()
Increment progress by 1 (according to range begin-end)




.. py:method:: BayesianProteinInferenceAlgorithm.setLogType
   :module: pyopenms.pyopenms_3


Cython signature: void setLogType(LogType)
Sets the progress log that should be used. The default type is NONE!




.. py:method:: BayesianProteinInferenceAlgorithm.setName
   :module: pyopenms.pyopenms_3


Cython signature: void setName(const String &)
Sets the name




.. py:method:: BayesianProteinInferenceAlgorithm.setParameters
   :module: pyopenms.pyopenms_3


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: BayesianProteinInferenceAlgorithm.setProgress
   :module: pyopenms.pyopenms_3


Cython signature: void setProgress(ptrdiff_t value)
Sets the current progress




.. py:method:: BayesianProteinInferenceAlgorithm.startProgress
   :module: pyopenms.pyopenms_3


Cython signature: void startProgress(ptrdiff_t begin, ptrdiff_t end, String label)




.. py:class:: BilinearInterpolation
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _BilinearInterpolation[double,double]


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::Math_1_1BilinearInterpolation[double,double].html




.. py:method:: BilinearInterpolation.addValue
   :module: pyopenms.pyopenms_3


Cython signature: void addValue(double arg_pos_0, double arg_pos_1, double arg_value)
Performs bilinear resampling. The arg_value is split up and added to the data points around arg_pos. ("forward resampling")




.. py:method:: BilinearInterpolation.empty
   :module: pyopenms.pyopenms_3


Cython signature: bool empty()




.. py:method:: BilinearInterpolation.getData
   :module: pyopenms.pyopenms_3


Cython signature: MatrixDouble getData()




.. py:method:: BilinearInterpolation.getInsideReferencePoint_0
   :module: pyopenms.pyopenms_3


Cython signature: double getInsideReferencePoint_0()




.. py:method:: BilinearInterpolation.getInsideReferencePoint_1
   :module: pyopenms.pyopenms_3


Cython signature: double getInsideReferencePoint_1()




.. py:method:: BilinearInterpolation.getOffset_0
   :module: pyopenms.pyopenms_3


Cython signature: double getOffset_0()
Accessor. "Offset" is the point (in "outside" units) which corresponds to "Data(0,0)"




.. py:method:: BilinearInterpolation.getOffset_1
   :module: pyopenms.pyopenms_3


Cython signature: double getOffset_1()
Accessor. "Offset" is the point (in "outside" units) which corresponds to "Data(0,0)"




.. py:method:: BilinearInterpolation.getOutsideReferencePoint_0
   :module: pyopenms.pyopenms_3


Cython signature: double getOutsideReferencePoint_0()




.. py:method:: BilinearInterpolation.getOutsideReferencePoint_1
   :module: pyopenms.pyopenms_3


Cython signature: double getOutsideReferencePoint_1()




.. py:method:: BilinearInterpolation.getScale_0
   :module: pyopenms.pyopenms_3


Cython signature: double getScale_0()




.. py:method:: BilinearInterpolation.getScale_1
   :module: pyopenms.pyopenms_3


Cython signature: double getScale_1()




.. py:method:: BilinearInterpolation.index2key_0
   :module: pyopenms.pyopenms_3


Cython signature: double index2key_0(double pos)
The transformation from "inside" to "outside" coordinates




.. py:method:: BilinearInterpolation.index2key_1
   :module: pyopenms.pyopenms_3


Cython signature: double index2key_1(double pos)
The transformation from "inside" to "outside" coordinates




.. py:method:: BilinearInterpolation.key2index_0
   :module: pyopenms.pyopenms_3


Cython signature: double key2index_0(double pos)
The transformation from "outside" to "inside" coordinates




.. py:method:: BilinearInterpolation.key2index_1
   :module: pyopenms.pyopenms_3


Cython signature: double key2index_1(double pos)
The transformation from "outside" to "inside" coordinates




.. py:method:: BilinearInterpolation.setData
   :module: pyopenms.pyopenms_3


Cython signature: void setData(MatrixDouble & data)
Assigns data to the internal random access container storing the data. SourceContainer must be assignable to ContainerType




.. py:method:: BilinearInterpolation.setMapping_0
   :module: pyopenms.pyopenms_3


- Cython signature: void setMapping_0(double & scale, double & inside, double & outside)
- Cython signature: void setMapping_0(double & inside_low, double & outside_low, double & inside_high, double & outside_high)




.. py:method:: BilinearInterpolation.setMapping_1
   :module: pyopenms.pyopenms_3


- Cython signature: void setMapping_1(double & scale, double & inside, double & outside)
- Cython signature: void setMapping_1(double & inside_low, double & outside_low, double & inside_high, double & outside_high)




.. py:method:: BilinearInterpolation.setOffset_0
   :module: pyopenms.pyopenms_3


Cython signature: void setOffset_0(double & offset)




.. py:method:: BilinearInterpolation.setOffset_1
   :module: pyopenms.pyopenms_3


Cython signature: void setOffset_1(double & offset)




.. py:method:: BilinearInterpolation.setScale_0
   :module: pyopenms.pyopenms_3


Cython signature: void setScale_0(double & scale)




.. py:method:: BilinearInterpolation.setScale_1
   :module: pyopenms.pyopenms_3


Cython signature: void setScale_1(double & scale)




.. py:method:: BilinearInterpolation.supportMax_0
   :module: pyopenms.pyopenms_3


Cython signature: double supportMax_0()
Upper boundary of the support, in "outside" coordinates




.. py:method:: BilinearInterpolation.supportMax_1
   :module: pyopenms.pyopenms_3


Cython signature: double supportMax_1()
Upper boundary of the support, in "outside" coordinates




.. py:method:: BilinearInterpolation.supportMin_0
   :module: pyopenms.pyopenms_3


Cython signature: double supportMin_0()
Lower boundary of the support, in "outside" coordinates




.. py:method:: BilinearInterpolation.supportMin_1
   :module: pyopenms.pyopenms_3


Cython signature: double supportMin_1()
Lower boundary of the support, in "outside" coordinates




.. py:method:: BilinearInterpolation.value
   :module: pyopenms.pyopenms_3


Cython signature: double value(double arg_pos_0, double arg_pos_1)




.. py:class:: CVTermListInterface
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _CVTermListInterface


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1CVTermListInterface.html
 -- Inherits from ['MetaInfoInterface']




.. py:method:: CVTermListInterface.addCVTerm
   :module: pyopenms.pyopenms_3


Cython signature: void addCVTerm(CVTerm & term)
Adds a CV term




.. py:method:: CVTermListInterface.clearMetaInfo
   :module: pyopenms.pyopenms_3


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: CVTermListInterface.consumeCVTerms
   :module: pyopenms.pyopenms_3


Cython signature: void consumeCVTerms(Map[String,libcpp_vector[CVTerm]] & cv_term_map)
Merges the given map into the member map, no duplicate checking




.. py:method:: CVTermListInterface.empty
   :module: pyopenms.pyopenms_3


Cython signature: bool empty()




.. py:method:: CVTermListInterface.getCVTerms
   :module: pyopenms.pyopenms_3


Cython signature: Map[String,libcpp_vector[CVTerm]] getCVTerms()




.. py:method:: CVTermListInterface.getKeys
   :module: pyopenms.pyopenms_3


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: CVTermListInterface.getMetaValue
   :module: pyopenms.pyopenms_3


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: CVTermListInterface.hasCVTerm
   :module: pyopenms.pyopenms_3


Cython signature: bool hasCVTerm(const String & accession)
Checks whether the term has a value




.. py:method:: CVTermListInterface.isMetaEmpty
   :module: pyopenms.pyopenms_3


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: CVTermListInterface.metaRegistry
   :module: pyopenms.pyopenms_3


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: CVTermListInterface.metaValueExists
   :module: pyopenms.pyopenms_3


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: CVTermListInterface.removeMetaValue
   :module: pyopenms.pyopenms_3


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: CVTermListInterface.replaceCVTerm
   :module: pyopenms.pyopenms_3


Cython signature: void replaceCVTerm(CVTerm & cv_term)




.. py:method:: CVTermListInterface.replaceCVTerms
   :module: pyopenms.pyopenms_3


- Cython signature: void replaceCVTerms(Map[String,libcpp_vector[CVTerm]] & cv_terms)
- Cython signature: void replaceCVTerms(libcpp_vector[CVTerm] & cv_terms, const String & accession)




.. py:method:: CVTermListInterface.setCVTerms
   :module: pyopenms.pyopenms_3


Cython signature: void setCVTerms(libcpp_vector[CVTerm] & terms)




.. py:method:: CVTermListInterface.setMetaValue
   :module: pyopenms.pyopenms_3


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:class:: CVTerm_ControlledVocabulary
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _CVTerm_ControlledVocabulary


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1CVTerm_ControlledVocabulary.html




.. py:attribute:: CVTerm_ControlledVocabulary.children
   :module: pyopenms.pyopenms_3




.. py:attribute:: CVTerm_ControlledVocabulary.description
   :module: pyopenms.pyopenms_3




.. py:method:: CVTerm_ControlledVocabulary.getXRefTypeName
   :module: pyopenms.pyopenms_3


Cython signature: String getXRefTypeName(XRefType_CVTerm_ControlledVocabulary type)




.. py:attribute:: CVTerm_ControlledVocabulary.id
   :module: pyopenms.pyopenms_3




.. py:method:: CVTerm_ControlledVocabulary.isHigherBetterScore
   :module: pyopenms.pyopenms_3


Cython signature: bool isHigherBetterScore(CVTerm_ControlledVocabulary term)




.. py:attribute:: CVTerm_ControlledVocabulary.name
   :module: pyopenms.pyopenms_3




.. py:attribute:: CVTerm_ControlledVocabulary.obsolete
   :module: pyopenms.pyopenms_3




.. py:attribute:: CVTerm_ControlledVocabulary.parents
   :module: pyopenms.pyopenms_3




.. py:attribute:: CVTerm_ControlledVocabulary.synonyms
   :module: pyopenms.pyopenms_3




.. py:method:: CVTerm_ControlledVocabulary.toXMLString
   :module: pyopenms.pyopenms_3


- Cython signature: String toXMLString(String ref, String value)
  Get mzidentml formatted string. i.e. a cvparam xml element, ref should be the name of the ControlledVocabulary (i.e. cv.name()) containing the CVTerm (e.g. PSI-MS for the psi-ms.obo - gets loaded in all cases like that??), value can be empty if not available


- Cython signature: String toXMLString(String ref, DataValue value)
  Get mzidentml formatted string. i.e. a cvparam xml element, ref should be the name of the ControlledVocabulary (i.e. cv.name()) containing the CVTerm (e.g. PSI-MS for the psi-ms.obo - gets loaded in all cases like that??), value can be empty if not available




.. py:attribute:: CVTerm_ControlledVocabulary.units
   :module: pyopenms.pyopenms_3




.. py:attribute:: CVTerm_ControlledVocabulary.unparsed
   :module: pyopenms.pyopenms_3




.. py:attribute:: CVTerm_ControlledVocabulary.xref_binary
   :module: pyopenms.pyopenms_3




.. py:attribute:: CVTerm_ControlledVocabulary.xref_type
   :module: pyopenms.pyopenms_3




.. py:class:: CalibrationData
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _CalibrationData


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1CalibrationData.html




.. py:method:: CalibrationData.clear
   :module: pyopenms.pyopenms_3


Cython signature: void clear()
Remove all calibration points




.. py:method:: CalibrationData.empty
   :module: pyopenms.pyopenms_3


Cython signature: bool empty()
Returns `True` if there are no peaks




.. py:method:: CalibrationData.getError
   :module: pyopenms.pyopenms_3


Cython signature: double getError(size_t)
Retrieve the error for i'th calibrant in either ppm or Th (depending on usePPM())




.. py:method:: CalibrationData.getGroup
   :module: pyopenms.pyopenms_3


Cython signature: int getGroup(size_t i)
Retrieve the group of the i'th calibration point




.. py:method:: CalibrationData.getIntensity
   :module: pyopenms.pyopenms_3


Cython signature: double getIntensity(size_t)
Retrieve the intensity of the i'th calibration point




.. py:method:: CalibrationData.getMZ
   :module: pyopenms.pyopenms_3


Cython signature: double getMZ(size_t)
Retrieve the observed m/z of the i'th calibration point




.. py:method:: CalibrationData.getMetaValues
   :module: pyopenms.pyopenms_3


Cython signature: StringList getMetaValues()




.. py:method:: CalibrationData.getNrOfGroups
   :module: pyopenms.pyopenms_3


Cython signature: size_t getNrOfGroups()
Number of peak groups (can be 0)




.. py:method:: CalibrationData.getRT
   :module: pyopenms.pyopenms_3


Cython signature: double getRT(size_t)
Retrieve the observed RT of the i'th calibration point




.. py:method:: CalibrationData.getRefMZ
   :module: pyopenms.pyopenms_3


Cython signature: double getRefMZ(size_t)
Retrieve the theoretical m/z of the i'th calibration point




.. py:method:: CalibrationData.getWeight
   :module: pyopenms.pyopenms_3


Cython signature: double getWeight(size_t)
Retrieve the weight of the i'th calibration point




.. py:method:: CalibrationData.insertCalibrationPoint
   :module: pyopenms.pyopenms_3


Cython signature: void insertCalibrationPoint(double rt, double mz_obs, float intensity, double mz_ref, double weight, int group)




.. py:method:: CalibrationData.median
   :module: pyopenms.pyopenms_3


Cython signature: CalibrationData median(double, double)
Compute the median in the given RT range for every peak group




.. py:method:: CalibrationData.setUsePPM
   :module: pyopenms.pyopenms_3


Cython signature: void setUsePPM(bool)




.. py:method:: CalibrationData.size
   :module: pyopenms.pyopenms_3


Cython signature: size_t size()
Number of calibration points




.. py:method:: CalibrationData.sortByRT
   :module: pyopenms.pyopenms_3


Cython signature: void sortByRT()
Sort calibration points by RT, to allow for valid RT chunking




.. py:method:: CalibrationData.usePPM
   :module: pyopenms.pyopenms_3


Cython signature: bool usePPM()
Current error unit (ppm or Th)




.. py:class:: ChargePair
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _ChargePair


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ChargePair.html




.. py:method:: ChargePair.getCharge
   :module: pyopenms.pyopenms_3


Cython signature: int getCharge(unsigned int pairID)
Returns the charge (for element 0 or 1)




.. py:method:: ChargePair.getCompomer
   :module: pyopenms.pyopenms_3


Cython signature: Compomer getCompomer()
Returns the Id of the compomer that explains the mass difference




.. py:method:: ChargePair.getEdgeScore
   :module: pyopenms.pyopenms_3


Cython signature: double getEdgeScore()
Returns the ILP edge score




.. py:method:: ChargePair.getElementIndex
   :module: pyopenms.pyopenms_3


Cython signature: size_t getElementIndex(unsigned int pairID)
Returns the element index (for element 0 or 1)




.. py:method:: ChargePair.getMassDiff
   :module: pyopenms.pyopenms_3


Cython signature: double getMassDiff()
Returns the mass difference




.. py:method:: ChargePair.isActive
   :module: pyopenms.pyopenms_3


Cython signature: bool isActive()
Is this pair realized?




.. py:method:: ChargePair.setActive
   :module: pyopenms.pyopenms_3


Cython signature: void setActive(bool active)




.. py:method:: ChargePair.setCharge
   :module: pyopenms.pyopenms_3


Cython signature: void setCharge(unsigned int pairID, int e)
Sets the charge (for element 0 or 1)




.. py:method:: ChargePair.setCompomer
   :module: pyopenms.pyopenms_3


Cython signature: void setCompomer(Compomer & compomer)
Sets the compomer id




.. py:method:: ChargePair.setEdgeScore
   :module: pyopenms.pyopenms_3


Cython signature: void setEdgeScore(double score)
Sets the ILP edge score




.. py:method:: ChargePair.setElementIndex
   :module: pyopenms.pyopenms_3


Cython signature: void setElementIndex(unsigned int pairID, size_t e)
Sets the element index (for element 0 or 1)




.. py:method:: ChargePair.setMassDiff
   :module: pyopenms.pyopenms_3


Cython signature: void setMassDiff(double mass_diff)
Sets the mass difference




.. py:class:: ClusterProxyKD
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _ClusterProxyKD


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ClusterProxyKD.html




.. py:method:: ClusterProxyKD.getAvgDistance
   :module: pyopenms.pyopenms_3


Cython signature: double getAvgDistance()




.. py:method:: ClusterProxyKD.getCenterIndex
   :module: pyopenms.pyopenms_3


Cython signature: size_t getCenterIndex()




.. py:method:: ClusterProxyKD.getSize
   :module: pyopenms.pyopenms_3


Cython signature: size_t getSize()




.. py:method:: ClusterProxyKD.isValid
   :module: pyopenms.pyopenms_3


Cython signature: bool isValid()




.. py:class:: CoarseIsotopePatternGenerator
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _CoarseIsotopePatternGenerator


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1CoarseIsotopePatternGenerator.html




.. py:method:: CoarseIsotopePatternGenerator.approximateFromPeptideWeight
   :module: pyopenms.pyopenms_3


Cython signature: IsotopeDistribution approximateFromPeptideWeight(double mass, unsigned int num_peaks, unsigned int charge)


Roughly approximate peptide IsotopeDistribution from monoisotopic weight using Poisson distribution.
m/z values approximated by adding one neutron mass (divided by charge) for every peak, starting at
the given monoisotopic weight. Foundation from: Bellew et al, https://dx.doi.org/10.1093/bioinformatics/btl276
This method is around 50 times faster than estimateFromPeptideWeight, but only an approximation.
The following are the intensities of the first 6 peaks generated for a monoisotopic mass of 1000:
estimateFromPeptideWeight:    0.571133000;0.306181000;0.095811100;0.022036900;0.004092170;0.000644568
approximateFromPeptideWeight: 0.573753000;0.318752000;0.088542200;0.016396700;0.002277320;0.000253036
KL divergences of the first 20 intensities of estimateFromPeptideWeight and this approximation range from 4.97E-5 for a
monoisotopic mass of 20 to 0.0144 for a mass of 2500. For comparison, when comparing an observed pattern with a
theoretical ground truth, the observed pattern is said to be an isotopic pattern if the KL between the two is below 0.05
for 2 peaks and below 0.6 for >=6 peaks by Guo Ci Teo et al.




.. py:method:: CoarseIsotopePatternGenerator.approximateIntensities
   :module: pyopenms.pyopenms_3


Cython signature: libcpp_vector[double] approximateIntensities(double mass, unsigned int num_peaks)


Roughly approximate peptidic isotope pattern intensities from monoisotopic weight using Poisson distribution.
Foundation from: Bellew et al, https://dx.doi.org/10.1093/bioinformatics/btl276
This method is around 100 times faster than estimateFromPeptideWeight, but only an approximation, see approximateFromPeptideWeight.




.. py:method:: CoarseIsotopePatternGenerator.calcFragmentIsotopeDist
   :module: pyopenms.pyopenms_3


Cython signature: IsotopeDistribution calcFragmentIsotopeDist(IsotopeDistribution & fragment_isotope_dist, IsotopeDistribution & comp_fragment_isotope_dist, libcpp_set[unsigned int] & precursor_isotopes, double fragment_mono_mass)
Calculate isotopic distribution for a fragment molecule




.. py:method:: CoarseIsotopePatternGenerator.estimateForFragmentFromDNAWeight
   :module: pyopenms.pyopenms_3


Cython signature: IsotopeDistribution estimateForFragmentFromDNAWeight(double average_weight_precursor, double average_weight_fragment, libcpp_set[unsigned int] & precursor_isotopes)


Estimate DNA fragment IsotopeDistribution from the precursor's average weight,
fragment's average weight, and a set of isolated precursor isotopes.




.. py:method:: CoarseIsotopePatternGenerator.estimateForFragmentFromPeptideWeight
   :module: pyopenms.pyopenms_3


Cython signature: IsotopeDistribution estimateForFragmentFromPeptideWeight(double average_weight_precursor, double average_weight_fragment, libcpp_set[unsigned int] & precursor_isotopes)
Estimate peptide fragment IsotopeDistribution from the precursor's average weight, fragment's average weight, and a set of isolated precursor isotopes




.. py:method:: CoarseIsotopePatternGenerator.estimateForFragmentFromPeptideWeightAndS
   :module: pyopenms.pyopenms_3


Cython signature: IsotopeDistribution estimateForFragmentFromPeptideWeightAndS(double average_weight_precursor, unsigned int S_precursor, double average_weight_fragment, unsigned int S_fragment, libcpp_set[unsigned int] & precursor_isotopes)


Estimate peptide fragment IsotopeDistribution from the precursor's average weight,
number of sulfurs in the precursor, fragment's average weight, number of sulfurs in the fragment,
and a set of isolated precursor isotopes.




.. py:method:: CoarseIsotopePatternGenerator.estimateForFragmentFromRNAWeight
   :module: pyopenms.pyopenms_3


Cython signature: IsotopeDistribution estimateForFragmentFromRNAWeight(double average_weight_precursor, double average_weight_fragment, libcpp_set[unsigned int] & precursor_isotopes)


Estimate RNA fragment IsotopeDistribution from the precursor's average weight,
fragment's average weight, and a set of isolated precursor isotopes




.. py:method:: CoarseIsotopePatternGenerator.estimateForFragmentFromWeightAndComp
   :module: pyopenms.pyopenms_3


Cython signature: IsotopeDistribution estimateForFragmentFromWeightAndComp(double average_weight_precursor, double average_weight_fragment, libcpp_set[unsigned int] & precursor_isotopes, double C, double H, double N, double O, double S, double P)


Estimate fragment IsotopeDistribution from the precursor's average weight,
fragment's average weight, a set of isolated precursor isotopes, and average composition




.. py:method:: CoarseIsotopePatternGenerator.estimateFromDNAWeight
   :module: pyopenms.pyopenms_3


Cython signature: IsotopeDistribution estimateFromDNAWeight(double average_weight)
Estimate Nucleotide Isotopedistribution from weight




.. py:method:: CoarseIsotopePatternGenerator.estimateFromPeptideWeight
   :module: pyopenms.pyopenms_3


Cython signature: IsotopeDistribution estimateFromPeptideWeight(double average_weight)
Estimate Peptide Isotopedistribution from weight and number of isotopes that should be reported




.. py:method:: CoarseIsotopePatternGenerator.estimateFromPeptideWeightAndS
   :module: pyopenms.pyopenms_3


Cython signature: IsotopeDistribution estimateFromPeptideWeightAndS(double average_weight, unsigned int S)
Estimate peptide IsotopeDistribution from average weight and exact number of sulfurs




.. py:method:: CoarseIsotopePatternGenerator.estimateFromRNAWeight
   :module: pyopenms.pyopenms_3


Cython signature: IsotopeDistribution estimateFromRNAWeight(double average_weight)
Estimate Nucleotide Isotopedistribution from weight




.. py:method:: CoarseIsotopePatternGenerator.estimateFromWeightAndComp
   :module: pyopenms.pyopenms_3


Cython signature: IsotopeDistribution estimateFromWeightAndComp(double average_weight, double C, double H, double N, double O, double S, double P)




.. py:method:: CoarseIsotopePatternGenerator.estimateFromWeightAndCompAndS
   :module: pyopenms.pyopenms_3


Cython signature: IsotopeDistribution estimateFromWeightAndCompAndS(double average_weight, unsigned int S, double C, double H, double N, double O, double P)
Estimate IsotopeDistribution from weight, exact number of sulfurs, and average remaining composition




.. py:method:: CoarseIsotopePatternGenerator.getMaxIsotope
   :module: pyopenms.pyopenms_3


Cython signature: size_t getMaxIsotope()
Returns the currently set maximum isotope




.. py:method:: CoarseIsotopePatternGenerator.getRoundMasses
   :module: pyopenms.pyopenms_3


Cython signature: bool getRoundMasses()
Returns the current value of the flag to round masses to integer values (true) or return accurate masses (false)




.. py:method:: CoarseIsotopePatternGenerator.run
   :module: pyopenms.pyopenms_3


Cython signature: IsotopeDistribution run(EmpiricalFormula)




.. py:method:: CoarseIsotopePatternGenerator.setMaxIsotope
   :module: pyopenms.pyopenms_3


Cython signature: void setMaxIsotope(size_t max_isotope)
Sets the maximal isotope with 'max_isotope'




.. py:method:: CoarseIsotopePatternGenerator.setRoundMasses
   :module: pyopenms.pyopenms_3


Cython signature: void setRoundMasses(bool round_masses_)
Sets the round_masses_ flag to round masses to integer values (true) or return accurate masses (false)




.. py:class:: ConsensusXMLFile
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _ConsensusXMLFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ConsensusXMLFile.html




.. py:method:: ConsensusXMLFile.getOptions
   :module: pyopenms.pyopenms_3


Cython signature: PeakFileOptions getOptions()
Mutable access to the options for loading/storing




.. py:method:: ConsensusXMLFile.load
   :module: pyopenms.pyopenms_3


Cython signature: void load(String, ConsensusMap &)
Loads a consensus map from file and calls updateRanges




.. py:method:: ConsensusXMLFile.store
   :module: pyopenms.pyopenms_3


Cython signature: void store(String, ConsensusMap &)
Stores a consensus map to file




.. py:class:: ControlledVocabulary
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _ControlledVocabulary


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ControlledVocabulary.html




.. py:method:: ControlledVocabulary.exists
   :module: pyopenms.pyopenms_3


Cython signature: bool exists(String id)
Returns true if the term is in the CV. Returns false otherwise.




.. py:method:: ControlledVocabulary.getAllChildTerms
   :module: pyopenms.pyopenms_3


Cython signature: void getAllChildTerms(libcpp_set[String] terms, String parent)
Writes all child terms recursively into terms




.. py:method:: ControlledVocabulary.getTerm
   :module: pyopenms.pyopenms_3


Cython signature: CVTerm_ControlledVocabulary getTerm(String id)
Returns a term specified by ID




.. py:method:: ControlledVocabulary.getTermByName
   :module: pyopenms.pyopenms_3


Cython signature: CVTerm_ControlledVocabulary getTermByName(String name, String desc)
Returns a term specified by name




.. py:method:: ControlledVocabulary.hasTermWithName
   :module: pyopenms.pyopenms_3


Cython signature: bool hasTermWithName(String name)
Returns true if a term with the given name is in the CV. Returns false otherwise




.. py:method:: ControlledVocabulary.isChildOf
   :module: pyopenms.pyopenms_3


Cython signature: bool isChildOf(String child, String parent)
Returns True if `child` is a child of `parent`




.. py:method:: ControlledVocabulary.loadFromOBO
   :module: pyopenms.pyopenms_3


Cython signature: void loadFromOBO(String name, String filename)
Loads the CV from an OBO file




.. py:method:: ControlledVocabulary.name
   :module: pyopenms.pyopenms_3


Cython signature: String name()
Returns the CV name (set in the load method)




.. py:class:: CsiAdapterIdentification
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _CsiAdapterIdentification


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::CsiFingerIdMzTabWriter_1_1CsiAdapterIdentification.html




.. py:attribute:: CsiAdapterIdentification.feature_id
   :module: pyopenms.pyopenms_3




.. py:attribute:: CsiAdapterIdentification.hits
   :module: pyopenms.pyopenms_3




.. py:attribute:: CsiAdapterIdentification.mz
   :module: pyopenms.pyopenms_3




.. py:attribute:: CsiAdapterIdentification.native_ids
   :module: pyopenms.pyopenms_3




.. py:attribute:: CsiAdapterIdentification.rt
   :module: pyopenms.pyopenms_3




.. py:attribute:: CsiAdapterIdentification.scan_index
   :module: pyopenms.pyopenms_3




.. py:attribute:: CsiAdapterIdentification.scan_number
   :module: pyopenms.pyopenms_3




.. py:class:: DBoundingBox2
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _DBoundingBox2


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1DBoundingBox2.html




.. py:method:: DBoundingBox2.maxPosition
   :module: pyopenms.pyopenms_3


Cython signature: DPosition2 maxPosition()




.. py:method:: DBoundingBox2.minPosition
   :module: pyopenms.pyopenms_3


Cython signature: DPosition2 minPosition()




.. py:class:: DIAScoring
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _DIAScoring


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1DIAScoring.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: DIAScoring.dia_by_ion_score
   :module: pyopenms.pyopenms_3




.. py:method:: DIAScoring.dia_ms1_isotope_scores
   :module: pyopenms.pyopenms_3


Cython signature: void dia_ms1_isotope_scores(double precursor_mz, shared_ptr[OSSpectrum] spectrum, double & isotope_corr, double & isotope_overlap, EmpiricalFormula & sum_formula)




.. py:method:: DIAScoring.dia_ms1_isotope_scores_averagine
   :module: pyopenms.pyopenms_3


Cython signature: void dia_ms1_isotope_scores_averagine(double precursor_mz, shared_ptr[OSSpectrum] spectrum, double & isotope_corr, double & isotope_overlap, int charge_state)




.. py:method:: DIAScoring.dia_ms1_massdiff_score
   :module: pyopenms.pyopenms_3


Cython signature: bool dia_ms1_massdiff_score(double precursor_mz, shared_ptr[OSSpectrum] spectrum, double & ppm_score)




.. py:method:: DIAScoring.getDefaults
   :module: pyopenms.pyopenms_3


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: DIAScoring.getName
   :module: pyopenms.pyopenms_3


Cython signature: String getName()
Returns the name




.. py:method:: DIAScoring.getParameters
   :module: pyopenms.pyopenms_3


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: DIAScoring.getSubsections
   :module: pyopenms.pyopenms_3


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: DIAScoring.score_with_isotopes
   :module: pyopenms.pyopenms_3


Cython signature: void score_with_isotopes(shared_ptr[OSSpectrum] spectrum, libcpp_vector[LightTransition] transitions, double & dotprod, double & manhattan)




.. py:method:: DIAScoring.setName
   :module: pyopenms.pyopenms_3


Cython signature: void setName(const String &)
Sets the name




.. py:method:: DIAScoring.setParameters
   :module: pyopenms.pyopenms_3


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: DigestionEnzymeRNA
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _DigestionEnzymeRNA


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1DigestionEnzymeRNA.html
 -- Inherits from ['DigestionEnzyme']


 Representation of a digestion enzyme for RNA (RNase)
 -----
 The cutting sites of these enzymes are defined using two different mechanisms:
 First, a single regular expression that is applied to strings of unmodified RNA sequence and defines cutting sites via zero-length matches (using lookahead/lookbehind assertions).
 This is the same mechanism that is used for proteases (see ProteaseDigestion).
 However, due to the complex notation involved, this approach is not practical for modification-aware digestion.
 Thus, the second mechanism uses two regular expressions ("cuts after"/"cuts before"), which are applied to the short codes (e.g. "m6A") of sequential ribonucleotides.
 If both expressions match, then there is a cutting site between the two ribonucleotides.
 -----
 There is support for terminal (5'/3') modifications that may be generated on fragments as a result of RNase cleavage.
 A typical example is 3'-phosphate, resulting from cleavage of the phosphate backbone.




.. py:method:: DigestionEnzymeRNA.addSynonym
   :module: pyopenms.pyopenms_3


Cython signature: void addSynonym(const String & synonym)
Adds a synonym




.. py:method:: DigestionEnzymeRNA.getCutsAfterRegEx
   :module: pyopenms.pyopenms_3


Cython signature: String getCutsAfterRegEx()
Returns the "cuts after ..." regular expression




.. py:method:: DigestionEnzymeRNA.getCutsBeforeRegEx
   :module: pyopenms.pyopenms_3


Cython signature: String getCutsBeforeRegEx()
Returns the "cuts before ..." regular expression




.. py:method:: DigestionEnzymeRNA.getFivePrimeGain
   :module: pyopenms.pyopenms_3


Cython signature: String getFivePrimeGain()
Returns the 5' gain




.. py:method:: DigestionEnzymeRNA.getName
   :module: pyopenms.pyopenms_3


Cython signature: String getName()
Returns the name of the enzyme




.. py:method:: DigestionEnzymeRNA.getRegEx
   :module: pyopenms.pyopenms_3


Cython signature: String getRegEx()
Returns the cleavage regex




.. py:method:: DigestionEnzymeRNA.getRegExDescription
   :module: pyopenms.pyopenms_3


Cython signature: String getRegExDescription()
Returns the regex description




.. py:method:: DigestionEnzymeRNA.getSynonyms
   :module: pyopenms.pyopenms_3


Cython signature: libcpp_set[String] getSynonyms()
Returns the synonyms




.. py:method:: DigestionEnzymeRNA.getThreePrimeGain
   :module: pyopenms.pyopenms_3


Cython signature: String getThreePrimeGain()
Returns the 3' gain




.. py:method:: DigestionEnzymeRNA.setCutsAfterRegEx
   :module: pyopenms.pyopenms_3


Cython signature: void setCutsAfterRegEx(String value)
Sets the "cuts after ..." regular expression




.. py:method:: DigestionEnzymeRNA.setCutsBeforeRegEx
   :module: pyopenms.pyopenms_3


Cython signature: void setCutsBeforeRegEx(String value)
Sets the "cuts before ..." regular expression




.. py:method:: DigestionEnzymeRNA.setFivePrimeGain
   :module: pyopenms.pyopenms_3


Cython signature: void setFivePrimeGain(String value)
Sets the 5' gain




.. py:method:: DigestionEnzymeRNA.setName
   :module: pyopenms.pyopenms_3


Cython signature: void setName(const String & name)
Sets the name of the enzyme




.. py:method:: DigestionEnzymeRNA.setRegEx
   :module: pyopenms.pyopenms_3


Cython signature: void setRegEx(const String & cleavage_regex)
Sets the cleavage regex




.. py:method:: DigestionEnzymeRNA.setRegExDescription
   :module: pyopenms.pyopenms_3


Cython signature: void setRegExDescription(const String & value)
Sets the regex description




.. py:method:: DigestionEnzymeRNA.setSynonyms
   :module: pyopenms.pyopenms_3


Cython signature: void setSynonyms(libcpp_set[String] & synonyms)
Sets the synonyms




.. py:method:: DigestionEnzymeRNA.setThreePrimeGain
   :module: pyopenms.pyopenms_3


Cython signature: void setThreePrimeGain(String value)
Sets the 3' gain




.. py:method:: DigestionEnzymeRNA.setValueFromFile
   :module: pyopenms.pyopenms_3


Cython signature: bool setValueFromFile(String key, String value)
Sets the value of a member variable based on an entry from an input file




.. py:class:: EDTAFile
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _EDTAFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1EDTAFile.html




.. py:method:: EDTAFile.load
   :module: pyopenms.pyopenms_3


Cython signature: void load(String filename, ConsensusMap & consensus_map)




.. py:method:: EDTAFile.store
   :module: pyopenms.pyopenms_3


- Cython signature: void store(String filename, FeatureMap & map)
- Cython signature: void store(String filename, ConsensusMap & map)




.. py:class:: ElementDB
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _ElementDB


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ElementDB.html




.. py:method:: ElementDB.getElement
   :module: pyopenms.pyopenms_3


- Cython signature: const Element * getElement(const String & name)
- Cython signature: const Element * getElement(unsigned int atomic_number)




.. py:method:: ElementDB.hasElement
   :module: pyopenms.pyopenms_3


- Cython signature: bool hasElement(const String & name)
  Returns true if the db contains an element with the given name, else false


- Cython signature: bool hasElement(unsigned int atomic_number)
  Returns true if the db contains an element with the given atomic_number, else false




.. py:class:: FalseDiscoveryRate
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _FalseDiscoveryRate


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1FalseDiscoveryRate.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: FalseDiscoveryRate.apply
   :module: pyopenms.pyopenms_3


- Cython signature: void apply(libcpp_vector[PeptideIdentification] & forward_ids, libcpp_vector[PeptideIdentification] & reverse_ids)
- Cython signature: void apply(libcpp_vector[PeptideIdentification] & id)
- Cython signature: void apply(libcpp_vector[ProteinIdentification] & forward_ids, libcpp_vector[ProteinIdentification] & reverse_ids)
- Cython signature: void apply(libcpp_vector[ProteinIdentification] & id)




.. py:method:: FalseDiscoveryRate.applyBasic
   :module: pyopenms.pyopenms_3


- Cython signature: void applyBasic(libcpp_vector[PeptideIdentification] & ids)
- Cython signature: void applyBasic(ConsensusMap & cmap, bool use_unassigned_peptides)
- Cython signature: void applyBasic(ProteinIdentification & id, bool groups_too)




.. py:method:: FalseDiscoveryRate.applyEstimated
   :module: pyopenms.pyopenms_3


Cython signature: void applyEstimated(libcpp_vector[ProteinIdentification] & ids)




.. py:method:: FalseDiscoveryRate.applyEvaluateProteinIDs
   :module: pyopenms.pyopenms_3


- Cython signature: double applyEvaluateProteinIDs(libcpp_vector[ProteinIdentification] & ids, double pepCutoff, unsigned int fpCutoff, double diffWeight)
- Cython signature: double applyEvaluateProteinIDs(ProteinIdentification & ids, double pepCutoff, unsigned int fpCutoff, double diffWeight)




.. py:method:: FalseDiscoveryRate.applyPickedProteinFDR
   :module: pyopenms.pyopenms_3


Cython signature: void applyPickedProteinFDR(ProteinIdentification & id, String & decoy_string, bool decoy_prefix, bool groups_too)




.. py:method:: FalseDiscoveryRate.getDefaults
   :module: pyopenms.pyopenms_3


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: FalseDiscoveryRate.getName
   :module: pyopenms.pyopenms_3


Cython signature: String getName()
Returns the name




.. py:method:: FalseDiscoveryRate.getParameters
   :module: pyopenms.pyopenms_3


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: FalseDiscoveryRate.getSubsections
   :module: pyopenms.pyopenms_3


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: FalseDiscoveryRate.rocN
   :module: pyopenms.pyopenms_3


- Cython signature: double rocN(libcpp_vector[PeptideIdentification] & ids, size_t fp_cutoff)
- Cython signature: double rocN(ConsensusMap & ids, size_t fp_cutoff)




.. py:method:: FalseDiscoveryRate.setName
   :module: pyopenms.pyopenms_3


Cython signature: void setName(const String &)
Sets the name




.. py:method:: FalseDiscoveryRate.setParameters
   :module: pyopenms.pyopenms_3


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: FeatureDistance
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _FeatureDistance


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1FeatureDistance.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: FeatureDistance.getDefaults
   :module: pyopenms.pyopenms_3


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: FeatureDistance.getName
   :module: pyopenms.pyopenms_3


Cython signature: String getName()
Returns the name




.. py:method:: FeatureDistance.getParameters
   :module: pyopenms.pyopenms_3


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: FeatureDistance.getSubsections
   :module: pyopenms.pyopenms_3


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: FeatureDistance.setName
   :module: pyopenms.pyopenms_3


Cython signature: void setName(const String &)
Sets the name




.. py:method:: FeatureDistance.setParameters
   :module: pyopenms.pyopenms_3


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: FeatureFinderAlgorithmIsotopeWavelet
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _FeatureFinderAlgorithmIsotopeWavelet


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1FeatureFinderAlgorithmIsotopeWavelet.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: FeatureFinderAlgorithmIsotopeWavelet.getDefaults
   :module: pyopenms.pyopenms_3


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: FeatureFinderAlgorithmIsotopeWavelet.getName
   :module: pyopenms.pyopenms_3


Cython signature: String getName()
Returns the name




.. py:method:: FeatureFinderAlgorithmIsotopeWavelet.getParameters
   :module: pyopenms.pyopenms_3


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: FeatureFinderAlgorithmIsotopeWavelet.getProductName
   :module: pyopenms.pyopenms_3


Cython signature: String getProductName()




.. py:method:: FeatureFinderAlgorithmIsotopeWavelet.getSubsections
   :module: pyopenms.pyopenms_3


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: FeatureFinderAlgorithmIsotopeWavelet.run
   :module: pyopenms.pyopenms_3


Cython signature: void run()




.. py:method:: FeatureFinderAlgorithmIsotopeWavelet.setData
   :module: pyopenms.pyopenms_3


Cython signature: void setData(MSExperiment & input, FeatureMap & output, FeatureFinder & ff)




.. py:method:: FeatureFinderAlgorithmIsotopeWavelet.setName
   :module: pyopenms.pyopenms_3


Cython signature: void setName(const String &)
Sets the name




.. py:method:: FeatureFinderAlgorithmIsotopeWavelet.setParameters
   :module: pyopenms.pyopenms_3


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: FeatureFinderIdentificationAlgorithm
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _FeatureFinderIdentificationAlgorithm


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1FeatureFinderIdentificationAlgorithm.html
 -- Inherits from ['DefaultParamHandler']


 Algorithm class for FeatureFinderIdentification
 -----
 External IDs (peptides_ext, proteins_ext) may be empty,
 in which case no machine learning or FDR estimation will be performed.
 Optional seeds from e.g. untargeted FeatureFinders can be added with
 seeds.
 Results will be written to features .
 Caution: peptide IDs will be shrunk to best hit, FFid metavalues added
 and potential seed IDs added.
 -----
 Usage:
   from pyopenms import *
   from urllib.request import urlretrieve
   urlretrieve("https://raw.githubusercontent.com/OpenMS/OpenMS/develop/src/tests/topp/FeatureFinderIdentification_1_input.mzML", "FeatureFinderIdentification_1_input.mzML")
   urlretrieve("https://raw.githubusercontent.com/OpenMS/OpenMS/develop/src/tests/topp/FeatureFinderIdentification_1_input.idXML", "FeatureFinderIdentification_1_input.idXML")
   #
   ffid_algo = FeatureFinderIdentificationAlgorithm()
   # load ms data from mzML
   mzml = MzMLFile()
   mzml_options = mzml.getOptions()
   mzml_options.addMSLevel(1) # only MS1
   mzml.setOptions(mzml_options)
   #
   exp = MSExperiment()
   mzml.load("FeatureFinderIdentification_1_input.mzML", exp)
   ffid_algo.setMSData(exp)
   # annotate mzML file
   features = FeatureMap()
   features.setPrimaryMSRunPath([b"FeatureFinderIdentification_1_input.idXML"], ffid_algo.getMSData())
   #
   peptides = []
   proteins = []
   peptides_ext = []
   proteins_ext = []
   IdXMLFile().load("FeatureFinderIdentification_1_input.idXML", proteins, peptides)
   #
   #"internal" IDs:
   ffid_algo.run(peptides, proteins, peptides_ext, proteins_ext, features)
   #
   # Terminal output:
   # Summary statistics (counting distinct peptides including PTMs):
   # 22 peptides identified (22 internal, 0 additional external)
   # 16 peptides with features (16 internal, 0 external)
   # 6 peptides without features (6 internal, 0 external)
 -----




.. py:method:: FeatureFinderIdentificationAlgorithm.getChromatograms
   :module: pyopenms.pyopenms_3


Cython signature: MSExperiment getChromatograms()
Returns chromatogram data as MSExperiment




.. py:method:: FeatureFinderIdentificationAlgorithm.getDefaults
   :module: pyopenms.pyopenms_3


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: FeatureFinderIdentificationAlgorithm.getLibrary
   :module: pyopenms.pyopenms_3


Cython signature: TargetedExperiment getLibrary()
Returns constructed assay library




.. py:method:: FeatureFinderIdentificationAlgorithm.getMSData
   :module: pyopenms.pyopenms_3


Cython signature: MSExperiment getMSData()
Returns ms data as MSExperiment




.. py:method:: FeatureFinderIdentificationAlgorithm.getName
   :module: pyopenms.pyopenms_3


Cython signature: String getName()
Returns the name




.. py:method:: FeatureFinderIdentificationAlgorithm.getParameters
   :module: pyopenms.pyopenms_3


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: FeatureFinderIdentificationAlgorithm.getSubsections
   :module: pyopenms.pyopenms_3


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: FeatureFinderIdentificationAlgorithm.run
   :module: pyopenms.pyopenms_3


         - Cython signature: void run(libcpp_vector[PeptideIdentification] peptides, libcpp_vector[ProteinIdentification] & proteins, libcpp_vector[PeptideIdentification] peptides_ext, libcpp_vector[ProteinIdentification] proteins_ext, FeatureMap & features)


Run feature detection
:param peptides: Vector of identified peptides
:param proteins: Vector of identified proteins
:param peptides_ext: Vector of external identified peptides, can be used to transfer ids from other runs
:param proteins_ext: Vector of external identified proteins, can be used to transfer ids from other runs
:param features: Feature detection results will be added here
         - Cython signature: void run(libcpp_vector[PeptideIdentification] peptides, libcpp_vector[ProteinIdentification] & proteins, libcpp_vector[PeptideIdentification] peptides_ext, libcpp_vector[ProteinIdentification] proteins_ext, FeatureMap & features, FeatureMap & seeds)


Run feature detection
:param peptides: Vector of identified peptides
:param proteins: Vector of identified proteins
:param peptides_ext: Vector of external identified peptides, can be used to transfer ids from other runs
:param proteins_ext: Vector of external identified proteins, can be used to transfer ids from other runs
:param features: Feature detection results will be added here
:param seeds: Optional seeds for feature detection from e.g. untargeted FeatureFinders
         - Cython signature: void run(libcpp_vector[PeptideIdentification] peptides, libcpp_vector[ProteinIdentification] & proteins, libcpp_vector[PeptideIdentification] peptides_ext, libcpp_vector[ProteinIdentification] proteins_ext, FeatureMap & features, FeatureMap & seeds, String & spectra_file)


Run feature detection
:param peptides: Vector of identified peptides
:param proteins: Vector of identified proteins
:param peptides_ext: Vector of external identified peptides, can be used to transfer ids from other runs
:param proteins_ext: Vector of external identified proteins, can be used to transfer ids from other runs
:param features: Feature detection results will be added here
:param seeds: Optional seeds for feature detection from e.g. untargeted FeatureFinders
:param spectra_file: Path will be stored in features in case the MSExperiment has no proper primaryMSRunPath




.. py:method:: FeatureFinderIdentificationAlgorithm.runOnCandidates
   :module: pyopenms.pyopenms_3


Cython signature: void runOnCandidates(FeatureMap & features)
Run feature detection on identified features (e.g. loaded from an IdXML file)




.. py:method:: FeatureFinderIdentificationAlgorithm.setMSData
   :module: pyopenms.pyopenms_3


Cython signature: void setMSData(const MSExperiment &)
Sets ms data




.. py:method:: FeatureFinderIdentificationAlgorithm.setName
   :module: pyopenms.pyopenms_3


Cython signature: void setName(const String &)
Sets the name




.. py:method:: FeatureFinderIdentificationAlgorithm.setParameters
   :module: pyopenms.pyopenms_3


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: FeatureMap
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _FeatureMap


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1FeatureMap.html
 -- Inherits from ['UniqueIdInterface', 'DocumentIdentifier', 'RangeManagerRtMzInt', 'MetaInfoInterface']


 A container for features.
 -----
 A feature map is a container holding features, which represent
 chemical entities (peptides, proteins, small molecules etc.) found
 in an LC-MS/MS experiment.
 -----
 This class supports direct iteration in Python.




.. py:method:: FeatureMap.clear
   :module: pyopenms.pyopenms_3


- Cython signature: void clear()
  Clears all data and meta data


- Cython signature: void clear(bool clear_meta_data)
  Clears all data and meta data. If 'true' is passed as an argument, all meta data is cleared in addition to the data




.. py:method:: FeatureMap.clearMetaInfo
   :module: pyopenms.pyopenms_3


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: FeatureMap.clearRanges
   :module: pyopenms.pyopenms_3


Cython signature: void clearRanges()
Resets all range dimensions as empty




.. py:method:: FeatureMap.clearUniqueId
   :module: pyopenms.pyopenms_3


Cython signature: size_t clearUniqueId()
Clear the unique id. The new unique id will be invalid. Returns 1 if the unique id was changed, 0 otherwise




.. py:method:: FeatureMap.ensureUniqueId
   :module: pyopenms.pyopenms_3


Cython signature: size_t ensureUniqueId()
Assigns a valid unique id, but only if the present one is invalid. Returns 1 if the unique id was changed, 0 otherwise




.. py:method:: FeatureMap.getDataProcessing
   :module: pyopenms.pyopenms_3


Cython signature: libcpp_vector[DataProcessing] getDataProcessing()




.. py:method:: FeatureMap.getIdentifier
   :module: pyopenms.pyopenms_3


Cython signature: String getIdentifier()
Retrieve document identifier (e.g. an LSID)




.. py:method:: FeatureMap.getKeys
   :module: pyopenms.pyopenms_3


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: FeatureMap.getLoadedFilePath
   :module: pyopenms.pyopenms_3


Cython signature: String getLoadedFilePath()
Returns the file_name which is the absolute path to the file loaded




.. py:method:: FeatureMap.getLoadedFileType
   :module: pyopenms.pyopenms_3


Cython signature: int getLoadedFileType()
Returns the file_type (e.g. featureXML, consensusXML, mzData, mzXML, mzML, ...) of the file loaded




.. py:method:: FeatureMap.getMaxIntensity
   :module: pyopenms.pyopenms_3


Cython signature: double getMaxIntensity()
Returns the maximum intensity




.. py:method:: FeatureMap.getMaxMZ
   :module: pyopenms.pyopenms_3


Cython signature: double getMaxMZ()
Returns the maximum m/z




.. py:method:: FeatureMap.getMaxRT
   :module: pyopenms.pyopenms_3


Cython signature: double getMaxRT()
Returns the maximum RT




.. py:method:: FeatureMap.getMetaValue
   :module: pyopenms.pyopenms_3


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: FeatureMap.getMinIntensity
   :module: pyopenms.pyopenms_3


Cython signature: double getMinIntensity()
Returns the minimum intensity




.. py:method:: FeatureMap.getMinMZ
   :module: pyopenms.pyopenms_3


Cython signature: double getMinMZ()
Returns the minimum m/z




.. py:method:: FeatureMap.getMinRT
   :module: pyopenms.pyopenms_3


Cython signature: double getMinRT()
Returns the minimum RT




.. py:method:: FeatureMap.getPrimaryMSRunPath
   :module: pyopenms.pyopenms_3


Cython signature: void getPrimaryMSRunPath(StringList & toFill)
Returns the file path to the first MS run




.. py:method:: FeatureMap.getProteinIdentifications
   :module: pyopenms.pyopenms_3


Cython signature: libcpp_vector[ProteinIdentification] getProteinIdentifications()




.. py:method:: FeatureMap.getUnassignedPeptideIdentifications
   :module: pyopenms.pyopenms_3


Cython signature: libcpp_vector[PeptideIdentification] getUnassignedPeptideIdentifications()




.. py:method:: FeatureMap.getUniqueId
   :module: pyopenms.pyopenms_3


Cython signature: size_t getUniqueId()
Returns the unique id




.. py:method:: FeatureMap.hasInvalidUniqueId
   :module: pyopenms.pyopenms_3


Cython signature: size_t hasInvalidUniqueId()
Returns whether the unique id is invalid. Returns 1 if the unique id is invalid, 0 otherwise




.. py:method:: FeatureMap.hasValidUniqueId
   :module: pyopenms.pyopenms_3


Cython signature: size_t hasValidUniqueId()
Returns whether the unique id is valid. Returns 1 if the unique id is valid, 0 otherwise




.. py:method:: FeatureMap.isMetaEmpty
   :module: pyopenms.pyopenms_3


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: FeatureMap.isValid
   :module: pyopenms.pyopenms_3


Cython signature: bool isValid(uint64_t unique_id)
Returns true if the unique_id is valid, false otherwise




.. py:method:: FeatureMap.metaRegistry
   :module: pyopenms.pyopenms_3


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: FeatureMap.metaValueExists
   :module: pyopenms.pyopenms_3


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: FeatureMap.push_back
   :module: pyopenms.pyopenms_3


- Cython signature: void push_back(Feature spec)
- Cython signature: void push_back(MRMFeature spec)




.. py:method:: FeatureMap.removeMetaValue
   :module: pyopenms.pyopenms_3


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: FeatureMap.setDataProcessing
   :module: pyopenms.pyopenms_3


Cython signature: void setDataProcessing(libcpp_vector[DataProcessing])
Sets the description of the applied data processing




.. py:method:: FeatureMap.setIdentifier
   :module: pyopenms.pyopenms_3


Cython signature: void setIdentifier(String id)
Sets document identifier (e.g. an LSID)




.. py:method:: FeatureMap.setLoadedFilePath
   :module: pyopenms.pyopenms_3


Cython signature: void setLoadedFilePath(String file_name)
Sets the file_name according to absolute path of the file loaded, preferably done whilst loading




.. py:method:: FeatureMap.setLoadedFileType
   :module: pyopenms.pyopenms_3


Cython signature: void setLoadedFileType(String file_name)
Sets the file_type according to the type of the file loaded from, preferably done whilst loading




.. py:method:: FeatureMap.setMetaValue
   :module: pyopenms.pyopenms_3


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:method:: FeatureMap.setPrimaryMSRunPath
   :module: pyopenms.pyopenms_3


- Cython signature: void setPrimaryMSRunPath(StringList & s)
  Sets the file path to the primary MS run (usually the mzML file obtained after data conversion from raw files)


- Cython signature: void setPrimaryMSRunPath(StringList & s, MSExperiment & e)
  Sets the file path to the primary MS run using the mzML annotated in the MSExperiment argument `e`




.. py:method:: FeatureMap.setProteinIdentifications
   :module: pyopenms.pyopenms_3


Cython signature: void setProteinIdentifications(libcpp_vector[ProteinIdentification])
Sets the protein identifications




.. py:method:: FeatureMap.setUnassignedPeptideIdentifications
   :module: pyopenms.pyopenms_3


Cython signature: void setUnassignedPeptideIdentifications(libcpp_vector[PeptideIdentification])
Sets the unassigned peptide identifications




.. py:method:: FeatureMap.setUniqueId
   :module: pyopenms.pyopenms_3


Cython signature: void setUniqueId(uint64_t rhs)
Assigns a new, valid unique id. Always returns 1




.. py:method:: FeatureMap.setUniqueIds
   :module: pyopenms.pyopenms_3




.. py:method:: FeatureMap.size
   :module: pyopenms.pyopenms_3


Cython signature: int size()




.. py:method:: FeatureMap.sortByIntensity
   :module: pyopenms.pyopenms_3


- Cython signature: void sortByIntensity()
  Sorts the peaks according to ascending intensity


- Cython signature: void sortByIntensity(bool reverse)
  Sorts the peaks according to ascending intensity. Order is reversed if argument is `true` ( reverse = true )




.. py:method:: FeatureMap.sortByMZ
   :module: pyopenms.pyopenms_3


Cython signature: void sortByMZ()
Sorts features by m/z position




.. py:method:: FeatureMap.sortByOverallQuality
   :module: pyopenms.pyopenms_3


Cython signature: void sortByOverallQuality()
Sorts features by ascending overall quality. Order is reversed if argument is `true` ( reverse = true )




.. py:method:: FeatureMap.sortByPosition
   :module: pyopenms.pyopenms_3


Cython signature: void sortByPosition()
Sorts features by position. Lexicographical comparison (first RT then m/z) is done




.. py:method:: FeatureMap.sortByRT
   :module: pyopenms.pyopenms_3


Cython signature: void sortByRT()
Sorts features by RT position




.. py:method:: FeatureMap.swap
   :module: pyopenms.pyopenms_3


Cython signature: void swap(FeatureMap &)




.. py:method:: FeatureMap.swapFeaturesOnly
   :module: pyopenms.pyopenms_3


Cython signature: void swapFeaturesOnly(FeatureMap swapfrom)
Swaps the feature content (plus its range information) of this map




.. py:method:: FeatureMap.updateRanges
   :module: pyopenms.pyopenms_3


Cython signature: void updateRanges()




.. py:class:: FeatureMapping
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _FeatureMapping


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1FeatureMapping.html




.. py:method:: FeatureMapping.assignMS2IndexToFeature
   :module: pyopenms.pyopenms_3


Cython signature: FeatureMapping_FeatureToMs2Indices assignMS2IndexToFeature(MSExperiment & spectra, FeatureMapping_FeatureMappingInfo & fm_info, double precursor_mz_tolerance, double precursor_rt_tolerance, bool ppm)




.. py:class:: FeatureMapping_FeatureMappingInfo
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _FeatureMapping_FeatureMappingInfo


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1FeatureMapping_FeatureMappingInfo.html




.. py:class:: FeatureMapping_FeatureToMs2Indices
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _FeatureMapping_FeatureToMs2Indices


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1FeatureMapping_FeatureToMs2Indices.html




.. py:class:: FineIsotopePatternGenerator
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _FineIsotopePatternGenerator


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1FineIsotopePatternGenerator.html


 Isotope pattern generator for fine isotope distributions.
 Generates isotopes until a stop condition (threshold) is reached,
 the lower the threshold the more isotopes are generated. The
 parameter use_total_prob defines whether the stop condition is
 interpreted as the total probability that the distribution should
 cover (default) or as a threshold for individual peaks. Finally,
 the absolute parameter specifies for individual peak thresholding
 if the threshold is absolute or relative.




.. py:method:: FineIsotopePatternGenerator.getAbsolute
   :module: pyopenms.pyopenms_3


Cython signature: bool getAbsolute()




.. py:method:: FineIsotopePatternGenerator.getThreshold
   :module: pyopenms.pyopenms_3


Cython signature: double getThreshold()




.. py:method:: FineIsotopePatternGenerator.getTotalProbability
   :module: pyopenms.pyopenms_3


Cython signature: bool getTotalProbability()




.. py:method:: FineIsotopePatternGenerator.run
   :module: pyopenms.pyopenms_3


Cython signature: IsotopeDistribution run(EmpiricalFormula)




.. py:method:: FineIsotopePatternGenerator.setAbsolute
   :module: pyopenms.pyopenms_3


Cython signature: void setAbsolute(bool absolute)




.. py:method:: FineIsotopePatternGenerator.setThreshold
   :module: pyopenms.pyopenms_3


Cython signature: void setThreshold(double threshold)




.. py:method:: FineIsotopePatternGenerator.setTotalProbability
   :module: pyopenms.pyopenms_3


Cython signature: void setTotalProbability(bool total)




.. py:class:: IDDecoyProbability
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _IDDecoyProbability


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1IDDecoyProbability.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: IDDecoyProbability.apply
   :module: pyopenms.pyopenms_3


         - Cython signature: void apply(libcpp_vector[PeptideIdentification] & prob_ids, libcpp_vector[PeptideIdentification] & fwd_ids, libcpp_vector[PeptideIdentification] & rev_ids)


Converts the forward and reverse identification into probabilities
-----
:param prob_ids: Output of the algorithm which includes identifications with probability based scores
:param fwd_ids: Input parameter which represents the identifications of the forward search
:param rev_ids: Input parameter which represents the identifications of the reversed search
         - Cython signature: void apply(libcpp_vector[PeptideIdentification] & ids)




.. py:method:: IDDecoyProbability.getDefaults
   :module: pyopenms.pyopenms_3


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: IDDecoyProbability.getName
   :module: pyopenms.pyopenms_3


Cython signature: String getName()
Returns the name




.. py:method:: IDDecoyProbability.getParameters
   :module: pyopenms.pyopenms_3


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: IDDecoyProbability.getSubsections
   :module: pyopenms.pyopenms_3


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: IDDecoyProbability.setName
   :module: pyopenms.pyopenms_3


Cython signature: void setName(const String &)
Sets the name




.. py:method:: IDDecoyProbability.setParameters
   :module: pyopenms.pyopenms_3


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: IMSElement
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _IMSElement


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::ims::IMSElement_1_1IMSElement.html




.. py:method:: IMSElement.getAverageMass
   :module: pyopenms.pyopenms_3


Cython signature: double getAverageMass()
Gets element's average mass




.. py:method:: IMSElement.getIonMass
   :module: pyopenms.pyopenms_3


Cython signature: double getIonMass(int electrons_number)
Gets ion mass of element. By default ion lacks 1 electron, but this can be changed by setting other 'electrons_number'




.. py:method:: IMSElement.getIsotopeDistribution
   :module: pyopenms.pyopenms_3


Cython signature: IMSIsotopeDistribution getIsotopeDistribution()
Gets element's isotope distribution




.. py:method:: IMSElement.getMass
   :module: pyopenms.pyopenms_3


Cython signature: double getMass(int index)
Gets mass of element's isotope 'index'




.. py:method:: IMSElement.getName
   :module: pyopenms.pyopenms_3


Cython signature: libcpp_string getName()
Gets element's name




.. py:method:: IMSElement.getNominalMass
   :module: pyopenms.pyopenms_3


Cython signature: unsigned int getNominalMass()
Gets element's nominal mass




.. py:method:: IMSElement.getSequence
   :module: pyopenms.pyopenms_3


Cython signature: libcpp_string getSequence()
Gets element's sequence




.. py:method:: IMSElement.setIsotopeDistribution
   :module: pyopenms.pyopenms_3


Cython signature: void setIsotopeDistribution(IMSIsotopeDistribution & isotopes)
Sets element's isotope distribution




.. py:method:: IMSElement.setName
   :module: pyopenms.pyopenms_3


Cython signature: void setName(libcpp_string & name)
Sets element's name




.. py:method:: IMSElement.setSequence
   :module: pyopenms.pyopenms_3


Cython signature: void setSequence(libcpp_string & sequence)
Sets element's sequence




.. py:class:: IncludeExcludeTarget
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _IncludeExcludeTarget


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1IncludeExcludeTarget.html




.. py:method:: IncludeExcludeTarget.addCVTerm
   :module: pyopenms.pyopenms_3


Cython signature: void addCVTerm(CVTerm & term)




.. py:method:: IncludeExcludeTarget.addConfiguration
   :module: pyopenms.pyopenms_3


Cython signature: void addConfiguration(Configuration & configuration)




.. py:method:: IncludeExcludeTarget.addInterpretation
   :module: pyopenms.pyopenms_3


Cython signature: void addInterpretation(CVTermList & interpretation)




.. py:method:: IncludeExcludeTarget.addPrecursorCVTerm
   :module: pyopenms.pyopenms_3


Cython signature: void addPrecursorCVTerm(CVTerm & cv_term)




.. py:method:: IncludeExcludeTarget.addPredictionTerm
   :module: pyopenms.pyopenms_3


Cython signature: void addPredictionTerm(CVTerm & prediction)




.. py:method:: IncludeExcludeTarget.addProductCVTerm
   :module: pyopenms.pyopenms_3


Cython signature: void addProductCVTerm(CVTerm & cv_term)




.. py:method:: IncludeExcludeTarget.empty
   :module: pyopenms.pyopenms_3


Cython signature: bool empty()




.. py:method:: IncludeExcludeTarget.getCVTerms
   :module: pyopenms.pyopenms_3


Cython signature: Map[String,libcpp_vector[CVTerm]] getCVTerms()




.. py:method:: IncludeExcludeTarget.getCompoundRef
   :module: pyopenms.pyopenms_3


Cython signature: String getCompoundRef()




.. py:method:: IncludeExcludeTarget.getConfigurations
   :module: pyopenms.pyopenms_3


Cython signature: libcpp_vector[Configuration] getConfigurations()




.. py:method:: IncludeExcludeTarget.getInterpretations
   :module: pyopenms.pyopenms_3


Cython signature: libcpp_vector[CVTermList] getInterpretations()




.. py:method:: IncludeExcludeTarget.getName
   :module: pyopenms.pyopenms_3


Cython signature: String getName()




.. py:method:: IncludeExcludeTarget.getPeptideRef
   :module: pyopenms.pyopenms_3


Cython signature: String getPeptideRef()




.. py:method:: IncludeExcludeTarget.getPrecursorCVTermList
   :module: pyopenms.pyopenms_3


Cython signature: CVTermList getPrecursorCVTermList()




.. py:method:: IncludeExcludeTarget.getPrecursorMZ
   :module: pyopenms.pyopenms_3


Cython signature: double getPrecursorMZ()




.. py:method:: IncludeExcludeTarget.getPrediction
   :module: pyopenms.pyopenms_3


Cython signature: CVTermList getPrediction()




.. py:method:: IncludeExcludeTarget.getProductCVTermList
   :module: pyopenms.pyopenms_3


Cython signature: CVTermList getProductCVTermList()




.. py:method:: IncludeExcludeTarget.getProductMZ
   :module: pyopenms.pyopenms_3


Cython signature: double getProductMZ()




.. py:method:: IncludeExcludeTarget.getRetentionTime
   :module: pyopenms.pyopenms_3


Cython signature: RetentionTime getRetentionTime()




.. py:method:: IncludeExcludeTarget.hasCVTerm
   :module: pyopenms.pyopenms_3


Cython signature: bool hasCVTerm(String accession)




.. py:method:: IncludeExcludeTarget.replaceCVTerm
   :module: pyopenms.pyopenms_3


Cython signature: void replaceCVTerm(CVTerm & term)




.. py:method:: IncludeExcludeTarget.replaceCVTerms
   :module: pyopenms.pyopenms_3


- Cython signature: void replaceCVTerms(libcpp_vector[CVTerm] cv_terms, String accession)
- Cython signature: void replaceCVTerms(Map[String,libcpp_vector[CVTerm]] cv_term_map)




.. py:method:: IncludeExcludeTarget.setCVTerms
   :module: pyopenms.pyopenms_3


Cython signature: void setCVTerms(libcpp_vector[CVTerm] & terms)




.. py:method:: IncludeExcludeTarget.setCompoundRef
   :module: pyopenms.pyopenms_3


Cython signature: void setCompoundRef(const String & compound_ref)




.. py:method:: IncludeExcludeTarget.setConfigurations
   :module: pyopenms.pyopenms_3


Cython signature: void setConfigurations(libcpp_vector[Configuration] & configuration)




.. py:method:: IncludeExcludeTarget.setInterpretations
   :module: pyopenms.pyopenms_3


Cython signature: void setInterpretations(libcpp_vector[CVTermList] & interpretations)




.. py:method:: IncludeExcludeTarget.setName
   :module: pyopenms.pyopenms_3


Cython signature: void setName(const String & name)




.. py:method:: IncludeExcludeTarget.setPeptideRef
   :module: pyopenms.pyopenms_3


Cython signature: void setPeptideRef(const String & peptide_ref)




.. py:method:: IncludeExcludeTarget.setPrecursorCVTermList
   :module: pyopenms.pyopenms_3


Cython signature: void setPrecursorCVTermList(CVTermList & list_)




.. py:method:: IncludeExcludeTarget.setPrecursorMZ
   :module: pyopenms.pyopenms_3


Cython signature: void setPrecursorMZ(double mz)




.. py:method:: IncludeExcludeTarget.setPrediction
   :module: pyopenms.pyopenms_3


Cython signature: void setPrediction(CVTermList & prediction)




.. py:method:: IncludeExcludeTarget.setProductCVTermList
   :module: pyopenms.pyopenms_3


Cython signature: void setProductCVTermList(CVTermList & list_)




.. py:method:: IncludeExcludeTarget.setProductMZ
   :module: pyopenms.pyopenms_3


Cython signature: void setProductMZ(double mz)




.. py:method:: IncludeExcludeTarget.setRetentionTime
   :module: pyopenms.pyopenms_3


Cython signature: void setRetentionTime(RetentionTime rt)




.. py:class:: Interfaces()
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`




.. py:attribute:: Interfaces.BinaryDataArray
   :module: pyopenms.pyopenms_3


alias of :py:class:`pyopenms.pyopenms_2._Interfaces_BinaryDataArray`


.. py:attribute:: Interfaces.Chromatogram
   :module: pyopenms.pyopenms_3


alias of :py:class:`pyopenms.pyopenms_2._Interfaces_Chromatogram`


.. py:attribute:: Interfaces.Spectrum
   :module: pyopenms.pyopenms_3


alias of :py:class:`pyopenms.pyopenms_2._Interfaces_Spectrum`


.. py:class:: IsobaricQuantifier
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _IsobaricQuantifier


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1IsobaricQuantifier.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: IsobaricQuantifier.getDefaults
   :module: pyopenms.pyopenms_3


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: IsobaricQuantifier.getName
   :module: pyopenms.pyopenms_3


Cython signature: String getName()
Returns the name




.. py:method:: IsobaricQuantifier.getParameters
   :module: pyopenms.pyopenms_3


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: IsobaricQuantifier.getSubsections
   :module: pyopenms.pyopenms_3


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: IsobaricQuantifier.quantify
   :module: pyopenms.pyopenms_3


Cython signature: void quantify(ConsensusMap & consensus_map_in, ConsensusMap & consensus_map_out)




.. py:method:: IsobaricQuantifier.setName
   :module: pyopenms.pyopenms_3


Cython signature: void setName(const String &)
Sets the name




.. py:method:: IsobaricQuantifier.setParameters
   :module: pyopenms.pyopenms_3


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: IsobaricQuantifierStatistics
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _IsobaricQuantifierStatistics


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1IsobaricQuantifierStatistics.html




.. py:attribute:: IsobaricQuantifierStatistics.channel_count
   :module: pyopenms.pyopenms_3




.. py:attribute:: IsobaricQuantifierStatistics.iso_number_ms2_negative
   :module: pyopenms.pyopenms_3




.. py:attribute:: IsobaricQuantifierStatistics.iso_number_reporter_different
   :module: pyopenms.pyopenms_3




.. py:attribute:: IsobaricQuantifierStatistics.iso_number_reporter_negative
   :module: pyopenms.pyopenms_3




.. py:attribute:: IsobaricQuantifierStatistics.iso_solution_different_intensity
   :module: pyopenms.pyopenms_3




.. py:attribute:: IsobaricQuantifierStatistics.iso_total_intensity_negative
   :module: pyopenms.pyopenms_3




.. py:attribute:: IsobaricQuantifierStatistics.number_ms2_empty
   :module: pyopenms.pyopenms_3




.. py:attribute:: IsobaricQuantifierStatistics.number_ms2_total
   :module: pyopenms.pyopenms_3




.. py:method:: IsobaricQuantifierStatistics.reset
   :module: pyopenms.pyopenms_3


Cython signature: void reset()




.. py:class:: IsotopeDiffFilter
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _IsotopeDiffFilter


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1IsotopeDiffFilter.html
 -- Inherits from ['FilterFunctor']




.. py:method:: IsotopeDiffFilter.apply
   :module: pyopenms.pyopenms_3


Cython signature: double apply(MSSpectrum &)




.. py:method:: IsotopeDiffFilter.getDefaults
   :module: pyopenms.pyopenms_3


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: IsotopeDiffFilter.getName
   :module: pyopenms.pyopenms_3


Cython signature: String getName()
Returns the name




.. py:method:: IsotopeDiffFilter.getParameters
   :module: pyopenms.pyopenms_3


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: IsotopeDiffFilter.getProductName
   :module: pyopenms.pyopenms_3


Cython signature: String getProductName()




.. py:method:: IsotopeDiffFilter.getSubsections
   :module: pyopenms.pyopenms_3


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: IsotopeDiffFilter.registerChildren
   :module: pyopenms.pyopenms_3


Cython signature: void registerChildren()




.. py:method:: IsotopeDiffFilter.setName
   :module: pyopenms.pyopenms_3


Cython signature: void setName(const String &)
Sets the name




.. py:method:: IsotopeDiffFilter.setParameters
   :module: pyopenms.pyopenms_3


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: IsotopeDistribution
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _IsotopeDistribution


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1IsotopeDistribution.html


 Isotope distribution class
 -----
 A container that holds an isotope distribution. It consists of mass values
 and their correspondent probabilities (stored in the intensity slot)
 -----
 Isotope distributions can be calculated using either the
 CoarseIsotopePatternGenerator for quantized atomic masses which group
 isotopes with the same atomic number. Alternatively, the
 FineIsotopePatternGenerator can be used that calculates hyperfine isotopic
 distributions
  -----
 This class only describes the container that holds the isotopic
 distribution, calculations are done using classes derived from
 IsotopePatternGenerator




.. py:attribute:: IsotopeDistribution.Sorted
   :module: pyopenms.pyopenms_3


alias of :py:class:`pyopenms.pyopenms_3.__Sorted`


.. py:method:: IsotopeDistribution.averageMass
   :module: pyopenms.pyopenms_3


Cython signature: double averageMass()
Compute average mass of isotope distribution (weighted average of all isotopes)




.. py:method:: IsotopeDistribution.clear
   :module: pyopenms.pyopenms_3


Cython signature: void clear()
Clears the distribution and resets max isotope to 0




.. py:method:: IsotopeDistribution.getContainer
   :module: pyopenms.pyopenms_3


Cython signature: libcpp_vector[Peak1D] & getContainer()
Returns the container which holds the distribution




.. py:method:: IsotopeDistribution.getMax
   :module: pyopenms.pyopenms_3


Cython signature: size_t getMax()
Returns the maximal weight isotope which is stored in the distribution




.. py:method:: IsotopeDistribution.getMin
   :module: pyopenms.pyopenms_3


Cython signature: size_t getMin()
Returns the minimal weight isotope which is stored in the distribution




.. py:method:: IsotopeDistribution.getMostAbundant
   :module: pyopenms.pyopenms_3


Cython signature: Peak1D getMostAbundant()
Returns the most abundant isotope which is stored in the distribution




.. py:method:: IsotopeDistribution.insert
   :module: pyopenms.pyopenms_3


Cython signature: void insert(double mass, float intensity)




.. py:method:: IsotopeDistribution.merge
   :module: pyopenms.pyopenms_3


Cython signature: void merge(double, double)
Merges distributions of arbitrary data points with constant defined resolution




.. py:method:: IsotopeDistribution.renormalize
   :module: pyopenms.pyopenms_3


Cython signature: void renormalize()
Renormalizes the sum of the probabilities of the isotopes to 1




.. py:method:: IsotopeDistribution.resize
   :module: pyopenms.pyopenms_3


Cython signature: void resize(unsigned int size)
Resizes distribution container




.. py:method:: IsotopeDistribution.set
   :module: pyopenms.pyopenms_3


Cython signature: void set(libcpp_vector[Peak1D] & distribution)
Overwrites the container which holds the distribution using 'distribution'




.. py:method:: IsotopeDistribution.size
   :module: pyopenms.pyopenms_3


Cython signature: size_t size()
Returns the size of the distribution which is the number of isotopes in the distribution




.. py:method:: IsotopeDistribution.sortByIntensity
   :module: pyopenms.pyopenms_3


Cython signature: void sortByIntensity()
Sort isotope distribution by intensity




.. py:method:: IsotopeDistribution.sortByMass
   :module: pyopenms.pyopenms_3


Cython signature: void sortByMass()
Sort isotope distribution by mass




.. py:method:: IsotopeDistribution.trimIntensities
   :module: pyopenms.pyopenms_3


Cython signature: void trimIntensities(double cutoff)
Remove intensities below the cutoff




.. py:method:: IsotopeDistribution.trimLeft
   :module: pyopenms.pyopenms_3


Cython signature: void trimLeft(double cutoff)
Trims the left side of the isotope distribution to isotopes with a significant contribution




.. py:method:: IsotopeDistribution.trimRight
   :module: pyopenms.pyopenms_3


Cython signature: void trimRight(double cutoff)
Trims the right side of the isotope distribution to isotopes with a significant contribution




.. py:class:: KDTreeFeatureNode
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _KDTreeFeatureNode


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1KDTreeFeatureNode.html




.. py:method:: KDTreeFeatureNode.getIndex
   :module: pyopenms.pyopenms_3


Cython signature: size_t getIndex()
Returns index of corresponding feature in data_




.. py:class:: MRMFeatureFilter
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _MRMFeatureFilter


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MRMFeatureFilter.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: MRMFeatureFilter.FilterFeatureMap
   :module: pyopenms.pyopenms_3


Cython signature: void FilterFeatureMap(FeatureMap features, MRMFeatureQC filter_criteria, TargetedExperiment transitions)


Flags or filters features and subordinates in a FeatureMap
-----
:param features: FeatureMap to flag or filter
:param filter_criteria: MRMFeatureQC class defining QC parameters
:param transitions: Transitions from a TargetedExperiment




.. py:method:: MRMFeatureFilter.getDefaults
   :module: pyopenms.pyopenms_3


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: MRMFeatureFilter.getName
   :module: pyopenms.pyopenms_3


Cython signature: String getName()
Returns the name




.. py:method:: MRMFeatureFilter.getParameters
   :module: pyopenms.pyopenms_3


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: MRMFeatureFilter.getSubsections
   :module: pyopenms.pyopenms_3


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: MRMFeatureFilter.setName
   :module: pyopenms.pyopenms_3


Cython signature: void setName(const String &)
Sets the name




.. py:method:: MRMFeatureFilter.setParameters
   :module: pyopenms.pyopenms_3


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: MRMMapping
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _MRMMapping


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MRMMapping.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: MRMMapping.getDefaults
   :module: pyopenms.pyopenms_3


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: MRMMapping.getName
   :module: pyopenms.pyopenms_3


Cython signature: String getName()
Returns the name




.. py:method:: MRMMapping.getParameters
   :module: pyopenms.pyopenms_3


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: MRMMapping.getSubsections
   :module: pyopenms.pyopenms_3


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: MRMMapping.mapExperiment
   :module: pyopenms.pyopenms_3


Cython signature: void mapExperiment(MSExperiment input_chromatograms, TargetedExperiment targeted_exp, MSExperiment & output)


Maps input chromatograms to assays in a targeted experiment
-----
The output chromatograms are an annotated copy of the input chromatograms
with native id, precursor information and peptide sequence (if available)
annotated in the chromatogram files
-----
The algorithm tries to match a given set of chromatograms and targeted
assays. It iterates through all the chromatograms retrieves one or more
matching targeted assay for the chromatogram. By default, the algorithm
assumes that a 1:1 mapping exists. If a chromatogram cannot be mapped
(does not have a corresponding assay) the algorithm issues a warning, the
user can specify that the program should abort in such a case (see
error_on_unmapped)
-----
:note If multiple mapping is enabled (see map_multiple_assays parameter)
then each mapped assay will get its own chromatogram that contains the
same raw data but different meta-annotation. This *can* be useful if the
same transition is used to monitor multiple analytes but may also
indicate a problem with too wide mapping tolerances




.. py:method:: MRMMapping.setName
   :module: pyopenms.pyopenms_3


Cython signature: void setName(const String &)
Sets the name




.. py:method:: MRMMapping.setParameters
   :module: pyopenms.pyopenms_3


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: MasstraceCorrelator
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _MasstraceCorrelator


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MasstraceCorrelator.html
 -- Inherits from ['DefaultParamHandler', 'ProgressLogger']




.. py:method:: MasstraceCorrelator.createPseudoSpectra
   :module: pyopenms.pyopenms_3


Cython signature: void createPseudoSpectra(const ConsensusMap & map_, MSExperiment & pseudo_spectra, size_t min_peak_nr, double min_correlation, int max_lag, double max_rt_apex_difference)


Compute pseudo-spectra from a set of (MS2) masstraces
-----
This function will take a set of masstraces (consensus map) as input and
produce a vector of pseudo spectra as output (pseudo_spectra result
vector).
-----
It basically makes an all-vs-all comparison of all masstraces against
each other and scores them on how similar they are in their mass traces.
-----
This assumes that the consensus feature is only from one (SWATH) map
This assumes that the consensus map is sorted by intensity




.. py:method:: MasstraceCorrelator.endProgress
   :module: pyopenms.pyopenms_3


Cython signature: void endProgress()
Ends the progress display




.. py:method:: MasstraceCorrelator.getDefaults
   :module: pyopenms.pyopenms_3


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: MasstraceCorrelator.getLogType
   :module: pyopenms.pyopenms_3


Cython signature: LogType getLogType()
Returns the type of progress log being used




.. py:method:: MasstraceCorrelator.getName
   :module: pyopenms.pyopenms_3


Cython signature: String getName()
Returns the name




.. py:method:: MasstraceCorrelator.getParameters
   :module: pyopenms.pyopenms_3


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: MasstraceCorrelator.getSubsections
   :module: pyopenms.pyopenms_3


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: MasstraceCorrelator.nextProgress
   :module: pyopenms.pyopenms_3


Cython signature: void nextProgress()
Increment progress by 1 (according to range begin-end)




.. py:method:: MasstraceCorrelator.setLogType
   :module: pyopenms.pyopenms_3


Cython signature: void setLogType(LogType)
Sets the progress log that should be used. The default type is NONE!




.. py:method:: MasstraceCorrelator.setName
   :module: pyopenms.pyopenms_3


Cython signature: void setName(const String &)
Sets the name




.. py:method:: MasstraceCorrelator.setParameters
   :module: pyopenms.pyopenms_3


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: MasstraceCorrelator.setProgress
   :module: pyopenms.pyopenms_3


Cython signature: void setProgress(ptrdiff_t value)
Sets the current progress




.. py:method:: MasstraceCorrelator.startProgress
   :module: pyopenms.pyopenms_3


Cython signature: void startProgress(ptrdiff_t begin, ptrdiff_t end, String label)




.. py:class:: MzQCFile
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _MzQCFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MzQCFile.html


 File adapter for mzQC files used to load and store mzQC files
 -----
 This class collects the data for the mzQC File




.. py:method:: MzQCFile.store
   :module: pyopenms.pyopenms_3


Cython signature: void store(String input_file, String output_file, MSExperiment & exp, String contact_name, String contact_address, String description, String label, FeatureMap & feature_map, libcpp_vector[ProteinIdentification] & prot_ids, libcpp_vector[PeptideIdentification] & pep_ids)


Stores QC data in mzQC file with JSON format
:param input_file: MzML input file name
:param output_file: MzQC output file name
:param exp: MSExperiment to extract QC data from, prior sortSpectra() and updateRanges() required
:param contact_name: Name of the person creating the mzQC file
:param contact_address: Contact address (mail/e-mail or phone) of the person creating the mzQC file
:param description: Description and comments about the mzQC file contents
:param label: Qnique and informative label for the run
:param feature_map: FeatureMap from feature file (featureXML)
:param prot_ids: Protein identifications from ID file (idXML)
:param pep_ids: Protein identifications from ID file (idXML)




.. py:class:: OSBinaryDataArray
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _OSBinaryDataArray


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenSwath_1_1OSBinaryDataArray.html




.. py:attribute:: OSBinaryDataArray.data
   :module: pyopenms.pyopenms_3




.. py:attribute:: OSBinaryDataArray.description
   :module: pyopenms.pyopenms_3




.. py:class:: OSChromatogram
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _OSChromatogram


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenSwath_1_1OSChromatogram.html




.. py:method:: OSChromatogram.getIntensityArray
   :module: pyopenms.pyopenms_3




.. py:method:: OSChromatogram.getTimeArray
   :module: pyopenms.pyopenms_3




.. py:method:: OSChromatogram.setIntensityArray
   :module: pyopenms.pyopenms_3




.. py:method:: OSChromatogram.setTimeArray
   :module: pyopenms.pyopenms_3




.. py:class:: OSSpectrum
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _OSSpectrum


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenSwath_1_1OSSpectrum.html




.. py:method:: OSSpectrum.getIntensityArray
   :module: pyopenms.pyopenms_3




.. py:method:: OSSpectrum.getMZArray
   :module: pyopenms.pyopenms_3




.. py:method:: OSSpectrum.setIntensityArray
   :module: pyopenms.pyopenms_3




.. py:method:: OSSpectrum.setMZArray
   :module: pyopenms.pyopenms_3




.. py:class:: OSSpectrumMeta
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _OSSpectrumMeta


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenSwath_1_1OSSpectrumMeta.html




.. py:attribute:: OSSpectrumMeta.RT
   :module: pyopenms.pyopenms_3




.. py:attribute:: OSSpectrumMeta.id
   :module: pyopenms.pyopenms_3




.. py:attribute:: OSSpectrumMeta.index
   :module: pyopenms.pyopenms_3




.. py:attribute:: OSSpectrumMeta.ms_level
   :module: pyopenms.pyopenms_3




.. py:class:: OpenPepXLLFAlgorithm
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _OpenPepXLLFAlgorithm


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1OpenPepXLLFAlgorithm.html
 -- Inherits from ['DefaultParamHandler']




.. py:attribute:: OpenPepXLLFAlgorithm.OpenPepXLLFAlgorithm_ExitCodes
   :module: pyopenms.pyopenms_3


alias of :py:class:`pyopenms.pyopenms_3.__OpenPepXLLFAlgorithm_ExitCodes`


.. py:method:: OpenPepXLLFAlgorithm.getDefaults
   :module: pyopenms.pyopenms_3


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: OpenPepXLLFAlgorithm.getName
   :module: pyopenms.pyopenms_3


Cython signature: String getName()
Returns the name




.. py:method:: OpenPepXLLFAlgorithm.getParameters
   :module: pyopenms.pyopenms_3


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: OpenPepXLLFAlgorithm.getSubsections
   :module: pyopenms.pyopenms_3


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: OpenPepXLLFAlgorithm.run
   :module: pyopenms.pyopenms_3


Cython signature: OpenPepXLLFAlgorithm_ExitCodes run(MSExperiment & unprocessed_spectra, libcpp_vector[FASTAEntry] & fasta_db, libcpp_vector[ProteinIdentification] & protein_ids, libcpp_vector[PeptideIdentification] & peptide_ids, libcpp_vector[libcpp_vector[CrossLinkSpectrumMatch]] & all_top_csms, MSExperiment & spectra)


Performs the main function of this class, the search for cross-linked peptides
-----
:param unprocessed_spectra: The input PeakMap of experimental spectra
:param fasta_db: The protein database containing targets and decoys
:param protein_ids: A result vector containing search settings. Should contain one PeptideIdentification
:param peptide_ids: A result vector containing cross-link spectrum matches as PeptideIdentifications and PeptideHits. Should be empty
:param all_top_csms: A result vector containing cross-link spectrum matches as CrossLinkSpectrumMatches. Should be empty. This is only necessary for writing out xQuest type spectrum files
:param spectra: A result vector containing the input spectra after preprocessing and filtering. Should be empty. This is only necessary for writing out xQuest type spectrum files




.. py:method:: OpenPepXLLFAlgorithm.setName
   :module: pyopenms.pyopenms_3


Cython signature: void setName(const String &)
Sets the name




.. py:method:: OpenPepXLLFAlgorithm.setParameters
   :module: pyopenms.pyopenms_3


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: OpenSwathHelper
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _OpenSwathHelper


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1OpenSwathHelper.html




.. py:method:: OpenSwathHelper.checkSwathMapAndSelectTransitions
   :module: pyopenms.pyopenms_3


Cython signature: bool checkSwathMapAndSelectTransitions(MSExperiment & exp, TargetedExperiment & targeted_exp, TargetedExperiment & transition_exp_used, double min_upper_edge_dist)




.. py:method:: OpenSwathHelper.computePrecursorId
   :module: pyopenms.pyopenms_3


Cython signature: String computePrecursorId(const String & transition_group_id, int isotope)


Computes unique precursor identifier
-----
Uses transition_group_id and isotope number to compute a unique precursor
id of the form "groupID_Precursor_ix" where x is the isotope number, e.g.
the monoisotopic precursor would become "groupID_Precursor_i0"
-----
:param transition_group_id: Unique id of the transition group (peptide/compound)
:param isotope: Precursor isotope number
:returns: Unique precursor identifier




.. py:method:: OpenSwathHelper.estimateRTRange
   :module: pyopenms.pyopenms_3


Cython signature: libcpp_pair[double,double] estimateRTRange(LightTargetedExperiment exp)


Computes the min and max retention time value
-----
Estimate the retention time span of a targeted experiment by returning the min/max values in retention time as a pair
-----
:returns: A std `pair` that contains (min,max)




.. py:class:: PI_PeakArea
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _PI_PeakArea


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1PI_PeakArea.html




.. py:attribute:: PI_PeakArea.apex_pos
   :module: pyopenms.pyopenms_3




.. py:attribute:: PI_PeakArea.area
   :module: pyopenms.pyopenms_3




.. py:attribute:: PI_PeakArea.height
   :module: pyopenms.pyopenms_3




.. py:attribute:: PI_PeakArea.hull_points
   :module: pyopenms.pyopenms_3




.. py:class:: PI_PeakBackground
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _PI_PeakBackground


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1PI_PeakBackground.html




.. py:attribute:: PI_PeakBackground.area
   :module: pyopenms.pyopenms_3




.. py:attribute:: PI_PeakBackground.height
   :module: pyopenms.pyopenms_3




.. py:class:: PI_PeakShapeMetrics
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _PI_PeakShapeMetrics


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1PI_PeakShapeMetrics.html




.. py:attribute:: PI_PeakShapeMetrics.asymmetry_factor
   :module: pyopenms.pyopenms_3




.. py:attribute:: PI_PeakShapeMetrics.baseline_delta_2_height
   :module: pyopenms.pyopenms_3




.. py:attribute:: PI_PeakShapeMetrics.end_position_at_10
   :module: pyopenms.pyopenms_3




.. py:attribute:: PI_PeakShapeMetrics.end_position_at_5
   :module: pyopenms.pyopenms_3




.. py:attribute:: PI_PeakShapeMetrics.end_position_at_50
   :module: pyopenms.pyopenms_3




.. py:attribute:: PI_PeakShapeMetrics.points_across_baseline
   :module: pyopenms.pyopenms_3




.. py:attribute:: PI_PeakShapeMetrics.points_across_half_height
   :module: pyopenms.pyopenms_3




.. py:attribute:: PI_PeakShapeMetrics.slope_of_baseline
   :module: pyopenms.pyopenms_3




.. py:attribute:: PI_PeakShapeMetrics.start_position_at_10
   :module: pyopenms.pyopenms_3




.. py:attribute:: PI_PeakShapeMetrics.start_position_at_5
   :module: pyopenms.pyopenms_3




.. py:attribute:: PI_PeakShapeMetrics.start_position_at_50
   :module: pyopenms.pyopenms_3




.. py:attribute:: PI_PeakShapeMetrics.tailing_factor
   :module: pyopenms.pyopenms_3




.. py:attribute:: PI_PeakShapeMetrics.total_width
   :module: pyopenms.pyopenms_3




.. py:attribute:: PI_PeakShapeMetrics.width_at_10
   :module: pyopenms.pyopenms_3




.. py:attribute:: PI_PeakShapeMetrics.width_at_5
   :module: pyopenms.pyopenms_3




.. py:attribute:: PI_PeakShapeMetrics.width_at_50
   :module: pyopenms.pyopenms_3




.. py:class:: PeakIntegrator
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _PeakIntegrator


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1PeakIntegrator.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: PeakIntegrator.calculatePeakShapeMetrics
   :module: pyopenms.pyopenms_3


- Cython signature: PI_PeakShapeMetrics calculatePeakShapeMetrics(MSChromatogram & chromatogram, double left, double right, double peak_height, double peak_apex_pos)
- Cython signature: PI_PeakShapeMetrics calculatePeakShapeMetrics(MSSpectrum & spectrum, double left, double right, double peak_height, double peak_apex_pos)




.. py:method:: PeakIntegrator.estimateBackground
   :module: pyopenms.pyopenms_3


- Cython signature: PI_PeakBackground estimateBackground(MSChromatogram & chromatogram, double left, double right, double peak_apex_pos)
- Cython signature: PI_PeakBackground estimateBackground(MSSpectrum & spectrum, double left, double right, double peak_apex_pos)




.. py:method:: PeakIntegrator.getDefaultParameters
   :module: pyopenms.pyopenms_3


Cython signature: void getDefaultParameters(Param)




.. py:method:: PeakIntegrator.getDefaults
   :module: pyopenms.pyopenms_3


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: PeakIntegrator.getName
   :module: pyopenms.pyopenms_3


Cython signature: String getName()
Returns the name




.. py:method:: PeakIntegrator.getParameters
   :module: pyopenms.pyopenms_3


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: PeakIntegrator.getSubsections
   :module: pyopenms.pyopenms_3


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: PeakIntegrator.integratePeak
   :module: pyopenms.pyopenms_3


- Cython signature: PI_PeakArea integratePeak(MSChromatogram & chromatogram, double left, double right)
- Cython signature: PI_PeakArea integratePeak(MSSpectrum & spectrum, double left, double right)




.. py:method:: PeakIntegrator.setName
   :module: pyopenms.pyopenms_3


Cython signature: void setName(const String &)
Sets the name




.. py:method:: PeakIntegrator.setParameters
   :module: pyopenms.pyopenms_3


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: PeakPickerIterative
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _PeakPickerIterative


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1PeakPickerIterative.html
 -- Inherits from ['DefaultParamHandler', 'ProgressLogger']




.. py:method:: PeakPickerIterative.endProgress
   :module: pyopenms.pyopenms_3


Cython signature: void endProgress()
Ends the progress display




.. py:method:: PeakPickerIterative.getDefaults
   :module: pyopenms.pyopenms_3


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: PeakPickerIterative.getLogType
   :module: pyopenms.pyopenms_3


Cython signature: LogType getLogType()
Returns the type of progress log being used




.. py:method:: PeakPickerIterative.getName
   :module: pyopenms.pyopenms_3


Cython signature: String getName()
Returns the name




.. py:method:: PeakPickerIterative.getParameters
   :module: pyopenms.pyopenms_3


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: PeakPickerIterative.getSubsections
   :module: pyopenms.pyopenms_3


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: PeakPickerIterative.nextProgress
   :module: pyopenms.pyopenms_3


Cython signature: void nextProgress()
Increment progress by 1 (according to range begin-end)




.. py:method:: PeakPickerIterative.pick
   :module: pyopenms.pyopenms_3


Cython signature: void pick(MSSpectrum & input, MSSpectrum & output)


This will pick one single spectrum. The PeakPickerHiRes is used to
generate seeds, these seeds are then used to re-center the mass and
compute peak width and integrated intensity of the peak
-----
Finally, other peaks that would fall within the primary peak are
discarded
-----
The output are the remaining peaks




.. py:method:: PeakPickerIterative.pickExperiment
   :module: pyopenms.pyopenms_3


Cython signature: void pickExperiment(MSExperiment & input, MSExperiment & output)




.. py:method:: PeakPickerIterative.setLogType
   :module: pyopenms.pyopenms_3


Cython signature: void setLogType(LogType)
Sets the progress log that should be used. The default type is NONE!




.. py:method:: PeakPickerIterative.setName
   :module: pyopenms.pyopenms_3


Cython signature: void setName(const String &)
Sets the name




.. py:method:: PeakPickerIterative.setParameters
   :module: pyopenms.pyopenms_3


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: PeakPickerIterative.setProgress
   :module: pyopenms.pyopenms_3


Cython signature: void setProgress(ptrdiff_t value)
Sets the current progress




.. py:method:: PeakPickerIterative.startProgress
   :module: pyopenms.pyopenms_3


Cython signature: void startProgress(ptrdiff_t begin, ptrdiff_t end, String label)




.. py:class:: PepXMLFile
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _PepXMLFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1PepXMLFile.html




.. py:method:: PepXMLFile.keepNativeSpectrumName
   :module: pyopenms.pyopenms_3


Cython signature: void keepNativeSpectrumName(bool keep)




.. py:method:: PepXMLFile.load
   :module: pyopenms.pyopenms_3


- Cython signature: void load(String filename, libcpp_vector[ProteinIdentification] & protein_ids, libcpp_vector[PeptideIdentification] & peptide_ids)
- Cython signature: void load(String filename, libcpp_vector[ProteinIdentification] & protein_ids, libcpp_vector[PeptideIdentification] & peptide_ids, String experiment_name)
- Cython signature: void load(String filename, libcpp_vector[ProteinIdentification] & protein_ids, libcpp_vector[PeptideIdentification] & peptide_ids, String experiment_name, SpectrumMetaDataLookup lookup)




.. py:method:: PepXMLFile.setParseUnknownScores
   :module: pyopenms.pyopenms_3


Cython signature: void setParseUnknownScores(bool parse_unknown_scores)




.. py:method:: PepXMLFile.store
   :module: pyopenms.pyopenms_3


- Cython signature: void store(String filename, libcpp_vector[ProteinIdentification] & protein_ids, libcpp_vector[PeptideIdentification] & peptide_ids)
- Cython signature: void store(String filename, libcpp_vector[ProteinIdentification] & protein_ids, libcpp_vector[PeptideIdentification] & peptide_ids, String mz_file, String mz_name, bool peptideprophet_analyzed, double rt_tolerance)




.. py:class:: PeptideIdentification
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _PeptideIdentification


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1PeptideIdentification.html
 -- Inherits from ['MetaInfoInterface']




.. py:method:: PeptideIdentification.assignRanks
   :module: pyopenms.pyopenms_3


Cython signature: void assignRanks()




.. py:method:: PeptideIdentification.clearMetaInfo
   :module: pyopenms.pyopenms_3


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: PeptideIdentification.empty
   :module: pyopenms.pyopenms_3


Cython signature: bool empty()




.. py:method:: PeptideIdentification.getBaseName
   :module: pyopenms.pyopenms_3


Cython signature: String getBaseName()




.. py:method:: PeptideIdentification.getExperimentLabel
   :module: pyopenms.pyopenms_3


Cython signature: String getExperimentLabel()




.. py:method:: PeptideIdentification.getHits
   :module: pyopenms.pyopenms_3


Cython signature: libcpp_vector[PeptideHit] getHits()
Returns the peptide hits as const




.. py:method:: PeptideIdentification.getIdentifier
   :module: pyopenms.pyopenms_3


Cython signature: String getIdentifier()




.. py:method:: PeptideIdentification.getKeys
   :module: pyopenms.pyopenms_3


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: PeptideIdentification.getMZ
   :module: pyopenms.pyopenms_3


Cython signature: double getMZ()




.. py:method:: PeptideIdentification.getMetaValue
   :module: pyopenms.pyopenms_3


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: PeptideIdentification.getRT
   :module: pyopenms.pyopenms_3


Cython signature: double getRT()




.. py:method:: PeptideIdentification.getReferencingHits
   :module: pyopenms.pyopenms_3


Cython signature: libcpp_vector[PeptideHit] getReferencingHits(libcpp_vector[PeptideHit], libcpp_set[String] &)
Returns all peptide hits which reference to a given protein accession (i.e. filter by protein accession)




.. py:method:: PeptideIdentification.getScoreType
   :module: pyopenms.pyopenms_3


Cython signature: String getScoreType()




.. py:method:: PeptideIdentification.getSignificanceThreshold
   :module: pyopenms.pyopenms_3


Cython signature: double getSignificanceThreshold()
Returns the peptide significance threshold value




.. py:method:: PeptideIdentification.hasMZ
   :module: pyopenms.pyopenms_3


Cython signature: bool hasMZ()




.. py:method:: PeptideIdentification.hasRT
   :module: pyopenms.pyopenms_3


Cython signature: bool hasRT()




.. py:method:: PeptideIdentification.insertHit
   :module: pyopenms.pyopenms_3


Cython signature: void insertHit(PeptideHit)
Appends a peptide hit




.. py:method:: PeptideIdentification.isHigherScoreBetter
   :module: pyopenms.pyopenms_3


Cython signature: bool isHigherScoreBetter()




.. py:method:: PeptideIdentification.isMetaEmpty
   :module: pyopenms.pyopenms_3


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: PeptideIdentification.metaRegistry
   :module: pyopenms.pyopenms_3


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: PeptideIdentification.metaValueExists
   :module: pyopenms.pyopenms_3


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: PeptideIdentification.removeMetaValue
   :module: pyopenms.pyopenms_3


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: PeptideIdentification.setBaseName
   :module: pyopenms.pyopenms_3


Cython signature: void setBaseName(String)




.. py:method:: PeptideIdentification.setExperimentLabel
   :module: pyopenms.pyopenms_3


Cython signature: void setExperimentLabel(String)




.. py:method:: PeptideIdentification.setHigherScoreBetter
   :module: pyopenms.pyopenms_3


Cython signature: void setHigherScoreBetter(bool)




.. py:method:: PeptideIdentification.setHits
   :module: pyopenms.pyopenms_3


Cython signature: void setHits(libcpp_vector[PeptideHit])
Sets the peptide hits




.. py:method:: PeptideIdentification.setIdentifier
   :module: pyopenms.pyopenms_3


Cython signature: void setIdentifier(String)




.. py:method:: PeptideIdentification.setMZ
   :module: pyopenms.pyopenms_3


Cython signature: void setMZ(double)




.. py:method:: PeptideIdentification.setMetaValue
   :module: pyopenms.pyopenms_3


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:method:: PeptideIdentification.setRT
   :module: pyopenms.pyopenms_3


Cython signature: void setRT(double)




.. py:method:: PeptideIdentification.setScoreType
   :module: pyopenms.pyopenms_3


Cython signature: void setScoreType(String)




.. py:method:: PeptideIdentification.setSignificanceThreshold
   :module: pyopenms.pyopenms_3


Cython signature: void setSignificanceThreshold(double value)
Setting of the peptide significance threshold value




.. py:method:: PeptideIdentification.sort
   :module: pyopenms.pyopenms_3


Cython signature: void sort()




.. py:method:: PeptideIdentification.sortByRank
   :module: pyopenms.pyopenms_3


Cython signature: void sortByRank()




.. py:class:: PeptideProteinResolution
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _PeptideProteinResolution


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1PeptideProteinResolution.html


 Resolves shared peptides based on protein scores
 -----
 Resolves connected components of the bipartite protein-peptide graph based
 on protein probabilities/scores and adds them as additional protein_groups
 to the protein identification run processed.
 Thereby greedily assigns shared peptides in this component uniquely to the
 proteins of the current @em best @em indistinguishable protein group, until
 every peptide is uniquely assigned. This effectively allows more peptides to
 be used in ProteinQuantifier at the cost of potentially additional noise in
 the peptides quantities.
 In accordance with most state-of-the-art protein inference tools, only the
 best hit (PSM) for a peptide ID is considered.  Probability ties are
 currently resolved by taking the protein with larger number of peptides
 -----
 The class could provide iterator for ConnectedComponents in the
 future. One could extend the graph to include all PeptideHits (not only the
 best). It becomes a tripartite graph with larger connected components then.
 Maybe extend it to work with MS1 features. Separate resolution and adding
 groups to output




.. py:method:: PeptideProteinResolution.buildGraph
   :module: pyopenms.pyopenms_3


Cython signature: void buildGraph(ProteinIdentification & protein, libcpp_vector[PeptideIdentification] & peptides)


Initialize and store the graph (= maps), needs sorted groups for
correct functionality. Therefore sorts the indist. protein groups
if not skipped
-----
:param protein: ProteinIdentification object storing IDs and groups
:param peptides: Vector of ProteinIdentifications with links to the proteins
:param skip_sort: Skips sorting of groups, nothing is modified then




.. py:method:: PeptideProteinResolution.findConnectedComponent
   :module: pyopenms.pyopenms_3


Cython signature: PeptideProteinResolution_ConnectedComponent findConnectedComponent(size_t & root_prot_grp)


Does a BFS on the two maps (= two parts of the graph; indist. prot. groups
and peptides), switching from one to the other in each step
-----
:param root_prot_grp: Starts the BFS at this protein group index
:returns: Returns a Connected Component as set of group and peptide indices




.. py:method:: PeptideProteinResolution.resolveConnectedComponent
   :module: pyopenms.pyopenms_3


Cython signature: void resolveConnectedComponent(PeptideProteinResolution_ConnectedComponent & conn_comp, ProteinIdentification & protein, libcpp_vector[PeptideIdentification] & peptides)


Resolves connected components based on posterior probabilities and adds them
as additional protein_groups to the output idXML.
Thereby greedily assigns shared peptides in this component uniquely to
the proteins of the current BEST INDISTINGUISHABLE protein group,
ready to be used in ProteinQuantifier then.
This is achieved by removing all other evidence from the input
PeptideIDs and iterating until each peptide is uniquely assigned.
In accordance with Fido only the best hit (PSM) for an ID is considered.
Probability ties resolved by taking protein with largest number of peptides
-----
:param conn_comp: The component to be resolved
:param protein: ProteinIdentification object storing IDs and groups
:param peptides: Vector of ProteinIdentifications with links to the proteins




.. py:method:: PeptideProteinResolution.resolveGraph
   :module: pyopenms.pyopenms_3


Cython signature: void resolveGraph(ProteinIdentification & protein, libcpp_vector[PeptideIdentification] & peptides)


Applies resolveConnectedComponent to every component of the graph and
is able to write statistics when specified. Parameters will
both be mutated in this method
-----
:param protein: ProteinIdentification object storing IDs and groups
:param peptides: vector of ProteinIdentifications with links to the proteins




.. py:method:: PeptideProteinResolution.run
   :module: pyopenms.pyopenms_3


Cython signature: void run(libcpp_vector[ProteinIdentification] & proteins, libcpp_vector[PeptideIdentification] & peptides)




.. py:class:: PeptideProteinResolution_ConnectedComponent
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _PeptideProteinResolution_ConnectedComponent


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1PeptideProteinResolution_ConnectedComponent.html




.. py:attribute:: PeptideProteinResolution_ConnectedComponent.pep_indices
   :module: pyopenms.pyopenms_3




.. py:attribute:: PeptideProteinResolution_ConnectedComponent.prot_grp_indices
   :module: pyopenms.pyopenms_3




.. py:class:: PercolatorInfile
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _PercolatorInfile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1PercolatorInfile.html


 Class for storing Percolator tab-delimited input files




.. py:method:: PercolatorInfile.store
   :module: pyopenms.pyopenms_3


Cython signature: void store(String pin_file, libcpp_vector[PeptideIdentification] peptide_ids, StringList feature_set, libcpp_string, int min_charge, int max_charge)




.. py:class:: PrecursorPurity
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _PrecursorPurity


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1PrecursorPurity.html


 Precursor purity or noise estimation
 -----
 This class computes metrics for precursor isolation window purity (or noise)
 The function extracts the peaks from an isolation window targeted for fragmentation
 and determines which peaks are isotopes of the target and which come from other sources
 The intensities of the assumed target peaks are summed up as the target intensity
 Using this information it calculates an intensity ratio for the relative intensity of the target
 compared to other sources
 These metrics are combined over the previous and the next MS1 spectrum




.. py:method:: PrecursorPurity.computePrecursorPurity
   :module: pyopenms.pyopenms_3


Cython signature: PurityScores computePrecursorPurity(MSSpectrum ms1, Precursor pre, double precursor_mass_tolerance, bool precursor_mass_tolerance_unit_ppm)


Compute precursor purity metrics for one MS2 precursor
-----
Note: This function is implemented in a general way and can also be used for e.g. MS3 precursor isolation windows in MS2 spectra
-----
:param ms1: The Spectrum containing the isolation window
:param pre: The precursor containing the definition the isolation window
:param precursor_mass_tolerance: The precursor tolerance. Is used for determining the targeted peak and deisotoping
:param precursor_mass_tolerance_unit_ppm: The unit of the precursor tolerance




.. py:class:: PurityScores
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _PurityScores


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1PurityScores.html




.. py:attribute:: PurityScores.residual_peak_count
   :module: pyopenms.pyopenms_3




.. py:attribute:: PurityScores.signal_proportion
   :module: pyopenms.pyopenms_3




.. py:attribute:: PurityScores.target_intensity
   :module: pyopenms.pyopenms_3




.. py:attribute:: PurityScores.target_peak_count
   :module: pyopenms.pyopenms_3




.. py:attribute:: PurityScores.total_intensity
   :module: pyopenms.pyopenms_3




.. py:class:: QTCluster
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _QTCluster


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1QTCluster.html




.. py:method:: QTCluster.finalizeCluster
   :module: pyopenms.pyopenms_3


Cython signature: void finalizeCluster()
Has to be called after adding elements (after calling




.. py:method:: QTCluster.getAnnotations
   :module: pyopenms.pyopenms_3


Cython signature: libcpp_set[AASequence] getAnnotations()
Returns the set of peptide sequences annotated to the cluster center




.. py:method:: QTCluster.getCenterMZ
   :module: pyopenms.pyopenms_3


Cython signature: double getCenterMZ()
Returns the m/z value of the cluster center




.. py:method:: QTCluster.getCenterRT
   :module: pyopenms.pyopenms_3


Cython signature: double getCenterRT()
Returns the RT value of the cluster




.. py:method:: QTCluster.getQuality
   :module: pyopenms.pyopenms_3


Cython signature: double getQuality()
Returns the cluster quality and recomputes if necessary




.. py:method:: QTCluster.getXCoord
   :module: pyopenms.pyopenms_3


Cython signature: int getXCoord()
Returns the x coordinate in the grid




.. py:method:: QTCluster.getYCoord
   :module: pyopenms.pyopenms_3


Cython signature: int getYCoord()
Returns the y coordinate in the grid




.. py:method:: QTCluster.initializeCluster
   :module: pyopenms.pyopenms_3


Cython signature: void initializeCluster()
Has to be called before adding elements (calling




.. py:method:: QTCluster.isInvalid
   :module: pyopenms.pyopenms_3


Cython signature: bool isInvalid()
Whether current cluster is invalid




.. py:method:: QTCluster.setInvalid
   :module: pyopenms.pyopenms_3


Cython signature: void setInvalid()
Sets current cluster as invalid (also frees some memory)




.. py:method:: QTCluster.size
   :module: pyopenms.pyopenms_3


Cython signature: size_t size()
Returns the size of the cluster (number of elements, incl. center)




.. py:class:: QTClusterFinder
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _QTClusterFinder


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1QTClusterFinder.html
 -- Inherits from ['BaseGroupFinder']




.. py:method:: QTClusterFinder.endProgress
   :module: pyopenms.pyopenms_3


Cython signature: void endProgress()
Ends the progress display




.. py:method:: QTClusterFinder.getDefaults
   :module: pyopenms.pyopenms_3


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: QTClusterFinder.getLogType
   :module: pyopenms.pyopenms_3


Cython signature: LogType getLogType()
Returns the type of progress log being used




.. py:method:: QTClusterFinder.getName
   :module: pyopenms.pyopenms_3


Cython signature: String getName()
Returns the name




.. py:method:: QTClusterFinder.getParameters
   :module: pyopenms.pyopenms_3


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: QTClusterFinder.getProductName
   :module: pyopenms.pyopenms_3


Cython signature: String getProductName()
Returns the name of the product




.. py:method:: QTClusterFinder.getSubsections
   :module: pyopenms.pyopenms_3


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: QTClusterFinder.nextProgress
   :module: pyopenms.pyopenms_3


Cython signature: void nextProgress()
Increment progress by 1 (according to range begin-end)




.. py:method:: QTClusterFinder.registerChildren
   :module: pyopenms.pyopenms_3


Cython signature: void registerChildren()
Register all derived classes here




.. py:method:: QTClusterFinder.run
   :module: pyopenms.pyopenms_3


- Cython signature: void run(libcpp_vector[ConsensusMap] & input_maps, ConsensusMap & result_map)
- Cython signature: void run(libcpp_vector[FeatureMap] & input_maps, ConsensusMap & result_map)




.. py:method:: QTClusterFinder.setLogType
   :module: pyopenms.pyopenms_3


Cython signature: void setLogType(LogType)
Sets the progress log that should be used. The default type is NONE!




.. py:method:: QTClusterFinder.setName
   :module: pyopenms.pyopenms_3


Cython signature: void setName(const String &)
Sets the name




.. py:method:: QTClusterFinder.setParameters
   :module: pyopenms.pyopenms_3


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: QTClusterFinder.setProgress
   :module: pyopenms.pyopenms_3


Cython signature: void setProgress(ptrdiff_t value)
Sets the current progress




.. py:method:: QTClusterFinder.startProgress
   :module: pyopenms.pyopenms_3


Cython signature: void startProgress(ptrdiff_t begin, ptrdiff_t end, String label)




.. py:class:: RNaseDigestion
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _RNaseDigestion


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1RNaseDigestion.html
 -- Inherits from ['EnzymaticDigestion']


   Class for the enzymatic digestion of RNA
   -----
   Usage:
       from pyopenms import *
       oligo = NASequence.fromString("pAUGUCGCAG");
       -
       dig = RNaseDigestion()
       dig.setEnzyme("RNase_T1")
       -
       result = []
       dig.digest(oligo, result)
       for fragment in result:
         print (fragment)




.. py:method:: RNaseDigestion.digest
   :module: pyopenms.pyopenms_3


       - Cython signature: void digest(NASequence & rna, libcpp_vector[NASequence] & output)
       - Cython signature: void digest(NASequence & rna, libcpp_vector[NASequence] & output, size_t min_length, size_t max_length)


Performs the enzymatic digestion of a (potentially modified) RNA
-----
:param rna: Sequence to digest
:param output: Digestion productsq
:param min_length: Minimal length of reported products
:param max_length: Maximal length of reported products (0 = no restriction)
:returns: Number of discarded digestion products (which are not matching length restrictions)
       - Cython signature: void digest(IdentificationData & id_data)
       - Cython signature: void digest(IdentificationData & id_data, size_t min_length, size_t max_length)


Performs the enzymatic digestion of all RNA parent molecules in IdentificationData (id_data)
-----
:param id_data: IdentificationData object which includes sequences to digest
:param min_length: Minimal length of reported products
:param max_length: Maximal length of reported products (0 = no restriction)
:returns: Number of discarded digestion products (which are not matching length restrictions)




.. py:method:: RNaseDigestion.digestUnmodified
   :module: pyopenms.pyopenms_3


Cython signature: size_t digestUnmodified(StringView sequence, libcpp_vector[StringView] & output, size_t min_length, size_t max_length)


Performs the enzymatic digestion of an unmodified sequence
-----
By returning only references into the original string this is very fast
-----
:param sequence: Sequence to digest
:param output: Digestion products
:param min_length: Minimal length of reported products
:param max_length: Maximal length of reported products (0 = no restriction)
:returns: Number of discarded digestion products (which are not matching length restrictions)




.. py:method:: RNaseDigestion.getEnzymeName
   :module: pyopenms.pyopenms_3


Cython signature: String getEnzymeName()
Returns the enzyme for the digestion




.. py:method:: RNaseDigestion.getMissedCleavages
   :module: pyopenms.pyopenms_3


Cython signature: size_t getMissedCleavages()
Returns the number of missed cleavages for the digestion




.. py:method:: RNaseDigestion.getSpecificity
   :module: pyopenms.pyopenms_3


Cython signature: Specificity getSpecificity()
Returns the specificity for the digestion




.. py:method:: RNaseDigestion.getSpecificityByName
   :module: pyopenms.pyopenms_3


Cython signature: Specificity getSpecificityByName(String name)
Returns the specificity by name. Returns SPEC_UNKNOWN if name is not valid




.. py:method:: RNaseDigestion.isValidProduct
   :module: pyopenms.pyopenms_3


Cython signature: bool isValidProduct(String sequence, int pos, int length, bool ignore_missed_cleavages)


Boolean operator returns true if the peptide fragment starting at position `pos` with length `length` within the sequence `sequence` generated by the current enzyme
-----
Checks if peptide is a valid digestion product of the enzyme, taking into account specificity and the MC flag provided here
-----
:param protein: Protein sequence
:param pep_pos: Starting index of potential peptide
:param pep_length: Length of potential peptide
:param ignore_missed_cleavages: Do not compare MC's of potential peptide to the maximum allowed MC's
:returns: True if peptide has correct n/c terminals (according to enzyme, specificity and missed cleavages)




.. py:method:: RNaseDigestion.setEnzyme
   :module: pyopenms.pyopenms_3


- Cython signature: void setEnzyme(String name)
  Sets the enzyme for the digestion (by name)


- Cython signature: void setEnzyme(DigestionEnzyme * enzyme)
  Sets the enzyme for the digestion




.. py:method:: RNaseDigestion.setMissedCleavages
   :module: pyopenms.pyopenms_3


Cython signature: void setMissedCleavages(size_t missed_cleavages)
Sets the number of missed cleavages for the digestion (default is 0). This setting is ignored when log model is used




.. py:method:: RNaseDigestion.setSpecificity
   :module: pyopenms.pyopenms_3


Cython signature: void setSpecificity(Specificity spec)
Sets the specificity for the digestion (default is SPEC_FULL)




.. py:class:: RibonucleotideDB
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _RibonucleotideDB


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1RibonucleotideDB.html




.. py:method:: RibonucleotideDB.getRibonucleotide
   :module: pyopenms.pyopenms_3


Cython signature: const Ribonucleotide * getRibonucleotide(const libcpp_string & code)




.. py:method:: RibonucleotideDB.getRibonucleotideAlternatives
   :module: pyopenms.pyopenms_3


Cython signature: libcpp_pair[const Ribonucleotide *,const Ribonucleotide *] getRibonucleotideAlternatives(const libcpp_string & code)




.. py:method:: RibonucleotideDB.getRibonucleotidePrefix
   :module: pyopenms.pyopenms_3


Cython signature: const Ribonucleotide * getRibonucleotidePrefix(const libcpp_string & code)




.. py:class:: SeedListGenerator
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _SeedListGenerator


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SeedListGenerator.html




.. py:method:: SeedListGenerator.convertSeedList
   :module: pyopenms.pyopenms_3


- Cython signature: void convertSeedList(libcpp_vector[DPosition2] & seeds, FeatureMap & features)
  Converts a list of seed positions to a feature map (expected format for FeatureFinder)


- Cython signature: void convertSeedList(FeatureMap & features, libcpp_vector[DPosition2] & seeds)
  Converts a feature map with seed positions back to a simple list




.. py:method:: SeedListGenerator.generateSeedList
   :module: pyopenms.pyopenms_3


- Cython signature: void generateSeedList(MSExperiment exp, libcpp_vector[DPosition2] & seeds)
  Generate a seed list based on an MS experiment


- Cython signature: void generateSeedList(libcpp_vector[PeptideIdentification] & peptides, libcpp_vector[DPosition2] & seeds, bool use_peptide_mass)
  Generates a seed list based on a list of peptide identifications




.. py:class:: SimplePeak
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _SimplePeak


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SimplePeak.html




.. py:attribute:: SimplePeak.charge
   :module: pyopenms.pyopenms_3




.. py:attribute:: SimplePeak.mz
   :module: pyopenms.pyopenms_3




.. py:class:: SimpleTSGXLMS
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _SimpleTSGXLMS


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SimpleTSGXLMS.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: SimpleTSGXLMS.getDefaults
   :module: pyopenms.pyopenms_3


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: SimpleTSGXLMS.getLinearIonSpectrum
   :module: pyopenms.pyopenms_3


Cython signature: void getLinearIonSpectrum(libcpp_vector[SimplePeak] & spectrum, AASequence peptide, size_t link_pos, int charge, size_t link_pos_2)


Generates fragment ions not containing the cross-linker for one peptide
-----
B-ions are generated from the beginning of the peptide up to the first linked position,
y-ions are generated from the second linked position up the end of the peptide
If link_pos_2 is 0, a mono-link or cross-link is assumed and the second position is the same as the first position
For a loop-link two different positions can be set and link_pos_2 must be larger than link_pos
The generated ion types and other additional settings are determined by the tool parameters
-----
param spectrum: The spectrum to which the new peaks are added. Does not have to be empty, the generated peaks will be pushed onto it
param peptide: The peptide to fragment
param link_pos: The position of the cross-linker on the given peptide
param charge: The maximal charge of the ions
param link_pos_2: A second position for the linker, in case it is a loop link




.. py:method:: SimpleTSGXLMS.getName
   :module: pyopenms.pyopenms_3


Cython signature: String getName()
Returns the name




.. py:method:: SimpleTSGXLMS.getParameters
   :module: pyopenms.pyopenms_3


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: SimpleTSGXLMS.getSubsections
   :module: pyopenms.pyopenms_3


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: SimpleTSGXLMS.getXLinkIonSpectrum
   :module: pyopenms.pyopenms_3


         - Cython signature: void getXLinkIonSpectrum(libcpp_vector[SimplePeak] & spectrum, AASequence peptide, size_t link_pos, double precursor_mass, int mincharge, int maxcharge, size_t link_pos_2)


Generates fragment ions containing the cross-linker for one peptide
-----
B-ions are generated from the first linked position up to the end of the peptide,
y-ions are generated from the beginning of the peptide up to the second linked position
If link_pos_2 is 0, a mono-link or cross-link is assumed and the second position is the same as the first position
For a loop-link two different positions can be set and link_pos_2 must be larger than link_pos
Since in the case of a cross-link a whole second peptide is attached to the other side of the cross-link,
a precursor mass for the two peptides and the linker is needed
In the case of a loop link the precursor mass is the mass of the only peptide and the linker
Although this function is more general, currently it is mainly used for loop-links and mono-links,
because residues in the second, unknown peptide cannot be considered for possible neutral losses
The generated ion types and other additional settings are determined by the tool parameters
-----
:param spectrum: The spectrum to which the new peaks are added. Does not have to be empty, the generated peaks will be pushed onto it
:param peptide: The peptide to fragment
:param link_pos: The position of the cross-linker on the given peptide
:param precursor_mass: The mass of the whole cross-link candidate or the precursor mass of the experimental MS2 spectrum
:param mincharge: The minimal charge of the ions
:param maxcharge: The maximal charge of the ions, it should be the precursor charge and is used to generate precursor ion peaks
:param link_pos_2: A second position for the linker, in case it is a loop link
         - Cython signature: void getXLinkIonSpectrum(libcpp_vector[SimplePeak] & spectrum, ProteinProteinCrossLink crosslink, bool frag_alpha, int mincharge, int maxcharge)


Generates fragment ions containing the cross-linker for a pair of peptides
-----
B-ions are generated from the first linked position up to the end of the peptide,
y-ions are generated from the beginning of the peptide up to the second linked position
This function generates neutral loss ions by considering both linked peptides
Only one of the peptides, decided by @frag_alpha, is fragmented
This simplifies the function, but it has to be called twice to get all fragments of a peptide pair
The generated ion types and other additional settings are determined by the tool parameters
This function is not suitable to generate fragments for mono-links or loop-links
-----
:param spectrum: The spectrum to which the new peaks are added. Does not have to be empty, the generated peaks will be pushed onto it
:param crosslink: ProteinProteinCrossLink to be fragmented
:param link_pos: The position of the cross-linker on the given peptide
:param precursor_mass: The mass of the whole cross-link candidate or the precursor mass of the experimental MS2 spectrum
:param frag_alpha: True, if the fragmented peptide is the Alpha peptide
:param mincharge: The minimal charge of the ions
:param maxcharge: The maximal charge of the ions, it should be the precursor charge and is used to generate precursor ion peaks




.. py:method:: SimpleTSGXLMS.setName
   :module: pyopenms.pyopenms_3


Cython signature: void setName(const String &)
Sets the name




.. py:method:: SimpleTSGXLMS.setParameters
   :module: pyopenms.pyopenms_3


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: SiriusMzTabWriter
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _SiriusMzTabWriter


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SiriusMzTabWriter.html




.. py:method:: SiriusMzTabWriter.extractFeatureId
   :module: pyopenms.pyopenms_3


Cython signature: String extractFeatureId(const String & path)




.. py:method:: SiriusMzTabWriter.extractScanIndex
   :module: pyopenms.pyopenms_3


Cython signature: int extractScanIndex(const String & path)




.. py:method:: SiriusMzTabWriter.extractScanNumber
   :module: pyopenms.pyopenms_3


Cython signature: int extractScanNumber(const String & path)




.. py:method:: SiriusMzTabWriter.extractSpectrumMSInfo
   :module: pyopenms.pyopenms_3


Cython signature: SiriusMzTabWriter_SiriusSpectrumMSInfo extractSpectrumMSInfo(const String & single_sirius_path)




.. py:method:: SiriusMzTabWriter.extract_columnname_to_columnindex
   :module: pyopenms.pyopenms_3


Cython signature: libcpp_map[libcpp_string,size_t] extract_columnname_to_columnindex(CsvFile & csvfile)




.. py:method:: SiriusMzTabWriter.read
   :module: pyopenms.pyopenms_3


Cython signature: void read(libcpp_vector[String] & sirius_output_paths, const String & original_input_mzml, size_t top_n_hits, MzTab & result)




.. py:class:: SiriusMzTabWriter_SiriusSpectrumMSInfo
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _SiriusMzTabWriter_SiriusSpectrumMSInfo


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SiriusMzTabWriter_SiriusSpectrumMSInfo.html




.. py:attribute:: SiriusMzTabWriter_SiriusSpectrumMSInfo.ext_mz
   :module: pyopenms.pyopenms_3




.. py:attribute:: SiriusMzTabWriter_SiriusSpectrumMSInfo.ext_n_id
   :module: pyopenms.pyopenms_3




.. py:attribute:: SiriusMzTabWriter_SiriusSpectrumMSInfo.ext_rt
   :module: pyopenms.pyopenms_3




.. py:class:: SpectrumAccessSqMass
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _SpectrumAccessSqMass


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SpectrumAccessSqMass.html
 -- Inherits from ['ISpectrumAccess']




.. py:method:: SpectrumAccessSqMass.getChromatogramById
   :module: pyopenms.pyopenms_3


Cython signature: shared_ptr[OSChromatogram] getChromatogramById(int id_)
Returns a pointer to a chromatogram at the given id




.. py:method:: SpectrumAccessSqMass.getChromatogramNativeID
   :module: pyopenms.pyopenms_3


Cython signature: libcpp_utf8_output_string getChromatogramNativeID(int id_)




.. py:method:: SpectrumAccessSqMass.getNrChromatograms
   :module: pyopenms.pyopenms_3


Cython signature: size_t getNrChromatograms()
Returns the number of chromatograms available




.. py:method:: SpectrumAccessSqMass.getNrSpectra
   :module: pyopenms.pyopenms_3


Cython signature: size_t getNrSpectra()
Returns the number of spectra available




.. py:method:: SpectrumAccessSqMass.getSpectraByRT
   :module: pyopenms.pyopenms_3


Cython signature: libcpp_vector[size_t] getSpectraByRT(double RT, double deltaRT)
Returns a vector of ids of spectra that are within RT +/- deltaRT




.. py:method:: SpectrumAccessSqMass.getSpectrumById
   :module: pyopenms.pyopenms_3


Cython signature: shared_ptr[OSSpectrum] getSpectrumById(int id_)
Returns a pointer to a spectrum at the given string id




.. py:class:: SpectrumAlignmentScore
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _SpectrumAlignmentScore


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SpectrumAlignmentScore.html
 -- Inherits from ['DefaultParamHandler']


 Similarity score via spectra alignment
 -----
 This class implements a simple scoring based on the alignment of spectra. This alignment
 is implemented in the SpectrumAlignment class and performs a dynamic programming alignment
 of the peaks, minimizing the distances between the aligned peaks and maximizing the number
 of peak pairs
 -----
 The scoring is done via the simple formula score = sum / (sqrt(sum1 * sum2)). sum is the
 product of the intensities of the aligned peaks, with the given exponent (default is 2)
 sum1 and sum2 are the sum of the intensities squared for each peak of both spectra respectively




.. py:method:: SpectrumAlignmentScore.getDefaults
   :module: pyopenms.pyopenms_3


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: SpectrumAlignmentScore.getName
   :module: pyopenms.pyopenms_3


Cython signature: String getName()
Returns the name




.. py:method:: SpectrumAlignmentScore.getParameters
   :module: pyopenms.pyopenms_3


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: SpectrumAlignmentScore.getSubsections
   :module: pyopenms.pyopenms_3


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: SpectrumAlignmentScore.setName
   :module: pyopenms.pyopenms_3


Cython signature: void setName(const String &)
Sets the name




.. py:method:: SpectrumAlignmentScore.setParameters
   :module: pyopenms.pyopenms_3


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: SqMassConfig
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _SqMassConfig


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SqMassConfig.html




.. py:attribute:: SqMassConfig.linear_fp_mass_acc
   :module: pyopenms.pyopenms_3




.. py:attribute:: SqMassConfig.use_lossy_numpress
   :module: pyopenms.pyopenms_3




.. py:attribute:: SqMassConfig.write_full_meta
   :module: pyopenms.pyopenms_3




.. py:class:: SqMassFile
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _SqMassFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SqMassFile.html


 An class that uses on-disk SQLite database to read and write spectra and chromatograms
 -----
 This class provides functions to read and write spectra and chromatograms
 to disk using a SQLite database and store them in sqMass format. This
 allows users to access, select and filter spectra and chromatograms
 on-demand even in a large collection of data




.. py:method:: SqMassFile.load
   :module: pyopenms.pyopenms_3


Cython signature: void load(const String & filename, MSExperiment & map_)
Read / Write a complete mass spectrometric experiment




.. py:method:: SqMassFile.setConfig
   :module: pyopenms.pyopenms_3


Cython signature: void setConfig(SqMassConfig config)




.. py:method:: SqMassFile.store
   :module: pyopenms.pyopenms_3


Cython signature: void store(const String & filename, MSExperiment & map_)
Store an MSExperiment in sqMass format




.. py:class:: SvmTheoreticalSpectrumGeneratorTrainer
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _SvmTheoreticalSpectrumGeneratorTrainer


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SvmTheoreticalSpectrumGeneratorTrainer.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: SvmTheoreticalSpectrumGeneratorTrainer.getDefaults
   :module: pyopenms.pyopenms_3


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: SvmTheoreticalSpectrumGeneratorTrainer.getName
   :module: pyopenms.pyopenms_3


Cython signature: String getName()
Returns the name




.. py:method:: SvmTheoreticalSpectrumGeneratorTrainer.getParameters
   :module: pyopenms.pyopenms_3


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: SvmTheoreticalSpectrumGeneratorTrainer.getSubsections
   :module: pyopenms.pyopenms_3


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: SvmTheoreticalSpectrumGeneratorTrainer.normalizeIntensity
   :module: pyopenms.pyopenms_3


Cython signature: void normalizeIntensity(MSSpectrum & S)




.. py:method:: SvmTheoreticalSpectrumGeneratorTrainer.setName
   :module: pyopenms.pyopenms_3


Cython signature: void setName(const String &)
Sets the name




.. py:method:: SvmTheoreticalSpectrumGeneratorTrainer.setParameters
   :module: pyopenms.pyopenms_3


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: SvmTheoreticalSpectrumGeneratorTrainer.trainModel
   :module: pyopenms.pyopenms_3


Cython signature: void trainModel(MSExperiment & spectra, libcpp_vector[AASequence] & annotations, String filename, int precursor_charge)




.. py:class:: SwathWindowLoader
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _SwathWindowLoader


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SwathWindowLoader.html




.. py:method:: SwathWindowLoader.annotateSwathMapsFromFile
   :module: pyopenms.pyopenms_3


Cython signature: void annotateSwathMapsFromFile(String filename, libcpp_vector[SwathMap] & swath_maps, bool do_sort, bool force)




.. py:method:: SwathWindowLoader.readSwathWindows
   :module: pyopenms.pyopenms_3


Cython signature: void readSwathWindows(String filename, libcpp_vector[double] & swath_prec_lower, libcpp_vector[double] & swath_prec_upper)




.. py:class:: TM_DataPoint
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _TM_DataPoint


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1TM_DataPoint.html




.. py:attribute:: TM_DataPoint.first
   :module: pyopenms.pyopenms_3




.. py:attribute:: TM_DataPoint.note
   :module: pyopenms.pyopenms_3




.. py:attribute:: TM_DataPoint.second
   :module: pyopenms.pyopenms_3




.. py:class:: TOFCalibration
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _TOFCalibration


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1TOFCalibration.html
 -- Inherits from ['DefaultParamHandler', 'ProgressLogger']




.. py:method:: TOFCalibration.calibrate
   :module: pyopenms.pyopenms_3


Cython signature: void calibrate(MSExperiment & input, MSExperiment & output, libcpp_vector[double] & exp_masses)




.. py:method:: TOFCalibration.endProgress
   :module: pyopenms.pyopenms_3


Cython signature: void endProgress()
Ends the progress display




.. py:method:: TOFCalibration.getDefaults
   :module: pyopenms.pyopenms_3


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: TOFCalibration.getLogType
   :module: pyopenms.pyopenms_3


Cython signature: LogType getLogType()
Returns the type of progress log being used




.. py:method:: TOFCalibration.getML1s
   :module: pyopenms.pyopenms_3


Cython signature: libcpp_vector[double] getML1s()
Returns the first calibration constant




.. py:method:: TOFCalibration.getML2s
   :module: pyopenms.pyopenms_3


Cython signature: libcpp_vector[double] getML2s()




.. py:method:: TOFCalibration.getML3s
   :module: pyopenms.pyopenms_3


Cython signature: libcpp_vector[double] getML3s()




.. py:method:: TOFCalibration.getName
   :module: pyopenms.pyopenms_3


Cython signature: String getName()
Returns the name




.. py:method:: TOFCalibration.getParameters
   :module: pyopenms.pyopenms_3


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: TOFCalibration.getSubsections
   :module: pyopenms.pyopenms_3


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: TOFCalibration.nextProgress
   :module: pyopenms.pyopenms_3


Cython signature: void nextProgress()
Increment progress by 1 (according to range begin-end)




.. py:method:: TOFCalibration.pickAndCalibrate
   :module: pyopenms.pyopenms_3


Cython signature: void pickAndCalibrate(MSExperiment & input, MSExperiment & output, libcpp_vector[double] & exp_masses)




.. py:method:: TOFCalibration.setLogType
   :module: pyopenms.pyopenms_3


Cython signature: void setLogType(LogType)
Sets the progress log that should be used. The default type is NONE!




.. py:method:: TOFCalibration.setML1s
   :module: pyopenms.pyopenms_3


Cython signature: void setML1s(libcpp_vector[double] & ml1s)




.. py:method:: TOFCalibration.setML2s
   :module: pyopenms.pyopenms_3


Cython signature: void setML2s(libcpp_vector[double] & ml2s)
Returns the second calibration constant




.. py:method:: TOFCalibration.setML3s
   :module: pyopenms.pyopenms_3


Cython signature: void setML3s(libcpp_vector[double] & ml3s)
Returns the third calibration constant




.. py:method:: TOFCalibration.setName
   :module: pyopenms.pyopenms_3


Cython signature: void setName(const String &)
Sets the name




.. py:method:: TOFCalibration.setParameters
   :module: pyopenms.pyopenms_3


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: TOFCalibration.setProgress
   :module: pyopenms.pyopenms_3


Cython signature: void setProgress(ptrdiff_t value)
Sets the current progress




.. py:method:: TOFCalibration.startProgress
   :module: pyopenms.pyopenms_3


Cython signature: void startProgress(ptrdiff_t begin, ptrdiff_t end, String label)




.. py:class:: TransformationModelInterpolated
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _TransformationModelInterpolated


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1TransformationModelInterpolated.html
 -- Inherits from ['TransformationModel']




.. py:method:: TransformationModelInterpolated.checkDatumRange
   :module: pyopenms.pyopenms_3


Cython signature: double checkDatumRange(const double & datum, const double & datum_min, const double & datum_max)
Check that the datum is within the valid min and max bounds




.. py:method:: TransformationModelInterpolated.checkValidWeight
   :module: pyopenms.pyopenms_3


Cython signature: bool checkValidWeight(const String & weight, libcpp_vector[String] & valid_weights)
Check for a valid weighting function string




.. py:method:: TransformationModelInterpolated.evaluate
   :module: pyopenms.pyopenms_3


Cython signature: double evaluate(double value)


Evaluate the interpolation model at the given value
-----
:param value: The position where the interpolation should be evaluated
:returns: The interpolated value




.. py:method:: TransformationModelInterpolated.getDefaultParameters
   :module: pyopenms.pyopenms_3


Cython signature: void getDefaultParameters(Param &)
Gets the default parameters




.. py:method:: TransformationModelInterpolated.getParameters
   :module: pyopenms.pyopenms_3


Cython signature: Param getParameters()




.. py:method:: TransformationModelInterpolated.getValidXWeights
   :module: pyopenms.pyopenms_3


Cython signature: libcpp_vector[String] getValidXWeights()
Returns a list of valid x weight function stringss




.. py:method:: TransformationModelInterpolated.getValidYWeights
   :module: pyopenms.pyopenms_3


Cython signature: libcpp_vector[String] getValidYWeights()
Returns a list of valid y weight function strings




.. py:method:: TransformationModelInterpolated.unWeightData
   :module: pyopenms.pyopenms_3


Cython signature: void unWeightData(libcpp_vector[TM_DataPoint] & data)
Unweight the data by the given weight function




.. py:method:: TransformationModelInterpolated.unWeightDatum
   :module: pyopenms.pyopenms_3


Cython signature: double unWeightDatum(double & datum, const String & weight)
Apply the reverse of the weighting function to the data




.. py:method:: TransformationModelInterpolated.weightData
   :module: pyopenms.pyopenms_3


Cython signature: void weightData(libcpp_vector[TM_DataPoint] & data)
Weight the data by the given weight function




.. py:method:: TransformationModelInterpolated.weightDatum
   :module: pyopenms.pyopenms_3


Cython signature: double weightDatum(double & datum, const String & weight)
Weight the data according to the weighting function




.. py:class:: WindowMower
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`


Cython implementation of _WindowMower


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1WindowMower.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: WindowMower.filterPeakMap
   :module: pyopenms.pyopenms_3


Cython signature: void filterPeakMap(MSExperiment & exp)




.. py:method:: WindowMower.filterPeakSpectrum
   :module: pyopenms.pyopenms_3


Cython signature: void filterPeakSpectrum(MSSpectrum & spec)




.. py:method:: WindowMower.filterPeakSpectrumForTopNInJumpingWindow
   :module: pyopenms.pyopenms_3


Cython signature: void filterPeakSpectrumForTopNInJumpingWindow(MSSpectrum & spectrum)
Jumping window version (faster)




.. py:method:: WindowMower.filterPeakSpectrumForTopNInSlidingWindow
   :module: pyopenms.pyopenms_3


Cython signature: void filterPeakSpectrumForTopNInSlidingWindow(MSSpectrum & spectrum)
Sliding window version (slower)




.. py:method:: WindowMower.getDefaults
   :module: pyopenms.pyopenms_3


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: WindowMower.getName
   :module: pyopenms.pyopenms_3


Cython signature: String getName()
Returns the name




.. py:method:: WindowMower.getParameters
   :module: pyopenms.pyopenms_3


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: WindowMower.getSubsections
   :module: pyopenms.pyopenms_3


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: WindowMower.setName
   :module: pyopenms.pyopenms_3


Cython signature: void setName(const String &)
Sets the name




.. py:method:: WindowMower.setParameters
   :module: pyopenms.pyopenms_3


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: XRefType_CVTerm_ControlledVocabulary
   :module: pyopenms.pyopenms_3


   Bases: :py:class:`object`




.. py:attribute:: XRefType_CVTerm_ControlledVocabulary.NONE
   :module: pyopenms.pyopenms_3
   :value: 10




.. py:attribute:: XRefType_CVTerm_ControlledVocabulary.XSD_ANYURI
   :module: pyopenms.pyopenms_3
   :value: 9




.. py:attribute:: XRefType_CVTerm_ControlledVocabulary.XSD_BOOLEAN
   :module: pyopenms.pyopenms_3
   :value: 7




.. py:attribute:: XRefType_CVTerm_ControlledVocabulary.XSD_DATE
   :module: pyopenms.pyopenms_3
   :value: 8




.. py:attribute:: XRefType_CVTerm_ControlledVocabulary.XSD_DECIMAL
   :module: pyopenms.pyopenms_3
   :value: 2




.. py:attribute:: XRefType_CVTerm_ControlledVocabulary.XSD_INTEGER
   :module: pyopenms.pyopenms_3
   :value: 1




.. py:attribute:: XRefType_CVTerm_ControlledVocabulary.XSD_NEGATIVE_INTEGER
   :module: pyopenms.pyopenms_3
   :value: 3




.. py:attribute:: XRefType_CVTerm_ControlledVocabulary.XSD_NON_NEGATIVE_INTEGER
   :module: pyopenms.pyopenms_3
   :value: 5




.. py:attribute:: XRefType_CVTerm_ControlledVocabulary.XSD_NON_POSITIVE_INTEGER
   :module: pyopenms.pyopenms_3
   :value: 6




.. py:attribute:: XRefType_CVTerm_ControlledVocabulary.XSD_POSITIVE_INTEGER
   :module: pyopenms.pyopenms_3
   :value: 4




.. py:attribute:: XRefType_CVTerm_ControlledVocabulary.XSD_STRING
   :module: pyopenms.pyopenms_3
   :value: 0




.. py:method:: XRefType_CVTerm_ControlledVocabulary.getMapping
   :module: pyopenms.pyopenms_3




.. py:module:: pyopenms.pyopenms_4




.. py:class:: AQS_featureConcentration
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _AQS_featureConcentration


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1AQS_featureConcentration.html




.. py:attribute:: AQS_featureConcentration.IS_actual_concentration
   :module: pyopenms.pyopenms_4




.. py:attribute:: AQS_featureConcentration.IS_feature
   :module: pyopenms.pyopenms_4




.. py:attribute:: AQS_featureConcentration.actual_concentration
   :module: pyopenms.pyopenms_4




.. py:attribute:: AQS_featureConcentration.concentration_units
   :module: pyopenms.pyopenms_4




.. py:attribute:: AQS_featureConcentration.dilution_factor
   :module: pyopenms.pyopenms_4




.. py:attribute:: AQS_featureConcentration.feature
   :module: pyopenms.pyopenms_4




.. py:class:: AQS_runConcentration
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _AQS_runConcentration


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1AQS_runConcentration.html




.. py:attribute:: AQS_runConcentration.IS_actual_concentration
   :module: pyopenms.pyopenms_4




.. py:attribute:: AQS_runConcentration.IS_component_name
   :module: pyopenms.pyopenms_4




.. py:attribute:: AQS_runConcentration.actual_concentration
   :module: pyopenms.pyopenms_4




.. py:attribute:: AQS_runConcentration.component_name
   :module: pyopenms.pyopenms_4




.. py:attribute:: AQS_runConcentration.concentration_units
   :module: pyopenms.pyopenms_4




.. py:attribute:: AQS_runConcentration.dilution_factor
   :module: pyopenms.pyopenms_4




.. py:attribute:: AQS_runConcentration.sample_name
   :module: pyopenms.pyopenms_4




.. py:class:: AbsoluteQuantitationStandards
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _AbsoluteQuantitationStandards


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1AbsoluteQuantitationStandards.html




.. py:method:: AbsoluteQuantitationStandards.getComponentFeatureConcentrations
   :module: pyopenms.pyopenms_4


Cython signature: void getComponentFeatureConcentrations(libcpp_vector[AQS_runConcentration] & run_concentrations, libcpp_vector[FeatureMap] & feature_maps, const String & component_name, libcpp_vector[AQS_featureConcentration] & feature_concentrations)




.. py:class:: AggregationMethod
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`




.. py:attribute:: AggregationMethod.BEST
   :module: pyopenms.pyopenms_4
   :value: 2




.. py:attribute:: AggregationMethod.PROD
   :module: pyopenms.pyopenms_4
   :value: 0




.. py:attribute:: AggregationMethod.SUM
   :module: pyopenms.pyopenms_4
   :value: 1




.. py:method:: AggregationMethod.getMapping
   :module: pyopenms.pyopenms_4




.. py:class:: AhoCorasickAmbiguous
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _AhoCorasickAmbiguous


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1AhoCorasickAmbiguous.html




.. py:method:: AhoCorasickAmbiguous.getHitDBIndex
   :module: pyopenms.pyopenms_4


Cython signature: size_t getHitDBIndex()
Get index of hit into peptide database of the pattern




.. py:method:: AhoCorasickAmbiguous.getHitProteinPosition
   :module: pyopenms.pyopenms_4


Cython signature: int getHitProteinPosition()
Offset into protein sequence where hit was found




.. py:method:: AhoCorasickAmbiguous.setProtein
   :module: pyopenms.pyopenms_4


Cython signature: void setProtein(const String & protein_sequence)




.. py:class:: ArrayWrapperFloat
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`




.. py:class:: BasicProteinInferenceAlgorithm
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _BasicProteinInferenceAlgorithm


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1BasicProteinInferenceAlgorithm.html
 -- Inherits from ['DefaultParamHandler', 'ProgressLogger']


 Algorithm class that implements simple protein inference by aggregation of peptide scores.
 -----
 It has multiple parameter options like the aggregation method, when to distinguish peptidoforms,
 and if you want to use shared peptides ("use_shared_peptides").
 First, the best PSM per spectrum is used, then only the best PSM per peptidoform is aggregated.
 Peptidoforms can optionally be distinguished via the treat_X_separate parameters:
 - Modifications (modified sequence string)
 - Charge states
 The algorithm assumes posteriors or posterior error probabilities and converts to posteriors initially.
 Possible aggregation methods that can be set via the parameter "aggregation_method" are:
 - "best" (default)
 - "sum"
 - "product" (ignoring zeroes)
 Annotation of the number of peptides used for aggregation can be disabled (see parameters).
 Supports multiple runs but goes through them one by one iterating over the full PeptideIdentification vector.
 Warning: Does not "link" the peptides to the resulting protein run. If you wish to do that you have to do
 it manually.
 -----
 Usage:
   from pyopenms import *
   from urllib.request import urlretrieve
   urlretrieve("https://raw.githubusercontent.com/OpenMS/OpenMS/develop/src/tests/class_tests/openms/data/newMergerTest_out.idXML", "BasicProteinInference_test.idXML")
   proteins = []
   peptides = []
   idf = IdXMLFile()
   idf.load("BasicProteinInference_test.idXML", proteins, peptides);
   bpia = BasicProteinInferenceAlgorithm()
   p = bpia.getParameters();
   p.setValue("min_peptides_per_protein", 0);
   bpia.setParameters(p);
   bpia.run(peptides, proteins);
   #
   hits = proteins[0].getHits()
   print(hits[0].getScore()) # 0.6
   print(hits[5].getScore()) # 0.9
   print(hits[0].getMetaValue("nr_found_peptides")) # 1
   print(hits[3].getMetaValue("nr_found_peptides")) # 2
 -----




.. py:method:: BasicProteinInferenceAlgorithm.endProgress
   :module: pyopenms.pyopenms_4


Cython signature: void endProgress()
Ends the progress display




.. py:method:: BasicProteinInferenceAlgorithm.getDefaults
   :module: pyopenms.pyopenms_4


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: BasicProteinInferenceAlgorithm.getLogType
   :module: pyopenms.pyopenms_4


Cython signature: LogType getLogType()
Returns the type of progress log being used




.. py:method:: BasicProteinInferenceAlgorithm.getName
   :module: pyopenms.pyopenms_4


Cython signature: String getName()
Returns the name




.. py:method:: BasicProteinInferenceAlgorithm.getParameters
   :module: pyopenms.pyopenms_4


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: BasicProteinInferenceAlgorithm.getSubsections
   :module: pyopenms.pyopenms_4


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: BasicProteinInferenceAlgorithm.nextProgress
   :module: pyopenms.pyopenms_4


Cython signature: void nextProgress()
Increment progress by 1 (according to range begin-end)




.. py:method:: BasicProteinInferenceAlgorithm.run
   :module: pyopenms.pyopenms_4


         - Cython signature: void run(libcpp_vector[PeptideIdentification] & pep_ids, libcpp_vector[ProteinIdentification] & prot_ids)


Performs basic aggregation-based inference per ProteinIdentification run. See class help.
-----
:param pep_ids: Vector of peptide identifications
:param prot_ids: Vector of protein identification runs. Scores will be overwritten and groups added.
:return: Writes its results into prot_ids
         - Cython signature: void run(libcpp_vector[PeptideIdentification] & pep_ids, ProteinIdentification & prot_id)


Performs basic aggregation-based inference on single ProteinIdentification run. See class help.
-----
:param pep_ids: Vector of peptide identifications
:param prot_id: ProteinIdentification run with possible proteins. Scores will be overwritten and groups added.
:return: Writes its results into prot_ids
         - Cython signature: void run(ConsensusMap & cmap, ProteinIdentification & prot_id, bool include_unassigned)


Performs basic aggregation-based inference on identifications in a ConsensusMap. See class help.
-----
prot_id should contain the union of all proteins in the map. E.g. use ConsensusMapMergerAlgorithm and
then pass the first=merged run.
-----
:param cmap: ConsensusMap = Consensus features with metadata and peptide identifications
:param prot_id: ProteinIdentification run with possible proteins. Scores will be overwritten and groups added.
:return: Writes its results into prot_ids




.. py:method:: BasicProteinInferenceAlgorithm.setLogType
   :module: pyopenms.pyopenms_4


Cython signature: void setLogType(LogType)
Sets the progress log that should be used. The default type is NONE!




.. py:method:: BasicProteinInferenceAlgorithm.setName
   :module: pyopenms.pyopenms_4


Cython signature: void setName(const String &)
Sets the name




.. py:method:: BasicProteinInferenceAlgorithm.setParameters
   :module: pyopenms.pyopenms_4


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: BasicProteinInferenceAlgorithm.setProgress
   :module: pyopenms.pyopenms_4


Cython signature: void setProgress(ptrdiff_t value)
Sets the current progress




.. py:method:: BasicProteinInferenceAlgorithm.startProgress
   :module: pyopenms.pyopenms_4


Cython signature: void startProgress(ptrdiff_t begin, ptrdiff_t end, String label)




.. py:class:: CVMappingFile
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _CVMappingFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1CVMappingFile.html




.. py:method:: CVMappingFile.load
   :module: pyopenms.pyopenms_4


Cython signature: void load(const String & filename, CVMappings & cv_mappings, bool strip_namespaces)
Loads CvMappings from the given file




.. py:class:: CachedmzML
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _CachedmzML


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1CachedmzML.html




.. py:method:: CachedmzML.getChromatogram
   :module: pyopenms.pyopenms_4


Cython signature: MSChromatogram getChromatogram(size_t idx)




.. py:method:: CachedmzML.getMetaData
   :module: pyopenms.pyopenms_4


Cython signature: MSExperiment getMetaData()




.. py:method:: CachedmzML.getNrChromatograms
   :module: pyopenms.pyopenms_4


Cython signature: size_t getNrChromatograms()




.. py:method:: CachedmzML.getNrSpectra
   :module: pyopenms.pyopenms_4


Cython signature: size_t getNrSpectra()




.. py:method:: CachedmzML.getSpectrum
   :module: pyopenms.pyopenms_4


Cython signature: MSSpectrum getSpectrum(size_t idx)




.. py:method:: CachedmzML.load
   :module: pyopenms.pyopenms_4


Cython signature: void load(const String & filename, CachedmzML & exp)




.. py:method:: CachedmzML.store
   :module: pyopenms.pyopenms_4


Cython signature: void store(const String & filename, MSExperiment exp)




.. py:class:: ChannelInfo
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _ChannelInfo


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ChannelInfo.html




.. py:attribute:: ChannelInfo.active
   :module: pyopenms.pyopenms_4




.. py:attribute:: ChannelInfo.center
   :module: pyopenms.pyopenms_4




.. py:attribute:: ChannelInfo.description
   :module: pyopenms.pyopenms_4




.. py:attribute:: ChannelInfo.id
   :module: pyopenms.pyopenms_4




.. py:attribute:: ChannelInfo.name
   :module: pyopenms.pyopenms_4




.. py:class:: ChromatogramSettings
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _ChromatogramSettings


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ChromatogramSettings.html
 -- Inherits from ['MetaInfoInterface']


 Description of the chromatogram settings, provides meta-information
 about a single chromatogram.




.. py:attribute:: ChromatogramSettings.ChromatogramType
   :module: pyopenms.pyopenms_4


alias of :py:class:`pyopenms.pyopenms_4.__ChromatogramType`


.. py:method:: ChromatogramSettings.clearMetaInfo
   :module: pyopenms.pyopenms_4


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: ChromatogramSettings.getAcquisitionInfo
   :module: pyopenms.pyopenms_4


Cython signature: AcquisitionInfo getAcquisitionInfo()
Returns the acquisition info




.. py:method:: ChromatogramSettings.getChromatogramType
   :module: pyopenms.pyopenms_4


Cython signature: ChromatogramType getChromatogramType()
Get the chromatogram type




.. py:method:: ChromatogramSettings.getComment
   :module: pyopenms.pyopenms_4


Cython signature: String getComment()
Returns the free-text comment




.. py:method:: ChromatogramSettings.getDataProcessing
   :module: pyopenms.pyopenms_4


Cython signature: libcpp_vector[shared_ptr[DataProcessing]] getDataProcessing()
Returns the description of the applied processing




.. py:method:: ChromatogramSettings.getInstrumentSettings
   :module: pyopenms.pyopenms_4


Cython signature: InstrumentSettings getInstrumentSettings()
Returns the instrument settings of the current spectrum




.. py:method:: ChromatogramSettings.getKeys
   :module: pyopenms.pyopenms_4


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: ChromatogramSettings.getMetaValue
   :module: pyopenms.pyopenms_4


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: ChromatogramSettings.getNativeID
   :module: pyopenms.pyopenms_4


Cython signature: String getNativeID()
Returns the native identifier for the spectrum, used by the acquisition software.




.. py:method:: ChromatogramSettings.getPrecursor
   :module: pyopenms.pyopenms_4


Cython signature: Precursor getPrecursor()
Returns the precursors




.. py:method:: ChromatogramSettings.getProduct
   :module: pyopenms.pyopenms_4


Cython signature: Product getProduct()
Returns the product ion




.. py:method:: ChromatogramSettings.getSourceFile
   :module: pyopenms.pyopenms_4


Cython signature: SourceFile getSourceFile()
Returns the source file




.. py:method:: ChromatogramSettings.isMetaEmpty
   :module: pyopenms.pyopenms_4


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: ChromatogramSettings.metaRegistry
   :module: pyopenms.pyopenms_4


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: ChromatogramSettings.metaValueExists
   :module: pyopenms.pyopenms_4


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: ChromatogramSettings.removeMetaValue
   :module: pyopenms.pyopenms_4


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: ChromatogramSettings.setAcquisitionInfo
   :module: pyopenms.pyopenms_4


Cython signature: void setAcquisitionInfo(AcquisitionInfo acquisition_info)
Sets the acquisition info




.. py:method:: ChromatogramSettings.setChromatogramType
   :module: pyopenms.pyopenms_4


Cython signature: void setChromatogramType(ChromatogramType type)
Sets the chromatogram type




.. py:method:: ChromatogramSettings.setComment
   :module: pyopenms.pyopenms_4


Cython signature: void setComment(String comment)
Sets the free-text comment




.. py:method:: ChromatogramSettings.setDataProcessing
   :module: pyopenms.pyopenms_4


Cython signature: void setDataProcessing(libcpp_vector[shared_ptr[DataProcessing]])
Sets the description of the applied processing




.. py:method:: ChromatogramSettings.setInstrumentSettings
   :module: pyopenms.pyopenms_4


Cython signature: void setInstrumentSettings(InstrumentSettings instrument_settings)
Sets the instrument settings of the current spectrum




.. py:method:: ChromatogramSettings.setMetaValue
   :module: pyopenms.pyopenms_4


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:method:: ChromatogramSettings.setNativeID
   :module: pyopenms.pyopenms_4


Cython signature: void setNativeID(String native_id)
Sets the native identifier for the spectrum, used by the acquisition software.




.. py:method:: ChromatogramSettings.setPrecursor
   :module: pyopenms.pyopenms_4


Cython signature: void setPrecursor(Precursor precursor)
Sets the precursors




.. py:method:: ChromatogramSettings.setProduct
   :module: pyopenms.pyopenms_4


Cython signature: void setProduct(Product p)
Sets the product ion




.. py:method:: ChromatogramSettings.setSourceFile
   :module: pyopenms.pyopenms_4


Cython signature: void setSourceFile(SourceFile source_file)
Sets the source file




.. py:class:: CompNovoIdentification
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _CompNovoIdentification


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1CompNovoIdentification.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: CompNovoIdentification.getDefaults
   :module: pyopenms.pyopenms_4


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: CompNovoIdentification.getIdentification
   :module: pyopenms.pyopenms_4


Cython signature: void getIdentification(PeptideIdentification & id, MSSpectrum cid_spec, MSSpectrum etd_spec)
Performs and returns de novo identifications




.. py:method:: CompNovoIdentification.getIdentifications
   :module: pyopenms.pyopenms_4


Cython signature: void getIdentifications(libcpp_vector[PeptideIdentification] & ids, MSExperiment)
Performs and returns de novo identifications




.. py:method:: CompNovoIdentification.getName
   :module: pyopenms.pyopenms_4


Cython signature: String getName()
Returns the name




.. py:method:: CompNovoIdentification.getParameters
   :module: pyopenms.pyopenms_4


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: CompNovoIdentification.getSubsections
   :module: pyopenms.pyopenms_4


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: CompNovoIdentification.setName
   :module: pyopenms.pyopenms_4


Cython signature: void setName(const String &)
Sets the name




.. py:method:: CompNovoIdentification.setParameters
   :module: pyopenms.pyopenms_4


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: CompNovoIdentificationCID
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _CompNovoIdentificationCID


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1CompNovoIdentificationCID.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: CompNovoIdentificationCID.getDefaults
   :module: pyopenms.pyopenms_4


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: CompNovoIdentificationCID.getIdentification
   :module: pyopenms.pyopenms_4


Cython signature: void getIdentification(PeptideIdentification & id, MSSpectrum cid_spec)
Performs and returns de novo identifications




.. py:method:: CompNovoIdentificationCID.getIdentifications
   :module: pyopenms.pyopenms_4


Cython signature: void getIdentifications(libcpp_vector[PeptideIdentification] & ids, MSExperiment)
Performs and returns de novo identifications




.. py:method:: CompNovoIdentificationCID.getName
   :module: pyopenms.pyopenms_4


Cython signature: String getName()
Returns the name




.. py:method:: CompNovoIdentificationCID.getParameters
   :module: pyopenms.pyopenms_4


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: CompNovoIdentificationCID.getSubsections
   :module: pyopenms.pyopenms_4


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: CompNovoIdentificationCID.setName
   :module: pyopenms.pyopenms_4


Cython signature: void setName(const String &)
Sets the name




.. py:method:: CompNovoIdentificationCID.setParameters
   :module: pyopenms.pyopenms_4


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: ComplementMarker
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _ComplementMarker


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ComplementMarker.html
 -- Inherits from ['PeakMarker']




.. py:method:: ComplementMarker.apply
   :module: pyopenms.pyopenms_4


Cython signature: void apply(libcpp_map[double,bool] &, MSSpectrum &)




.. py:method:: ComplementMarker.create
   :module: pyopenms.pyopenms_4




.. py:method:: ComplementMarker.getDefaults
   :module: pyopenms.pyopenms_4


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: ComplementMarker.getName
   :module: pyopenms.pyopenms_4


Cython signature: String getName()
Returns the name




.. py:method:: ComplementMarker.getParameters
   :module: pyopenms.pyopenms_4


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: ComplementMarker.getProductName
   :module: pyopenms.pyopenms_4


Cython signature: String getProductName()
Returns the product name




.. py:method:: ComplementMarker.getSubsections
   :module: pyopenms.pyopenms_4


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: ComplementMarker.setName
   :module: pyopenms.pyopenms_4


Cython signature: void setName(const String &)
Sets the name




.. py:method:: ComplementMarker.setParameters
   :module: pyopenms.pyopenms_4


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: ConsensusIDAlgorithm
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _ConsensusIDAlgorithm


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ConsensusIDAlgorithm.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: ConsensusIDAlgorithm.apply
   :module: pyopenms.pyopenms_4


Cython signature: void apply(libcpp_vector[PeptideIdentification] & ids, size_t number_of_runs)
Calculates the consensus ID for a set of peptide identifications of one spectrum or (consensus) feature




.. py:method:: ConsensusIDAlgorithm.getDefaults
   :module: pyopenms.pyopenms_4


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: ConsensusIDAlgorithm.getName
   :module: pyopenms.pyopenms_4


Cython signature: String getName()
Returns the name




.. py:method:: ConsensusIDAlgorithm.getParameters
   :module: pyopenms.pyopenms_4


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: ConsensusIDAlgorithm.getSubsections
   :module: pyopenms.pyopenms_4


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: ConsensusIDAlgorithm.setName
   :module: pyopenms.pyopenms_4


Cython signature: void setName(const String &)
Sets the name




.. py:method:: ConsensusIDAlgorithm.setParameters
   :module: pyopenms.pyopenms_4


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: ConsensusIDAlgorithmSimilarity
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _ConsensusIDAlgorithmSimilarity


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ConsensusIDAlgorithmSimilarity.html
 -- Inherits from ['ConsensusIDAlgorithm']




.. py:method:: ConsensusIDAlgorithmSimilarity.apply
   :module: pyopenms.pyopenms_4


Cython signature: void apply(libcpp_vector[PeptideIdentification] & ids, size_t number_of_runs)
Calculates the consensus ID for a set of peptide identifications of one spectrum or (consensus) feature




.. py:method:: ConsensusIDAlgorithmSimilarity.getDefaults
   :module: pyopenms.pyopenms_4


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: ConsensusIDAlgorithmSimilarity.getName
   :module: pyopenms.pyopenms_4


Cython signature: String getName()
Returns the name




.. py:method:: ConsensusIDAlgorithmSimilarity.getParameters
   :module: pyopenms.pyopenms_4


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: ConsensusIDAlgorithmSimilarity.getSubsections
   :module: pyopenms.pyopenms_4


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: ConsensusIDAlgorithmSimilarity.setName
   :module: pyopenms.pyopenms_4


Cython signature: void setName(const String &)
Sets the name




.. py:method:: ConsensusIDAlgorithmSimilarity.setParameters
   :module: pyopenms.pyopenms_4


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: ConsensusIDAlgorithmWorst
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _ConsensusIDAlgorithmWorst


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ConsensusIDAlgorithmWorst.html
 -- Inherits from ['ConsensusIDAlgorithmIdentity']




.. py:method:: ConsensusIDAlgorithmWorst.apply
   :module: pyopenms.pyopenms_4


Cython signature: void apply(libcpp_vector[PeptideIdentification] & ids, size_t number_of_runs)
Calculates the consensus ID for a set of peptide identifications of one spectrum or (consensus) feature




.. py:method:: ConsensusIDAlgorithmWorst.getDefaults
   :module: pyopenms.pyopenms_4


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: ConsensusIDAlgorithmWorst.getName
   :module: pyopenms.pyopenms_4


Cython signature: String getName()
Returns the name




.. py:method:: ConsensusIDAlgorithmWorst.getParameters
   :module: pyopenms.pyopenms_4


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: ConsensusIDAlgorithmWorst.getSubsections
   :module: pyopenms.pyopenms_4


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: ConsensusIDAlgorithmWorst.setName
   :module: pyopenms.pyopenms_4


Cython signature: void setName(const String &)
Sets the name




.. py:method:: ConsensusIDAlgorithmWorst.setParameters
   :module: pyopenms.pyopenms_4


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: ConsensusMapNormalizerAlgorithmThreshold
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _ConsensusMapNormalizerAlgorithmThreshold


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ConsensusMapNormalizerAlgorithmThreshold.html




.. py:method:: ConsensusMapNormalizerAlgorithmThreshold.computeCorrelation
   :module: pyopenms.pyopenms_4


Cython signature: libcpp_vector[double] computeCorrelation(ConsensusMap & input_map, double ratio_threshold, const String & acc_filter, const String & desc_filter)
Determines the ratio of all maps to the map with the most features




.. py:method:: ConsensusMapNormalizerAlgorithmThreshold.normalizeMaps
   :module: pyopenms.pyopenms_4


Cython signature: void normalizeMaps(ConsensusMap & input_map, libcpp_vector[double] & ratios)
Applies the given ratio to the maps of the consensusMap




.. py:class:: DecoyTransitionType
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`




.. py:attribute:: DecoyTransitionType.DECOY
   :module: pyopenms.pyopenms_4
   :value: 2




.. py:attribute:: DecoyTransitionType.TARGET
   :module: pyopenms.pyopenms_4
   :value: 1




.. py:attribute:: DecoyTransitionType.UNKNOWN
   :module: pyopenms.pyopenms_4
   :value: 0




.. py:method:: DecoyTransitionType.getMapping
   :module: pyopenms.pyopenms_4




.. py:class:: FeatureFinderAlgorithmPicked
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _FeatureFinderAlgorithmPicked


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1FeatureFinderAlgorithmPicked.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: FeatureFinderAlgorithmPicked.getDefaults
   :module: pyopenms.pyopenms_4


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: FeatureFinderAlgorithmPicked.getName
   :module: pyopenms.pyopenms_4


Cython signature: String getName()
Returns the name




.. py:method:: FeatureFinderAlgorithmPicked.getParameters
   :module: pyopenms.pyopenms_4


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: FeatureFinderAlgorithmPicked.getProductName
   :module: pyopenms.pyopenms_4


Cython signature: String getProductName()




.. py:method:: FeatureFinderAlgorithmPicked.getSubsections
   :module: pyopenms.pyopenms_4


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: FeatureFinderAlgorithmPicked.run
   :module: pyopenms.pyopenms_4


Cython signature: void run()




.. py:method:: FeatureFinderAlgorithmPicked.setData
   :module: pyopenms.pyopenms_4


Cython signature: void setData(MSExperiment & input, FeatureMap & output, FeatureFinder & ff)




.. py:method:: FeatureFinderAlgorithmPicked.setName
   :module: pyopenms.pyopenms_4


Cython signature: void setName(const String &)
Sets the name




.. py:method:: FeatureFinderAlgorithmPicked.setParameters
   :module: pyopenms.pyopenms_4


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: FeatureFinderAlgorithmPicked.setSeeds
   :module: pyopenms.pyopenms_4


Cython signature: void setSeeds(FeatureMap & seeds)




.. py:class:: File
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _File


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1File.html




.. py:method:: File.absolutePath
   :module: pyopenms.pyopenms_4


Cython signature: String absolutePath(String file)




.. py:method:: File.basename
   :module: pyopenms.pyopenms_4


Cython signature: String basename(String file)




.. py:method:: File.empty
   :module: pyopenms.pyopenms_4


Cython signature: bool empty(String file_)




.. py:method:: File.exists
   :module: pyopenms.pyopenms_4


Cython signature: bool exists(String file_)




.. py:method:: File.fileList
   :module: pyopenms.pyopenms_4


Cython signature: bool fileList(String dir, String file_pattern, StringList output, bool full_path)




.. py:method:: File.find
   :module: pyopenms.pyopenms_4


Cython signature: String find(String filename, StringList directories)




.. py:method:: File.findDatabase
   :module: pyopenms.pyopenms_4


Cython signature: String findDatabase(String db_name)




.. py:method:: File.findDoc
   :module: pyopenms.pyopenms_4


Cython signature: String findDoc(String filename)




.. py:method:: File.findExecutable
   :module: pyopenms.pyopenms_4


Cython signature: String findExecutable(String toolName)




.. py:method:: File.getExecutablePath
   :module: pyopenms.pyopenms_4


Cython signature: String getExecutablePath()




.. py:method:: File.getOpenMSDataPath
   :module: pyopenms.pyopenms_4


Cython signature: String getOpenMSDataPath()




.. py:method:: File.getOpenMSHomePath
   :module: pyopenms.pyopenms_4


Cython signature: String getOpenMSHomePath()




.. py:method:: File.getSystemParameters
   :module: pyopenms.pyopenms_4


Cython signature: Param getSystemParameters()




.. py:method:: File.getTempDirectory
   :module: pyopenms.pyopenms_4


Cython signature: String getTempDirectory()




.. py:method:: File.getTemporaryFile
   :module: pyopenms.pyopenms_4


Cython signature: String getTemporaryFile(const String & alternative_file)




.. py:method:: File.getUniqueName
   :module: pyopenms.pyopenms_4


Cython signature: String getUniqueName()




.. py:method:: File.getUserDirectory
   :module: pyopenms.pyopenms_4


Cython signature: String getUserDirectory()




.. py:method:: File.isDirectory
   :module: pyopenms.pyopenms_4


Cython signature: bool isDirectory(String path)




.. py:method:: File.path
   :module: pyopenms.pyopenms_4


Cython signature: String path(String file)




.. py:method:: File.readable
   :module: pyopenms.pyopenms_4


Cython signature: bool readable(String file)




.. py:method:: File.remove
   :module: pyopenms.pyopenms_4


Cython signature: bool remove(String file_)




.. py:method:: File.removeDirRecursively
   :module: pyopenms.pyopenms_4


Cython signature: bool removeDirRecursively(String dir_name)




.. py:method:: File.rename
   :module: pyopenms.pyopenms_4


Cython signature: bool rename(const String & from_, const String & to, bool overwrite_existing, bool verbose)




.. py:method:: File.writable
   :module: pyopenms.pyopenms_4


Cython signature: bool writable(String file)




.. py:class:: FloatDataArray
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _FloatDataArray


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::DataArrays_1_1FloatDataArray.html
 -- Inherits from ['MetaInfoDescription']


 The representation of extra float data attached to a spectrum or chromatogram.
 Raw data access is proved by `get_peaks` and `set_peaks`, which yields numpy arrays




.. py:method:: FloatDataArray.clear
   :module: pyopenms.pyopenms_4


Cython signature: void clear()




.. py:method:: FloatDataArray.clearMetaInfo
   :module: pyopenms.pyopenms_4


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: FloatDataArray.getDataProcessing
   :module: pyopenms.pyopenms_4


Cython signature: libcpp_vector[shared_ptr[DataProcessing]] getDataProcessing()
Returns a reference to the description of the applied processing




.. py:method:: FloatDataArray.getKeys
   :module: pyopenms.pyopenms_4


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: FloatDataArray.getMetaValue
   :module: pyopenms.pyopenms_4


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: FloatDataArray.getName
   :module: pyopenms.pyopenms_4


Cython signature: String getName()
Returns the name of the peak annotations




.. py:method:: FloatDataArray.get_data
   :module: pyopenms.pyopenms_4


Gets the raw data for the float data array


Example usage:


  fd = pyopenms.FloatDataArray()
  data = fd.get_data()






.. py:method:: FloatDataArray.isMetaEmpty
   :module: pyopenms.pyopenms_4


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: FloatDataArray.metaRegistry
   :module: pyopenms.pyopenms_4


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: FloatDataArray.metaValueExists
   :module: pyopenms.pyopenms_4


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: FloatDataArray.push_back
   :module: pyopenms.pyopenms_4


Cython signature: void push_back(float)




.. py:method:: FloatDataArray.removeMetaValue
   :module: pyopenms.pyopenms_4


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: FloatDataArray.reserve
   :module: pyopenms.pyopenms_4


Cython signature: void reserve(size_t n)




.. py:method:: FloatDataArray.resize
   :module: pyopenms.pyopenms_4


Cython signature: void resize(size_t n)




.. py:method:: FloatDataArray.setDataProcessing
   :module: pyopenms.pyopenms_4


Cython signature: void setDataProcessing(libcpp_vector[shared_ptr[DataProcessing]])
Sets the description of the applied processing




.. py:method:: FloatDataArray.setMetaValue
   :module: pyopenms.pyopenms_4


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:method:: FloatDataArray.setName
   :module: pyopenms.pyopenms_4


Cython signature: void setName(String name)
Sets the name of the peak annotations




.. py:method:: FloatDataArray.set_data
   :module: pyopenms.pyopenms_4


Sets the raw data for the float data array


Example usage:


  fd = pyopenms.FloatDataArray()
  data = numpy.array( [1, 2, 3, 5 ,6] ).astype(numpy.float32)
  fd.set_data(data)






.. py:method:: FloatDataArray.size
   :module: pyopenms.pyopenms_4


Cython signature: size_t size()




.. py:class:: GaussFilter
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _GaussFilter


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1GaussFilter.html
 -- Inherits from ['DefaultParamHandler', 'ProgressLogger']




.. py:method:: GaussFilter.endProgress
   :module: pyopenms.pyopenms_4


Cython signature: void endProgress()
Ends the progress display




.. py:method:: GaussFilter.filter
   :module: pyopenms.pyopenms_4


- Cython signature: void filter(MSSpectrum & spectrum)
  Smoothes an MSSpectrum containing profile data


- Cython signature: void filter(MSChromatogram & chromatogram)




.. py:method:: GaussFilter.filterExperiment
   :module: pyopenms.pyopenms_4


Cython signature: void filterExperiment(MSExperiment & exp)
Smoothes an MSExperiment containing profile data




.. py:method:: GaussFilter.getDefaults
   :module: pyopenms.pyopenms_4


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: GaussFilter.getLogType
   :module: pyopenms.pyopenms_4


Cython signature: LogType getLogType()
Returns the type of progress log being used




.. py:method:: GaussFilter.getName
   :module: pyopenms.pyopenms_4


Cython signature: String getName()
Returns the name




.. py:method:: GaussFilter.getParameters
   :module: pyopenms.pyopenms_4


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: GaussFilter.getSubsections
   :module: pyopenms.pyopenms_4


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: GaussFilter.nextProgress
   :module: pyopenms.pyopenms_4


Cython signature: void nextProgress()
Increment progress by 1 (according to range begin-end)




.. py:method:: GaussFilter.setLogType
   :module: pyopenms.pyopenms_4


Cython signature: void setLogType(LogType)
Sets the progress log that should be used. The default type is NONE!




.. py:method:: GaussFilter.setName
   :module: pyopenms.pyopenms_4


Cython signature: void setName(const String &)
Sets the name




.. py:method:: GaussFilter.setParameters
   :module: pyopenms.pyopenms_4


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: GaussFilter.setProgress
   :module: pyopenms.pyopenms_4


Cython signature: void setProgress(ptrdiff_t value)
Sets the current progress




.. py:method:: GaussFilter.startProgress
   :module: pyopenms.pyopenms_4


Cython signature: void startProgress(ptrdiff_t begin, ptrdiff_t end, String label)




.. py:class:: GaussTraceFitter
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _GaussTraceFitter


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1GaussTraceFitter.html




.. py:method:: GaussTraceFitter.checkMaximalRTSpan
   :module: pyopenms.pyopenms_4


Cython signature: bool checkMaximalRTSpan(double max_rt_span)




.. py:method:: GaussTraceFitter.checkMinimalRTSpan
   :module: pyopenms.pyopenms_4


Cython signature: bool checkMinimalRTSpan(libcpp_pair[double,double] & rt_bounds, double min_rt_span)




.. py:method:: GaussTraceFitter.computeTheoretical
   :module: pyopenms.pyopenms_4


Cython signature: double computeTheoretical(MassTrace & trace, size_t k)




.. py:method:: GaussTraceFitter.fit
   :module: pyopenms.pyopenms_4


Cython signature: void fit(MassTraces & traces)
Override important methods




.. py:method:: GaussTraceFitter.getArea
   :module: pyopenms.pyopenms_4


Cython signature: double getArea()
Returns area of the fitted gaussian model




.. py:method:: GaussTraceFitter.getCenter
   :module: pyopenms.pyopenms_4


Cython signature: double getCenter()
Returns center of the fitted gaussian model




.. py:method:: GaussTraceFitter.getFWHM
   :module: pyopenms.pyopenms_4


Cython signature: double getFWHM()
Returns FWHM of the fitted gaussian model




.. py:method:: GaussTraceFitter.getGnuplotFormula
   :module: pyopenms.pyopenms_4


Cython signature: String getGnuplotFormula(MassTrace & trace, char function_name, double baseline, double rt_shift)




.. py:method:: GaussTraceFitter.getHeight
   :module: pyopenms.pyopenms_4


Cython signature: double getHeight()
Returns height of the fitted gaussian model




.. py:method:: GaussTraceFitter.getLowerRTBound
   :module: pyopenms.pyopenms_4


Cython signature: double getLowerRTBound()
Returns the lower RT bound




.. py:method:: GaussTraceFitter.getSigma
   :module: pyopenms.pyopenms_4


Cython signature: double getSigma()
Returns Sigma of the fitted gaussian model




.. py:method:: GaussTraceFitter.getUpperRTBound
   :module: pyopenms.pyopenms_4


Cython signature: double getUpperRTBound()
Returns the upper RT bound




.. py:method:: GaussTraceFitter.getValue
   :module: pyopenms.pyopenms_4


Cython signature: double getValue(double rt)
Returns value of the fitted gaussian model




.. py:class:: IDConflictResolverAlgorithm
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _IDConflictResolverAlgorithm


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1IDConflictResolverAlgorithm.html




.. py:method:: IDConflictResolverAlgorithm.resolve
   :module: pyopenms.pyopenms_4


         - Cython signature: void resolve(FeatureMap & features)


Resolves ambiguous annotations of features with peptide identifications
-----
The the filtered identifications are added to the vector of unassigned peptides
and also reduced to a single best hit
-----
:param keep_matching: Keeps all IDs that match the modified sequence of the best hit in the feature (e.g. keeps all IDs in a ConsensusMap if id'd same across multiple runs)
         - Cython signature: void resolve(ConsensusMap & features)


Resolves ambiguous annotations of consensus features with peptide identifications
-----
The the filtered identifications are added to the vector of unassigned peptides
and also reduced to a single best hit
-----
:param keep_matching: Keeps all IDs that match the modified sequence of the best hit in the feature (e.g. keeps all IDs in a ConsensusMap if id'd same across multiple runs)




.. py:method:: IDConflictResolverAlgorithm.resolveBetweenFeatures
   :module: pyopenms.pyopenms_4


         - Cython signature: void resolveBetweenFeatures(FeatureMap & features)


In a single (feature/consensus) map, features with the same (possibly modified) sequence and charge state may appear
-----
This filter removes the peptide sequence annotations from features, if a higher-intensity feature with the same (charge, sequence)
combination exists in the map. The total number of features remains unchanged. In the final output, each (charge, sequence) combination
appears only once, i.e. no multiplicities
         - Cython signature: void resolveBetweenFeatures(ConsensusMap & features)


In a single (feature/consensus) map, features with the same (possibly modified) sequence and charge state may appear
-----
This filter removes the peptide sequence annotations from features, if a higher-intensity feature with the same (charge, sequence)
combination exists in the map. The total number of features remains unchanged. In the final output, each (charge, sequence) combination
appears only once, i.e. no multiplicities




.. py:class:: IDRipper
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _IDRipper


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::IDRipper_1_1IDRipper.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: IDRipper.getDefaults
   :module: pyopenms.pyopenms_4


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: IDRipper.getName
   :module: pyopenms.pyopenms_4


Cython signature: String getName()
Returns the name




.. py:method:: IDRipper.getParameters
   :module: pyopenms.pyopenms_4


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: IDRipper.getSubsections
   :module: pyopenms.pyopenms_4


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: IDRipper.rip
   :module: pyopenms.pyopenms_4


Cython signature: void rip(libcpp_vector[RipFileIdentifier] & rfis, libcpp_vector[RipFileContent] & rfcs, libcpp_vector[ProteinIdentification] & proteins, libcpp_vector[PeptideIdentification] & peptides, bool full_split, bool split_ident_runs)




.. py:method:: IDRipper.setName
   :module: pyopenms.pyopenms_4


Cython signature: void setName(const String &)
Sets the name




.. py:method:: IDRipper.setParameters
   :module: pyopenms.pyopenms_4


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: ITRAQ_TYPES
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`




.. py:attribute:: ITRAQ_TYPES.EIGHTPLEX
   :module: pyopenms.pyopenms_4
   :value: 1




.. py:attribute:: ITRAQ_TYPES.FOURPLEX
   :module: pyopenms.pyopenms_4
   :value: 0




.. py:attribute:: ITRAQ_TYPES.SIZE_OF_ITRAQ_TYPES
   :module: pyopenms.pyopenms_4
   :value: 3




.. py:attribute:: ITRAQ_TYPES.TMT_SIXPLEX
   :module: pyopenms.pyopenms_4
   :value: 2




.. py:method:: ITRAQ_TYPES.getMapping
   :module: pyopenms.pyopenms_4




.. py:class:: IdentificationDataConverter
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _IdentificationDataConverter


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1IdentificationDataConverter.html




.. py:method:: IdentificationDataConverter.exportIDs
   :module: pyopenms.pyopenms_4


Cython signature: void exportIDs(const IdentificationData & id_data, libcpp_vector[ProteinIdentification] & proteins, libcpp_vector[PeptideIdentification] & peptides, bool export_oligonucleotides)
Export to legacy peptide/protein identifications




.. py:method:: IdentificationDataConverter.exportMzTab
   :module: pyopenms.pyopenms_4


Cython signature: MzTab exportMzTab(const IdentificationData & id_data)
Export to mzTab format




.. py:method:: IdentificationDataConverter.importIDs
   :module: pyopenms.pyopenms_4


Cython signature: void importIDs(IdentificationData & id_data, const libcpp_vector[ProteinIdentification] & proteins, const libcpp_vector[PeptideIdentification] & peptides)
Import from legacy peptide/protein identifications




.. py:class:: IdentificationRuns
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _IdentificationRuns


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::IDRipper_1_1IdentificationRuns.html




.. py:class:: IndexTriple
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _IndexTriple


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1IndexTriple.html




.. py:attribute:: IndexTriple.feature
   :module: pyopenms.pyopenms_4




.. py:attribute:: IndexTriple.prot_acc
   :module: pyopenms.pyopenms_4




.. py:attribute:: IndexTriple.rt_probability
   :module: pyopenms.pyopenms_4




.. py:attribute:: IndexTriple.scan
   :module: pyopenms.pyopenms_4




.. py:attribute:: IndexTriple.signal_weight
   :module: pyopenms.pyopenms_4




.. py:attribute:: IndexTriple.variable
   :module: pyopenms.pyopenms_4




.. py:class:: IndexedMzMLHandler
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _IndexedMzMLHandler


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1IndexedMzMLHandler.html




.. py:method:: IndexedMzMLHandler.getChromatogramById
   :module: pyopenms.pyopenms_4


Cython signature: shared_ptr[_Interfaces_Chromatogram] getChromatogramById(int id_)




.. py:method:: IndexedMzMLHandler.getMSChromatogramById
   :module: pyopenms.pyopenms_4


Cython signature: MSChromatogram getMSChromatogramById(int id_)




.. py:method:: IndexedMzMLHandler.getMSChromatogramByNativeId
   :module: pyopenms.pyopenms_4


Cython signature: void getMSChromatogramByNativeId(libcpp_string id_, MSChromatogram & chrom)




.. py:method:: IndexedMzMLHandler.getMSSpectrumById
   :module: pyopenms.pyopenms_4


Cython signature: MSSpectrum getMSSpectrumById(int id_)




.. py:method:: IndexedMzMLHandler.getMSSpectrumByNativeId
   :module: pyopenms.pyopenms_4


Cython signature: void getMSSpectrumByNativeId(libcpp_string id_, MSSpectrum & spec)




.. py:method:: IndexedMzMLHandler.getNrChromatograms
   :module: pyopenms.pyopenms_4


Cython signature: size_t getNrChromatograms()




.. py:method:: IndexedMzMLHandler.getNrSpectra
   :module: pyopenms.pyopenms_4


Cython signature: size_t getNrSpectra()




.. py:method:: IndexedMzMLHandler.getParsingSuccess
   :module: pyopenms.pyopenms_4


Cython signature: bool getParsingSuccess()




.. py:method:: IndexedMzMLHandler.getSpectrumById
   :module: pyopenms.pyopenms_4


Cython signature: shared_ptr[_Interfaces_Spectrum] getSpectrumById(int id_)




.. py:method:: IndexedMzMLHandler.openFile
   :module: pyopenms.pyopenms_4


Cython signature: void openFile(String filename)




.. py:method:: IndexedMzMLHandler.setSkipXMLChecks
   :module: pyopenms.pyopenms_4


Cython signature: void setSkipXMLChecks(bool skip)




.. py:class:: InstrumentSettings
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _InstrumentSettings


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1InstrumentSettings.html
 -- Inherits from ['MetaInfoInterface']




.. py:method:: InstrumentSettings.clearMetaInfo
   :module: pyopenms.pyopenms_4


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: InstrumentSettings.getKeys
   :module: pyopenms.pyopenms_4


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: InstrumentSettings.getMetaValue
   :module: pyopenms.pyopenms_4


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: InstrumentSettings.getPolarity
   :module: pyopenms.pyopenms_4


Cython signature: Polarity getPolarity()
Returns the polarity




.. py:method:: InstrumentSettings.getScanMode
   :module: pyopenms.pyopenms_4


Cython signature: ScanMode getScanMode()
Returns the scan mode




.. py:method:: InstrumentSettings.getScanWindows
   :module: pyopenms.pyopenms_4


Cython signature: libcpp_vector[ScanWindow] getScanWindows()
Returns the m/z scan windows




.. py:method:: InstrumentSettings.getZoomScan
   :module: pyopenms.pyopenms_4


Cython signature: bool getZoomScan()
Returns if this scan is a zoom (enhanced resolution) scan




.. py:method:: InstrumentSettings.isMetaEmpty
   :module: pyopenms.pyopenms_4


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: InstrumentSettings.metaRegistry
   :module: pyopenms.pyopenms_4


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: InstrumentSettings.metaValueExists
   :module: pyopenms.pyopenms_4


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: InstrumentSettings.removeMetaValue
   :module: pyopenms.pyopenms_4


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: InstrumentSettings.setMetaValue
   :module: pyopenms.pyopenms_4


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:method:: InstrumentSettings.setPolarity
   :module: pyopenms.pyopenms_4


Cython signature: void setPolarity(Polarity)
Sets the polarity




.. py:method:: InstrumentSettings.setScanMode
   :module: pyopenms.pyopenms_4


Cython signature: void setScanMode(ScanMode scan_mode)
Sets the scan mode




.. py:method:: InstrumentSettings.setScanWindows
   :module: pyopenms.pyopenms_4


Cython signature: void setScanWindows(libcpp_vector[ScanWindow] scan_windows)
Sets the m/z scan windows




.. py:method:: InstrumentSettings.setZoomScan
   :module: pyopenms.pyopenms_4


Cython signature: void setZoomScan(bool zoom_scan)
Sets if this scan is a zoom (enhanced resolution) scan




.. py:class:: Interfaces()
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`




.. py:attribute:: Interfaces.BinaryDataArray
   :module: pyopenms.pyopenms_4


alias of :py:class:`pyopenms.pyopenms_2._Interfaces_BinaryDataArray`


.. py:attribute:: Interfaces.Chromatogram
   :module: pyopenms.pyopenms_4


alias of :py:class:`pyopenms.pyopenms_2._Interfaces_Chromatogram`


.. py:attribute:: Interfaces.Spectrum
   :module: pyopenms.pyopenms_4


alias of :py:class:`pyopenms.pyopenms_2._Interfaces_Spectrum`


.. py:class:: IonSource
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _IonSource


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1IonSource.html
 -- Inherits from ['MetaInfoInterface']




.. py:attribute:: IonSource.InletType
   :module: pyopenms.pyopenms_4


alias of :py:class:`pyopenms.pyopenms_4.__InletType`


.. py:attribute:: IonSource.IonizationMethod
   :module: pyopenms.pyopenms_4


alias of :py:class:`pyopenms.pyopenms_4.__IonizationMethod`


.. py:attribute:: IonSource.Polarity
   :module: pyopenms.pyopenms_4


alias of :py:class:`pyopenms.pyopenms_4.__Polarity`


.. py:method:: IonSource.clearMetaInfo
   :module: pyopenms.pyopenms_4


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: IonSource.getInletType
   :module: pyopenms.pyopenms_4


Cython signature: InletType getInletType()
Returns the inlet type




.. py:method:: IonSource.getIonizationMethod
   :module: pyopenms.pyopenms_4


Cython signature: IonizationMethod getIonizationMethod()
Returns the ionization method




.. py:method:: IonSource.getKeys
   :module: pyopenms.pyopenms_4


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: IonSource.getMetaValue
   :module: pyopenms.pyopenms_4


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: IonSource.getOrder
   :module: pyopenms.pyopenms_4


Cython signature: int getOrder()


Returns the position of this part in the whole Instrument
-----
Order can be ignored, as long the instrument has this default setup:
  - one ion source
  - one or many mass analyzers
  - one ion detector
-----
For more complex instruments, the order should be defined.




.. py:method:: IonSource.getPolarity
   :module: pyopenms.pyopenms_4


Cython signature: Polarity getPolarity()
Returns the ionization mode




.. py:method:: IonSource.isMetaEmpty
   :module: pyopenms.pyopenms_4


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: IonSource.metaRegistry
   :module: pyopenms.pyopenms_4


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: IonSource.metaValueExists
   :module: pyopenms.pyopenms_4


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: IonSource.removeMetaValue
   :module: pyopenms.pyopenms_4


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: IonSource.setInletType
   :module: pyopenms.pyopenms_4


Cython signature: void setInletType(InletType inlet_type)
Sets the inlet type




.. py:method:: IonSource.setIonizationMethod
   :module: pyopenms.pyopenms_4


Cython signature: void setIonizationMethod(IonizationMethod ionization_type)
Sets the ionization method




.. py:method:: IonSource.setMetaValue
   :module: pyopenms.pyopenms_4


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:method:: IonSource.setOrder
   :module: pyopenms.pyopenms_4


Cython signature: void setOrder(int order)
Sets the order




.. py:method:: IonSource.setPolarity
   :module: pyopenms.pyopenms_4


Cython signature: void setPolarity(Polarity polarity)
Sets the ionization mode




.. py:class:: IsotopeModel
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _IsotopeModel


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1IsotopeModel.html


 Isotope distribution approximated using linear interpolation
 -----
 This models a smoothed (widened) distribution, i.e. can be used to sample actual raw peaks (depending on the points you query)
 If you only want the distribution (no widening), use either
 EmpiricalFormula::getIsotopeDistribution() // for a certain sum formula
 or
 IsotopeDistribution::estimateFromPeptideWeight (double average_weight)  // for averagine
 -----
 Peak widening is achieved by either a Gaussian or Lorentzian shape




.. py:attribute:: IsotopeModel.Averagines
   :module: pyopenms.pyopenms_4


alias of :py:class:`pyopenms.pyopenms_4.__Averagines`


.. py:method:: IsotopeModel.getCenter
   :module: pyopenms.pyopenms_4


Cython signature: double getCenter()


Get the center of the Isotope model
-----
This is a m/z-value not necessarily the monoisotopic mass




.. py:method:: IsotopeModel.getCharge
   :module: pyopenms.pyopenms_4


Cython signature: unsigned int getCharge()




.. py:method:: IsotopeModel.getFormula
   :module: pyopenms.pyopenms_4


Cython signature: EmpiricalFormula getFormula()
Return the Averagine peptide formula (mass calculated from mean mass and charge -- use .setParameters() to set them)




.. py:method:: IsotopeModel.getIsotopeDistribution
   :module: pyopenms.pyopenms_4


Cython signature: IsotopeDistribution getIsotopeDistribution()


Get the Isotope distribution (without widening) from the last setSamples() call
-----
Useful to determine the number of isotopes that the model contains and their position




.. py:method:: IsotopeModel.getOffset
   :module: pyopenms.pyopenms_4


Cython signature: double getOffset()
Get the offset of the model




.. py:method:: IsotopeModel.getProductName
   :module: pyopenms.pyopenms_4


Cython signature: String getProductName()
Name of the model (needed by Factory)




.. py:method:: IsotopeModel.setOffset
   :module: pyopenms.pyopenms_4


Cython signature: void setOffset(double offset)


Set the offset of the model
-----
The whole model will be shifted to the new offset without being computing all over
This leaves a discrepancy which is minor in small shifts (i.e. shifting by one or two
standard deviations) but can get significant otherwise. In that case use setParameters()
which enforces a recomputation of the model




.. py:method:: IsotopeModel.setSamples
   :module: pyopenms.pyopenms_4


Cython signature: void setSamples(EmpiricalFormula & formula)
Set sample/supporting points of interpolation




.. py:class:: ItraqConstants
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _ItraqConstants


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ItraqConstants.html


 Some constants used throughout iTRAQ classes
 -----
 Constants for iTRAQ experiments and a ChannelInfo structure to store information about a single channel




.. py:method:: ItraqConstants.getIsotopeMatrixAsStringList
   :module: pyopenms.pyopenms_4


Cython signature: StringList getIsotopeMatrixAsStringList(int itraq_type, libcpp_vector[MatrixDouble] & isotope_corrections)


Convert isotope correction matrix to stringlist
-----
Each line is converted into a string of the format channel:-2Da/-1Da/+1Da/+2Da ; e.g. '114:0/0.3/4/0'
Useful for creating parameters or debug output
-----
:param itraq_type: Which matrix to stringify. Should be of values from enum ITRAQ_TYPES
:param isotope_corrections: Vector of the two matrices (4plex, 8plex)




.. py:method:: ItraqConstants.translateIsotopeMatrix
   :module: pyopenms.pyopenms_4


Cython signature: MatrixDouble translateIsotopeMatrix(int & itraq_type, libcpp_vector[MatrixDouble] & isotope_corrections)




.. py:method:: ItraqConstants.updateIsotopeMatrixFromStringList
   :module: pyopenms.pyopenms_4


Cython signature: void updateIsotopeMatrixFromStringList(int itraq_type, StringList & channels, libcpp_vector[MatrixDouble] & isotope_corrections)


Convert strings to isotope correction matrix rows
-----
Each string of format channel:-2Da/-1Da/+1Da/+2Da ; e.g. '114:0/0.3/4/0'
is parsed and the corresponding channel(row) in the matrix is updated
Not all channels need to be present, missing channels will be left untouched
Useful to update the matrix with user isotope correction values
-----
:param itraq_type: Which matrix to stringify. Should be of values from enum ITRAQ_TYPES
:param channels: New channel isotope values as strings
:param isotope_corrections: Vector of the two matrices (4plex, 8plex)




.. py:class:: ItraqFourPlexQuantitationMethod
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _ItraqFourPlexQuantitationMethod


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ItraqFourPlexQuantitationMethod.html
 -- Inherits from ['IsobaricQuantitationMethod']




.. py:method:: ItraqFourPlexQuantitationMethod.getChannelInformation
   :module: pyopenms.pyopenms_4


Cython signature: libcpp_vector[IsobaricChannelInformation] getChannelInformation()




.. py:method:: ItraqFourPlexQuantitationMethod.getDefaults
   :module: pyopenms.pyopenms_4


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: ItraqFourPlexQuantitationMethod.getIsotopeCorrectionMatrix
   :module: pyopenms.pyopenms_4


Cython signature: MatrixDouble getIsotopeCorrectionMatrix()




.. py:method:: ItraqFourPlexQuantitationMethod.getName
   :module: pyopenms.pyopenms_4


Cython signature: String getName()




.. py:method:: ItraqFourPlexQuantitationMethod.getNumberOfChannels
   :module: pyopenms.pyopenms_4


Cython signature: size_t getNumberOfChannels()




.. py:method:: ItraqFourPlexQuantitationMethod.getParameters
   :module: pyopenms.pyopenms_4


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: ItraqFourPlexQuantitationMethod.getReferenceChannel
   :module: pyopenms.pyopenms_4


Cython signature: size_t getReferenceChannel()




.. py:method:: ItraqFourPlexQuantitationMethod.getSubsections
   :module: pyopenms.pyopenms_4


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: ItraqFourPlexQuantitationMethod.setName
   :module: pyopenms.pyopenms_4


Cython signature: void setName(const String &)
Sets the name




.. py:method:: ItraqFourPlexQuantitationMethod.setParameters
   :module: pyopenms.pyopenms_4


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: LibSVMEncoder
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _LibSVMEncoder


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1LibSVMEncoder.html


 Serves for encoding sequences into feature vectors
 -----
 The class can be used to construct composition vectors for
 sequences. Additionally the vectors can be encoded into
 the libsvm format




.. py:method:: LibSVMEncoder.predictPeptideRT
   :module: pyopenms.pyopenms_4


Cython signature: libcpp_vector[double] predictPeptideRT(libcpp_vector[String] sequences, const SVMWrapper & svm, const String & allowed_characters, unsigned int maximum_sequence_length)




.. py:class:: LogType
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`




.. py:attribute:: LogType.CMD
   :module: pyopenms.pyopenms_4
   :value: 0




.. py:attribute:: LogType.GUI
   :module: pyopenms.pyopenms_4
   :value: 1




.. py:attribute:: LogType.NONE
   :module: pyopenms.pyopenms_4
   :value: 2




.. py:method:: LogType.getMapping
   :module: pyopenms.pyopenms_4




.. py:class:: MRMFeature
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _MRMFeature


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MRMFeature.html
 -- Inherits from ['Feature']




.. py:method:: MRMFeature.addFeature
   :module: pyopenms.pyopenms_4


Cython signature: void addFeature(Feature & f, String key)
Adds an feature from a single chromatogram into the feature




.. py:method:: MRMFeature.addPrecursorFeature
   :module: pyopenms.pyopenms_4


Cython signature: void addPrecursorFeature(Feature & f, String key)
Adds a precursor feature from a single chromatogram into the feature




.. py:method:: MRMFeature.clearMetaInfo
   :module: pyopenms.pyopenms_4


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: MRMFeature.clearUniqueId
   :module: pyopenms.pyopenms_4


Cython signature: size_t clearUniqueId()
Clear the unique id. The new unique id will be invalid. Returns 1 if the unique id was changed, 0 otherwise




.. py:method:: MRMFeature.encloses
   :module: pyopenms.pyopenms_4


Cython signature: bool encloses(double rt, double mz)


Returns if the mass trace convex hulls of the feature enclose the position specified by `rt` and `mz`
-----
:param rt: Sequence to digest
:param mz: Digestion products




.. py:method:: MRMFeature.ensureUniqueId
   :module: pyopenms.pyopenms_4


Cython signature: size_t ensureUniqueId()
Assigns a valid unique id, but only if the present one is invalid. Returns 1 if the unique id was changed, 0 otherwise




.. py:method:: MRMFeature.getAnnotationState
   :module: pyopenms.pyopenms_4


Cython signature: AnnotationState getAnnotationState()




.. py:method:: MRMFeature.getCharge
   :module: pyopenms.pyopenms_4


Cython signature: int getCharge()




.. py:method:: MRMFeature.getConvexHull
   :module: pyopenms.pyopenms_4


Cython signature: ConvexHull2D getConvexHull()




.. py:method:: MRMFeature.getConvexHulls
   :module: pyopenms.pyopenms_4


Cython signature: libcpp_vector[ConvexHull2D] getConvexHulls()




.. py:method:: MRMFeature.getFeature
   :module: pyopenms.pyopenms_4


Cython signature: Feature getFeature(String key)
Returns a specified feature




.. py:method:: MRMFeature.getFeatureIDs
   :module: pyopenms.pyopenms_4


Cython signature: void getFeatureIDs(libcpp_vector[String] & result)
Returns a list of IDs of available features




.. py:method:: MRMFeature.getFeatures
   :module: pyopenms.pyopenms_4


Cython signature: libcpp_vector[Feature] getFeatures()
Returns all the features




.. py:method:: MRMFeature.getIntensity
   :module: pyopenms.pyopenms_4


Cython signature: float getIntensity()
Returns the data point intensity (height)




.. py:method:: MRMFeature.getKeys
   :module: pyopenms.pyopenms_4


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: MRMFeature.getMZ
   :module: pyopenms.pyopenms_4


Cython signature: double getMZ()
Returns the m/z coordinate (index 1)




.. py:method:: MRMFeature.getMetaValue
   :module: pyopenms.pyopenms_4


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: MRMFeature.getOverallQuality
   :module: pyopenms.pyopenms_4


Cython signature: float getOverallQuality()
Model and quality methods




.. py:method:: MRMFeature.getPeptideIdentifications
   :module: pyopenms.pyopenms_4


Cython signature: libcpp_vector[PeptideIdentification] getPeptideIdentifications()
Returns a reference to the PeptideIdentification vector




.. py:method:: MRMFeature.getPrecursorFeature
   :module: pyopenms.pyopenms_4


Cython signature: Feature getPrecursorFeature(String key)
Returns a specified precursor feature




.. py:method:: MRMFeature.getPrecursorFeatureIDs
   :module: pyopenms.pyopenms_4


Cython signature: void getPrecursorFeatureIDs(libcpp_vector[String] & result)
Returns a list of IDs of available precursor features




.. py:method:: MRMFeature.getQuality
   :module: pyopenms.pyopenms_4


Cython signature: float getQuality(size_t index)
Returns the quality in dimension c




.. py:method:: MRMFeature.getRT
   :module: pyopenms.pyopenms_4


Cython signature: double getRT()
Returns the RT coordinate (index 0)




.. py:method:: MRMFeature.getScores
   :module: pyopenms.pyopenms_4


Cython signature: OpenSwath_Scores getScores()
Returns all peakgroup scores




.. py:method:: MRMFeature.getSubordinates
   :module: pyopenms.pyopenms_4


Cython signature: libcpp_vector[Feature] getSubordinates()
Returns the subordinate features




.. py:method:: MRMFeature.getUniqueId
   :module: pyopenms.pyopenms_4


Cython signature: size_t getUniqueId()
Returns the unique id




.. py:method:: MRMFeature.getWidth
   :module: pyopenms.pyopenms_4


Cython signature: float getWidth()




.. py:method:: MRMFeature.hasInvalidUniqueId
   :module: pyopenms.pyopenms_4


Cython signature: size_t hasInvalidUniqueId()
Returns whether the unique id is invalid. Returns 1 if the unique id is invalid, 0 otherwise




.. py:method:: MRMFeature.hasValidUniqueId
   :module: pyopenms.pyopenms_4


Cython signature: size_t hasValidUniqueId()
Returns whether the unique id is valid. Returns 1 if the unique id is valid, 0 otherwise




.. py:method:: MRMFeature.isMetaEmpty
   :module: pyopenms.pyopenms_4


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: MRMFeature.isValid
   :module: pyopenms.pyopenms_4


Cython signature: bool isValid(uint64_t unique_id)
Returns true if the unique_id is valid, false otherwise




.. py:method:: MRMFeature.metaRegistry
   :module: pyopenms.pyopenms_4


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: MRMFeature.metaValueExists
   :module: pyopenms.pyopenms_4


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: MRMFeature.removeMetaValue
   :module: pyopenms.pyopenms_4


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: MRMFeature.setCharge
   :module: pyopenms.pyopenms_4


Cython signature: void setCharge(int q)




.. py:method:: MRMFeature.setConvexHulls
   :module: pyopenms.pyopenms_4


Cython signature: void setConvexHulls(libcpp_vector[ConvexHull2D])




.. py:method:: MRMFeature.setIntensity
   :module: pyopenms.pyopenms_4


Cython signature: void setIntensity(float)
Returns the data point intensity (height)




.. py:method:: MRMFeature.setMZ
   :module: pyopenms.pyopenms_4


Cython signature: void setMZ(double)
Returns the m/z coordinate (index 1)




.. py:method:: MRMFeature.setMetaValue
   :module: pyopenms.pyopenms_4


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:method:: MRMFeature.setOverallQuality
   :module: pyopenms.pyopenms_4


Cython signature: void setOverallQuality(float q)
Sets the overall quality




.. py:method:: MRMFeature.setPeptideIdentifications
   :module: pyopenms.pyopenms_4


Cython signature: void setPeptideIdentifications(libcpp_vector[PeptideIdentification] & peptides)
Sets the PeptideIdentification vector




.. py:method:: MRMFeature.setQuality
   :module: pyopenms.pyopenms_4


Cython signature: void setQuality(size_t index, float q)
Sets the quality in dimension c




.. py:method:: MRMFeature.setRT
   :module: pyopenms.pyopenms_4


Cython signature: void setRT(double)
Returns the RT coordinate (index 0)




.. py:method:: MRMFeature.setScores
   :module: pyopenms.pyopenms_4


Cython signature: void setScores(OpenSwath_Scores s)
Sets all peakgroup scores




.. py:method:: MRMFeature.setSubordinates
   :module: pyopenms.pyopenms_4


Cython signature: void setSubordinates(libcpp_vector[Feature])
Returns the subordinate features




.. py:method:: MRMFeature.setUniqueId
   :module: pyopenms.pyopenms_4


Cython signature: void setUniqueId(uint64_t rhs)
Assigns a new, valid unique id. Always returns 1




.. py:method:: MRMFeature.setWidth
   :module: pyopenms.pyopenms_4


Cython signature: void setWidth(float q)




.. py:class:: MRMFeatureFinderScoring
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _MRMFeatureFinderScoring


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MRMFeatureFinderScoring.html
 -- Inherits from ['DefaultParamHandler', 'ProgressLogger']




.. py:method:: MRMFeatureFinderScoring.endProgress
   :module: pyopenms.pyopenms_4


Cython signature: void endProgress()
Ends the progress display




.. py:method:: MRMFeatureFinderScoring.getDefaults
   :module: pyopenms.pyopenms_4


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: MRMFeatureFinderScoring.getLogType
   :module: pyopenms.pyopenms_4


Cython signature: LogType getLogType()
Returns the type of progress log being used




.. py:method:: MRMFeatureFinderScoring.getName
   :module: pyopenms.pyopenms_4


Cython signature: String getName()
Returns the name




.. py:method:: MRMFeatureFinderScoring.getParameters
   :module: pyopenms.pyopenms_4


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: MRMFeatureFinderScoring.getSubsections
   :module: pyopenms.pyopenms_4


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: MRMFeatureFinderScoring.nextProgress
   :module: pyopenms.pyopenms_4


Cython signature: void nextProgress()
Increment progress by 1 (according to range begin-end)




.. py:method:: MRMFeatureFinderScoring.pickExperiment
   :module: pyopenms.pyopenms_4


Cython signature: void pickExperiment(MSExperiment & chromatograms, FeatureMap & output, TargetedExperiment & transition_exp_, TransformationDescription trafo, MSExperiment & swath_map)


Pick features in one experiment containing chromatogram
-----
Function for for wrapping in Python, only uses OpenMS datastructures and does not return the map
-----
:param chromatograms: The input chromatograms
:param output: The output features with corresponding scores
:param transition_exp: The transition list describing the experiment
:param trafo: Optional transformation of the experimental retention time to the normalized retention time space used in the transition list
:param swath_map: Optional SWATH-MS (DIA) map corresponding from which the chromatograms were extracted




.. py:method:: MRMFeatureFinderScoring.prepareProteinPeptideMaps_
   :module: pyopenms.pyopenms_4


Cython signature: void prepareProteinPeptideMaps_(LightTargetedExperiment & transition_exp)


Prepares the internal mappings of peptides and proteins
-----
Calling this method _is_ required before calling scorePeakgroups
-----
:param transition_exp: The transition list describing the experiment




.. py:method:: MRMFeatureFinderScoring.scorePeakgroups
   :module: pyopenms.pyopenms_4


Cython signature: void scorePeakgroups(LightMRMTransitionGroupCP transition_group, TransformationDescription trafo, libcpp_vector[SwathMap] swath_maps, FeatureMap & output, bool ms1only)


Score all peak groups of a transition group
-----
Iterate through all features found along the chromatograms of the transition group and score each one individually
-----
:param transition_group: The MRMTransitionGroup to be scored (input)
:param trafo: Optional transformation of the experimental retention time
            to the normalized retention time space used in the
            transition list
:param swath_maps: Optional SWATH-MS (DIA) map corresponding from which
                 the chromatograms were extracted. Use empty map if no
                 data is available
:param output: The output features with corresponding scores (the found
             features will be added to this FeatureMap)
:param ms1only: Whether to only do MS1 scoring and skip all MS2 scoring




.. py:method:: MRMFeatureFinderScoring.setLogType
   :module: pyopenms.pyopenms_4


Cython signature: void setLogType(LogType)
Sets the progress log that should be used. The default type is NONE!




.. py:method:: MRMFeatureFinderScoring.setMS1Map
   :module: pyopenms.pyopenms_4


- Cython signature: void setMS1Map(shared_ptr[SpectrumAccessOpenMS] ms1_map)
- Cython signature: void setMS1Map(shared_ptr[SpectrumAccessOpenMSCached] ms1_map)




.. py:method:: MRMFeatureFinderScoring.setName
   :module: pyopenms.pyopenms_4


Cython signature: void setName(const String &)
Sets the name




.. py:method:: MRMFeatureFinderScoring.setParameters
   :module: pyopenms.pyopenms_4


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: MRMFeatureFinderScoring.setProgress
   :module: pyopenms.pyopenms_4


Cython signature: void setProgress(ptrdiff_t value)
Sets the current progress




.. py:method:: MRMFeatureFinderScoring.setStrictFlag
   :module: pyopenms.pyopenms_4


Cython signature: void setStrictFlag(bool flag)




.. py:method:: MRMFeatureFinderScoring.startProgress
   :module: pyopenms.pyopenms_4


Cython signature: void startProgress(ptrdiff_t begin, ptrdiff_t end, String label)




.. py:class:: MRMFeaturePickerFile
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _MRMFeaturePickerFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MRMFeaturePickerFile.html


 _MRMFeaturePickerFile_ loads components and components groups parameters from a .csv file
 -----
 The structures defined in [MRMFeaturePicker](@ref MRMFeaturePicker) are used
 -----
 It is required that columns `component_name` and `component_group_name` are present.
 Lines whose `component_name`'s or `component_group_name`'s value is an empty string, will be skipped.
 The class supports the absence of information within other columns.
 -----
 A reduced example of the expected format (fewer columns are shown here):
 > component_name,component_group_name,TransitionGroupPicker:stop_after_feature,TransitionGroupPicker:PeakPickerMRM:sgolay_frame_length
 > arg-L.arg-L_1.Heavy,arg-L,2,15
 > arg-L.arg-L_1.Light,arg-L,2,17
 > orn.orn_1.Heavy,orn,3,21
 > orn.orn_1.Light,orn,3,13




.. py:method:: MRMFeaturePickerFile.load
   :module: pyopenms.pyopenms_4


Cython signature: void load(const String & filename, libcpp_vector[MRMFP_ComponentParams] & cp_list, libcpp_vector[MRMFP_ComponentGroupParams] & cgp_list)


Loads the file's data and saves it into vectors of `ComponentParams` and `ComponentGroupParams`
-----
The file is expected to contain at least two columns: `component_name` and `component_group_name`. Otherwise,
an exception is thrown
-----
If a component group (identified by its name) is found multiple times, only the first one is saved
-----
:param filename: Path to the .csv input file
:param cp_list: Component params are saved in this list
:param cgp_list: Component Group params are saved in this list
:raises:
  Exception: MissingInformation If the required columns are not found
:raises:
  Exception: FileNotFound If input file is not found




.. py:class:: MSDataAggregatingConsumer
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _MSDataAggregatingConsumer


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MSDataAggregatingConsumer.html




.. py:method:: MSDataAggregatingConsumer.consumeChromatogram
   :module: pyopenms.pyopenms_4


Cython signature: void consumeChromatogram(MSChromatogram &)




.. py:method:: MSDataAggregatingConsumer.consumeSpectrum
   :module: pyopenms.pyopenms_4


Cython signature: void consumeSpectrum(MSSpectrum & s)




.. py:method:: MSDataAggregatingConsumer.setExpectedSize
   :module: pyopenms.pyopenms_4


Cython signature: void setExpectedSize(size_t expectedSpectra, size_t expectedChromatograms)




.. py:method:: MSDataAggregatingConsumer.setExperimentalSettings
   :module: pyopenms.pyopenms_4


Cython signature: void setExperimentalSettings(ExperimentalSettings & exp)




.. py:class:: MSPGenericFile
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _MSPGenericFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MSPGenericFile.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: MSPGenericFile.getDefaultParameters
   :module: pyopenms.pyopenms_4


Cython signature: void getDefaultParameters(Param & params)
Returns the class' default parameters




.. py:method:: MSPGenericFile.getDefaults
   :module: pyopenms.pyopenms_4


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: MSPGenericFile.getName
   :module: pyopenms.pyopenms_4


Cython signature: String getName()
Returns the name




.. py:method:: MSPGenericFile.getParameters
   :module: pyopenms.pyopenms_4


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: MSPGenericFile.getSubsections
   :module: pyopenms.pyopenms_4


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: MSPGenericFile.load
   :module: pyopenms.pyopenms_4


Cython signature: void load(const String & filename, MSExperiment & library)


Load the file's data and metadata, and save it into an `MSExperiment`
-----
:param filename: Path to the MSP input file
:param library: The variable into which the extracted information will be saved
:raises:
  Exception: FileNotFound If the file could not be found




.. py:method:: MSPGenericFile.setName
   :module: pyopenms.pyopenms_4


Cython signature: void setName(const String &)
Sets the name




.. py:method:: MSPGenericFile.setParameters
   :module: pyopenms.pyopenms_4


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: MSPGenericFile.store
   :module: pyopenms.pyopenms_4


Cython signature: void store(const String & filename, const MSExperiment & library)


Save data and metadata into a file
-----
:param filename: Path to the MSP input file
:param library: The variable from which extracted information will be saved
:raises:
  Exception: FileNotWritable If the file is not writable




.. py:class:: MSSim
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _MSSim


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MSSim.html




.. py:method:: MSSim.getChargeConsensus
   :module: pyopenms.pyopenms_4


Cython signature: ConsensusMap getChargeConsensus()
Returns the charge consensus map of simulated features




.. py:method:: MSSim.getContaminants
   :module: pyopenms.pyopenms_4


Cython signature: FeatureMap getContaminants()
Returns the contaminants feature map of simulated features




.. py:method:: MSSim.getExperiment
   :module: pyopenms.pyopenms_4


Cython signature: MSExperiment getExperiment()
Returns the simulated experiment




.. py:method:: MSSim.getFeatureIdentifications
   :module: pyopenms.pyopenms_4


Cython signature: void getFeatureIdentifications(libcpp_vector[ProteinIdentification] & proteins, libcpp_vector[PeptideIdentification] & peptides)
Returns the simulated identifications (proteins and peptides) from feature annotations




.. py:method:: MSSim.getIdentifications
   :module: pyopenms.pyopenms_4


Cython signature: void getIdentifications(libcpp_vector[ProteinIdentification] & proteins, libcpp_vector[PeptideIdentification] & peptides)
Returns the simulated identifications (proteins and peptides)




.. py:method:: MSSim.getLabelingConsensus
   :module: pyopenms.pyopenms_4


Cython signature: ConsensusMap getLabelingConsensus()
Returns the labeling consensus map of simulated features




.. py:method:: MSSim.getMS2Identifications
   :module: pyopenms.pyopenms_4


Cython signature: void getMS2Identifications(libcpp_vector[ProteinIdentification] & proteins, libcpp_vector[PeptideIdentification] & peptides)
Returns the simulated MS2 identifications (proteins and peptides)




.. py:method:: MSSim.getParameters
   :module: pyopenms.pyopenms_4


Cython signature: Param getParameters()
Returns the default parameters for simulation including the labeling technique with name `labeling_name`




.. py:method:: MSSim.getPeakMap
   :module: pyopenms.pyopenms_4


Cython signature: MSExperiment getPeakMap()
Returns the labeling consensus map of simulated features




.. py:method:: MSSim.getSimulatedFeatures
   :module: pyopenms.pyopenms_4


Cython signature: FeatureMap getSimulatedFeatures()
Returns the simulated features




.. py:method:: MSSim.simulate
   :module: pyopenms.pyopenms_4


Cython signature: void simulate(shared_ptr[SimRandomNumberGenerator] rnd_gen, libcpp_vector[libcpp_vector[SimProtein]] peptides)


General purpose function to simulate a mass spectrometry run
-----
:param rnd_gen: Random number generator which will be passed to the different classes
:param peptides: List of peptides and abundances that will be simulated




.. py:class:: MapAlignmentEvaluationAlgorithmRecall
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _MapAlignmentEvaluationAlgorithmRecall


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MapAlignmentEvaluationAlgorithmRecall.html
 -- Inherits from ['MapAlignmentEvaluationAlgorithm']




.. py:method:: MapAlignmentEvaluationAlgorithmRecall.getProductName
   :module: pyopenms.pyopenms_4


Cython signature: String getProductName()
Returns the product name (for the Factory)




.. py:method:: MapAlignmentEvaluationAlgorithmRecall.registerChildren
   :module: pyopenms.pyopenms_4


Cython signature: void registerChildren()
Register all derived classes in this method




.. py:class:: NASequence
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _NASequence


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1NASequence.html


 Representation of an RNA sequence
 This class represents nucleic acid sequences in OpenMS. An NASequence
 instance primarily contains a sequence of ribonucleotides.




.. py:attribute:: NASequence.NASFragmentType
   :module: pyopenms.pyopenms_4


alias of :py:class:`pyopenms.pyopenms_4.__NASFragmentType`


.. py:method:: NASequence.empty
   :module: pyopenms.pyopenms_4


Cython signature: bool empty()
Check if sequence is empty




.. py:method:: NASequence.fromString
   :module: pyopenms.pyopenms_4


Cython signature: NASequence fromString(const String & s)




.. py:method:: NASequence.get
   :module: pyopenms.pyopenms_4


Cython signature: const Ribonucleotide * get(size_t index)
Returns the residue at position index




.. py:method:: NASequence.getAverageWeight
   :module: pyopenms.pyopenms_4


- Cython signature: double getAverageWeight()
  Returns the average weight of the peptide


- Cython signature: double getAverageWeight(NASFragmentType type_, int charge)




.. py:method:: NASequence.getFivePrimeMod
   :module: pyopenms.pyopenms_4


Cython signature: const Ribonucleotide * getFivePrimeMod()
Returns the name (ID) of the N-terminal modification, or an empty string if none is set




.. py:method:: NASequence.getFormula
   :module: pyopenms.pyopenms_4


- Cython signature: EmpiricalFormula getFormula()
  Returns the formula of the peptide


- Cython signature: EmpiricalFormula getFormula(NASFragmentType type_, int charge)




.. py:method:: NASequence.getMonoWeight
   :module: pyopenms.pyopenms_4


- Cython signature: double getMonoWeight()
  Returns the mono isotopic weight of the peptide


- Cython signature: double getMonoWeight(NASFragmentType type_, int charge)




.. py:method:: NASequence.getPrefix
   :module: pyopenms.pyopenms_4


Cython signature: NASequence getPrefix(size_t length)
Returns a peptide sequence of the first index residues




.. py:method:: NASequence.getSequence
   :module: pyopenms.pyopenms_4


Cython signature: libcpp_vector[const Ribonucleotide *] getSequence()




.. py:method:: NASequence.getSubsequence
   :module: pyopenms.pyopenms_4


Cython signature: NASequence getSubsequence(size_t start, size_t length)
Returns a peptide sequence of number residues, beginning at position index




.. py:method:: NASequence.getSuffix
   :module: pyopenms.pyopenms_4


Cython signature: NASequence getSuffix(size_t length)
Returns a peptide sequence of the last index residues




.. py:method:: NASequence.getThreePrimeMod
   :module: pyopenms.pyopenms_4


Cython signature: const Ribonucleotide * getThreePrimeMod()




.. py:method:: NASequence.set
   :module: pyopenms.pyopenms_4


Cython signature: void set(size_t index, const Ribonucleotide * r)
Sets the residue at position index




.. py:method:: NASequence.setFivePrimeMod
   :module: pyopenms.pyopenms_4


Cython signature: void setFivePrimeMod(const Ribonucleotide * modification)
Sets the 5' modification




.. py:method:: NASequence.setSequence
   :module: pyopenms.pyopenms_4


Cython signature: void setSequence(const libcpp_vector[const Ribonucleotide *] & seq)




.. py:method:: NASequence.setThreePrimeMod
   :module: pyopenms.pyopenms_4


Cython signature: void setThreePrimeMod(const Ribonucleotide * modification)
Sets the 3' modification




.. py:method:: NASequence.size
   :module: pyopenms.pyopenms_4


Cython signature: size_t size()
Returns the number of residues




.. py:method:: NASequence.toString
   :module: pyopenms.pyopenms_4


Cython signature: String toString()
Returns the peptide as string with modifications embedded in brackets




.. py:class:: OMSSAXMLFile
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _OMSSAXMLFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1OMSSAXMLFile.html
 -- Inherits from ['XMLFile']




.. py:method:: OMSSAXMLFile.getVersion
   :module: pyopenms.pyopenms_4


Cython signature: String getVersion()
Return the version of the schema




.. py:method:: OMSSAXMLFile.load
   :module: pyopenms.pyopenms_4


Cython signature: void load(const String & filename, ProteinIdentification & protein_identification, libcpp_vector[PeptideIdentification] & id_data, bool load_proteins, bool load_empty_hits)


Loads data from a OMSSAXML file
-----
:param filename: The file to be loaded
:param protein_identification: Protein identifications belonging to the whole experiment
:param id_data: The identifications with m/z and RT
:param load_proteins: If this flag is set to false, the protein identifications are not loaded
:param load_empty_hits: Many spectra will not return a hit. Report empty peptide identifications?




.. py:method:: OMSSAXMLFile.setModificationDefinitionsSet
   :module: pyopenms.pyopenms_4


Cython signature: void setModificationDefinitionsSet(ModificationDefinitionsSet rhs)
Sets the valid modifications




.. py:class:: OnDiscMSExperiment
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _OnDiscMSExperiment


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1OnDiscMSExperiment.html


 Representation of a mass spectrometry experiment on disk.




.. py:method:: OnDiscMSExperiment.getChromatogram
   :module: pyopenms.pyopenms_4


Cython signature: MSChromatogram getChromatogram(size_t id)


Returns a single chromatogram
-----
:param id: The index of the chromatogram




.. py:method:: OnDiscMSExperiment.getChromatogramById
   :module: pyopenms.pyopenms_4


Cython signature: shared_ptr[_Interfaces_Chromatogram] getChromatogramById(int id_)
Returns a single chromatogram




.. py:method:: OnDiscMSExperiment.getChromatogramByNativeId
   :module: pyopenms.pyopenms_4


Cython signature: MSChromatogram getChromatogramByNativeId(String id)


Returns a single chromatogram
-----
:param id: The native identifier of the chromatogram




.. py:method:: OnDiscMSExperiment.getExperimentalSettings
   :module: pyopenms.pyopenms_4


Cython signature: shared_ptr[const ExperimentalSettings] getExperimentalSettings()
Returns the meta information of this experiment (const access)




.. py:method:: OnDiscMSExperiment.getMetaData
   :module: pyopenms.pyopenms_4


Cython signature: shared_ptr[MSExperiment] getMetaData()
Returns the meta information of this experiment




.. py:method:: OnDiscMSExperiment.getNrChromatograms
   :module: pyopenms.pyopenms_4


Cython signature: size_t getNrChromatograms()
Returns the total number of chromatograms available




.. py:method:: OnDiscMSExperiment.getNrSpectra
   :module: pyopenms.pyopenms_4


Cython signature: size_t getNrSpectra()
Returns the total number of spectra available




.. py:method:: OnDiscMSExperiment.getSpectrum
   :module: pyopenms.pyopenms_4


Cython signature: MSSpectrum getSpectrum(size_t id)


Returns a single spectrum
-----
:param id: The index of the spectrum




.. py:method:: OnDiscMSExperiment.getSpectrumById
   :module: pyopenms.pyopenms_4


Cython signature: shared_ptr[_Interfaces_Spectrum] getSpectrumById(int id_)
Returns a single spectrum




.. py:method:: OnDiscMSExperiment.getSpectrumByNativeId
   :module: pyopenms.pyopenms_4


Cython signature: MSSpectrum getSpectrumByNativeId(String id)


Returns a single spectrum
-----
:param id: The native identifier of the spectrum




.. py:method:: OnDiscMSExperiment.openFile
   :module: pyopenms.pyopenms_4


         - Cython signature: bool openFile(String filename)
         - Cython signature: bool openFile(String filename, bool skipLoadingMetaData)


Open a specific file on disk
-----
This tries to read the indexed mzML by parsing the index and then reading the meta information into memory
-----
returns: Whether the parsing of the file was successful (if false, the file most likely was not an indexed mzML file)




.. py:method:: OnDiscMSExperiment.setSkipXMLChecks
   :module: pyopenms.pyopenms_4


Cython signature: void setSkipXMLChecks(bool skip)
Sets whether to skip some XML checks and be fast instead




.. py:class:: OpenMSBuildInfo
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _OpenMSBuildInfo


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::Internal_1_1OpenMSBuildInfo.html




.. py:method:: OpenMSBuildInfo.getBuildType
   :module: pyopenms.pyopenms_4


Cython signature: String getBuildType()




.. py:method:: OpenMSBuildInfo.getOpenMPMaxNumThreads
   :module: pyopenms.pyopenms_4


Cython signature: size_t getOpenMPMaxNumThreads()




.. py:method:: OpenMSBuildInfo.isOpenMPEnabled
   :module: pyopenms.pyopenms_4


Cython signature: bool isOpenMPEnabled()




.. py:class:: OpenMSOSInfo
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _OpenMSOSInfo


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::Internal_1_1OpenMSOSInfo.html




.. py:method:: OpenMSOSInfo.getArchAsString
   :module: pyopenms.pyopenms_4


Cython signature: String getArchAsString()




.. py:method:: OpenMSOSInfo.getBinaryArchitecture
   :module: pyopenms.pyopenms_4


Cython signature: String getBinaryArchitecture()




.. py:method:: OpenMSOSInfo.getOSAsString
   :module: pyopenms.pyopenms_4


Cython signature: String getOSAsString()




.. py:method:: OpenMSOSInfo.getOSInfo
   :module: pyopenms.pyopenms_4


Cython signature: OpenMSOSInfo getOSInfo()




.. py:method:: OpenMSOSInfo.getOSVersionAsString
   :module: pyopenms.pyopenms_4


Cython signature: String getOSVersionAsString()




.. py:class:: OriginAnnotationFormat
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`




.. py:attribute:: OriginAnnotationFormat.FILE_ORIGIN
   :module: pyopenms.pyopenms_4
   :value: 0




.. py:attribute:: OriginAnnotationFormat.ID_MERGE_INDEX
   :module: pyopenms.pyopenms_4
   :value: 2




.. py:attribute:: OriginAnnotationFormat.MAP_INDEX
   :module: pyopenms.pyopenms_4
   :value: 1




.. py:attribute:: OriginAnnotationFormat.SIZE_OF_ORIGIN_ANNOTATION_FORMAT
   :module: pyopenms.pyopenms_4
   :value: 4




.. py:attribute:: OriginAnnotationFormat.UNKNOWN_OAF
   :module: pyopenms.pyopenms_4
   :value: 3




.. py:method:: OriginAnnotationFormat.getMapping
   :module: pyopenms.pyopenms_4




.. py:class:: PSLPFormulation
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _PSLPFormulation


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1PSLPFormulation.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: PSLPFormulation.createAndSolveILPForInclusionListCreation
   :module: pyopenms.pyopenms_4


Cython signature: void createAndSolveILPForInclusionListCreation(PrecursorIonSelectionPreprocessing & preprocessing, unsigned int ms2_spectra_per_rt_bin, unsigned int max_list_size, FeatureMap & precursors, bool solve_ILP)
Find a set of precursors, so that the protein coverage is maximal and that the number of precursors per bin is not exceeded




.. py:method:: PSLPFormulation.createAndSolveILPForKnownLCMSMapFeatureBased
   :module: pyopenms.pyopenms_4


Cython signature: void createAndSolveILPForKnownLCMSMapFeatureBased(FeatureMap & features, MSExperiment & experiment, libcpp_vector[IndexTriple] & variable_indices, libcpp_vector[libcpp_vector[libcpp_pair[size_t,size_t]]] & mass_ranges, libcpp_set[int] & charges_set, unsigned int ms2_spectra_per_rt_bin, libcpp_vector[int] & solution_indices)


Encode ILP formulation for a given LC-MS map, but unknown protein sample
-----
:param features: FeatureMap with all possible precursors
:param experiment: Input raw data
:param variable_indices: Assignment of feature indices and ILP variables
:param mass_ranges: Feature borders as indices in the raw data
:param charges_set: Allowed charge states
:param ms2_spectra_per_rt_bin: Allowed number of precursors per rt bin
:param solution_indices: Indices of ILP variables that are in the optimal solution




.. py:method:: PSLPFormulation.getDefaults
   :module: pyopenms.pyopenms_4


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: PSLPFormulation.getLPSolver
   :module: pyopenms.pyopenms_4


Cython signature: SOLVER getLPSolver()




.. py:method:: PSLPFormulation.getName
   :module: pyopenms.pyopenms_4


Cython signature: String getName()
Returns the name




.. py:method:: PSLPFormulation.getParameters
   :module: pyopenms.pyopenms_4


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: PSLPFormulation.getSubsections
   :module: pyopenms.pyopenms_4


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: PSLPFormulation.setLPSolver
   :module: pyopenms.pyopenms_4


Cython signature: void setLPSolver(SOLVER solver)




.. py:method:: PSLPFormulation.setName
   :module: pyopenms.pyopenms_4


Cython signature: void setName(const String &)
Sets the name




.. py:method:: PSLPFormulation.setParameters
   :module: pyopenms.pyopenms_4


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: PSLPFormulation.solveILP
   :module: pyopenms.pyopenms_4


Cython signature: void solveILP(libcpp_vector[int] & solution_indices)
Solve the ILP




.. py:method:: PSLPFormulation.updateRTConstraintsForSequentialILP
   :module: pyopenms.pyopenms_4


Cython signature: void updateRTConstraintsForSequentialILP(size_t & rt_index, unsigned int ms2_spectra_per_rt_bin, size_t max_rt_index)




.. py:method:: PSLPFormulation.updateStepSizeConstraint
   :module: pyopenms.pyopenms_4


Cython signature: void updateStepSizeConstraint(size_t iteration, unsigned int step_size)




.. py:class:: ParamEntry
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _ParamEntry


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::Param_1_1ParamEntry.html




.. py:attribute:: ParamEntry.description
   :module: pyopenms.pyopenms_4




.. py:attribute:: ParamEntry.max_float
   :module: pyopenms.pyopenms_4




.. py:attribute:: ParamEntry.max_int
   :module: pyopenms.pyopenms_4




.. py:attribute:: ParamEntry.min_float
   :module: pyopenms.pyopenms_4




.. py:attribute:: ParamEntry.min_int
   :module: pyopenms.pyopenms_4




.. py:attribute:: ParamEntry.name
   :module: pyopenms.pyopenms_4




.. py:attribute:: ParamEntry.tags
   :module: pyopenms.pyopenms_4




.. py:attribute:: ParamEntry.valid_strings
   :module: pyopenms.pyopenms_4




.. py:attribute:: ParamEntry.value
   :module: pyopenms.pyopenms_4




.. py:class:: PeakIntensityPredictor
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _PeakIntensityPredictor


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1PeakIntensityPredictor.html


 Predict peak heights of peptides based on Local Linear Map model
 -----
 This class can be used for predictions of peptide peak heights
 (referred to as intensities) from a peptide sequence
 by a Local Linear Map (LLM) model
 A general introduction to the Peak Intensity Predictor (PIP)
 can be found in the PIP Tutorial
 -----
 The predictor performs only on the peptides sequences as an AASequence representation. Every sequence is
 transformed to an 18 dimensional data vector representing certain
 chemical characteristics and is loaded into the trained LocalLinearMap model to
 find the predicted peptides peak intensity
 -----
 Every predictor object calls the appropriate LocalLinearMap model, transforms
 the given sequences and creates a vector space in which the LocalLinearMap
 performs




.. py:method:: PeakIntensityPredictor.predict
   :module: pyopenms.pyopenms_4


         - Cython signature: double predict(AASequence & sequence)
           Returns predicted peak heights (intensities) of a single peptide


         - Cython signature: double predict(AASequence & sequence, libcpp_vector[double] & add_info)


Returns predicted peak heights (intensities) of a single peptide
-----
Some additional information for each peptide is returned in `add_info`
For each peptide a row with the following components is returned:
- 0: x coordinates of associated cluster (first column)
- 1: y coordinates of associated cluster (2nd column)
- 2: error (RMSE) of the peptide to the associated next prototype (cluster center)
         - Cython signature: libcpp_vector[double] predict(libcpp_vector[AASequence] & sequences)
         - Cython signature: libcpp_vector[double] predict(libcpp_vector[AASequence] & sequences, libcpp_vector[libcpp_vector[double]] & add_info)




.. py:class:: PeakWidthEstimator
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _PeakWidthEstimator


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1PeakWidthEstimator.html


 Rough estimation of the peak width at m/z
 -----
 Based on the peaks of the dataset (peak position & width) and the peak
 boundaries as reported by the PeakPickerHiRes, the typical peak width is
 estimated for arbitrary m/z using a spline interpolationThis struct can be used to store both peak or feature indices`




.. py:method:: PeakWidthEstimator.getPeakWidth
   :module: pyopenms.pyopenms_4


Cython signature: double getPeakWidth(double mz)
Returns the estimated peak width at m/z




.. py:class:: ProgressLogger
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _ProgressLogger


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ProgressLogger.html


 Base class for all classes that want to report their progress
 -----
 Per default the progress log is disabled. Use setLogType to enable it
 -----
 Use startProgress, setProgress and endProgress for the actual logging




.. py:method:: ProgressLogger.endProgress
   :module: pyopenms.pyopenms_4


Cython signature: void endProgress()
Ends the progress display




.. py:method:: ProgressLogger.getLogType
   :module: pyopenms.pyopenms_4


Cython signature: LogType getLogType()
Returns the type of progress log being used




.. py:method:: ProgressLogger.nextProgress
   :module: pyopenms.pyopenms_4


Cython signature: void nextProgress()
Increment progress by 1 (according to range begin-end)




.. py:method:: ProgressLogger.setLogType
   :module: pyopenms.pyopenms_4


Cython signature: void setLogType(LogType)
Sets the progress log that should be used. The default type is NONE!




.. py:method:: ProgressLogger.setProgress
   :module: pyopenms.pyopenms_4


Cython signature: void setProgress(ptrdiff_t value)
Sets the current progress




.. py:method:: ProgressLogger.startProgress
   :module: pyopenms.pyopenms_4


Cython signature: void startProgress(ptrdiff_t begin, ptrdiff_t end, String label)




.. py:class:: RANSAC
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _RANSAC[_RansacModelLinear]


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::Math_1_1RANSAC[_RansacModelLinear].html




.. py:method:: RANSAC.ransac
   :module: pyopenms.pyopenms_4


Cython signature: libcpp_vector[libcpp_pair[double,double]] ransac(libcpp_vector[libcpp_pair[double,double]] pairs, size_t n, size_t k, double t, size_t d, bool relative_d)




.. py:class:: RANSACParam
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _RANSACParam


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::Math_1_1RANSACParam.html




.. py:attribute:: RANSACParam.d
   :module: pyopenms.pyopenms_4




.. py:attribute:: RANSACParam.k
   :module: pyopenms.pyopenms_4




.. py:attribute:: RANSACParam.n
   :module: pyopenms.pyopenms_4




.. py:attribute:: RANSACParam.relative_d
   :module: pyopenms.pyopenms_4




.. py:attribute:: RANSACParam.t
   :module: pyopenms.pyopenms_4




.. py:method:: RANSACParam.toString
   :module: pyopenms.pyopenms_4


Cython signature: String toString()




.. py:class:: RANSACQuadratic
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _RANSAC[_RansacModelQuadratic]


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::Math_1_1RANSAC[_RansacModelQuadratic].html




.. py:method:: RANSACQuadratic.ransac
   :module: pyopenms.pyopenms_4


Cython signature: libcpp_vector[libcpp_pair[double,double]] ransac(libcpp_vector[libcpp_pair[double,double]] pairs, size_t n, size_t k, double t, size_t d, bool relative_d)




.. py:class:: RNPxlReport
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _RNPxlReport


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1RNPxlReport.html




.. py:method:: RNPxlReport.annotate
   :module: pyopenms.pyopenms_4


Cython signature: libcpp_vector[RNPxlReportRow] annotate(MSExperiment & spectra, libcpp_vector[PeptideIdentification] & peptide_ids, double marker_ions_tolerance)




.. py:class:: RNPxlReportRow
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _RNPxlReportRow


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1RNPxlReportRow.html




.. py:attribute:: RNPxlReportRow.RNA
   :module: pyopenms.pyopenms_4




.. py:attribute:: RNPxlReportRow.RNA_weight
   :module: pyopenms.pyopenms_4




.. py:attribute:: RNPxlReportRow.abs_prec_error
   :module: pyopenms.pyopenms_4




.. py:attribute:: RNPxlReportRow.accessions
   :module: pyopenms.pyopenms_4




.. py:attribute:: RNPxlReportRow.best_localization
   :module: pyopenms.pyopenms_4




.. py:attribute:: RNPxlReportRow.best_localization_score
   :module: pyopenms.pyopenms_4




.. py:attribute:: RNPxlReportRow.charge
   :module: pyopenms.pyopenms_4




.. py:method:: RNPxlReportRow.getString
   :module: pyopenms.pyopenms_4


Cython signature: String getString(const String & separator)




.. py:attribute:: RNPxlReportRow.localization_scores
   :module: pyopenms.pyopenms_4




.. py:attribute:: RNPxlReportRow.m_2H
   :module: pyopenms.pyopenms_4




.. py:attribute:: RNPxlReportRow.m_3H
   :module: pyopenms.pyopenms_4




.. py:attribute:: RNPxlReportRow.m_4H
   :module: pyopenms.pyopenms_4




.. py:attribute:: RNPxlReportRow.m_H
   :module: pyopenms.pyopenms_4




.. py:attribute:: RNPxlReportRow.marker_ions
   :module: pyopenms.pyopenms_4




.. py:attribute:: RNPxlReportRow.no_id
   :module: pyopenms.pyopenms_4




.. py:attribute:: RNPxlReportRow.original_mz
   :module: pyopenms.pyopenms_4




.. py:attribute:: RNPxlReportRow.peptide
   :module: pyopenms.pyopenms_4




.. py:attribute:: RNPxlReportRow.peptide_weight
   :module: pyopenms.pyopenms_4




.. py:attribute:: RNPxlReportRow.rank
   :module: pyopenms.pyopenms_4




.. py:attribute:: RNPxlReportRow.rel_prec_error
   :module: pyopenms.pyopenms_4




.. py:attribute:: RNPxlReportRow.rt
   :module: pyopenms.pyopenms_4




.. py:attribute:: RNPxlReportRow.score
   :module: pyopenms.pyopenms_4




.. py:attribute:: RNPxlReportRow.xl_weight
   :module: pyopenms.pyopenms_4




.. py:class:: RNPxlReportRowHeader
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _RNPxlReportRowHeader


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1RNPxlReportRowHeader.html




.. py:method:: RNPxlReportRowHeader.getString
   :module: pyopenms.pyopenms_4


Cython signature: String getString(const String & separator)




.. py:class:: ReactionMonitoringTransition
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _ReactionMonitoringTransition


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ReactionMonitoringTransition.html
 -- Inherits from ['CVTermList']




.. py:method:: ReactionMonitoringTransition.addCVTerm
   :module: pyopenms.pyopenms_4


Cython signature: void addCVTerm(CVTerm & term)
Adds a CV term




.. py:method:: ReactionMonitoringTransition.addIntermediateProduct
   :module: pyopenms.pyopenms_4


Cython signature: void addIntermediateProduct(TraMLProduct product)




.. py:method:: ReactionMonitoringTransition.addPrecursorCVTerm
   :module: pyopenms.pyopenms_4


Cython signature: void addPrecursorCVTerm(CVTerm & cv_term)
Adds precursor CV Term




.. py:method:: ReactionMonitoringTransition.addPredictionTerm
   :module: pyopenms.pyopenms_4


Cython signature: void addPredictionTerm(CVTerm & prediction)
Adds prediction term




.. py:method:: ReactionMonitoringTransition.addProductCVTerm
   :module: pyopenms.pyopenms_4


Cython signature: void addProductCVTerm(CVTerm & cv_term)




.. py:method:: ReactionMonitoringTransition.clearMetaInfo
   :module: pyopenms.pyopenms_4


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: ReactionMonitoringTransition.consumeCVTerms
   :module: pyopenms.pyopenms_4


Cython signature: void consumeCVTerms(Map[String,libcpp_vector[CVTerm]] cv_term_map)
Merges the given map into the member map, no duplicate checking




.. py:method:: ReactionMonitoringTransition.empty
   :module: pyopenms.pyopenms_4


Cython signature: bool empty()




.. py:method:: ReactionMonitoringTransition.getCVTerms
   :module: pyopenms.pyopenms_4


Cython signature: Map[String,libcpp_vector[CVTerm]] getCVTerms()
Returns the accession string of the term




.. py:method:: ReactionMonitoringTransition.getCompoundRef
   :module: pyopenms.pyopenms_4


Cython signature: String getCompoundRef()




.. py:method:: ReactionMonitoringTransition.getDecoyTransitionType
   :module: pyopenms.pyopenms_4


Cython signature: DecoyTransitionType getDecoyTransitionType()
Returns the type of transition (target or decoy)




.. py:method:: ReactionMonitoringTransition.getIntermediateProducts
   :module: pyopenms.pyopenms_4


Cython signature: libcpp_vector[TraMLProduct] getIntermediateProducts()




.. py:method:: ReactionMonitoringTransition.getKeys
   :module: pyopenms.pyopenms_4


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: ReactionMonitoringTransition.getLibraryIntensity
   :module: pyopenms.pyopenms_4


Cython signature: double getLibraryIntensity()
Returns the library intensity (ion count or normalized ion count from a spectral library)




.. py:method:: ReactionMonitoringTransition.getMetaValue
   :module: pyopenms.pyopenms_4


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: ReactionMonitoringTransition.getName
   :module: pyopenms.pyopenms_4


Cython signature: String getName()




.. py:method:: ReactionMonitoringTransition.getNativeID
   :module: pyopenms.pyopenms_4


Cython signature: String getNativeID()




.. py:method:: ReactionMonitoringTransition.getPeptideRef
   :module: pyopenms.pyopenms_4


Cython signature: String getPeptideRef()




.. py:method:: ReactionMonitoringTransition.getPrecursorCVTermList
   :module: pyopenms.pyopenms_4


Cython signature: CVTermList getPrecursorCVTermList()
Obtains the list of CV Terms for the precursor




.. py:method:: ReactionMonitoringTransition.getPrecursorMZ
   :module: pyopenms.pyopenms_4


Cython signature: double getPrecursorMZ()
Returns the precursor mz (Q1 value)




.. py:method:: ReactionMonitoringTransition.getPrediction
   :module: pyopenms.pyopenms_4


Cython signature: Prediction getPrediction()
Obtains the Prediction object




.. py:method:: ReactionMonitoringTransition.getProduct
   :module: pyopenms.pyopenms_4


Cython signature: TraMLProduct getProduct()




.. py:method:: ReactionMonitoringTransition.getProductChargeState
   :module: pyopenms.pyopenms_4


Cython signature: int getProductChargeState()
Returns the charge state of the product




.. py:method:: ReactionMonitoringTransition.getProductMZ
   :module: pyopenms.pyopenms_4


Cython signature: double getProductMZ()




.. py:method:: ReactionMonitoringTransition.getRetentionTime
   :module: pyopenms.pyopenms_4


Cython signature: RetentionTime getRetentionTime()




.. py:method:: ReactionMonitoringTransition.hasCVTerm
   :module: pyopenms.pyopenms_4


Cython signature: bool hasCVTerm(String accession)




.. py:method:: ReactionMonitoringTransition.hasPrecursorCVTerms
   :module: pyopenms.pyopenms_4


Cython signature: bool hasPrecursorCVTerms()
Returns true if precursor CV Terms exist (means it is safe to call getPrecursorCVTermList)




.. py:method:: ReactionMonitoringTransition.hasPrediction
   :module: pyopenms.pyopenms_4


Cython signature: bool hasPrediction()
Returns true if a Prediction object exists (means it is safe to call getPrediction)




.. py:method:: ReactionMonitoringTransition.isDetectingTransition
   :module: pyopenms.pyopenms_4


Cython signature: bool isDetectingTransition()




.. py:method:: ReactionMonitoringTransition.isIdentifyingTransition
   :module: pyopenms.pyopenms_4


Cython signature: bool isIdentifyingTransition()




.. py:method:: ReactionMonitoringTransition.isMetaEmpty
   :module: pyopenms.pyopenms_4


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: ReactionMonitoringTransition.isProductChargeStateSet
   :module: pyopenms.pyopenms_4


Cython signature: bool isProductChargeStateSet()
Returns true if charge state of product is already set




.. py:method:: ReactionMonitoringTransition.isQuantifyingTransition
   :module: pyopenms.pyopenms_4


Cython signature: bool isQuantifyingTransition()




.. py:method:: ReactionMonitoringTransition.metaRegistry
   :module: pyopenms.pyopenms_4


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: ReactionMonitoringTransition.metaValueExists
   :module: pyopenms.pyopenms_4


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: ReactionMonitoringTransition.removeMetaValue
   :module: pyopenms.pyopenms_4


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: ReactionMonitoringTransition.replaceCVTerm
   :module: pyopenms.pyopenms_4


Cython signature: void replaceCVTerm(CVTerm & term)
Replaces the specified CV term




.. py:method:: ReactionMonitoringTransition.replaceCVTerms
   :module: pyopenms.pyopenms_4


Cython signature: void replaceCVTerms(libcpp_vector[CVTerm] cv_terms, String accession)




.. py:method:: ReactionMonitoringTransition.setCVTerms
   :module: pyopenms.pyopenms_4


Cython signature: void setCVTerms(libcpp_vector[CVTerm] & terms)
Sets the CV terms




.. py:method:: ReactionMonitoringTransition.setCompoundRef
   :module: pyopenms.pyopenms_4


Cython signature: void setCompoundRef(const String & compound_ref)




.. py:method:: ReactionMonitoringTransition.setDecoyTransitionType
   :module: pyopenms.pyopenms_4


Cython signature: void setDecoyTransitionType(DecoyTransitionType & d)
Sets the type of transition (target or decoy)




.. py:method:: ReactionMonitoringTransition.setDetectingTransition
   :module: pyopenms.pyopenms_4


Cython signature: void setDetectingTransition(bool val)




.. py:method:: ReactionMonitoringTransition.setIdentifyingTransition
   :module: pyopenms.pyopenms_4


Cython signature: void setIdentifyingTransition(bool val)




.. py:method:: ReactionMonitoringTransition.setIntermediateProducts
   :module: pyopenms.pyopenms_4


Cython signature: void setIntermediateProducts(libcpp_vector[TraMLProduct] & products)




.. py:method:: ReactionMonitoringTransition.setLibraryIntensity
   :module: pyopenms.pyopenms_4


Cython signature: void setLibraryIntensity(double intensity)
Sets the library intensity (ion count or normalized ion count from a spectral library)




.. py:method:: ReactionMonitoringTransition.setMetaValue
   :module: pyopenms.pyopenms_4


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:method:: ReactionMonitoringTransition.setName
   :module: pyopenms.pyopenms_4


Cython signature: void setName(String name)




.. py:method:: ReactionMonitoringTransition.setNativeID
   :module: pyopenms.pyopenms_4


Cython signature: void setNativeID(String name)




.. py:method:: ReactionMonitoringTransition.setPeptideRef
   :module: pyopenms.pyopenms_4


Cython signature: void setPeptideRef(String peptide_ref)




.. py:method:: ReactionMonitoringTransition.setPrecursorCVTermList
   :module: pyopenms.pyopenms_4


Cython signature: void setPrecursorCVTermList(CVTermList & list_)
Sets a list of precursor CV Terms




.. py:method:: ReactionMonitoringTransition.setPrecursorMZ
   :module: pyopenms.pyopenms_4


Cython signature: void setPrecursorMZ(double)
Sets the precursor mz (Q1 value)




.. py:method:: ReactionMonitoringTransition.setPrediction
   :module: pyopenms.pyopenms_4


Cython signature: void setPrediction(Prediction & prediction)
Sets prediction




.. py:method:: ReactionMonitoringTransition.setProduct
   :module: pyopenms.pyopenms_4


Cython signature: void setProduct(TraMLProduct product)




.. py:method:: ReactionMonitoringTransition.setProductMZ
   :module: pyopenms.pyopenms_4


Cython signature: void setProductMZ(double)




.. py:method:: ReactionMonitoringTransition.setQuantifyingTransition
   :module: pyopenms.pyopenms_4


Cython signature: void setQuantifyingTransition(bool val)




.. py:method:: ReactionMonitoringTransition.setRetentionTime
   :module: pyopenms.pyopenms_4


Cython signature: void setRetentionTime(RetentionTime rt)




.. py:class:: RipFileContent
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _RipFileContent


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::IDRipper_1_1RipFileContent.html




.. py:method:: RipFileContent.getPeptideIdentifications
   :module: pyopenms.pyopenms_4


Cython signature: libcpp_vector[PeptideIdentification] getPeptideIdentifications()




.. py:method:: RipFileContent.getProteinIdentifications
   :module: pyopenms.pyopenms_4


Cython signature: libcpp_vector[ProteinIdentification] getProteinIdentifications()




.. py:class:: RipFileIdentifier
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _RipFileIdentifier


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::IDRipper_1_1RipFileIdentifier.html




.. py:method:: RipFileIdentifier.getFileOriginIdx
   :module: pyopenms.pyopenms_4


Cython signature: unsigned int getFileOriginIdx()




.. py:method:: RipFileIdentifier.getIdentRunIdx
   :module: pyopenms.pyopenms_4


Cython signature: unsigned int getIdentRunIdx()




.. py:method:: RipFileIdentifier.getOriginFullname
   :module: pyopenms.pyopenms_4


Cython signature: String getOriginFullname()




.. py:method:: RipFileIdentifier.getOutputBasename
   :module: pyopenms.pyopenms_4


Cython signature: String getOutputBasename()




.. py:class:: SVMData
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _SVMData


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SVMData.html




.. py:attribute:: SVMData.labels
   :module: pyopenms.pyopenms_4




.. py:method:: SVMData.load
   :module: pyopenms.pyopenms_4


Cython signature: bool load(const String & filename)




.. py:method:: SVMData.store
   :module: pyopenms.pyopenms_4


Cython signature: bool store(const String & filename)




.. py:class:: SVMWrapper
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _SVMWrapper


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SVMWrapper.html




.. py:attribute:: SVMWrapper.SVM_kernel_type
   :module: pyopenms.pyopenms_4


alias of :py:class:`pyopenms.pyopenms_4.__SVM_kernel_type`


.. py:attribute:: SVMWrapper.SVM_parameter_type
   :module: pyopenms.pyopenms_4


alias of :py:class:`pyopenms.pyopenms_4.__SVM_parameter_type`


.. py:method:: SVMWrapper.calculateGaussTable
   :module: pyopenms.pyopenms_4


Cython signature: void calculateGaussTable(size_t border_length, double sigma, libcpp_vector[double] & gauss_table)




.. py:method:: SVMWrapper.createRandomPartitions
   :module: pyopenms.pyopenms_4


Cython signature: void createRandomPartitions(SVMData & problem, size_t number, libcpp_vector[SVMData] & problems)




.. py:method:: SVMWrapper.getDoubleParameter
   :module: pyopenms.pyopenms_4


Cython signature: double getDoubleParameter(SVM_parameter_type type_)




.. py:method:: SVMWrapper.getIntParameter
   :module: pyopenms.pyopenms_4


Cython signature: int getIntParameter(SVM_parameter_type type_)




.. py:method:: SVMWrapper.getPValue
   :module: pyopenms.pyopenms_4


Cython signature: double getPValue(double sigma1, double sigma2, libcpp_pair[double,double] point)




.. py:method:: SVMWrapper.getSVRProbability
   :module: pyopenms.pyopenms_4


Cython signature: double getSVRProbability()




.. py:method:: SVMWrapper.getSignificanceBorders
   :module: pyopenms.pyopenms_4


Cython signature: void getSignificanceBorders(SVMData & data, libcpp_pair[double,double] & sigmas, double confidence, size_t number_of_runs, size_t number_of_partitions, double step_size, size_t max_iterations)




.. py:method:: SVMWrapper.loadModel
   :module: pyopenms.pyopenms_4


Cython signature: void loadModel(String modelFilename)
The svm-model is loaded. After this, the svm is ready for prediction




.. py:method:: SVMWrapper.mergePartitions
   :module: pyopenms.pyopenms_4


Cython signature: void mergePartitions(libcpp_vector[SVMData] & problems, size_t except_, SVMData & merged_problem)




.. py:method:: SVMWrapper.predict
   :module: pyopenms.pyopenms_4


Cython signature: void predict(SVMData & problem, libcpp_vector[double] & results)
The prediction process is started and the results are stored in 'predicted_labels'




.. py:method:: SVMWrapper.saveModel
   :module: pyopenms.pyopenms_4


Cython signature: void saveModel(String modelFilename)
The model of the trained svm is saved into 'modelFilename'




.. py:method:: SVMWrapper.setParameter
   :module: pyopenms.pyopenms_4


- Cython signature: void setParameter(SVM_parameter_type type_, int value)
- Cython signature: void setParameter(SVM_parameter_type type_, double value)




.. py:method:: SVMWrapper.setTrainingSample
   :module: pyopenms.pyopenms_4


Cython signature: void setTrainingSample(SVMData & training_sample)




.. py:method:: SVMWrapper.setWeights
   :module: pyopenms.pyopenms_4


Cython signature: void setWeights(libcpp_vector[int] & weight_labels, libcpp_vector[double] & weights)




.. py:method:: SVMWrapper.train
   :module: pyopenms.pyopenms_4


Cython signature: int train(SVMData & problem)
The svm is trained with the data stored in the 'svm_problem' structure




.. py:class:: SavitzkyGolayFilter
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _SavitzkyGolayFilter


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SavitzkyGolayFilter.html
 -- Inherits from ['DefaultParamHandler', 'ProgressLogger']




.. py:method:: SavitzkyGolayFilter.endProgress
   :module: pyopenms.pyopenms_4


Cython signature: void endProgress()
Ends the progress display




.. py:method:: SavitzkyGolayFilter.filter
   :module: pyopenms.pyopenms_4


Cython signature: void filter(MSSpectrum & spectrum)
Removed the noise from an MSSpectrum containing profile data




.. py:method:: SavitzkyGolayFilter.filterExperiment
   :module: pyopenms.pyopenms_4


Cython signature: void filterExperiment(MSExperiment & exp)
Removed the noise from an MSExperiment containing profile data




.. py:method:: SavitzkyGolayFilter.getDefaults
   :module: pyopenms.pyopenms_4


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: SavitzkyGolayFilter.getLogType
   :module: pyopenms.pyopenms_4


Cython signature: LogType getLogType()
Returns the type of progress log being used




.. py:method:: SavitzkyGolayFilter.getName
   :module: pyopenms.pyopenms_4


Cython signature: String getName()
Returns the name




.. py:method:: SavitzkyGolayFilter.getParameters
   :module: pyopenms.pyopenms_4


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: SavitzkyGolayFilter.getSubsections
   :module: pyopenms.pyopenms_4


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: SavitzkyGolayFilter.nextProgress
   :module: pyopenms.pyopenms_4


Cython signature: void nextProgress()
Increment progress by 1 (according to range begin-end)




.. py:method:: SavitzkyGolayFilter.setLogType
   :module: pyopenms.pyopenms_4


Cython signature: void setLogType(LogType)
Sets the progress log that should be used. The default type is NONE!




.. py:method:: SavitzkyGolayFilter.setName
   :module: pyopenms.pyopenms_4


Cython signature: void setName(const String &)
Sets the name




.. py:method:: SavitzkyGolayFilter.setParameters
   :module: pyopenms.pyopenms_4


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: SavitzkyGolayFilter.setProgress
   :module: pyopenms.pyopenms_4


Cython signature: void setProgress(ptrdiff_t value)
Sets the current progress




.. py:method:: SavitzkyGolayFilter.startProgress
   :module: pyopenms.pyopenms_4


Cython signature: void startProgress(ptrdiff_t begin, ptrdiff_t end, String label)




.. py:class:: ScanMode
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`




.. py:attribute:: ScanMode.ABSORPTION
   :module: pyopenms.pyopenms_4
   :value: 14




.. py:attribute:: ScanMode.CNG
   :module: pyopenms.pyopenms_4
   :value: 7




.. py:attribute:: ScanMode.CNL
   :module: pyopenms.pyopenms_4
   :value: 8




.. py:attribute:: ScanMode.CRM
   :module: pyopenms.pyopenms_4
   :value: 6




.. py:attribute:: ScanMode.EMC
   :module: pyopenms.pyopenms_4
   :value: 10




.. py:attribute:: ScanMode.EMISSION
   :module: pyopenms.pyopenms_4
   :value: 13




.. py:attribute:: ScanMode.EMR
   :module: pyopenms.pyopenms_4
   :value: 12




.. py:attribute:: ScanMode.MASSSPECTRUM
   :module: pyopenms.pyopenms_4
   :value: 1




.. py:attribute:: ScanMode.MS1SPECTRUM
   :module: pyopenms.pyopenms_4
   :value: 2




.. py:attribute:: ScanMode.MSNSPECTRUM
   :module: pyopenms.pyopenms_4
   :value: 3




.. py:attribute:: ScanMode.PRECURSOR
   :module: pyopenms.pyopenms_4
   :value: 9




.. py:attribute:: ScanMode.SIM
   :module: pyopenms.pyopenms_4
   :value: 4




.. py:attribute:: ScanMode.SIZE_OF_SCANMODE
   :module: pyopenms.pyopenms_4
   :value: 15




.. py:attribute:: ScanMode.SRM
   :module: pyopenms.pyopenms_4
   :value: 5




.. py:attribute:: ScanMode.TDF
   :module: pyopenms.pyopenms_4
   :value: 11




.. py:attribute:: ScanMode.UNKNOWN
   :module: pyopenms.pyopenms_4
   :value: 0




.. py:method:: ScanMode.getMapping
   :module: pyopenms.pyopenms_4




.. py:class:: SignalToNoiseEstimatorMedian
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _SignalToNoiseEstimatorMedian[_MSSpectrum]


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SignalToNoiseEstimatorMedian[_MSSpectrum].html




.. py:method:: SignalToNoiseEstimatorMedian.getHistogramRightmostPercent
   :module: pyopenms.pyopenms_4


Cython signature: double getHistogramRightmostPercent()




.. py:method:: SignalToNoiseEstimatorMedian.getSignalToNoise
   :module: pyopenms.pyopenms_4


Cython signature: double getSignalToNoise(size_t index)




.. py:method:: SignalToNoiseEstimatorMedian.getSparseWindowPercent
   :module: pyopenms.pyopenms_4


Cython signature: double getSparseWindowPercent()




.. py:method:: SignalToNoiseEstimatorMedian.init
   :module: pyopenms.pyopenms_4


Cython signature: void init(MSSpectrum & spectrum)




.. py:class:: SignalToNoiseEstimatorMedianChrom
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`




.. py:attribute:: SignalToNoiseEstimatorMedianChrom.IntensityThresholdCalculation
   :module: pyopenms.pyopenms_4


alias of :py:class:`pyopenms.pyopenms_4.__IntensityThresholdCalculation`


.. py:method:: SignalToNoiseEstimatorMedianChrom.getSignalToNoise
   :module: pyopenms.pyopenms_4




.. py:method:: SignalToNoiseEstimatorMedianChrom.init
   :module: pyopenms.pyopenms_4




.. py:class:: SiriusAdapterAlgorithm
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _SiriusAdapterAlgorithm


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SiriusAdapterAlgorithm.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: SiriusAdapterAlgorithm.callSiriusQProcess
   :module: pyopenms.pyopenms_4


Cython signature: libcpp_vector[String] callSiriusQProcess(const String & tmp_ms_file, const String & tmp_out_dir, String & executable, const String & out_csifingerid, bool decoy_generation)


Call SIRIUS with QProcess
-----
:param tmp_ms_file: Path to temporary .ms file
:param tmp_out_dir: Path to temporary output folder
:param executable: Path to executable
:param out_csifingerid: Path to CSI:FingerID output (can be empty)




.. py:method:: SiriusAdapterAlgorithm.determineSiriusExecutable
   :module: pyopenms.pyopenms_4


Cython signature: String determineSiriusExecutable(String & executable)


Checks if the provided String points to a valid SIRIUS executable, otherwise tries
to select the executable from the environment
-----
:param executable: Path to the potential executable
:returns: Path to SIRIUS executable




.. py:method:: SiriusAdapterAlgorithm.getDefaults
   :module: pyopenms.pyopenms_4


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: SiriusAdapterAlgorithm.getFilterByNumMassTraces
   :module: pyopenms.pyopenms_4


Cython signature: unsigned int getFilterByNumMassTraces()




.. py:method:: SiriusAdapterAlgorithm.getIsotopePatternIterations
   :module: pyopenms.pyopenms_4


Cython signature: int getIsotopePatternIterations()




.. py:method:: SiriusAdapterAlgorithm.getName
   :module: pyopenms.pyopenms_4


Cython signature: String getName()
Returns the name




.. py:method:: SiriusAdapterAlgorithm.getNumberOfCSIFingerIDCandidates
   :module: pyopenms.pyopenms_4


Cython signature: int getNumberOfCSIFingerIDCandidates()




.. py:method:: SiriusAdapterAlgorithm.getNumberOfSiriusCandidates
   :module: pyopenms.pyopenms_4


Cython signature: int getNumberOfSiriusCandidates()




.. py:method:: SiriusAdapterAlgorithm.getParameters
   :module: pyopenms.pyopenms_4


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: SiriusAdapterAlgorithm.getPrecursorMzTolerance
   :module: pyopenms.pyopenms_4


Cython signature: double getPrecursorMzTolerance()




.. py:method:: SiriusAdapterAlgorithm.getPrecursorRtTolerance
   :module: pyopenms.pyopenms_4


Cython signature: double getPrecursorRtTolerance()




.. py:method:: SiriusAdapterAlgorithm.getSubsections
   :module: pyopenms.pyopenms_4


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: SiriusAdapterAlgorithm.isFeatureOnly
   :module: pyopenms.pyopenms_4


Cython signature: bool isFeatureOnly()




.. py:method:: SiriusAdapterAlgorithm.isNoMasstraceInfoIsotopePattern
   :module: pyopenms.pyopenms_4


Cython signature: bool isNoMasstraceInfoIsotopePattern()




.. py:method:: SiriusAdapterAlgorithm.logFeatureSpectraNumber
   :module: pyopenms.pyopenms_4


Cython signature: void logFeatureSpectraNumber(const String & featureinfo, FeatureMapping_FeatureToMs2Indices & feature_mapping, MSExperiment & spectra)


Logs number of features and spectra used
-----
Prints the number of features and spectra used (OPENMS_LOG_INFO)
-----
:param featureinfo: Path to featureXML
:param feature_mapping: FeatureToMs2Indices with feature mapping
:param spectra: Input of MSExperiment with spectra information




.. py:method:: SiriusAdapterAlgorithm.precursorMzToleranceUnitIsPPM
   :module: pyopenms.pyopenms_4


Cython signature: bool precursorMzToleranceUnitIsPPM()




.. py:method:: SiriusAdapterAlgorithm.preprocessingSirius
   :module: pyopenms.pyopenms_4


Cython signature: void preprocessingSirius(const String & featureinfo, MSExperiment & spectra, FeatureMapping_FeatureMappingInfo & fm_info, FeatureMapping_FeatureToMs2Indices & feature_mapping)


Preprocessing needed for SIRIUS
-----
Filter number of masstraces and perform feature mapping
-----
:param featureinfo: Path to featureXML
:param spectra: Input of MSExperiment with spectra information
:param fm_info: Emtpy - stores FeatureMaps and KDTreeMaps internally
:param feature_mapping: Empty FeatureToMs2Indices




.. py:method:: SiriusAdapterAlgorithm.setName
   :module: pyopenms.pyopenms_4


Cython signature: void setName(const String &)
Sets the name




.. py:method:: SiriusAdapterAlgorithm.setParameters
   :module: pyopenms.pyopenms_4


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: SiriusAdapterAlgorithm.sortSiriusWorkspacePathsByScanIndex
   :module: pyopenms.pyopenms_4


Cython signature: void sortSiriusWorkspacePathsByScanIndex(libcpp_vector[String] & subdirs)




.. py:class:: SiriusAdapterIdentification
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _SiriusAdapterIdentification


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::SiriusMzTabWriter_1_1SiriusAdapterIdentification.html




.. py:attribute:: SiriusAdapterIdentification.feature_id
   :module: pyopenms.pyopenms_4




.. py:attribute:: SiriusAdapterIdentification.hits
   :module: pyopenms.pyopenms_4




.. py:attribute:: SiriusAdapterIdentification.mz
   :module: pyopenms.pyopenms_4




.. py:attribute:: SiriusAdapterIdentification.native_ids
   :module: pyopenms.pyopenms_4




.. py:attribute:: SiriusAdapterIdentification.rt
   :module: pyopenms.pyopenms_4




.. py:attribute:: SiriusAdapterIdentification.scan_index
   :module: pyopenms.pyopenms_4




.. py:attribute:: SiriusAdapterIdentification.scan_number
   :module: pyopenms.pyopenms_4




.. py:class:: SiriusTemporaryFileSystemObjects
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _SiriusTemporaryFileSystemObjects


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SiriusTemporaryFileSystemObjects.html




.. py:method:: SiriusTemporaryFileSystemObjects.getTmpDir
   :module: pyopenms.pyopenms_4


Cython signature: String getTmpDir()




.. py:method:: SiriusTemporaryFileSystemObjects.getTmpMsFile
   :module: pyopenms.pyopenms_4


Cython signature: String getTmpMsFile()




.. py:method:: SiriusTemporaryFileSystemObjects.getTmpOutDir
   :module: pyopenms.pyopenms_4


Cython signature: String getTmpOutDir()




.. py:class:: SpectrumAnnotator
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _SpectrumAnnotator


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SpectrumAnnotator.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: SpectrumAnnotator.addIonMatchStatistics
   :module: pyopenms.pyopenms_4


Cython signature: void addIonMatchStatistics(PeptideIdentification & pi, MSSpectrum & spec, TheoreticalSpectrumGenerator & tg, SpectrumAlignment & sa)


Adds ion match statistics to `pi` PeptideIdentifcation
-----
:param pi: A spectrum identifications to be annotated, looking up matches from a spectrum and the theoretical spectrum inferred from the identifications sequence
:param spec: A PeakSpectrum containing the peaks from which the `pi` identifications are made
:param tg: A TheoreticalSpectrumGenerator to infer the theoretical spectrum. Its own parameters define which ion types are referred
:param sa: A SpectrumAlignment to match the theoretical spectrum with the measured. Its own parameters define the match tolerance




.. py:method:: SpectrumAnnotator.annotateMatches
   :module: pyopenms.pyopenms_4


Cython signature: void annotateMatches(MSSpectrum & spec, PeptideHit & ph, TheoreticalSpectrumGenerator & tg, SpectrumAlignment & sa)


Adds ion match annotation to the `spec` input spectrum
-----
:param spec: A PeakSpectrum containing the peaks from which the `pi` identifications are made
:param ph: A spectrum identifications to be used for the annotation, looking up matches from a spectrum and the theoretical spectrum inferred from the identifications sequence
:param tg: A TheoreticalSpectrumGenerator to infer the theoretical spectrum. Its own parameters define which ion types are referred
:param sa: A SpectrumAlignment to match the theoretical spectrum with the measured. Its own parameters define the match tolerance




.. py:method:: SpectrumAnnotator.getDefaults
   :module: pyopenms.pyopenms_4


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: SpectrumAnnotator.getName
   :module: pyopenms.pyopenms_4


Cython signature: String getName()
Returns the name




.. py:method:: SpectrumAnnotator.getParameters
   :module: pyopenms.pyopenms_4


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: SpectrumAnnotator.getSubsections
   :module: pyopenms.pyopenms_4


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: SpectrumAnnotator.setName
   :module: pyopenms.pyopenms_4


Cython signature: void setName(const String &)
Sets the name




.. py:method:: SpectrumAnnotator.setParameters
   :module: pyopenms.pyopenms_4


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: SpectrumLookup
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _SpectrumLookup


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SpectrumLookup.html




.. py:method:: SpectrumLookup.addReferenceFormat
   :module: pyopenms.pyopenms_4


Cython signature: void addReferenceFormat(String regexp)


Register a possible format for a spectrum reference
-----
:param regexp: Regular expression defining the format




.. py:method:: SpectrumLookup.empty
   :module: pyopenms.pyopenms_4


Cython signature: bool empty()
Check if any spectra were set




.. py:method:: SpectrumLookup.extractScanNumber
   :module: pyopenms.pyopenms_4


Cython signature: int extractScanNumber(const String & native_id, const String & native_id_type_accession)




.. py:method:: SpectrumLookup.findByIndex
   :module: pyopenms.pyopenms_4


Cython signature: size_t findByIndex(size_t index, bool count_from_one)


Look up spectrum by index (position in the vector of spectra)
-----
:param index: Index to look up
:param count_from_one: Do indexes start counting at one (default zero)?
:returns: Index of the spectrum that matched




.. py:method:: SpectrumLookup.findByNativeID
   :module: pyopenms.pyopenms_4


Cython signature: size_t findByNativeID(String native_id)


Look up spectrum by native ID
-----
:param native_id: Native ID to look up
:returns: Index of the spectrum that matched




.. py:method:: SpectrumLookup.findByRT
   :module: pyopenms.pyopenms_4


Cython signature: size_t findByRT(double rt)


Look up spectrum by retention time (RT)
-----
:param rt: Retention time to look up
:returns: Index of the spectrum that matched




.. py:method:: SpectrumLookup.findByReference
   :module: pyopenms.pyopenms_4


Cython signature: size_t findByReference(String spectrum_ref)


Look up spectrum by reference
-----
:param spectrum_ref: Spectrum reference to parse
:returns: Index of the spectrum that matched




.. py:method:: SpectrumLookup.findByScanNumber
   :module: pyopenms.pyopenms_4


Cython signature: size_t findByScanNumber(size_t scan_number)


Look up spectrum by scan number (extracted from the native ID)
-----
:param scan_number: Scan number to look up
:returns: Index of the spectrum that matched




.. py:method:: SpectrumLookup.readSpectra
   :module: pyopenms.pyopenms_4


Cython signature: void readSpectra(MSExperiment spectra, String scan_regexp)


Read and index spectra for later look-up
-----
:param spectra: Container of spectra
:param scan_regexp: Regular expression for matching scan numbers in spectrum native IDs (must contain the named group "?<SCAN>")




.. py:attribute:: SpectrumLookup.rt_tolerance
   :module: pyopenms.pyopenms_4




.. py:class:: SpectrumMetaData
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _SpectrumMetaData


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SpectrumMetaData.html




.. py:attribute:: SpectrumMetaData.ms_level
   :module: pyopenms.pyopenms_4




.. py:attribute:: SpectrumMetaData.native_id
   :module: pyopenms.pyopenms_4




.. py:attribute:: SpectrumMetaData.precursor_charge
   :module: pyopenms.pyopenms_4




.. py:attribute:: SpectrumMetaData.precursor_mz
   :module: pyopenms.pyopenms_4




.. py:attribute:: SpectrumMetaData.precursor_rt
   :module: pyopenms.pyopenms_4




.. py:attribute:: SpectrumMetaData.rt
   :module: pyopenms.pyopenms_4




.. py:attribute:: SpectrumMetaData.scan_number
   :module: pyopenms.pyopenms_4




.. py:class:: SpectrumMetaDataLookup
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _SpectrumMetaDataLookup


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SpectrumMetaDataLookup.html
 -- Inherits from ['SpectrumLookup']




.. py:method:: SpectrumMetaDataLookup.addMissingRTsToPeptideIDs
   :module: pyopenms.pyopenms_4


Cython signature: bool addMissingRTsToPeptideIDs(libcpp_vector[PeptideIdentification], String filename, bool stop_on_error)




.. py:method:: SpectrumMetaDataLookup.addMissingSpectrumReferences
   :module: pyopenms.pyopenms_4


Cython signature: bool addMissingSpectrumReferences(libcpp_vector[PeptideIdentification], String filename, bool stop_on_error, bool override_spectra_data, bool override_spectra_references, libcpp_vector[ProteinIdentification] proteins)




.. py:method:: SpectrumMetaDataLookup.addReferenceFormat
   :module: pyopenms.pyopenms_4


Cython signature: void addReferenceFormat(String regexp)


Register a possible format for a spectrum reference
-----
:param regexp: Regular expression defining the format




.. py:method:: SpectrumMetaDataLookup.empty
   :module: pyopenms.pyopenms_4


Cython signature: bool empty()
Check if any spectra were set




.. py:method:: SpectrumMetaDataLookup.extractScanNumber
   :module: pyopenms.pyopenms_4


Cython signature: int extractScanNumber(const String & native_id, const String & native_id_type_accession)




.. py:method:: SpectrumMetaDataLookup.findByIndex
   :module: pyopenms.pyopenms_4


Cython signature: size_t findByIndex(size_t index, bool count_from_one)


Look up spectrum by index (position in the vector of spectra)
-----
:param index: Index to look up
:param count_from_one: Do indexes start counting at one (default zero)?
:returns: Index of the spectrum that matched




.. py:method:: SpectrumMetaDataLookup.findByNativeID
   :module: pyopenms.pyopenms_4


Cython signature: size_t findByNativeID(String native_id)


Look up spectrum by native ID
-----
:param native_id: Native ID to look up
:returns: Index of the spectrum that matched




.. py:method:: SpectrumMetaDataLookup.findByRT
   :module: pyopenms.pyopenms_4


Cython signature: size_t findByRT(double rt)


Look up spectrum by retention time (RT)
-----
:param rt: Retention time to look up
:returns: Index of the spectrum that matched




.. py:method:: SpectrumMetaDataLookup.findByReference
   :module: pyopenms.pyopenms_4


Cython signature: size_t findByReference(String spectrum_ref)


Look up spectrum by reference
-----
:param spectrum_ref: Spectrum reference to parse
:returns: Index of the spectrum that matched




.. py:method:: SpectrumMetaDataLookup.findByScanNumber
   :module: pyopenms.pyopenms_4


Cython signature: size_t findByScanNumber(size_t scan_number)


Look up spectrum by scan number (extracted from the native ID)
-----
:param scan_number: Scan number to look up
:returns: Index of the spectrum that matched




.. py:method:: SpectrumMetaDataLookup.getSpectrumMetaData
   :module: pyopenms.pyopenms_4


Cython signature: void getSpectrumMetaData(MSSpectrum spectrum, SpectrumMetaData & meta)




.. py:method:: SpectrumMetaDataLookup.readSpectra
   :module: pyopenms.pyopenms_4


         - Cython signature: void readSpectra(MSExperiment spectra, String scan_regexp, bool get_precursor_rt)


Read spectra and store their meta data
-----
:param SpectrumContainer: Spectrum container class, must support `size` and `operator[]`
:param spectra: Container of spectra
:param scan_regexp: Regular expression for matching scan numbers in spectrum native IDs (must contain the named group "?<SCAN>")
:param get_precursor_rt: Assign precursor retention times? (This relies on all precursor spectra being present and in the right order.)
         - Cython signature: void readSpectra(MSExperiment spectra, String scan_regexp)


Read and index spectra for later look-up
-----
:param spectra: Container of spectra
:param scan_regexp: Regular expression for matching scan numbers in spectrum native IDs (must contain the named group "?<SCAN>")




.. py:method:: SpectrumMetaDataLookup.setSpectraDataRef
   :module: pyopenms.pyopenms_4


Cython signature: void setSpectraDataRef(const String & spectra_data)




.. py:class:: SplineInterpolatedPeaks
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _SplineInterpolatedPeaks


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SplineInterpolatedPeaks.html




.. py:method:: SplineInterpolatedPeaks.getNavigator
   :module: pyopenms.pyopenms_4


Cython signature: SplineSpectrum_Navigator getNavigator(double scaling)




.. py:method:: SplineInterpolatedPeaks.getPosMax
   :module: pyopenms.pyopenms_4


Cython signature: double getPosMax()




.. py:method:: SplineInterpolatedPeaks.getPosMin
   :module: pyopenms.pyopenms_4


Cython signature: double getPosMin()




.. py:method:: SplineInterpolatedPeaks.size
   :module: pyopenms.pyopenms_4


Cython signature: int size()




.. py:class:: SplinePackage
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _SplinePackage


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SplinePackage.html




.. py:method:: SplinePackage.eval
   :module: pyopenms.pyopenms_4


Cython signature: double eval(double pos)
Returns interpolated intensity position `pos`




.. py:method:: SplinePackage.getPosMax
   :module: pyopenms.pyopenms_4


Cython signature: double getPosMax()
Returns the maximum position for which the spline fit is valid




.. py:method:: SplinePackage.getPosMin
   :module: pyopenms.pyopenms_4


Cython signature: double getPosMin()
Returns the minimum position for which the spline fit is valid




.. py:method:: SplinePackage.getPosStepWidth
   :module: pyopenms.pyopenms_4


Cython signature: double getPosStepWidth()
Returns a sensible position step width for the package




.. py:method:: SplinePackage.isInPackage
   :module: pyopenms.pyopenms_4


Cython signature: bool isInPackage(double pos)
Returns true if position in




.. py:class:: SplineSpectrum_Navigator
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _SplineSpectrum_Navigator


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SplineSpectrum_Navigator.html




.. py:method:: SplineSpectrum_Navigator.eval
   :module: pyopenms.pyopenms_4


Cython signature: double eval(double pos)




.. py:method:: SplineSpectrum_Navigator.getNextPos
   :module: pyopenms.pyopenms_4


Cython signature: double getNextPos(double pos)




.. py:class:: SqrtMower
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _SqrtMower


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SqrtMower.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: SqrtMower.filterPeakMap
   :module: pyopenms.pyopenms_4


Cython signature: void filterPeakMap(MSExperiment & exp)




.. py:method:: SqrtMower.filterPeakSpectrum
   :module: pyopenms.pyopenms_4


Cython signature: void filterPeakSpectrum(MSSpectrum & spec)




.. py:method:: SqrtMower.filterSpectrum
   :module: pyopenms.pyopenms_4


Cython signature: void filterSpectrum(MSSpectrum & spec)




.. py:method:: SqrtMower.getDefaults
   :module: pyopenms.pyopenms_4


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: SqrtMower.getName
   :module: pyopenms.pyopenms_4


Cython signature: String getName()
Returns the name




.. py:method:: SqrtMower.getParameters
   :module: pyopenms.pyopenms_4


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: SqrtMower.getSubsections
   :module: pyopenms.pyopenms_4


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: SqrtMower.setName
   :module: pyopenms.pyopenms_4


Cython signature: void setName(const String &)
Sets the name




.. py:method:: SqrtMower.setParameters
   :module: pyopenms.pyopenms_4


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: TSE_Match
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _TSE_Match


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1TSE_Match.html




.. py:attribute:: TSE_Match.score
   :module: pyopenms.pyopenms_4




.. py:attribute:: TSE_Match.spectrum
   :module: pyopenms.pyopenms_4




.. py:class:: Tagger
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _Tagger


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1Tagger.html


 Constructor for Tagger
 -----
 The parameter `max_charge_` should be >= `min_charge_`
 Also `max_tag_length` should be >= `min_tag_length`
 -----
 :param min_tag_length: The minimal sequence tag length
 :param ppm: The tolerance for matching residue masses to peak delta masses
 :param max_tag_length: The maximal sequence tag length
 :param min_charge: Minimal fragment charge considered for each sequence tag
 :param max_charge: Maximal fragment charge considered for each sequence tag
 :param fixed_mods: A list of modification names. The modified residues replace the unmodified versions
 :param var_mods: A list of modification names. The modified residues are added as additional entries to the list of residues




.. py:method:: Tagger.getTag
   :module: pyopenms.pyopenms_4


         - Cython signature: void getTag(const libcpp_vector[double] & mzs, libcpp_vector[libcpp_utf8_string] & tags)


Generate tags from mass vector `mzs`
-----
The parameter `tags` is filled with one string per sequence tag
It uses the standard residues from ResidueDB including
the fixed and variable modifications given to the constructor
-----
:param mzs: A vector of mz values, containing the mz values from a centroided fragment spectrum
:param tags: The vector of tags, that is filled with this function
         - Cython signature: void getTag(const MSSpectrum & spec, libcpp_vector[libcpp_utf8_string] & tags)


Generate tags from an MSSpectrum
-----
The parameter `tags` is filled with one string per sequence tag
It uses the standard residues from ResidueDB including
the fixed and variable modifications given to the constructor
-----
:param spec: A centroided fragment spectrum
:param tags: The vector of tags, that is filled with this function




.. py:method:: Tagger.setMaxCharge
   :module: pyopenms.pyopenms_4


Cython signature: void setMaxCharge(size_t max_charge)


Change the maximal charge considered by the tagger
-----
Allows to change the maximal considered charge e.g. based on a spectra
precursor charge without calling the constructor multiple times
-----
:param max_charge: The new maximal charge




.. py:class:: TargetedSpectraExtractor
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _TargetedSpectraExtractor


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1TargetedSpectraExtractor.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: TargetedSpectraExtractor.annotateSpectra
   :module: pyopenms.pyopenms_4


- Cython signature: void annotateSpectra(libcpp_vector[MSSpectrum] &, TargetedExperiment &, libcpp_vector[MSSpectrum] &, FeatureMap &)
- Cython signature: void annotateSpectra(libcpp_vector[MSSpectrum] &, TargetedExperiment &, libcpp_vector[MSSpectrum] &)
- Cython signature: void annotateSpectra(libcpp_vector[MSSpectrum] &, FeatureMap &, FeatureMap &, libcpp_vector[MSSpectrum] &)




.. py:method:: TargetedSpectraExtractor.extractSpectra
   :module: pyopenms.pyopenms_4


- Cython signature: void extractSpectra(MSExperiment &, TargetedExperiment &, libcpp_vector[MSSpectrum] &, FeatureMap &)
- Cython signature: void extractSpectra(MSExperiment &, TargetedExperiment &, libcpp_vector[MSSpectrum] &)




.. py:method:: TargetedSpectraExtractor.getDefaultParameters
   :module: pyopenms.pyopenms_4


Cython signature: void getDefaultParameters(Param &)




.. py:method:: TargetedSpectraExtractor.getDefaults
   :module: pyopenms.pyopenms_4


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: TargetedSpectraExtractor.getName
   :module: pyopenms.pyopenms_4


Cython signature: String getName()
Returns the name




.. py:method:: TargetedSpectraExtractor.getParameters
   :module: pyopenms.pyopenms_4


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: TargetedSpectraExtractor.getSubsections
   :module: pyopenms.pyopenms_4


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: TargetedSpectraExtractor.mergeFeatures
   :module: pyopenms.pyopenms_4


Cython signature: void mergeFeatures(FeatureMap &, FeatureMap &)




.. py:method:: TargetedSpectraExtractor.pickSpectrum
   :module: pyopenms.pyopenms_4


Cython signature: void pickSpectrum(MSSpectrum &, MSSpectrum &)




.. py:method:: TargetedSpectraExtractor.scoreSpectra
   :module: pyopenms.pyopenms_4


- Cython signature: void scoreSpectra(libcpp_vector[MSSpectrum] &, libcpp_vector[MSSpectrum] &, FeatureMap &, libcpp_vector[MSSpectrum] &)
- Cython signature: void scoreSpectra(libcpp_vector[MSSpectrum] &, libcpp_vector[MSSpectrum] &, libcpp_vector[MSSpectrum] &)




.. py:method:: TargetedSpectraExtractor.searchSpectrum
   :module: pyopenms.pyopenms_4


Cython signature: void searchSpectrum(FeatureMap &, FeatureMap &)




.. py:method:: TargetedSpectraExtractor.selectSpectra
   :module: pyopenms.pyopenms_4


- Cython signature: void selectSpectra(libcpp_vector[MSSpectrum] &, FeatureMap &, libcpp_vector[MSSpectrum] &, FeatureMap &)
- Cython signature: void selectSpectra(libcpp_vector[MSSpectrum] &, libcpp_vector[MSSpectrum] &)




.. py:method:: TargetedSpectraExtractor.setName
   :module: pyopenms.pyopenms_4


Cython signature: void setName(const String &)
Sets the name




.. py:method:: TargetedSpectraExtractor.setParameters
   :module: pyopenms.pyopenms_4


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: TargetedSpectraExtractor.storeSpectraMSP
   :module: pyopenms.pyopenms_4


Cython signature: void storeSpectraMSP(const String &, MSExperiment &)




.. py:method:: TargetedSpectraExtractor.storeSpectraTraML
   :module: pyopenms.pyopenms_4


Cython signature: void storeSpectraTraML(const String &, FeatureMap &, FeatureMap &)




.. py:class:: TextFile
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _TextFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1TextFile.html




.. py:method:: TextFile.addLine
   :module: pyopenms.pyopenms_4


Cython signature: void addLine(const String line)




.. py:method:: TextFile.load
   :module: pyopenms.pyopenms_4


Cython signature: void load(const String & filename, bool trim_linesalse, int first_n1)


Loads data from a text file
-----
:param filename: The input file name
:param trim_lines: Whether or not the lines are trimmed when reading them from file
:param first_n: If set, only `first_n` lines the lines from the beginning of the file are read
:param skip_empty_lines: Should empty lines be skipped? If used in conjunction with `trim_lines`, also lines with only whitespace will be skipped. Skipped lines do not count towards the total number of read lines




.. py:method:: TextFile.store
   :module: pyopenms.pyopenms_4


Cython signature: void store(const String & filename)
Writes the data to a file




.. py:class:: TransformationDescription
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _TransformationDescription


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::TransformationDescription_1_1TransformationDescription.html




.. py:method:: TransformationDescription.apply
   :module: pyopenms.pyopenms_4


Cython signature: double apply(double)
Applies the transformation to `value`




.. py:method:: TransformationDescription.fitModel
   :module: pyopenms.pyopenms_4


- Cython signature: void fitModel(String model_type, Param params)
  Fits a model to the data


- Cython signature: void fitModel(String model_type)
  Fits a model to the data




.. py:method:: TransformationDescription.getDataPoints
   :module: pyopenms.pyopenms_4


Cython signature: libcpp_vector[TM_DataPoint] getDataPoints()
Returns the data points




.. py:method:: TransformationDescription.getDeviations
   :module: pyopenms.pyopenms_4


Cython signature: void getDeviations(libcpp_vector[double] & diffs, bool do_apply, bool do_sort)


Get the deviations between the data pairs
-----
:param diffs: Output
:param do_apply: Get deviations after applying the model?
:param do_sort: Sort `diffs` before returning?




.. py:method:: TransformationDescription.getModelParameters
   :module: pyopenms.pyopenms_4


Cython signature: Param getModelParameters()
Returns the model parameters




.. py:method:: TransformationDescription.getModelType
   :module: pyopenms.pyopenms_4


Cython signature: String getModelType()
Gets the type of the fitted model




.. py:method:: TransformationDescription.getModelTypes
   :module: pyopenms.pyopenms_4


Cython signature: void getModelTypes(StringList result)




.. py:method:: TransformationDescription.getStatistics
   :module: pyopenms.pyopenms_4


Cython signature: TransformationStatistics getStatistics()




.. py:method:: TransformationDescription.invert
   :module: pyopenms.pyopenms_4


Cython signature: void invert()
Computes an (approximate) inverse of the transformation




.. py:method:: TransformationDescription.setDataPoints
   :module: pyopenms.pyopenms_4


- Cython signature: void setDataPoints(libcpp_vector[TM_DataPoint] & data)
  Sets the data points. Removes the model that was previously fitted to the data (if any)


- Cython signature: void setDataPoints(libcpp_vector[libcpp_pair[double,double]] & data)
  Sets the data points (backwards-compatible overload). Removes the model that was previously fitted to the data (if any)




.. py:class:: TransformationStatistics
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _TransformationStatistics


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::TransformationDescription_1_1TransformationStatistics.html




.. py:attribute:: TransformationStatistics.percentiles_after
   :module: pyopenms.pyopenms_4




.. py:attribute:: TransformationStatistics.percentiles_before
   :module: pyopenms.pyopenms_4




.. py:attribute:: TransformationStatistics.xmax
   :module: pyopenms.pyopenms_4




.. py:attribute:: TransformationStatistics.xmin
   :module: pyopenms.pyopenms_4




.. py:attribute:: TransformationStatistics.ymax
   :module: pyopenms.pyopenms_4




.. py:attribute:: TransformationStatistics.ymin
   :module: pyopenms.pyopenms_4




.. py:class:: TransformationXMLFile
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _TransformationXMLFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1TransformationXMLFile.html




.. py:method:: TransformationXMLFile.load
   :module: pyopenms.pyopenms_4


Cython signature: void load(String, TransformationDescription &, bool fit_model)




.. py:method:: TransformationXMLFile.store
   :module: pyopenms.pyopenms_4


Cython signature: void store(String, TransformationDescription)




.. py:class:: UnimodXMLFile
   :module: pyopenms.pyopenms_4


   Bases: :py:class:`object`


Cython implementation of _UnimodXMLFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1UnimodXMLFile.html
 -- Inherits from ['XMLFile']




.. py:method:: UnimodXMLFile.getVersion
   :module: pyopenms.pyopenms_4


Cython signature: String getVersion()
Return the version of the schema




.. py:module:: pyopenms.pyopenms_5




.. py:class:: AASeqWithMass
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _AASeqWithMass


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1AASeqWithMass.html




.. py:attribute:: AASeqWithMass.peptide_mass
   :module: pyopenms.pyopenms_5




.. py:attribute:: AASeqWithMass.peptide_seq
   :module: pyopenms.pyopenms_5




.. py:attribute:: AASeqWithMass.position
   :module: pyopenms.pyopenms_5




.. py:class:: AScore
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _AScore


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1AScore.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: AScore.compute
   :module: pyopenms.pyopenms_5


Cython signature: PeptideHit compute(PeptideHit & hit, MSSpectrum & real_spectrum)




.. py:method:: AScore.getDefaults
   :module: pyopenms.pyopenms_5


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: AScore.getName
   :module: pyopenms.pyopenms_5


Cython signature: String getName()
Returns the name




.. py:method:: AScore.getParameters
   :module: pyopenms.pyopenms_5


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: AScore.getSubsections
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: AScore.setName
   :module: pyopenms.pyopenms_5


Cython signature: void setName(const String &)
Sets the name




.. py:method:: AScore.setParameters
   :module: pyopenms.pyopenms_5


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: AbsoluteQuantitationMethodFile
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _AbsoluteQuantitationMethodFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1AbsoluteQuantitationMethodFile.html




.. py:method:: AbsoluteQuantitationMethodFile.load
   :module: pyopenms.pyopenms_5


Cython signature: void load(const String & filename, libcpp_vector[AbsoluteQuantitationMethod] & aqm_list)




.. py:method:: AbsoluteQuantitationMethodFile.store
   :module: pyopenms.pyopenms_5


Cython signature: void store(const String & filename, libcpp_vector[AbsoluteQuantitationMethod] & aqm_list)




.. py:class:: AcquisitionInfo
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _AcquisitionInfo


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1AcquisitionInfo.html
 -- Inherits from ['MetaInfoInterface']




.. py:method:: AcquisitionInfo.clearMetaInfo
   :module: pyopenms.pyopenms_5


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: AcquisitionInfo.getKeys
   :module: pyopenms.pyopenms_5


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: AcquisitionInfo.getMetaValue
   :module: pyopenms.pyopenms_5


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: AcquisitionInfo.getMethodOfCombination
   :module: pyopenms.pyopenms_5


Cython signature: String getMethodOfCombination()
Returns the method of combination




.. py:method:: AcquisitionInfo.isMetaEmpty
   :module: pyopenms.pyopenms_5


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: AcquisitionInfo.metaRegistry
   :module: pyopenms.pyopenms_5


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: AcquisitionInfo.metaValueExists
   :module: pyopenms.pyopenms_5


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: AcquisitionInfo.push_back
   :module: pyopenms.pyopenms_5


Cython signature: void push_back(Acquisition)
Append a Acquisition object




.. py:method:: AcquisitionInfo.removeMetaValue
   :module: pyopenms.pyopenms_5


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: AcquisitionInfo.resize
   :module: pyopenms.pyopenms_5


Cython signature: void resize(size_t n)




.. py:method:: AcquisitionInfo.setMetaValue
   :module: pyopenms.pyopenms_5


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:method:: AcquisitionInfo.setMethodOfCombination
   :module: pyopenms.pyopenms_5


Cython signature: void setMethodOfCombination(String method)
Sets the method of combination




.. py:method:: AcquisitionInfo.size
   :module: pyopenms.pyopenms_5


Cython signature: size_t size()
Number a Acquisition objects




.. py:class:: AnalysisSummary
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _AnalysisSummary


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1AnalysisSummary.html




.. py:attribute:: AnalysisSummary.cv_params_
   :module: pyopenms.pyopenms_5




.. py:attribute:: AnalysisSummary.quant_type_
   :module: pyopenms.pyopenms_5




.. py:attribute:: AnalysisSummary.user_params_
   :module: pyopenms.pyopenms_5




.. py:class:: AnnotationStatistics
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _AnnotationStatistics


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1AnnotationStatistics.html




.. py:attribute:: AnnotationStatistics.states
   :module: pyopenms.pyopenms_5




.. py:class:: ArrayWrapperFloat
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`




.. py:class:: Assay
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _Assay


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1Assay.html




.. py:attribute:: Assay.feature_maps_
   :module: pyopenms.pyopenms_5




.. py:attribute:: Assay.raw_files_
   :module: pyopenms.pyopenms_5




.. py:attribute:: Assay.uid_
   :module: pyopenms.pyopenms_5




.. py:class:: BernNorm
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _BernNorm


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1BernNorm.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: BernNorm.filterPeakMap
   :module: pyopenms.pyopenms_5


Cython signature: void filterPeakMap(MSExperiment & exp)




.. py:method:: BernNorm.filterPeakSpectrum
   :module: pyopenms.pyopenms_5


Cython signature: void filterPeakSpectrum(MSSpectrum & spec)




.. py:method:: BernNorm.filterSpectrum
   :module: pyopenms.pyopenms_5


Cython signature: void filterSpectrum(MSSpectrum & spec)




.. py:method:: BernNorm.getDefaults
   :module: pyopenms.pyopenms_5


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: BernNorm.getName
   :module: pyopenms.pyopenms_5


Cython signature: String getName()
Returns the name




.. py:method:: BernNorm.getParameters
   :module: pyopenms.pyopenms_5


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: BernNorm.getSubsections
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: BernNorm.setName
   :module: pyopenms.pyopenms_5


Cython signature: void setName(const String &)
Sets the name




.. py:method:: BernNorm.setParameters
   :module: pyopenms.pyopenms_5


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: BiGaussFitter1D
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _BiGaussFitter1D


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1BiGaussFitter1D.html




.. py:method:: BiGaussFitter1D.getProductName
   :module: pyopenms.pyopenms_5


Cython signature: String getProductName()
Name of the model (needed by Factory)




.. py:class:: CVMappingRule
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _CVMappingRule


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1CVMappingRule.html




.. py:attribute:: CVMappingRule.CombinationsLogic
   :module: pyopenms.pyopenms_5


alias of :py:class:`pyopenms.pyopenms_5.__CombinationsLogic`


.. py:attribute:: CVMappingRule.RequirementLevel
   :module: pyopenms.pyopenms_5


alias of :py:class:`pyopenms.pyopenms_5.__RequirementLevel`


.. py:method:: CVMappingRule.addCVTerm
   :module: pyopenms.pyopenms_5


Cython signature: void addCVTerm(CVMappingTerm cv_terms)
Adds a term to the allowed terms




.. py:method:: CVMappingRule.getCVTerms
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_vector[CVMappingTerm] getCVTerms()
Returns the allowed terms




.. py:method:: CVMappingRule.getCombinationsLogic
   :module: pyopenms.pyopenms_5


Cython signature: CombinationsLogic getCombinationsLogic()
Returns the combinations operator of the rule




.. py:method:: CVMappingRule.getElementPath
   :module: pyopenms.pyopenms_5


Cython signature: String getElementPath()
Returns the path of the DOM element, where this rule is allowed




.. py:method:: CVMappingRule.getIdentifier
   :module: pyopenms.pyopenms_5


Cython signature: String getIdentifier()
Returns the identifier of the rule




.. py:method:: CVMappingRule.getRequirementLevel
   :module: pyopenms.pyopenms_5


Cython signature: RequirementLevel getRequirementLevel()
Returns the requirement level of this rule




.. py:method:: CVMappingRule.getScopePath
   :module: pyopenms.pyopenms_5


Cython signature: String getScopePath()
Returns the scope path of the rule




.. py:method:: CVMappingRule.setCVTerms
   :module: pyopenms.pyopenms_5


Cython signature: void setCVTerms(libcpp_vector[CVMappingTerm] cv_terms)
Sets the terms which are allowed




.. py:method:: CVMappingRule.setCombinationsLogic
   :module: pyopenms.pyopenms_5


Cython signature: void setCombinationsLogic(CombinationsLogic combinations_logic)
Sets the combination operator of the rule




.. py:method:: CVMappingRule.setElementPath
   :module: pyopenms.pyopenms_5


Cython signature: void setElementPath(String element_path)
Sets the path of the DOM element, where this rule is allowed




.. py:method:: CVMappingRule.setIdentifier
   :module: pyopenms.pyopenms_5


Cython signature: void setIdentifier(String identifier)
Sets the identifier of the rule




.. py:method:: CVMappingRule.setRequirementLevel
   :module: pyopenms.pyopenms_5


Cython signature: void setRequirementLevel(RequirementLevel level)
Sets the requirement level of this rule




.. py:method:: CVMappingRule.setScopePath
   :module: pyopenms.pyopenms_5


Cython signature: void setScopePath(String path)
Sets the scope path of the rule




.. py:class:: CVMappings
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _CVMappings


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1CVMappings.html




.. py:method:: CVMappings.addCVReference
   :module: pyopenms.pyopenms_5


Cython signature: void addCVReference(CVReference & cv_reference)
Adds a CV reference




.. py:method:: CVMappings.addMappingRule
   :module: pyopenms.pyopenms_5


Cython signature: void addMappingRule(CVMappingRule & cv_mapping_rule)
Adds a mapping rule




.. py:method:: CVMappings.getCVReferences
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_vector[CVReference] getCVReferences()
Returns the CV references




.. py:method:: CVMappings.getMappingRules
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_vector[CVMappingRule] getMappingRules()
Returns the mapping rules




.. py:method:: CVMappings.hasCVReference
   :module: pyopenms.pyopenms_5


Cython signature: bool hasCVReference(const String & identifier)
Returns true if a CV reference is given




.. py:method:: CVMappings.setCVReferences
   :module: pyopenms.pyopenms_5


Cython signature: void setCVReferences(libcpp_vector[CVReference] & cv_references)
Sets the CV references




.. py:method:: CVMappings.setMappingRules
   :module: pyopenms.pyopenms_5


Cython signature: void setMappingRules(libcpp_vector[CVMappingRule] & cv_mapping_rules)
Sets the mapping rules of the mapping file




.. py:class:: CVTerm
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _CVTerm


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1CVTerm.html




.. py:method:: CVTerm.getAccession
   :module: pyopenms.pyopenms_5


Cython signature: String getAccession()
Returns the accession string of the term




.. py:method:: CVTerm.getCVIdentifierRef
   :module: pyopenms.pyopenms_5


Cython signature: String getCVIdentifierRef()
Returns the CV identifier reference string




.. py:method:: CVTerm.getName
   :module: pyopenms.pyopenms_5


Cython signature: String getName()
Returns the name of the term




.. py:method:: CVTerm.getUnit
   :module: pyopenms.pyopenms_5


Cython signature: Unit getUnit()
Returns the unit




.. py:method:: CVTerm.getValue
   :module: pyopenms.pyopenms_5


Cython signature: DataValue getValue()
Returns the value of the term




.. py:method:: CVTerm.hasUnit
   :module: pyopenms.pyopenms_5


Cython signature: bool hasUnit()
Checks whether the term has a unit




.. py:method:: CVTerm.hasValue
   :module: pyopenms.pyopenms_5


Cython signature: bool hasValue()
Checks whether the term has a value




.. py:method:: CVTerm.setAccession
   :module: pyopenms.pyopenms_5


Cython signature: void setAccession(String accession)
Sets the accession string of the term




.. py:method:: CVTerm.setCVIdentifierRef
   :module: pyopenms.pyopenms_5


Cython signature: void setCVIdentifierRef(String cv_id_ref)
Sets the CV identifier reference string, e.g. UO for unit obo




.. py:method:: CVTerm.setName
   :module: pyopenms.pyopenms_5


Cython signature: void setName(String name)
Sets the name of the term




.. py:method:: CVTerm.setUnit
   :module: pyopenms.pyopenms_5


Cython signature: void setUnit(Unit & unit)
Sets the unit of the term




.. py:method:: CVTerm.setValue
   :module: pyopenms.pyopenms_5


Cython signature: void setValue(DataValue value)
Sets the value of the term




.. py:class:: CachedSwathFileConsumer
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _CachedSwathFileConsumer


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1CachedSwathFileConsumer.html
 -- Inherits from ['FullSwathFileConsumer']




.. py:method:: CachedSwathFileConsumer.consumeChromatogram
   :module: pyopenms.pyopenms_5


Cython signature: void consumeChromatogram(MSChromatogram & c)




.. py:method:: CachedSwathFileConsumer.consumeSpectrum
   :module: pyopenms.pyopenms_5


Cython signature: void consumeSpectrum(MSSpectrum & s)




.. py:method:: CachedSwathFileConsumer.retrieveSwathMaps
   :module: pyopenms.pyopenms_5


Cython signature: void retrieveSwathMaps(libcpp_vector[SwathMap] & maps)




.. py:method:: CachedSwathFileConsumer.setExpectedSize
   :module: pyopenms.pyopenms_5


Cython signature: void setExpectedSize(size_t s, size_t c)




.. py:method:: CachedSwathFileConsumer.setExperimentalSettings
   :module: pyopenms.pyopenms_5


Cython signature: void setExperimentalSettings(ExperimentalSettings exp)




.. py:class:: CompNovoIonScoring
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _CompNovoIonScoring


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1CompNovoIonScoring.html




.. py:class:: ConsensusIDAlgorithmRanks
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _ConsensusIDAlgorithmRanks


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ConsensusIDAlgorithmRanks.html
 -- Inherits from ['ConsensusIDAlgorithmIdentity']




.. py:method:: ConsensusIDAlgorithmRanks.apply
   :module: pyopenms.pyopenms_5


Cython signature: void apply(libcpp_vector[PeptideIdentification] & ids, size_t number_of_runs)
Calculates the consensus ID for a set of peptide identifications of one spectrum or (consensus) feature




.. py:method:: ConsensusIDAlgorithmRanks.getDefaults
   :module: pyopenms.pyopenms_5


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: ConsensusIDAlgorithmRanks.getName
   :module: pyopenms.pyopenms_5


Cython signature: String getName()
Returns the name




.. py:method:: ConsensusIDAlgorithmRanks.getParameters
   :module: pyopenms.pyopenms_5


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: ConsensusIDAlgorithmRanks.getSubsections
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: ConsensusIDAlgorithmRanks.setName
   :module: pyopenms.pyopenms_5


Cython signature: void setName(const String &)
Sets the name




.. py:method:: ConsensusIDAlgorithmRanks.setParameters
   :module: pyopenms.pyopenms_5


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: ContactPerson
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _ContactPerson


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ContactPerson.html
 -- Inherits from ['MetaInfoInterface']




.. py:method:: ContactPerson.clearMetaInfo
   :module: pyopenms.pyopenms_5


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: ContactPerson.getAddress
   :module: pyopenms.pyopenms_5


Cython signature: String getAddress()
Returns the address




.. py:method:: ContactPerson.getContactInfo
   :module: pyopenms.pyopenms_5


Cython signature: String getContactInfo()
Returns miscellaneous info about the contact person




.. py:method:: ContactPerson.getEmail
   :module: pyopenms.pyopenms_5


Cython signature: String getEmail()
Returns the email address




.. py:method:: ContactPerson.getFirstName
   :module: pyopenms.pyopenms_5


Cython signature: String getFirstName()
Returns the first name of the person




.. py:method:: ContactPerson.getInstitution
   :module: pyopenms.pyopenms_5


Cython signature: String getInstitution()
Returns the affiliation




.. py:method:: ContactPerson.getKeys
   :module: pyopenms.pyopenms_5


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: ContactPerson.getLastName
   :module: pyopenms.pyopenms_5


Cython signature: String getLastName()
Returns the last name of the person




.. py:method:: ContactPerson.getMetaValue
   :module: pyopenms.pyopenms_5


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: ContactPerson.getURL
   :module: pyopenms.pyopenms_5


Cython signature: String getURL()
Returns the URL associated with the contact person (e.g., the institute webpage




.. py:method:: ContactPerson.isMetaEmpty
   :module: pyopenms.pyopenms_5


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: ContactPerson.metaRegistry
   :module: pyopenms.pyopenms_5


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: ContactPerson.metaValueExists
   :module: pyopenms.pyopenms_5


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: ContactPerson.removeMetaValue
   :module: pyopenms.pyopenms_5


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: ContactPerson.setAddress
   :module: pyopenms.pyopenms_5


Cython signature: void setAddress(String email)
Sets the address




.. py:method:: ContactPerson.setContactInfo
   :module: pyopenms.pyopenms_5


Cython signature: void setContactInfo(String contact_info)
Sets miscellaneous info about the contact person




.. py:method:: ContactPerson.setEmail
   :module: pyopenms.pyopenms_5


Cython signature: void setEmail(String email)
Sets the email address




.. py:method:: ContactPerson.setFirstName
   :module: pyopenms.pyopenms_5


Cython signature: void setFirstName(String name)
Sets the first name of the person




.. py:method:: ContactPerson.setInstitution
   :module: pyopenms.pyopenms_5


Cython signature: void setInstitution(String institution)
Sets the affiliation




.. py:method:: ContactPerson.setLastName
   :module: pyopenms.pyopenms_5


Cython signature: void setLastName(String name)
Sets the last name of the person




.. py:method:: ContactPerson.setMetaValue
   :module: pyopenms.pyopenms_5


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:method:: ContactPerson.setName
   :module: pyopenms.pyopenms_5


Cython signature: void setName(String name)
Sets the full name of the person (gets split into first and last name internally)




.. py:method:: ContactPerson.setURL
   :module: pyopenms.pyopenms_5


Cython signature: void setURL(String email)
Sets the URL associated with the contact person (e.g., the institute webpage




.. py:class:: CsiFingerIdMzTabWriter
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _CsiFingerIdMzTabWriter


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1CsiFingerIdMzTabWriter.html




.. py:method:: CsiFingerIdMzTabWriter.read
   :module: pyopenms.pyopenms_5


Cython signature: void read(libcpp_vector[String] & sirius_output_paths, const String & original_input_mzml, size_t top_n_hits, MzTab & result)




.. py:class:: DTAFile
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _DTAFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1DTAFile.html




.. py:method:: DTAFile.load
   :module: pyopenms.pyopenms_5


Cython signature: void load(String filename, MSSpectrum & spectrum)




.. py:method:: DTAFile.store
   :module: pyopenms.pyopenms_5


Cython signature: void store(String filename, MSSpectrum & spectrum)




.. py:class:: DeNovoIonScore
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _DeNovoIonScore


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1DeNovoIonScore.html




.. py:attribute:: DeNovoIonScore.index
   :module: pyopenms.pyopenms_5




.. py:attribute:: DeNovoIonScore.position
   :module: pyopenms.pyopenms_5




.. py:attribute:: DeNovoIonScore.score
   :module: pyopenms.pyopenms_5




.. py:class:: DigestSimulation
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _DigestSimulation


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1DigestSimulation.html




.. py:method:: DigestSimulation.digest
   :module: pyopenms.pyopenms_5


Cython signature: void digest(FeatureMap & feature_map)




.. py:class:: DimensionDescription
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`




.. py:attribute:: DimensionDescription.DIMENSION
   :module: pyopenms.pyopenms_5
   :value: 2




.. py:attribute:: DimensionDescription.MZ
   :module: pyopenms.pyopenms_5
   :value: 1




.. py:attribute:: DimensionDescription.RT
   :module: pyopenms.pyopenms_5
   :value: 0




.. py:method:: DimensionDescription.getMapping
   :module: pyopenms.pyopenms_5




.. py:class:: DistanceMatrix
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _DistanceMatrix[float]


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1DistanceMatrix[float].html




.. py:method:: DistanceMatrix.clear
   :module: pyopenms.pyopenms_5


Cython signature: void clear()




.. py:method:: DistanceMatrix.dimensionsize
   :module: pyopenms.pyopenms_5


Cython signature: size_t dimensionsize()




.. py:method:: DistanceMatrix.getMinElementCoordinates
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_pair[size_t,size_t] getMinElementCoordinates()




.. py:method:: DistanceMatrix.getValue
   :module: pyopenms.pyopenms_5


Cython signature: float getValue(size_t i, size_t j)




.. py:method:: DistanceMatrix.reduce
   :module: pyopenms.pyopenms_5


Cython signature: void reduce(size_t j)




.. py:method:: DistanceMatrix.resize
   :module: pyopenms.pyopenms_5


Cython signature: void resize(size_t dimensionsize, float value)




.. py:method:: DistanceMatrix.setValue
   :module: pyopenms.pyopenms_5


Cython signature: void setValue(size_t i, size_t j, float value)




.. py:method:: DistanceMatrix.setValueQuick
   :module: pyopenms.pyopenms_5


Cython signature: void setValueQuick(size_t i, size_t j, float value)




.. py:method:: DistanceMatrix.updateMinElement
   :module: pyopenms.pyopenms_5


Cython signature: void updateMinElement()




.. py:class:: EmgFitter1D
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _EmgFitter1D


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1EmgFitter1D.html
 -- Inherits from ['LevMarqFitter1D']




.. py:method:: EmgFitter1D.getProductName
   :module: pyopenms.pyopenms_5


Cython signature: String getProductName()
Name of the model (needed by Factory)




.. py:class:: EnzymaticDigestion
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _EnzymaticDigestion


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1EnzymaticDigestion.html


   Class for the enzymatic digestion of proteins
   -----
   Digestion can be performed using simple regular expressions, e.g. [KR] | [^P] for trypsin.
   Also missed cleavages can be modeled, i.e. adjacent peptides are not cleaved
   due to enzyme malfunction/access restrictions. If n missed cleavages are allowed, all possible resulting
   peptides (cleaved and uncleaved) with up to n missed cleavages are returned.
   Thus no random selection of just n specific missed cleavage sites is performed.




.. py:attribute:: EnzymaticDigestion.Specificity
   :module: pyopenms.pyopenms_5


alias of :py:class:`pyopenms.pyopenms_5.__Specificity`


.. py:method:: EnzymaticDigestion.digestUnmodified
   :module: pyopenms.pyopenms_5


Cython signature: size_t digestUnmodified(StringView sequence, libcpp_vector[StringView] & output, size_t min_length, size_t max_length)


Performs the enzymatic digestion of an unmodified sequence
-----
By returning only references into the original string this is very fast
-----
:param sequence: Sequence to digest
:param output: Digestion products
:param min_length: Minimal length of reported products
:param max_length: Maximal length of reported products (0 = no restriction)
:returns: Number of discarded digestion products (which are not matching length restrictions)




.. py:method:: EnzymaticDigestion.getEnzymeName
   :module: pyopenms.pyopenms_5


Cython signature: String getEnzymeName()
Returns the enzyme for the digestion




.. py:method:: EnzymaticDigestion.getMissedCleavages
   :module: pyopenms.pyopenms_5


Cython signature: size_t getMissedCleavages()
Returns the number of missed cleavages for the digestion




.. py:method:: EnzymaticDigestion.getSpecificity
   :module: pyopenms.pyopenms_5


Cython signature: Specificity getSpecificity()
Returns the specificity for the digestion




.. py:method:: EnzymaticDigestion.getSpecificityByName
   :module: pyopenms.pyopenms_5


Cython signature: Specificity getSpecificityByName(String name)
Returns the specificity by name. Returns SPEC_UNKNOWN if name is not valid




.. py:method:: EnzymaticDigestion.isValidProduct
   :module: pyopenms.pyopenms_5


Cython signature: bool isValidProduct(String sequence, int pos, int length, bool ignore_missed_cleavages)


Boolean operator returns true if the peptide fragment starting at position `pos` with length `length` within the sequence `sequence` generated by the current enzyme
-----
Checks if peptide is a valid digestion product of the enzyme, taking into account specificity and the MC flag provided here
-----
:param protein: Protein sequence
:param pep_pos: Starting index of potential peptide
:param pep_length: Length of potential peptide
:param ignore_missed_cleavages: Do not compare MC's of potential peptide to the maximum allowed MC's
:returns: True if peptide has correct n/c terminals (according to enzyme, specificity and missed cleavages)




.. py:method:: EnzymaticDigestion.setEnzyme
   :module: pyopenms.pyopenms_5


Cython signature: void setEnzyme(DigestionEnzyme * enzyme)
Sets the enzyme for the digestion




.. py:method:: EnzymaticDigestion.setMissedCleavages
   :module: pyopenms.pyopenms_5


Cython signature: void setMissedCleavages(size_t missed_cleavages)
Sets the number of missed cleavages for the digestion (default is 0). This setting is ignored when log model is used




.. py:method:: EnzymaticDigestion.setSpecificity
   :module: pyopenms.pyopenms_5


Cython signature: void setSpecificity(Specificity spec)
Sets the specificity for the digestion (default is SPEC_FULL)




.. py:class:: FIAMSDataProcessor
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _FIAMSDataProcessor


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1FIAMSDataProcessor.html
 -- Inherits from ['DefaultParamHandler']


   ADD PYTHON DOCUMENTATION HERE




.. py:method:: FIAMSDataProcessor.convertToFeatureMap
   :module: pyopenms.pyopenms_5


Cython signature: FeatureMap convertToFeatureMap(MSSpectrum & input_)


Convert a spectrum to a feature map with the corresponding polarity
-----
Applies `SavitzkyGolayFilter` and `PeakPickerHiRes`
-----
:param input: Input a picked spectrum
:returns: A feature map with the peaks converted to features and polarity from the parameters
Estimate noise for each peak
-----
Uses `SignalToNoiseEstimatorMedianRapid`
-----
:param input: Input a picked spectrum
:returns: A spectrum object storing logSN information




.. py:method:: FIAMSDataProcessor.extractPeaks
   :module: pyopenms.pyopenms_5


Cython signature: MSSpectrum extractPeaks(MSSpectrum & input_)


Pick peaks from the summed spectrum
-----
:param input: Input vector of spectra
:returns: A spectrum with picked peaks
Convert a spectrum to a feature map with the corresponding polarity
-----
Applies `SavitzkyGolayFilter` and `PeakPickerHiRes`
-----
:param input: Input a picked spectrum
:returns: A feature map with the peaks converted to features and polarity from the parameters
Estimate noise for each peak
-----
Uses `SignalToNoiseEstimatorMedianRapid`
-----
:param input: Input a picked spectrum
:returns: A spectrum object storing logSN information




.. py:method:: FIAMSDataProcessor.getDefaults
   :module: pyopenms.pyopenms_5


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: FIAMSDataProcessor.getName
   :module: pyopenms.pyopenms_5


Cython signature: String getName()
Returns the name




.. py:method:: FIAMSDataProcessor.getParameters
   :module: pyopenms.pyopenms_5


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: FIAMSDataProcessor.getSubsections
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: FIAMSDataProcessor.run
   :module: pyopenms.pyopenms_5


Cython signature: bool run(MSExperiment & experiment, float & n_seconds, MzTab & output, bool load_cached_spectrum)


Run the full analysis for the experiment for the given time interval
-----
The workflow steps are:
- the time axis of the experiment is cut to the interval from 0 to n_seconds
- the spectra are summed into one along the time axis with the bin size determined by mz and instrument resolution
- data is smoothed by applying the Savitzky-Golay filter
- peaks are picked
- the accurate mass search for all the picked peaks is performed




.. py:method:: FIAMSDataProcessor.setName
   :module: pyopenms.pyopenms_5


Cython signature: void setName(const String &)
Sets the name




.. py:method:: FIAMSDataProcessor.setParameters
   :module: pyopenms.pyopenms_5


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: FIAMSDataProcessor.trackNoise
   :module: pyopenms.pyopenms_5


Cython signature: MSSpectrum trackNoise(MSSpectrum & input_)


Estimate noise for each peak
-----
Uses `SignalToNoiseEstimatorMedianRapid`
-----
:param input: Input a picked spectrum
:returns: A spectrum object storing logSN information




.. py:class:: FeatureXMLFile
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _FeatureXMLFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1FeatureXMLFile.html




.. py:method:: FeatureXMLFile.getOptions
   :module: pyopenms.pyopenms_5


Cython signature: FeatureFileOptions getOptions()
Access to the options for loading/storing




.. py:method:: FeatureXMLFile.load
   :module: pyopenms.pyopenms_5


Cython signature: void load(String, FeatureMap &)
Loads the file with name `filename` into `map` and calls updateRanges()




.. py:method:: FeatureXMLFile.loadSize
   :module: pyopenms.pyopenms_5


Cython signature: size_t loadSize(String path)




.. py:method:: FeatureXMLFile.setOptions
   :module: pyopenms.pyopenms_5


Cython signature: void setOptions(FeatureFileOptions)
Setter for options for loading/storing




.. py:method:: FeatureXMLFile.store
   :module: pyopenms.pyopenms_5


Cython signature: void store(String, FeatureMap &)
Stores the map `feature_map` in file with name `filename`




.. py:class:: HMMState
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _HMMState


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1HMMState.html




.. py:method:: HMMState.addPredecessorState
   :module: pyopenms.pyopenms_5


Cython signature: void addPredecessorState(HMMState * state)
Adds the given predecessor state to the list




.. py:method:: HMMState.addSuccessorState
   :module: pyopenms.pyopenms_5


Cython signature: void addSuccessorState(HMMState * state)
Add the given successor state to the list




.. py:method:: HMMState.deletePredecessorState
   :module: pyopenms.pyopenms_5


Cython signature: void deletePredecessorState(HMMState * state)
Deletes the given predecessor state from the list




.. py:method:: HMMState.deleteSuccessorState
   :module: pyopenms.pyopenms_5


Cython signature: void deleteSuccessorState(HMMState * state)
Deletes the given successor state from the list




.. py:method:: HMMState.getName
   :module: pyopenms.pyopenms_5


Cython signature: String getName()
Returns the name of the state




.. py:method:: HMMState.getPredecessorStates
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_set[HMMState *] getPredecessorStates()
Returns the predecessor states of the state




.. py:method:: HMMState.getSuccessorStates
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_set[HMMState *] getSuccessorStates()
Returns the successor states of the state




.. py:method:: HMMState.isHidden
   :module: pyopenms.pyopenms_5


Cython signature: bool isHidden()
Returns true if the state is hidden




.. py:method:: HMMState.setHidden
   :module: pyopenms.pyopenms_5


Cython signature: void setHidden(bool hidden)
Sets the hidden property to the state




.. py:method:: HMMState.setName
   :module: pyopenms.pyopenms_5


Cython signature: void setName(const String & name)
Sets the name of the state




.. py:class:: HPLC
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _HPLC


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1HPLC.html




.. py:method:: HPLC.getColumn
   :module: pyopenms.pyopenms_5


Cython signature: String getColumn()
Returns a reference to the column description




.. py:method:: HPLC.getComment
   :module: pyopenms.pyopenms_5


Cython signature: String getComment()
Returns the comments




.. py:method:: HPLC.getFlux
   :module: pyopenms.pyopenms_5


Cython signature: unsigned int getFlux()
Returns the flux (in microliter/sec)




.. py:method:: HPLC.getGradient
   :module: pyopenms.pyopenms_5


Cython signature: Gradient getGradient()
Returns a mutable reference to the used gradient




.. py:method:: HPLC.getInstrument
   :module: pyopenms.pyopenms_5


Cython signature: String getInstrument()
Returns a reference to the instument name




.. py:method:: HPLC.getPressure
   :module: pyopenms.pyopenms_5


Cython signature: unsigned int getPressure()
Returns the pressure (in bar)




.. py:method:: HPLC.getTemperature
   :module: pyopenms.pyopenms_5


Cython signature: int getTemperature()
Returns the temperature (in degree C)




.. py:method:: HPLC.setColumn
   :module: pyopenms.pyopenms_5


Cython signature: void setColumn(String column)
Sets the column description




.. py:method:: HPLC.setComment
   :module: pyopenms.pyopenms_5


Cython signature: void setComment(String comment)
Sets the comments




.. py:method:: HPLC.setFlux
   :module: pyopenms.pyopenms_5


Cython signature: void setFlux(unsigned int flux)
Sets the flux (in microliter/sec)




.. py:method:: HPLC.setGradient
   :module: pyopenms.pyopenms_5


Cython signature: void setGradient(Gradient gradient)
Sets the used gradient




.. py:method:: HPLC.setInstrument
   :module: pyopenms.pyopenms_5


Cython signature: void setInstrument(String instrument)
Sets the instument name




.. py:method:: HPLC.setPressure
   :module: pyopenms.pyopenms_5


Cython signature: void setPressure(unsigned int pressure)
Sets the pressure (in bar)




.. py:method:: HPLC.setTemperature
   :module: pyopenms.pyopenms_5


Cython signature: void setTemperature(int temperature)
Sets the temperature (in degree C)




.. py:class:: HiddenMarkovModel
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _HiddenMarkovModel


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1HiddenMarkovModel.html




.. py:method:: HiddenMarkovModel.addNewState
   :module: pyopenms.pyopenms_5


- Cython signature: void addNewState(HMMState * state)
  Registers a new state to the HMM


- Cython signature: void addNewState(const String & name)
  Registers a new state to the HMM




.. py:method:: HiddenMarkovModel.addSynonymTransition
   :module: pyopenms.pyopenms_5


Cython signature: void addSynonymTransition(const String & name1, const String & name2, const String & synonym1, const String & synonym2)
Add a new synonym transition to the given state names




.. py:method:: HiddenMarkovModel.clear
   :module: pyopenms.pyopenms_5


Cython signature: void clear()
Clears all data




.. py:method:: HiddenMarkovModel.clearInitialTransitionProbabilities
   :module: pyopenms.pyopenms_5


Cython signature: void clearInitialTransitionProbabilities()
Clears the initial probabilities




.. py:method:: HiddenMarkovModel.clearTrainingEmissionProbabilities
   :module: pyopenms.pyopenms_5


Cython signature: void clearTrainingEmissionProbabilities()
Clear the emission probabilities




.. py:method:: HiddenMarkovModel.disableTransition
   :module: pyopenms.pyopenms_5


Cython signature: void disableTransition(const String & s1, const String & s2)
Disables the transition; deletes the nodes from the predecessor/successor list respectively




.. py:method:: HiddenMarkovModel.disableTransitions
   :module: pyopenms.pyopenms_5


Cython signature: void disableTransitions()
Disables all transitions




.. py:method:: HiddenMarkovModel.dump
   :module: pyopenms.pyopenms_5


Cython signature: void dump()
Writes some stats to cerr




.. py:method:: HiddenMarkovModel.enableTransition
   :module: pyopenms.pyopenms_5


Cython signature: void enableTransition(const String & s1, const String & s2)
Enables a transition; adds s1 to the predecessor list of s2 and s2 to the successor list of s1




.. py:method:: HiddenMarkovModel.estimateUntrainedTransitions
   :module: pyopenms.pyopenms_5


Cython signature: void estimateUntrainedTransitions()
Estimates the transition probabilities of not trained transitions by averages similar trained ones




.. py:method:: HiddenMarkovModel.evaluate
   :module: pyopenms.pyopenms_5


Cython signature: void evaluate()
Evaluate the HMM, estimates the transition probabilities from the training




.. py:method:: HiddenMarkovModel.forwardDump
   :module: pyopenms.pyopenms_5


Cython signature: void forwardDump()
Writes some info of the forward "matrix" to cerr




.. py:method:: HiddenMarkovModel.getNumberOfStates
   :module: pyopenms.pyopenms_5


Cython signature: size_t getNumberOfStates()
Returns the number of states




.. py:method:: HiddenMarkovModel.getPseudoCounts
   :module: pyopenms.pyopenms_5


Cython signature: double getPseudoCounts()
Returns the pseudo counts




.. py:method:: HiddenMarkovModel.getState
   :module: pyopenms.pyopenms_5


Cython signature: HMMState * getState(const String & name)
Returns the state with the given name




.. py:method:: HiddenMarkovModel.getTransitionProbability
   :module: pyopenms.pyopenms_5


Cython signature: double getTransitionProbability(const String & s1, const String & s2)
Returns the transition probability of the given state names




.. py:method:: HiddenMarkovModel.setInitialTransitionProbability
   :module: pyopenms.pyopenms_5


Cython signature: void setInitialTransitionProbability(const String & state, double prob)
Sets the initial transition probability of the given state to prob




.. py:method:: HiddenMarkovModel.setPseudoCounts
   :module: pyopenms.pyopenms_5


Cython signature: void setPseudoCounts(double pseudo_counts)
Sets the pseudo count that are added instead of zero




.. py:method:: HiddenMarkovModel.setTrainingEmissionProbability
   :module: pyopenms.pyopenms_5


Cython signature: void setTrainingEmissionProbability(const String & state, double prob)
Sets the emission probability of the given state to prob




.. py:method:: HiddenMarkovModel.setTransitionProbability
   :module: pyopenms.pyopenms_5


Cython signature: void setTransitionProbability(const String & s1, const String & s2, double prob)
Sets the transition probability of the given state names to prob




.. py:method:: HiddenMarkovModel.setVariableModifications
   :module: pyopenms.pyopenms_5


Cython signature: void setVariableModifications(StringList & modifications)




.. py:method:: HiddenMarkovModel.train
   :module: pyopenms.pyopenms_5


Cython signature: void train()
Trains the HMM. Initial probabilities and emission probabilities of the emitting states should be set




.. py:method:: HiddenMarkovModel.writeGraphMLFile
   :module: pyopenms.pyopenms_5


Cython signature: void writeGraphMLFile(const String & filename)
Writes the HMM into a file in GraphML format




.. py:class:: ILPDCWrapper
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _ILPDCWrapper


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ILPDCWrapper.html




.. py:method:: ILPDCWrapper.compute
   :module: pyopenms.pyopenms_5


Cython signature: double compute(FeatureMap fm, libcpp_vector[ChargePair] & pairs, size_t verbose_level)
Compute optimal solution and return value of objective function. If the input feature map is empty, a warning is issued and -1 is returned




.. py:class:: IMSWeights
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _IMSWeights


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::ims::Weights_1_1IMSWeights.html




.. py:method:: IMSWeights.back
   :module: pyopenms.pyopenms_5


Cython signature: unsigned long int back()
Gets a last weight




.. py:method:: IMSWeights.divideByGCD
   :module: pyopenms.pyopenms_5


Cython signature: bool divideByGCD()
Divides the integer weights by their gcd. The precision is also adjusted




.. py:method:: IMSWeights.getAlphabetMass
   :module: pyopenms.pyopenms_5


Cython signature: double getAlphabetMass(int i)
Gets an original (double) alphabet mass by index




.. py:method:: IMSWeights.getMaxRoundingError
   :module: pyopenms.pyopenms_5


Cython signature: double getMaxRoundingError()




.. py:method:: IMSWeights.getMinRoundingError
   :module: pyopenms.pyopenms_5


Cython signature: double getMinRoundingError()




.. py:method:: IMSWeights.getParentMass
   :module: pyopenms.pyopenms_5


Cython signature: double getParentMass(libcpp_vector[unsigned int] & decomposition)
Returns a parent mass for a given `decomposition`




.. py:method:: IMSWeights.getPrecision
   :module: pyopenms.pyopenms_5


Cython signature: double getPrecision()
Gets precision.




.. py:method:: IMSWeights.getWeight
   :module: pyopenms.pyopenms_5


Cython signature: unsigned long int getWeight(int i)
Gets a scaled integer weight by index




.. py:method:: IMSWeights.setPrecision
   :module: pyopenms.pyopenms_5


Cython signature: void setPrecision(double precision)
Sets a new precision to scale double values to integer




.. py:method:: IMSWeights.size
   :module: pyopenms.pyopenms_5


Cython signature: int size()
Gets size of a set of weights




.. py:method:: IMSWeights.swap
   :module: pyopenms.pyopenms_5


Cython signature: void swap(int index1, int index2)
Exchanges weight and mass at index1 with weight and mass at index2




.. py:class:: Interfaces()
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`




.. py:attribute:: Interfaces.BinaryDataArray
   :module: pyopenms.pyopenms_5


alias of :py:class:`pyopenms.pyopenms_2._Interfaces_BinaryDataArray`


.. py:attribute:: Interfaces.Chromatogram
   :module: pyopenms.pyopenms_5


alias of :py:class:`pyopenms.pyopenms_2._Interfaces_Chromatogram`


.. py:attribute:: Interfaces.Spectrum
   :module: pyopenms.pyopenms_5


alias of :py:class:`pyopenms.pyopenms_2._Interfaces_Spectrum`


.. py:class:: IsobaricChannelExtractor
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _IsobaricChannelExtractor


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1IsobaricChannelExtractor.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: IsobaricChannelExtractor.extractChannels
   :module: pyopenms.pyopenms_5


Cython signature: void extractChannels(MSExperiment & ms_exp_data, ConsensusMap & consensus_map)




.. py:method:: IsobaricChannelExtractor.getDefaults
   :module: pyopenms.pyopenms_5


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: IsobaricChannelExtractor.getName
   :module: pyopenms.pyopenms_5


Cython signature: String getName()
Returns the name




.. py:method:: IsobaricChannelExtractor.getParameters
   :module: pyopenms.pyopenms_5


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: IsobaricChannelExtractor.getSubsections
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: IsobaricChannelExtractor.setName
   :module: pyopenms.pyopenms_5


Cython signature: void setName(const String &)
Sets the name




.. py:method:: IsobaricChannelExtractor.setParameters
   :module: pyopenms.pyopenms_5


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: IsobaricNormalizer
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _IsobaricNormalizer


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1IsobaricNormalizer.html




.. py:method:: IsobaricNormalizer.normalize
   :module: pyopenms.pyopenms_5


Cython signature: void normalize(ConsensusMap & consensus_map)




.. py:class:: ItraqEightPlexQuantitationMethod
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _ItraqEightPlexQuantitationMethod


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ItraqEightPlexQuantitationMethod.html
 -- Inherits from ['IsobaricQuantitationMethod']




.. py:method:: ItraqEightPlexQuantitationMethod.getChannelInformation
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_vector[IsobaricChannelInformation] getChannelInformation()




.. py:method:: ItraqEightPlexQuantitationMethod.getDefaults
   :module: pyopenms.pyopenms_5


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: ItraqEightPlexQuantitationMethod.getIsotopeCorrectionMatrix
   :module: pyopenms.pyopenms_5


Cython signature: MatrixDouble getIsotopeCorrectionMatrix()




.. py:method:: ItraqEightPlexQuantitationMethod.getName
   :module: pyopenms.pyopenms_5


Cython signature: String getName()




.. py:method:: ItraqEightPlexQuantitationMethod.getNumberOfChannels
   :module: pyopenms.pyopenms_5


Cython signature: size_t getNumberOfChannels()




.. py:method:: ItraqEightPlexQuantitationMethod.getParameters
   :module: pyopenms.pyopenms_5


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: ItraqEightPlexQuantitationMethod.getReferenceChannel
   :module: pyopenms.pyopenms_5


Cython signature: size_t getReferenceChannel()




.. py:method:: ItraqEightPlexQuantitationMethod.getSubsections
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: ItraqEightPlexQuantitationMethod.setName
   :module: pyopenms.pyopenms_5


Cython signature: void setName(const String &)
Sets the name




.. py:method:: ItraqEightPlexQuantitationMethod.setParameters
   :module: pyopenms.pyopenms_5


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: KroenikFile
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _KroenikFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1KroenikFile.html


 File adapter for Kroenik (HardKloer sibling) files
 -----
 The first line is the header and contains the column names:
 File,  First Scan,  Last Scan,  Num of Scans,  Charge,  Monoisotopic Mass,  Base Isotope Peak,  Best Intensity,  Summed Intensity,  First RTime,  Last RTime,  Best RTime,  Best Correlation,  Modifications
 -----
 Every subsequent line is a feature
 -----
 All properties in the file are converted to Feature properties, whereas "First Scan", "Last Scan", "Num of Scans" and "Modifications" are stored as
 metavalues with the following names "FirstScan", "LastScan", "NumOfScans" and "AveragineModifications"
 -----
 The width in m/z of the overall convex hull of each feature is set to 3 Th in lack of a value provided by the Kroenik file




.. py:method:: KroenikFile.load
   :module: pyopenms.pyopenms_5


Cython signature: void load(String filename, FeatureMap & feature_map)


Loads a Kroenik file into a featureXML
-----
The content of the file is stored in `features`
-----
:raises:
  Exception: FileNotFound is thrown if the file could not be opened
:raises:
  Exception: ParseError is thrown if an error occurs during parsing




.. py:method:: KroenikFile.store
   :module: pyopenms.pyopenms_5


Cython signature: void store(String filename, MSSpectrum & spectrum)
Stores a MSExperiment into a Kroenik file




.. py:class:: LinearInterpolation
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _LinearInterpolation[double,double]


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::Math_1_1LinearInterpolation[double,double].html


 Provides access to linearly interpolated values (and
 derivatives) from discrete data points.  Values beyond the given range
 of data points are implicitly taken as zero.
 -----
 The input is just a vector of values ("Data").  These are interpreted
 as the y-coordinates at the x-coordinate positions 0,...,data_.size-1.
 -----
 The interpolated data can also be scaled and shifted in
 the x-dimension by an affine mapping.  That is, we have "inside" and
 "outside" x-coordinates.  The affine mapping can be specified in two
 ways:
 - using setScale() and setOffset(),
 - using setMapping()
 -----
 By default the identity mapping (scale=1, offset=0) is used.
 -----
 Using the value() and derivative() methods you can sample linearly
 interpolated values for a given x-coordinate position of the data and
 the derivative of the data




.. py:method:: LinearInterpolation.addValue
   :module: pyopenms.pyopenms_5


Cython signature: void addValue(double arg_pos, double arg_value)
Performs linear resampling. The `arg_value` is split up and added to the data points around `arg_pos`




.. py:method:: LinearInterpolation.derivative
   :module: pyopenms.pyopenms_5


Cython signature: double derivative(double arg_pos)
Returns the interpolated derivative




.. py:method:: LinearInterpolation.empty
   :module: pyopenms.pyopenms_5


Cython signature: bool empty()
Returns `true` if getData() is empty




.. py:method:: LinearInterpolation.getData
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_vector[double] getData()
Returns the internal random access container from which interpolated values are being sampled




.. py:method:: LinearInterpolation.getInsideReferencePoint
   :module: pyopenms.pyopenms_5


Cython signature: double getInsideReferencePoint()




.. py:method:: LinearInterpolation.getOffset
   :module: pyopenms.pyopenms_5


Cython signature: double getOffset()
"Offset" is the point (in "outside" units) which corresponds to "Data[0]"




.. py:method:: LinearInterpolation.getOutsideReferencePoint
   :module: pyopenms.pyopenms_5


Cython signature: double getOutsideReferencePoint()




.. py:method:: LinearInterpolation.getScale
   :module: pyopenms.pyopenms_5


Cython signature: double getScale()
"Scale" is the difference (in "outside" units) between consecutive entries in "Data"




.. py:method:: LinearInterpolation.index2key
   :module: pyopenms.pyopenms_5


Cython signature: double index2key(double pos)
The transformation from "inside" to "outside" coordinates




.. py:method:: LinearInterpolation.key2index
   :module: pyopenms.pyopenms_5


Cython signature: double key2index(double pos)
The transformation from "outside" to "inside" coordinates




.. py:method:: LinearInterpolation.setData
   :module: pyopenms.pyopenms_5


Cython signature: void setData(libcpp_vector[double] & data)
Assigns data to the internal random access container from which interpolated values are being sampled




.. py:method:: LinearInterpolation.setMapping
   :module: pyopenms.pyopenms_5


- Cython signature: void setMapping(double & scale, double & inside, double & outside)
- Cython signature: void setMapping(double & inside_low, double & outside_low, double & inside_high, double & outside_high)




.. py:method:: LinearInterpolation.setOffset
   :module: pyopenms.pyopenms_5


Cython signature: void setOffset(double & offset)
"Offset" is the point (in "outside" units) which corresponds to "Data[0]"




.. py:method:: LinearInterpolation.setScale
   :module: pyopenms.pyopenms_5


Cython signature: void setScale(double & scale)
"Scale" is the difference (in "outside" units) between consecutive entries in "Data"




.. py:method:: LinearInterpolation.supportMax
   :module: pyopenms.pyopenms_5


Cython signature: double supportMax()




.. py:method:: LinearInterpolation.supportMin
   :module: pyopenms.pyopenms_5


Cython signature: double supportMin()




.. py:method:: LinearInterpolation.value
   :module: pyopenms.pyopenms_5


Cython signature: double value(double arg_pos)
Returns the interpolated value




.. py:class:: LowessSmoothing
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _LowessSmoothing


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1LowessSmoothing.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: LowessSmoothing.getDefaults
   :module: pyopenms.pyopenms_5


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: LowessSmoothing.getName
   :module: pyopenms.pyopenms_5


Cython signature: String getName()
Returns the name




.. py:method:: LowessSmoothing.getParameters
   :module: pyopenms.pyopenms_5


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: LowessSmoothing.getSubsections
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: LowessSmoothing.setName
   :module: pyopenms.pyopenms_5


Cython signature: void setName(const String &)
Sets the name




.. py:method:: LowessSmoothing.setParameters
   :module: pyopenms.pyopenms_5


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: LowessSmoothing.smoothData
   :module: pyopenms.pyopenms_5


Cython signature: void smoothData(libcpp_vector[double] x, libcpp_vector[double] y, libcpp_vector[double] & y_smoothed)
Smoothing method that receives x and y coordinates (e.g., RT and intensities) and computes smoothed intensities




.. py:class:: MRMRTNormalizer
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _MRMRTNormalizer


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MRMRTNormalizer.html




.. py:method:: MRMRTNormalizer.chauvenet
   :module: pyopenms.pyopenms_5


Cython signature: bool chauvenet(libcpp_vector[double] residuals, int pos)




.. py:method:: MRMRTNormalizer.chauvenet_probability
   :module: pyopenms.pyopenms_5


Cython signature: double chauvenet_probability(libcpp_vector[double] residuals, int pos)




.. py:method:: MRMRTNormalizer.computeBinnedCoverage
   :module: pyopenms.pyopenms_5


Cython signature: bool computeBinnedCoverage(libcpp_pair[double,double] rtRange, libcpp_vector[libcpp_pair[double,double]] & pairs, int nrBins, int minPeptidesPerBin, int minBinsFilled)




.. py:method:: MRMRTNormalizer.removeOutliersIterative
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_vector[libcpp_pair[double,double]] removeOutliersIterative(libcpp_vector[libcpp_pair[double,double]] & pairs, double rsq_limit, double coverage_limit, bool use_chauvenet, libcpp_string outlier_detection_method)




.. py:method:: MRMRTNormalizer.removeOutliersRANSAC
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_vector[libcpp_pair[double,double]] removeOutliersRANSAC(libcpp_vector[libcpp_pair[double,double]] & pairs, double rsq_limit, double coverage_limit, size_t max_iterations, double max_rt_threshold, size_t sampling_size)




.. py:class:: MSChromatogram
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _MSChromatogram


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MSChromatogram.html
 -- Inherits from ['ChromatogramSettings', 'RangeManagerRtInt']


 The representation of a chromatogram.
 Raw data access is proved by `get_peaks` and `set_peaks`, which yields numpy arrays
 Iterations yields access to underlying peak objects but is slower
 Extra data arrays can be accessed through getFloatDataArrays / getIntegerDataArrays / getStringDataArrays
 See help(ChromatogramSettings) for information about meta-information
 -----
 Usage:
   precursor = chromatogram.getPrecursor()
   product = chromatogram.getProduct()
   rt, intensities = chromatogram.get_peaks()
 -----




.. py:method:: MSChromatogram.clear
   :module: pyopenms.pyopenms_5


Cython signature: void clear(int)


Clears all data and meta data
-----
:param clear_meta_data: If true, all meta data is cleared in addition to the data




.. py:method:: MSChromatogram.clearMetaInfo
   :module: pyopenms.pyopenms_5


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: MSChromatogram.clearRanges
   :module: pyopenms.pyopenms_5


Cython signature: void clearRanges()
Resets all range dimensions as empty




.. py:method:: MSChromatogram.findNearest
   :module: pyopenms.pyopenms_5


Cython signature: int findNearest(double)


Binary search for the peak nearest to a specific RT
-----
:param rt: The searched for mass-to-charge ratio searched
:returns: Returns the index of the peak.
-----
:note: Make sure the chromatogram is sorted with respect to RT! Otherwise the result is undefined
-----
:raises:
  Exception: Precondition is thrown if the chromatogram is empty (not only in debug mode)




.. py:method:: MSChromatogram.getAcquisitionInfo
   :module: pyopenms.pyopenms_5


Cython signature: AcquisitionInfo getAcquisitionInfo()
Returns the acquisition info




.. py:method:: MSChromatogram.getChromatogramType
   :module: pyopenms.pyopenms_5


Cython signature: ChromatogramType getChromatogramType()
Get the chromatogram type




.. py:method:: MSChromatogram.getComment
   :module: pyopenms.pyopenms_5


Cython signature: String getComment()
Returns the free-text comment




.. py:method:: MSChromatogram.getDataProcessing
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_vector[shared_ptr[DataProcessing]] getDataProcessing()
Returns the description of the applied processing




.. py:method:: MSChromatogram.getFloatDataArrays
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_vector[FloatDataArray] getFloatDataArrays()
Returns a reference to the float meta data arrays




.. py:method:: MSChromatogram.getInstrumentSettings
   :module: pyopenms.pyopenms_5


Cython signature: InstrumentSettings getInstrumentSettings()
Returns the instrument settings of the current spectrum




.. py:method:: MSChromatogram.getIntegerDataArrays
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_vector[IntegerDataArray] getIntegerDataArrays()
Returns a reference to the integer meta data arrays




.. py:method:: MSChromatogram.getKeys
   :module: pyopenms.pyopenms_5


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: MSChromatogram.getMZ
   :module: pyopenms.pyopenms_5


Cython signature: double getMZ()
Returns the mz of the product entry, makes sense especially for MRM scans




.. py:method:: MSChromatogram.getMaxIntensity
   :module: pyopenms.pyopenms_5


Cython signature: double getMaxIntensity()
Returns the maximum intensity




.. py:method:: MSChromatogram.getMaxRT
   :module: pyopenms.pyopenms_5


Cython signature: double getMaxRT()
Returns the maximum RT




.. py:method:: MSChromatogram.getMetaValue
   :module: pyopenms.pyopenms_5


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: MSChromatogram.getMinIntensity
   :module: pyopenms.pyopenms_5


Cython signature: double getMinIntensity()
Returns the minimum intensity




.. py:method:: MSChromatogram.getMinRT
   :module: pyopenms.pyopenms_5


Cython signature: double getMinRT()
Returns the minimum RT




.. py:method:: MSChromatogram.getName
   :module: pyopenms.pyopenms_5


Cython signature: String getName()
Returns the name




.. py:method:: MSChromatogram.getNativeID
   :module: pyopenms.pyopenms_5


Cython signature: String getNativeID()
Returns the native identifier for the spectrum, used by the acquisition software.




.. py:method:: MSChromatogram.getPrecursor
   :module: pyopenms.pyopenms_5


Cython signature: Precursor getPrecursor()
Returns the precursors




.. py:method:: MSChromatogram.getProduct
   :module: pyopenms.pyopenms_5


Cython signature: Product getProduct()
Returns the product ion




.. py:method:: MSChromatogram.getSourceFile
   :module: pyopenms.pyopenms_5


Cython signature: SourceFile getSourceFile()
Returns the source file




.. py:method:: MSChromatogram.getStringDataArrays
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_vector[StringDataArray] getStringDataArrays()
Returns a reference to the string meta data arrays




.. py:method:: MSChromatogram.get_peaks
   :module: pyopenms.pyopenms_5




.. py:method:: MSChromatogram.isMetaEmpty
   :module: pyopenms.pyopenms_5


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: MSChromatogram.isSorted
   :module: pyopenms.pyopenms_5


Cython signature: bool isSorted()
Checks if all peaks are sorted with respect to ascending RT




.. py:method:: MSChromatogram.metaRegistry
   :module: pyopenms.pyopenms_5


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: MSChromatogram.metaValueExists
   :module: pyopenms.pyopenms_5


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: MSChromatogram.push_back
   :module: pyopenms.pyopenms_5


Cython signature: void push_back(ChromatogramPeak)
Append a peak




.. py:method:: MSChromatogram.removeMetaValue
   :module: pyopenms.pyopenms_5


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: MSChromatogram.reserve
   :module: pyopenms.pyopenms_5


Cython signature: void reserve(size_t n)




.. py:method:: MSChromatogram.setAcquisitionInfo
   :module: pyopenms.pyopenms_5


Cython signature: void setAcquisitionInfo(AcquisitionInfo acquisition_info)
Sets the acquisition info




.. py:method:: MSChromatogram.setChromatogramType
   :module: pyopenms.pyopenms_5


Cython signature: void setChromatogramType(ChromatogramType type)
Sets the chromatogram type




.. py:method:: MSChromatogram.setComment
   :module: pyopenms.pyopenms_5


Cython signature: void setComment(String comment)
Sets the free-text comment




.. py:method:: MSChromatogram.setDataProcessing
   :module: pyopenms.pyopenms_5


Cython signature: void setDataProcessing(libcpp_vector[shared_ptr[DataProcessing]])
Sets the description of the applied processing




.. py:method:: MSChromatogram.setFloatDataArrays
   :module: pyopenms.pyopenms_5


Cython signature: void setFloatDataArrays(libcpp_vector[FloatDataArray] fda)
Sets the float meta data arrays




.. py:method:: MSChromatogram.setInstrumentSettings
   :module: pyopenms.pyopenms_5


Cython signature: void setInstrumentSettings(InstrumentSettings instrument_settings)
Sets the instrument settings of the current spectrum




.. py:method:: MSChromatogram.setIntegerDataArrays
   :module: pyopenms.pyopenms_5


Cython signature: void setIntegerDataArrays(libcpp_vector[IntegerDataArray] ida)
Sets the integer meta data arrays




.. py:method:: MSChromatogram.setMetaValue
   :module: pyopenms.pyopenms_5


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:method:: MSChromatogram.setName
   :module: pyopenms.pyopenms_5


Cython signature: void setName(String)
Sets the name




.. py:method:: MSChromatogram.setNativeID
   :module: pyopenms.pyopenms_5


Cython signature: void setNativeID(String native_id)
Sets the native identifier for the spectrum, used by the acquisition software.




.. py:method:: MSChromatogram.setPrecursor
   :module: pyopenms.pyopenms_5


Cython signature: void setPrecursor(Precursor precursor)
Sets the precursors




.. py:method:: MSChromatogram.setProduct
   :module: pyopenms.pyopenms_5


Cython signature: void setProduct(Product p)
Sets the product ion




.. py:method:: MSChromatogram.setSourceFile
   :module: pyopenms.pyopenms_5


Cython signature: void setSourceFile(SourceFile source_file)
Sets the source file




.. py:method:: MSChromatogram.setStringDataArrays
   :module: pyopenms.pyopenms_5


Cython signature: void setStringDataArrays(libcpp_vector[StringDataArray] sda)
Sets the string meta data arrays




.. py:method:: MSChromatogram.set_peaks
   :module: pyopenms.pyopenms_5




.. py:method:: MSChromatogram.size
   :module: pyopenms.pyopenms_5


Cython signature: size_t size()




.. py:method:: MSChromatogram.sortByIntensity
   :module: pyopenms.pyopenms_5


Cython signature: void sortByIntensity(bool reverse)


Lexicographically sorts the peaks by their intensity
-----
Sorts the peaks according to ascending intensity. Meta data arrays will be sorted accordingly




.. py:method:: MSChromatogram.sortByPosition
   :module: pyopenms.pyopenms_5


Cython signature: void sortByPosition()


Lexicographically sorts the peaks by their position
-----
The chromatogram is sorted with respect to position. Meta data arrays will be sorted accordingly




.. py:method:: MSChromatogram.updateRanges
   :module: pyopenms.pyopenms_5


Cython signature: void updateRanges()




.. py:class:: MSDataCachedConsumer
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _MSDataCachedConsumer


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MSDataCachedConsumer.html


 Transforming and cached writing consumer of MS data
 -----
 Is able to transform a spectrum on the fly while it is read using a
 function pointer that can be set on the object. The spectra is then
 cached to disk using the functions provided in CachedMzMLHandler.




.. py:method:: MSDataCachedConsumer.consumeChromatogram
   :module: pyopenms.pyopenms_5


Cython signature: void consumeChromatogram(MSChromatogram & c)


Write a chromatogram to the output file
-----
May delete data from chromatogram (if clearData is set)




.. py:method:: MSDataCachedConsumer.consumeSpectrum
   :module: pyopenms.pyopenms_5


Cython signature: void consumeSpectrum(MSSpectrum & s)


Write a spectrum to the output file
-----
May delete data from spectrum (if clearData is set)




.. py:method:: MSDataCachedConsumer.setExpectedSize
   :module: pyopenms.pyopenms_5


Cython signature: void setExpectedSize(size_t expectedSpectra, size_t expectedChromatograms)




.. py:method:: MSDataCachedConsumer.setExperimentalSettings
   :module: pyopenms.pyopenms_5


Cython signature: void setExperimentalSettings(ExperimentalSettings & exp)




.. py:class:: MSQuantifications
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _MSQuantifications


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MSQuantifications.html
 -- Inherits from ['ExperimentalSettings']




.. py:attribute:: MSQuantifications.QUANT_TYPES
   :module: pyopenms.pyopenms_5


alias of :py:class:`pyopenms.pyopenms_5.__QUANT_TYPES`


.. py:method:: MSQuantifications.addConsensusMap
   :module: pyopenms.pyopenms_5


Cython signature: void addConsensusMap(ConsensusMap m)




.. py:method:: MSQuantifications.assignUIDs
   :module: pyopenms.pyopenms_5


Cython signature: void assignUIDs()




.. py:method:: MSQuantifications.clearMetaInfo
   :module: pyopenms.pyopenms_5


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: MSQuantifications.getAnalysisSummary
   :module: pyopenms.pyopenms_5


Cython signature: AnalysisSummary getAnalysisSummary()




.. py:method:: MSQuantifications.getAssays
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_vector[Assay] getAssays()




.. py:method:: MSQuantifications.getComment
   :module: pyopenms.pyopenms_5


Cython signature: String getComment()
Returns the free-text comment




.. py:method:: MSQuantifications.getConsensusMaps
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_vector[ConsensusMap] getConsensusMaps()




.. py:method:: MSQuantifications.getContacts
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_vector[ContactPerson] getContacts()
Returns a reference to the list of contact persons




.. py:method:: MSQuantifications.getDataProcessingList
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_vector[DataProcessing] getDataProcessingList()




.. py:method:: MSQuantifications.getDateTime
   :module: pyopenms.pyopenms_5


Cython signature: DateTime getDateTime()
Returns the date the experiment was performed




.. py:method:: MSQuantifications.getFeatureMaps
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_vector[FeatureMap] getFeatureMaps()




.. py:method:: MSQuantifications.getFractionIdentifier
   :module: pyopenms.pyopenms_5


Cython signature: String getFractionIdentifier()
Returns fraction identifier




.. py:method:: MSQuantifications.getHPLC
   :module: pyopenms.pyopenms_5


Cython signature: HPLC getHPLC()
Returns a reference to the description of the HPLC run




.. py:method:: MSQuantifications.getIdentifier
   :module: pyopenms.pyopenms_5


Cython signature: String getIdentifier()
Retrieve document identifier (e.g. an LSID)




.. py:method:: MSQuantifications.getInstrument
   :module: pyopenms.pyopenms_5


Cython signature: Instrument getInstrument()
Returns a reference to the MS instrument description




.. py:method:: MSQuantifications.getKeys
   :module: pyopenms.pyopenms_5


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: MSQuantifications.getLoadedFilePath
   :module: pyopenms.pyopenms_5


Cython signature: String getLoadedFilePath()
Returns the file_name which is the absolute path to the file loaded




.. py:method:: MSQuantifications.getLoadedFileType
   :module: pyopenms.pyopenms_5


Cython signature: int getLoadedFileType()
Returns the file_type (e.g. featureXML, consensusXML, mzData, mzXML, mzML, ...) of the file loaded




.. py:method:: MSQuantifications.getMetaValue
   :module: pyopenms.pyopenms_5


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: MSQuantifications.getProteinIdentifications
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_vector[ProteinIdentification] getProteinIdentifications()
Returns a reference to the protein ProteinIdentification vector




.. py:method:: MSQuantifications.getSample
   :module: pyopenms.pyopenms_5


Cython signature: Sample getSample()
Returns a reference to the sample description




.. py:method:: MSQuantifications.getSourceFiles
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_vector[SourceFile] getSourceFiles()
Returns a reference to the source data file




.. py:method:: MSQuantifications.isMetaEmpty
   :module: pyopenms.pyopenms_5


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: MSQuantifications.metaRegistry
   :module: pyopenms.pyopenms_5


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: MSQuantifications.metaValueExists
   :module: pyopenms.pyopenms_5


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: MSQuantifications.registerExperiment
   :module: pyopenms.pyopenms_5




.. py:method:: MSQuantifications.removeMetaValue
   :module: pyopenms.pyopenms_5


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: MSQuantifications.setAnalysisSummaryQuantType
   :module: pyopenms.pyopenms_5


Cython signature: void setAnalysisSummaryQuantType(QUANT_TYPES r)




.. py:method:: MSQuantifications.setComment
   :module: pyopenms.pyopenms_5


Cython signature: void setComment(String comment)
Sets the free-text comment




.. py:method:: MSQuantifications.setConsensusMaps
   :module: pyopenms.pyopenms_5


Cython signature: void setConsensusMaps(libcpp_vector[ConsensusMap])




.. py:method:: MSQuantifications.setContacts
   :module: pyopenms.pyopenms_5


Cython signature: void setContacts(libcpp_vector[ContactPerson] contacts)
Sets the list of contact persons




.. py:method:: MSQuantifications.setDataProcessingList
   :module: pyopenms.pyopenms_5


Cython signature: void setDataProcessingList(libcpp_vector[DataProcessing] dpl)




.. py:method:: MSQuantifications.setDateTime
   :module: pyopenms.pyopenms_5


Cython signature: void setDateTime(DateTime date_time)
Sets the date the experiment was performed




.. py:method:: MSQuantifications.setFractionIdentifier
   :module: pyopenms.pyopenms_5


Cython signature: void setFractionIdentifier(String fraction_identifier)
Sets the fraction identifier




.. py:method:: MSQuantifications.setHPLC
   :module: pyopenms.pyopenms_5


Cython signature: void setHPLC(HPLC hplc)
Sets the description of the HPLC run




.. py:method:: MSQuantifications.setIdentifier
   :module: pyopenms.pyopenms_5


Cython signature: void setIdentifier(String id)
Sets document identifier (e.g. an LSID)




.. py:method:: MSQuantifications.setInstrument
   :module: pyopenms.pyopenms_5


Cython signature: void setInstrument(Instrument instrument)
Sets the MS instrument description




.. py:method:: MSQuantifications.setLoadedFilePath
   :module: pyopenms.pyopenms_5


Cython signature: void setLoadedFilePath(String file_name)
Sets the file_name according to absolute path of the file loaded, preferably done whilst loading




.. py:method:: MSQuantifications.setLoadedFileType
   :module: pyopenms.pyopenms_5


Cython signature: void setLoadedFileType(String file_name)
Sets the file_type according to the type of the file loaded from, preferably done whilst loading




.. py:method:: MSQuantifications.setMetaValue
   :module: pyopenms.pyopenms_5


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:method:: MSQuantifications.setProteinIdentifications
   :module: pyopenms.pyopenms_5


Cython signature: void setProteinIdentifications(libcpp_vector[ProteinIdentification] protein_identifications)
Sets the protein ProteinIdentification vector




.. py:method:: MSQuantifications.setSample
   :module: pyopenms.pyopenms_5


Cython signature: void setSample(Sample sample)
Sets the sample description




.. py:method:: MSQuantifications.setSourceFiles
   :module: pyopenms.pyopenms_5


Cython signature: void setSourceFiles(libcpp_vector[SourceFile] source_files)
Sets the source data file




.. py:class:: MapAlignmentAlgorithmPoseClustering
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _MapAlignmentAlgorithmPoseClustering


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MapAlignmentAlgorithmPoseClustering.html
 -- Inherits from ['DefaultParamHandler', 'ProgressLogger']




.. py:method:: MapAlignmentAlgorithmPoseClustering.align
   :module: pyopenms.pyopenms_5


- Cython signature: void align(FeatureMap, TransformationDescription &)
- Cython signature: void align(MSExperiment, TransformationDescription &)




.. py:method:: MapAlignmentAlgorithmPoseClustering.endProgress
   :module: pyopenms.pyopenms_5


Cython signature: void endProgress()
Ends the progress display




.. py:method:: MapAlignmentAlgorithmPoseClustering.getDefaults
   :module: pyopenms.pyopenms_5


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: MapAlignmentAlgorithmPoseClustering.getLogType
   :module: pyopenms.pyopenms_5


Cython signature: LogType getLogType()
Returns the type of progress log being used




.. py:method:: MapAlignmentAlgorithmPoseClustering.getName
   :module: pyopenms.pyopenms_5


Cython signature: String getName()
Returns the name




.. py:method:: MapAlignmentAlgorithmPoseClustering.getParameters
   :module: pyopenms.pyopenms_5


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: MapAlignmentAlgorithmPoseClustering.getSubsections
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: MapAlignmentAlgorithmPoseClustering.nextProgress
   :module: pyopenms.pyopenms_5


Cython signature: void nextProgress()
Increment progress by 1 (according to range begin-end)




.. py:method:: MapAlignmentAlgorithmPoseClustering.setLogType
   :module: pyopenms.pyopenms_5


Cython signature: void setLogType(LogType)
Sets the progress log that should be used. The default type is NONE!




.. py:method:: MapAlignmentAlgorithmPoseClustering.setName
   :module: pyopenms.pyopenms_5


Cython signature: void setName(const String &)
Sets the name




.. py:method:: MapAlignmentAlgorithmPoseClustering.setParameters
   :module: pyopenms.pyopenms_5


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: MapAlignmentAlgorithmPoseClustering.setProgress
   :module: pyopenms.pyopenms_5


Cython signature: void setProgress(ptrdiff_t value)
Sets the current progress




.. py:method:: MapAlignmentAlgorithmPoseClustering.setReference
   :module: pyopenms.pyopenms_5


- Cython signature: void setReference(FeatureMap)
  Sets the reference for the alignment


- Cython signature: void setReference(MSExperiment)




.. py:method:: MapAlignmentAlgorithmPoseClustering.startProgress
   :module: pyopenms.pyopenms_5


Cython signature: void startProgress(ptrdiff_t begin, ptrdiff_t end, String label)




.. py:class:: MarkerMower
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _MarkerMower


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MarkerMower.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: MarkerMower.filterPeakMap
   :module: pyopenms.pyopenms_5


Cython signature: void filterPeakMap(MSExperiment & exp)




.. py:method:: MarkerMower.filterPeakSpectrum
   :module: pyopenms.pyopenms_5


Cython signature: void filterPeakSpectrum(MSSpectrum & spec)




.. py:method:: MarkerMower.filterSpectrum
   :module: pyopenms.pyopenms_5


Cython signature: void filterSpectrum(MSSpectrum & spec)




.. py:method:: MarkerMower.getDefaults
   :module: pyopenms.pyopenms_5


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: MarkerMower.getName
   :module: pyopenms.pyopenms_5


Cython signature: String getName()
Returns the name




.. py:method:: MarkerMower.getParameters
   :module: pyopenms.pyopenms_5


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: MarkerMower.getProductName
   :module: pyopenms.pyopenms_5


Cython signature: String getProductName()
Returns the product name




.. py:method:: MarkerMower.getSubsections
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: MarkerMower.insertmarker
   :module: pyopenms.pyopenms_5


Cython signature: void insertmarker(PeakMarker * peak_marker)
Insert new Marker (violates the DefaultParamHandler interface)




.. py:method:: MarkerMower.setName
   :module: pyopenms.pyopenms_5


Cython signature: void setName(const String &)
Sets the name




.. py:method:: MarkerMower.setParameters
   :module: pyopenms.pyopenms_5


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: MetaInfoRegistry
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _MetaInfoRegistry


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MetaInfoRegistry.html


 Registry which assigns unique integer indices to strings
 -----
 When registering a new name an index >= 1024 is assigned.
 Indices from 1 to 1023 are reserved for fast access and will never change:
 1 - isotopic_range
 2 - cluster_id
 3 - label
 4 - icon
 5 - color
 6 - RT
 7 - MZ
 8 - predicted_RT
 9 - predicted_RT_p_value
 10 - spectrum_reference
 11 - ID
 12 - low_quality
 13 - charge




.. py:method:: MetaInfoRegistry.getDescription
   :module: pyopenms.pyopenms_5


- Cython signature: String getDescription(unsigned int index)
  Returns the description of an index


- Cython signature: String getDescription(const String & name)
  Returns the description of a name




.. py:method:: MetaInfoRegistry.getIndex
   :module: pyopenms.pyopenms_5


Cython signature: unsigned int getIndex(const String & name)
Returns the integer index corresponding to a string. If the string is not registered, returns UInt(-1) (= UINT_MAX)




.. py:method:: MetaInfoRegistry.getName
   :module: pyopenms.pyopenms_5


Cython signature: String getName(unsigned int index)
Returns the corresponding name to an index




.. py:method:: MetaInfoRegistry.getUnit
   :module: pyopenms.pyopenms_5


- Cython signature: String getUnit(unsigned int index)
  Returns the unit of an index


- Cython signature: String getUnit(const String & name)
  Returns the unit of a name




.. py:method:: MetaInfoRegistry.registerName
   :module: pyopenms.pyopenms_5


Cython signature: unsigned int registerName(const String & name, const String & description, const String & unit)
Registers a string, stores its description and unit, and returns the corresponding index. If the string is already registered, it returns the index of the string




.. py:method:: MetaInfoRegistry.setDescription
   :module: pyopenms.pyopenms_5


- Cython signature: void setDescription(unsigned int index, const String & description)
  Sets the description (String), corresponding to an index


- Cython signature: void setDescription(const String & name, const String & description)
  Sets the description (String), corresponding to a name




.. py:method:: MetaInfoRegistry.setUnit
   :module: pyopenms.pyopenms_5


- Cython signature: void setUnit(unsigned int index, const String & unit)
  Sets the unit (String), corresponding to an index


- Cython signature: void setUnit(const String & name, const String & unit)
  Sets the unit (String), corresponding to a name




.. py:class:: ModificationDefinitionsSet
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _ModificationDefinitionsSet


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ModificationDefinitionsSet.html




.. py:method:: ModificationDefinitionsSet.addModification
   :module: pyopenms.pyopenms_5


Cython signature: void addModification(ModificationDefinition & mod_def)
Adds a modification definition to the set




.. py:method:: ModificationDefinitionsSet.getFixedModificationNames
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_set[String] getFixedModificationNames()
Returns only the names of the fixed modifications




.. py:method:: ModificationDefinitionsSet.getFixedModifications
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_set[ModificationDefinition] getFixedModifications()
Returns the stored fixed modification definitions




.. py:method:: ModificationDefinitionsSet.getMaxModifications
   :module: pyopenms.pyopenms_5


Cython signature: size_t getMaxModifications()
Return the maximal number of modifications allowed per peptide




.. py:method:: ModificationDefinitionsSet.getModificationNames
   :module: pyopenms.pyopenms_5


- Cython signature: void getModificationNames(StringList & fixed_modifications, StringList & variable_modifications)
  Populates the output lists with the modification names (use e.g. for
- Cython signature: libcpp_set[String] getModificationNames()
  Returns only the names of the modifications stored in the set




.. py:method:: ModificationDefinitionsSet.getModifications
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_set[ModificationDefinition] getModifications()
Returns the stored modification definitions




.. py:method:: ModificationDefinitionsSet.getNumberOfFixedModifications
   :module: pyopenms.pyopenms_5


Cython signature: size_t getNumberOfFixedModifications()
Returns the number of fixed modifications stored in this set




.. py:method:: ModificationDefinitionsSet.getNumberOfModifications
   :module: pyopenms.pyopenms_5


Cython signature: size_t getNumberOfModifications()
Returns the number of modifications stored in this set




.. py:method:: ModificationDefinitionsSet.getNumberOfVariableModifications
   :module: pyopenms.pyopenms_5


Cython signature: size_t getNumberOfVariableModifications()
Returns the number of variable modifications stored in this set




.. py:method:: ModificationDefinitionsSet.getVariableModificationNames
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_set[String] getVariableModificationNames()
Returns only the names of the variable modifications




.. py:method:: ModificationDefinitionsSet.getVariableModifications
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_set[ModificationDefinition] getVariableModifications()
Returns the stored variable modification definitions




.. py:method:: ModificationDefinitionsSet.inferFromPeptides
   :module: pyopenms.pyopenms_5


Cython signature: void inferFromPeptides(libcpp_vector[PeptideIdentification] & peptides)
Infers the sets of defined modifications from the modifications present on peptide identifications




.. py:method:: ModificationDefinitionsSet.isCompatible
   :module: pyopenms.pyopenms_5


Cython signature: bool isCompatible(AASequence & peptide)
Returns true if the peptide is compatible with the definitions, e.g. does not contain other modifications




.. py:method:: ModificationDefinitionsSet.setMaxModifications
   :module: pyopenms.pyopenms_5


Cython signature: void setMaxModifications(size_t max_mod)
Sets the maximal number of modifications allowed per peptide




.. py:method:: ModificationDefinitionsSet.setModifications
   :module: pyopenms.pyopenms_5


         - Cython signature: void setModifications(libcpp_set[ModificationDefinition] & mod_defs)
           Sets the modification definitions


         - Cython signature: void setModifications(const String & fixed_modifications, String & variable_modifications)


Set the modification definitions from a string
-----
The strings should contain a comma separated list of modifications. The names
can be PSI-MOD identifier or any other unique name supported by PSI-MOD. TermSpec
definitions and other specific definitions are given by the modifications themselves.
         - Cython signature: void setModifications(StringList & fixed_modifications, StringList & variable_modifications)
           Same as above, but using StringList instead of comma separated strings




.. py:class:: MorphologicalFilter
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _MorphologicalFilter


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MorphologicalFilter.html
 -- Inherits from ['DefaultParamHandler', 'ProgressLogger']




.. py:method:: MorphologicalFilter.endProgress
   :module: pyopenms.pyopenms_5


Cython signature: void endProgress()
Ends the progress display




.. py:method:: MorphologicalFilter.filter
   :module: pyopenms.pyopenms_5


Cython signature: void filter(MSSpectrum & spectrum)


Applies the morphological filtering operation to an MSSpectrum
-----
If the size of the structuring element is given in 'Thomson', the number of data points for
the structuring element is computed as follows:




.. py:method:: MorphologicalFilter.filterExperiment
   :module: pyopenms.pyopenms_5


Cython signature: void filterExperiment(MSExperiment & exp)


Applies the morphological filtering operation to an MSExperiment
-----
The size of the structuring element is computed for each spectrum individually, if it is given in 'Thomson'
See the filtering method for MSSpectrum for details




.. py:method:: MorphologicalFilter.getDefaults
   :module: pyopenms.pyopenms_5


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: MorphologicalFilter.getLogType
   :module: pyopenms.pyopenms_5


Cython signature: LogType getLogType()
Returns the type of progress log being used




.. py:method:: MorphologicalFilter.getName
   :module: pyopenms.pyopenms_5


Cython signature: String getName()
Returns the name




.. py:method:: MorphologicalFilter.getParameters
   :module: pyopenms.pyopenms_5


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: MorphologicalFilter.getSubsections
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: MorphologicalFilter.nextProgress
   :module: pyopenms.pyopenms_5


Cython signature: void nextProgress()
Increment progress by 1 (according to range begin-end)




.. py:method:: MorphologicalFilter.setLogType
   :module: pyopenms.pyopenms_5


Cython signature: void setLogType(LogType)
Sets the progress log that should be used. The default type is NONE!




.. py:method:: MorphologicalFilter.setName
   :module: pyopenms.pyopenms_5


Cython signature: void setName(const String &)
Sets the name




.. py:method:: MorphologicalFilter.setParameters
   :module: pyopenms.pyopenms_5


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: MorphologicalFilter.setProgress
   :module: pyopenms.pyopenms_5


Cython signature: void setProgress(ptrdiff_t value)
Sets the current progress




.. py:method:: MorphologicalFilter.startProgress
   :module: pyopenms.pyopenms_5


Cython signature: void startProgress(ptrdiff_t begin, ptrdiff_t end, String label)




.. py:class:: MzIdentMLFile
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _MzIdentMLFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MzIdentMLFile.html
 -- Inherits from ['ProgressLogger']




.. py:method:: MzIdentMLFile.endProgress
   :module: pyopenms.pyopenms_5


Cython signature: void endProgress()
Ends the progress display




.. py:method:: MzIdentMLFile.getLogType
   :module: pyopenms.pyopenms_5


Cython signature: LogType getLogType()
Returns the type of progress log being used




.. py:method:: MzIdentMLFile.isSemanticallyValid
   :module: pyopenms.pyopenms_5


Cython signature: bool isSemanticallyValid(String filename, StringList errors, StringList warnings)


Checks if a file is valid with respect to the mapping file and the controlled vocabulary
-----
:param filename: File name of the file to be checked
:param errors: Errors during the validation are returned in this output parameter
:param warnings: Warnings during the validation are returned in this output parameter
-----
:raises:
  Exception: FileNotFound is thrown if the file could not be opened




.. py:method:: MzIdentMLFile.load
   :module: pyopenms.pyopenms_5


Cython signature: void load(String filename, libcpp_vector[ProteinIdentification] & poid, libcpp_vector[PeptideIdentification] & peid)


Loads the identifications from a MzIdentML file
-----
:param filename: File name of the file to be checked
-----
:raises:
  Exception: FileNotFound is thrown if the file could not be opened
:raises:
  Exception: ParseError is thrown if an error occurs during parsin




.. py:method:: MzIdentMLFile.nextProgress
   :module: pyopenms.pyopenms_5


Cython signature: void nextProgress()
Increment progress by 1 (according to range begin-end)




.. py:method:: MzIdentMLFile.setLogType
   :module: pyopenms.pyopenms_5


Cython signature: void setLogType(LogType)
Sets the progress log that should be used. The default type is NONE!




.. py:method:: MzIdentMLFile.setProgress
   :module: pyopenms.pyopenms_5


Cython signature: void setProgress(ptrdiff_t value)
Sets the current progress




.. py:method:: MzIdentMLFile.startProgress
   :module: pyopenms.pyopenms_5


Cython signature: void startProgress(ptrdiff_t begin, ptrdiff_t end, String label)




.. py:method:: MzIdentMLFile.store
   :module: pyopenms.pyopenms_5


Cython signature: void store(String filename, libcpp_vector[ProteinIdentification] & poid, libcpp_vector[PeptideIdentification] & peid)


Stores the identifications in a MzIdentML file
-----
:raises:
  Exception: UnableToCreateFile is thrown if the file could not be created




.. py:class:: MzMLSwathFileConsumer
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _MzMLSwathFileConsumer


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MzMLSwathFileConsumer.html
 -- Inherits from ['FullSwathFileConsumer']




.. py:method:: MzMLSwathFileConsumer.consumeChromatogram
   :module: pyopenms.pyopenms_5


Cython signature: void consumeChromatogram(MSChromatogram & c)




.. py:method:: MzMLSwathFileConsumer.consumeSpectrum
   :module: pyopenms.pyopenms_5


Cython signature: void consumeSpectrum(MSSpectrum & s)




.. py:method:: MzMLSwathFileConsumer.retrieveSwathMaps
   :module: pyopenms.pyopenms_5


Cython signature: void retrieveSwathMaps(libcpp_vector[SwathMap] & maps)




.. py:method:: MzMLSwathFileConsumer.setExpectedSize
   :module: pyopenms.pyopenms_5


Cython signature: void setExpectedSize(size_t s, size_t c)




.. py:method:: MzMLSwathFileConsumer.setExperimentalSettings
   :module: pyopenms.pyopenms_5


Cython signature: void setExperimentalSettings(ExperimentalSettings exp)




.. py:class:: NLargest
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _NLargest


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1NLargest.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: NLargest.filterPeakMap
   :module: pyopenms.pyopenms_5


Cython signature: void filterPeakMap(MSExperiment & exp)
Keep only n-largest peaks in each spectrum of a peak map




.. py:method:: NLargest.filterPeakSpectrum
   :module: pyopenms.pyopenms_5


Cython signature: void filterPeakSpectrum(MSSpectrum & spec)
Keep only n-largest peaks in spectrum




.. py:method:: NLargest.filterSpectrum
   :module: pyopenms.pyopenms_5


Cython signature: void filterSpectrum(MSSpectrum & spec)
Keep only n-largest peaks in spectrum




.. py:method:: NLargest.getDefaults
   :module: pyopenms.pyopenms_5


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: NLargest.getName
   :module: pyopenms.pyopenms_5


Cython signature: String getName()
Returns the name




.. py:method:: NLargest.getParameters
   :module: pyopenms.pyopenms_5


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: NLargest.getSubsections
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: NLargest.setName
   :module: pyopenms.pyopenms_5


Cython signature: void setName(const String &)
Sets the name




.. py:method:: NLargest.setParameters
   :module: pyopenms.pyopenms_5


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: NeutralLossMarker
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _NeutralLossMarker


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1NeutralLossMarker.html
 -- Inherits from ['PeakMarker']




.. py:method:: NeutralLossMarker.apply
   :module: pyopenms.pyopenms_5


Cython signature: void apply(libcpp_map[double,bool] &, MSSpectrum &)




.. py:method:: NeutralLossMarker.create
   :module: pyopenms.pyopenms_5




.. py:method:: NeutralLossMarker.getDefaults
   :module: pyopenms.pyopenms_5


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: NeutralLossMarker.getName
   :module: pyopenms.pyopenms_5


Cython signature: String getName()
Returns the name




.. py:method:: NeutralLossMarker.getParameters
   :module: pyopenms.pyopenms_5


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: NeutralLossMarker.getProductName
   :module: pyopenms.pyopenms_5


Cython signature: String getProductName()
Returns the product name




.. py:method:: NeutralLossMarker.getSubsections
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: NeutralLossMarker.setName
   :module: pyopenms.pyopenms_5


Cython signature: void setName(const String &)
Sets the name




.. py:method:: NeutralLossMarker.setParameters
   :module: pyopenms.pyopenms_5


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: OpenSwathDataAccessHelper
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _OpenSwathDataAccessHelper


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1OpenSwathDataAccessHelper.html




.. py:method:: OpenSwathDataAccessHelper.convertPeptideToAASequence
   :module: pyopenms.pyopenms_5


Cython signature: void convertPeptideToAASequence(LightCompound & peptide, AASequence & aa_sequence)
Converts from the LightCompound to an OpenMS AASequence (with correct modifications)




.. py:method:: OpenSwathDataAccessHelper.convertTargetedCompound
   :module: pyopenms.pyopenms_5


Cython signature: void convertTargetedCompound(Peptide pep, LightCompound & p)
Converts from the OpenMS TargetedExperiment Peptide to the LightTargetedExperiment Peptide




.. py:method:: OpenSwathDataAccessHelper.convertTargetedExp
   :module: pyopenms.pyopenms_5


Cython signature: void convertTargetedExp(TargetedExperiment & transition_exp_, LightTargetedExperiment & transition_exp)
Converts from the OpenMS TargetedExperiment to the OpenMs LightTargetedExperiment




.. py:method:: OpenSwathDataAccessHelper.convertToChromatogramPtr
   :module: pyopenms.pyopenms_5




.. py:method:: OpenSwathDataAccessHelper.convertToOpenMSChromatogram
   :module: pyopenms.pyopenms_5


Cython signature: void convertToOpenMSChromatogram(shared_ptr[OSChromatogram] cptr, MSChromatogram & chromatogram)
Converts a ChromatogramPtr to an OpenMS Chromatogram




.. py:method:: OpenSwathDataAccessHelper.convertToOpenMSChromatogramFilter
   :module: pyopenms.pyopenms_5


Cython signature: void convertToOpenMSChromatogramFilter(MSChromatogram & chromatogram, shared_ptr[OSChromatogram] cptr, double rt_min, double rt_max)




.. py:method:: OpenSwathDataAccessHelper.convertToOpenMSSpectrum
   :module: pyopenms.pyopenms_5


Cython signature: void convertToOpenMSSpectrum(shared_ptr[OSSpectrum] sptr, MSSpectrum & spectrum)
Converts a SpectrumPtr to an OpenMS Spectrum




.. py:method:: OpenSwathDataAccessHelper.convertToSpectrumPtr
   :module: pyopenms.pyopenms_5




.. py:class:: OptimizePeakDeconvolution
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _OptimizePeakDeconvolution


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1OptimizePeakDeconvolution.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: OptimizePeakDeconvolution.getCharge
   :module: pyopenms.pyopenms_5


Cython signature: int getCharge()
Returns the charge




.. py:method:: OptimizePeakDeconvolution.getDefaults
   :module: pyopenms.pyopenms_5


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: OptimizePeakDeconvolution.getName
   :module: pyopenms.pyopenms_5


Cython signature: String getName()
Returns the name




.. py:method:: OptimizePeakDeconvolution.getNumberOfPeaks_
   :module: pyopenms.pyopenms_5


Cython signature: size_t getNumberOfPeaks_(int charge, libcpp_vector[PeakShape] & temp_shapes, OptimizePeakDeconvolution_Data & data)




.. py:method:: OptimizePeakDeconvolution.getParameters
   :module: pyopenms.pyopenms_5


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: OptimizePeakDeconvolution.getPenalties
   :module: pyopenms.pyopenms_5


Cython signature: PenaltyFactorsIntensity getPenalties()
Returns the penalty parameter




.. py:method:: OptimizePeakDeconvolution.getSubsections
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: OptimizePeakDeconvolution.optimize
   :module: pyopenms.pyopenms_5


Cython signature: bool optimize(libcpp_vector[PeakShape] & peaks, OptimizePeakDeconvolution_Data & data)
Performs a nonlinear optimization of the peaks that belong to the current isotope pattern




.. py:method:: OptimizePeakDeconvolution.setCharge
   :module: pyopenms.pyopenms_5


Cython signature: void setCharge(int charge)
Sets the charge




.. py:method:: OptimizePeakDeconvolution.setName
   :module: pyopenms.pyopenms_5


Cython signature: void setName(const String &)
Sets the name




.. py:method:: OptimizePeakDeconvolution.setParameters
   :module: pyopenms.pyopenms_5


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: OptimizePeakDeconvolution.setPenalties
   :module: pyopenms.pyopenms_5


Cython signature: void setPenalties(PenaltyFactorsIntensity & penalties)
Sets the penalty parameter




.. py:class:: OptimizePeakDeconvolution_Data
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _OptimizePeakDeconvolution_Data


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1OptimizePeakDeconvolution_Data.html




.. py:attribute:: OptimizePeakDeconvolution_Data.charge
   :module: pyopenms.pyopenms_5




.. py:attribute:: OptimizePeakDeconvolution_Data.peaks
   :module: pyopenms.pyopenms_5




.. py:attribute:: OptimizePeakDeconvolution_Data.penalties
   :module: pyopenms.pyopenms_5




.. py:attribute:: OptimizePeakDeconvolution_Data.positions
   :module: pyopenms.pyopenms_5




.. py:attribute:: OptimizePeakDeconvolution_Data.signal
   :module: pyopenms.pyopenms_5




.. py:class:: Param
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _Param


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1Param.html




.. py:method:: Param.addTag
   :module: pyopenms.pyopenms_5


Cython signature: void addTag(libcpp_utf8_string key, libcpp_utf8_string tag)




.. py:method:: Param.addTags
   :module: pyopenms.pyopenms_5


Cython signature: void addTags(libcpp_utf8_string key, libcpp_vector[libcpp_utf8_string] tags)




.. py:method:: Param.asDict
   :module: pyopenms.pyopenms_5




.. py:method:: Param.checkDefaults
   :module: pyopenms.pyopenms_5


- Cython signature: void checkDefaults(libcpp_utf8_string name, Param defaults, libcpp_utf8_string prefix)
- Cython signature: void checkDefaults(libcpp_utf8_string name, Param defaults)




.. py:method:: Param.clear
   :module: pyopenms.pyopenms_5


Cython signature: void clear()




.. py:method:: Param.clearTags
   :module: pyopenms.pyopenms_5


Cython signature: void clearTags(libcpp_utf8_string key)




.. py:method:: Param.copy
   :module: pyopenms.pyopenms_5


- Cython signature: Param copy(libcpp_utf8_string prefix, bool)
- Cython signature: Param copy(libcpp_utf8_string prefix)




.. py:method:: Param.descriptions
   :module: pyopenms.pyopenms_5




.. py:method:: Param.empty
   :module: pyopenms.pyopenms_5


Cython signature: bool empty()




.. py:method:: Param.exists
   :module: pyopenms.pyopenms_5


Cython signature: bool exists(libcpp_utf8_string key)




.. py:method:: Param.get
   :module: pyopenms.pyopenms_5




.. py:method:: Param.getDescription
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_utf8_output_string getDescription(libcpp_utf8_string key)




.. py:method:: Param.getEntry
   :module: pyopenms.pyopenms_5


Cython signature: ParamEntry getEntry(libcpp_utf8_string)




.. py:method:: Param.getSectionDescription
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_utf8_output_string getSectionDescription(libcpp_utf8_string key)




.. py:method:: Param.getTags
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_vector[libcpp_utf8_string] getTags(libcpp_utf8_string key)




.. py:method:: Param.getValue
   :module: pyopenms.pyopenms_5


Cython signature: ParamValue getValue(libcpp_utf8_string key)




.. py:method:: Param.getValueType
   :module: pyopenms.pyopenms_5


Cython signature: ValueType getValueType(libcpp_utf8_string key)




.. py:method:: Param.hasTag
   :module: pyopenms.pyopenms_5


Cython signature: int hasTag(libcpp_utf8_string key, libcpp_utf8_string tag)




.. py:method:: Param.insert
   :module: pyopenms.pyopenms_5


Cython signature: void insert(libcpp_utf8_string prefix, Param param)




.. py:method:: Param.items
   :module: pyopenms.pyopenms_5




.. py:method:: Param.keys
   :module: pyopenms.pyopenms_5




.. py:method:: Param.merge
   :module: pyopenms.pyopenms_5


Cython signature: void merge(Param toMerge)




.. py:method:: Param.remove
   :module: pyopenms.pyopenms_5


Cython signature: void remove(libcpp_utf8_string key)




.. py:method:: Param.removeAll
   :module: pyopenms.pyopenms_5


Cython signature: void removeAll(libcpp_utf8_string prefix)




.. py:method:: Param.setDefaults
   :module: pyopenms.pyopenms_5


- Cython signature: void setDefaults(Param defaults, libcpp_utf8_string prefix, bool showMessage)
- Cython signature: void setDefaults(Param defaults, libcpp_utf8_string prefix)
- Cython signature: void setDefaults(Param defaults)




.. py:method:: Param.setMaxFloat
   :module: pyopenms.pyopenms_5


Cython signature: void setMaxFloat(libcpp_utf8_string key, double max)




.. py:method:: Param.setMaxInt
   :module: pyopenms.pyopenms_5


Cython signature: void setMaxInt(libcpp_utf8_string key, int max)




.. py:method:: Param.setMinFloat
   :module: pyopenms.pyopenms_5


Cython signature: void setMinFloat(libcpp_utf8_string key, double min)




.. py:method:: Param.setMinInt
   :module: pyopenms.pyopenms_5


Cython signature: void setMinInt(libcpp_utf8_string key, int min)




.. py:method:: Param.setSectionDescription
   :module: pyopenms.pyopenms_5


Cython signature: void setSectionDescription(libcpp_utf8_string key, libcpp_utf8_string desc)




.. py:method:: Param.setValidStrings
   :module: pyopenms.pyopenms_5


Cython signature: void setValidStrings(libcpp_utf8_string key, libcpp_vector[libcpp_utf8_string] strings)




.. py:method:: Param.setValue
   :module: pyopenms.pyopenms_5


- Cython signature: void setValue(libcpp_utf8_string key, ParamValue val, libcpp_utf8_string desc, libcpp_vector[libcpp_utf8_string] tags)
- Cython signature: void setValue(libcpp_utf8_string key, ParamValue val, libcpp_utf8_string desc)
- Cython signature: void setValue(libcpp_utf8_string key, ParamValue val)




.. py:method:: Param.size
   :module: pyopenms.pyopenms_5


Cython signature: size_t size()




.. py:method:: Param.update
   :module: pyopenms.pyopenms_5


use cases:


   p.update(dict d)
   p.update(Param p)
   p.update(Param p, int flag)




.. py:method:: Param.values
   :module: pyopenms.pyopenms_5




.. py:class:: Peak1D
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _Peak1D


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1Peak1D.html




.. py:method:: Peak1D.getIntensity
   :module: pyopenms.pyopenms_5


Cython signature: float getIntensity()




.. py:method:: Peak1D.getMZ
   :module: pyopenms.pyopenms_5


Cython signature: double getMZ()




.. py:method:: Peak1D.getPos
   :module: pyopenms.pyopenms_5


Cython signature: double getPos()




.. py:method:: Peak1D.setIntensity
   :module: pyopenms.pyopenms_5


Cython signature: void setIntensity(float)




.. py:method:: Peak1D.setMZ
   :module: pyopenms.pyopenms_5


Cython signature: void setMZ(double)




.. py:method:: Peak1D.setPos
   :module: pyopenms.pyopenms_5


Cython signature: void setPos(double pos)




.. py:class:: Peak2D
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _Peak2D


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1Peak2D.html


 A 2-dimensional raw data point or peak.
 -----
 This data structure is intended for continuous data or peak data.
 If you want to annotated single peaks with meta data, use RichPeak2D instead




.. py:method:: Peak2D.getIntensity
   :module: pyopenms.pyopenms_5


Cython signature: float getIntensity()
Returns the data point intensity (height)




.. py:method:: Peak2D.getMZ
   :module: pyopenms.pyopenms_5


Cython signature: double getMZ()
Returns the m/z coordinate (index 1)




.. py:method:: Peak2D.getRT
   :module: pyopenms.pyopenms_5


Cython signature: double getRT()
Returns the RT coordinate (index 0)




.. py:method:: Peak2D.setIntensity
   :module: pyopenms.pyopenms_5


Cython signature: void setIntensity(float)
Returns the data point intensity (height)




.. py:method:: Peak2D.setMZ
   :module: pyopenms.pyopenms_5


Cython signature: void setMZ(double)
Returns the m/z coordinate (index 1)




.. py:method:: Peak2D.setRT
   :module: pyopenms.pyopenms_5


Cython signature: void setRT(double)
Returns the RT coordinate (index 0)




.. py:class:: PeakPickerMRM
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _PeakPickerMRM


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1PeakPickerMRM.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: PeakPickerMRM.getDefaults
   :module: pyopenms.pyopenms_5


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: PeakPickerMRM.getName
   :module: pyopenms.pyopenms_5


Cython signature: String getName()
Returns the name




.. py:method:: PeakPickerMRM.getParameters
   :module: pyopenms.pyopenms_5


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: PeakPickerMRM.getSubsections
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: PeakPickerMRM.pickChromatogram
   :module: pyopenms.pyopenms_5


Cython signature: void pickChromatogram(MSChromatogram & chromatogram, MSChromatogram & picked_chrom)


Finds peaks in a single chromatogram and annotates left/right borders
-----
It uses a modified algorithm of the PeakPickerHiRes
-----
This function will return a picked chromatogram




.. py:method:: PeakPickerMRM.setName
   :module: pyopenms.pyopenms_5


Cython signature: void setName(const String &)
Sets the name




.. py:method:: PeakPickerMRM.setParameters
   :module: pyopenms.pyopenms_5


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: PenaltyFactorsIntensity
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _PenaltyFactorsIntensity


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1PenaltyFactorsIntensity.html
 -- Inherits from ['OptimizationFunctions_PenaltyFactors']




.. py:attribute:: PenaltyFactorsIntensity.height
   :module: pyopenms.pyopenms_5




.. py:class:: PrecursorIonSelectionPreprocessing
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _PrecursorIonSelectionPreprocessing


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1PrecursorIonSelectionPreprocessing.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: PrecursorIonSelectionPreprocessing.dbPreprocessing
   :module: pyopenms.pyopenms_5


         - Cython signature: void dbPreprocessing(String db_path, bool save)


Calculates tryptic peptide masses of a given database and stores masses and peptide sequences
-----
:param db_path: Path to database file (fasta)
:param save: Flag if preprocessing should be stored
-----
:raises:
  Exception: FileNotFound is thrown if the file could not be found
:raises:
  Exception: UnableToCreateFile if preprocessing file can't be written
         - Cython signature: void dbPreprocessing(String db_path, String rt_model_path, String dt_model_path, bool save)


Calculates tryptic peptide masses of a given database and stores masses and peptide sequences
-----
:param db_path: Path to database file (fasta)
:param rt_model_path
:param dt_model_path
:param save: Flag if preprocessing should be stored
-----
:raises:
  Exception: FileNotFound is thrown if the file could not be found
:raises:
  Exception: UnableToCreateFile if preprocessing file can't be written




.. py:method:: PrecursorIonSelectionPreprocessing.getDefaults
   :module: pyopenms.pyopenms_5


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: PrecursorIonSelectionPreprocessing.getGaussMu
   :module: pyopenms.pyopenms_5


Cython signature: double getGaussMu()
Returns the Gauss Mu value




.. py:method:: PrecursorIonSelectionPreprocessing.getGaussSigma
   :module: pyopenms.pyopenms_5


Cython signature: double getGaussSigma()
Returns the Gauss Sigma value




.. py:method:: PrecursorIonSelectionPreprocessing.getMasses
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_vector[double] getMasses(String acc)




.. py:method:: PrecursorIonSelectionPreprocessing.getName
   :module: pyopenms.pyopenms_5


Cython signature: String getName()
Returns the name




.. py:method:: PrecursorIonSelectionPreprocessing.getPT
   :module: pyopenms.pyopenms_5


Cython signature: double getPT(String prot_id, size_t peptide_index)
Returns the PT value




.. py:method:: PrecursorIonSelectionPreprocessing.getParameters
   :module: pyopenms.pyopenms_5


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: PrecursorIonSelectionPreprocessing.getRT
   :module: pyopenms.pyopenms_5


Cython signature: double getRT(String prot_id, size_t peptide_index)
Returns the RT value




.. py:method:: PrecursorIonSelectionPreprocessing.getRTProbability
   :module: pyopenms.pyopenms_5


- Cython signature: double getRTProbability(String prot_id, size_t peptide_index, Feature & feature)
- Cython signature: double getRTProbability(double pred_rt, Feature & feature)




.. py:method:: PrecursorIonSelectionPreprocessing.getSubsections
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: PrecursorIonSelectionPreprocessing.getWeight
   :module: pyopenms.pyopenms_5


Cython signature: double getWeight(double mass)
Returns the weighted frequency of a mass




.. py:method:: PrecursorIonSelectionPreprocessing.loadPreprocessing
   :module: pyopenms.pyopenms_5


Cython signature: void loadPreprocessing()
Loads tryptic peptide masses of a given database




.. py:method:: PrecursorIonSelectionPreprocessing.setFixedModifications
   :module: pyopenms.pyopenms_5


Cython signature: void setFixedModifications(StringList & modifications)




.. py:method:: PrecursorIonSelectionPreprocessing.setGaussianParameters
   :module: pyopenms.pyopenms_5


Cython signature: void setGaussianParameters(double mu, double sigma)




.. py:method:: PrecursorIonSelectionPreprocessing.setName
   :module: pyopenms.pyopenms_5


Cython signature: void setName(const String &)
Sets the name




.. py:method:: PrecursorIonSelectionPreprocessing.setParameters
   :module: pyopenms.pyopenms_5


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: ProbablePhosphoSites
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _ProbablePhosphoSites


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ProbablePhosphoSites.html




.. py:attribute:: ProbablePhosphoSites.AScore
   :module: pyopenms.pyopenms_5




.. py:attribute:: ProbablePhosphoSites.first
   :module: pyopenms.pyopenms_5




.. py:attribute:: ProbablePhosphoSites.peak_depth
   :module: pyopenms.pyopenms_5




.. py:attribute:: ProbablePhosphoSites.second
   :module: pyopenms.pyopenms_5




.. py:attribute:: ProbablePhosphoSites.seq_1
   :module: pyopenms.pyopenms_5




.. py:attribute:: ProbablePhosphoSites.seq_2
   :module: pyopenms.pyopenms_5




.. py:class:: ProteaseDB
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _ProteaseDB


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ProteaseDB.html




.. py:method:: ProteaseDB.getAllCometNames
   :module: pyopenms.pyopenms_5


Cython signature: void getAllCometNames(libcpp_vector[String] & all_names)
Returns all the enzyme names available for Comet




.. py:method:: ProteaseDB.getAllCruxNames
   :module: pyopenms.pyopenms_5


Cython signature: void getAllCruxNames(libcpp_vector[String] & all_names)
Returns all the enzyme names available for Crux




.. py:method:: ProteaseDB.getAllMSGFNames
   :module: pyopenms.pyopenms_5


Cython signature: void getAllMSGFNames(libcpp_vector[String] & all_names)
Returns all the enzyme names available for MSGFPlus




.. py:method:: ProteaseDB.getAllNames
   :module: pyopenms.pyopenms_5


Cython signature: void getAllNames(libcpp_vector[String] & all_names)




.. py:method:: ProteaseDB.getAllOMSSANames
   :module: pyopenms.pyopenms_5


Cython signature: void getAllOMSSANames(libcpp_vector[String] & all_names)
Returns all the enzyme names available for OMSSA




.. py:method:: ProteaseDB.getAllXTandemNames
   :module: pyopenms.pyopenms_5


Cython signature: void getAllXTandemNames(libcpp_vector[String] & all_names)
Returns all the enzyme names available for XTandem




.. py:method:: ProteaseDB.getEnzyme
   :module: pyopenms.pyopenms_5


Cython signature: const DigestionEnzymeProtein * getEnzyme(const String & name)




.. py:method:: ProteaseDB.getEnzymeByRegEx
   :module: pyopenms.pyopenms_5


Cython signature: const DigestionEnzymeProtein * getEnzymeByRegEx(const String & cleavage_regex)




.. py:method:: ProteaseDB.hasEnzyme
   :module: pyopenms.pyopenms_5


Cython signature: bool hasEnzyme(const String & name)




.. py:method:: ProteaseDB.hasRegEx
   :module: pyopenms.pyopenms_5


Cython signature: bool hasRegEx(const String & cleavage_regex)




.. py:class:: ProteinGroup
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _ProteinGroup


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ProteinGroup.html




.. py:attribute:: ProteinGroup.accessions
   :module: pyopenms.pyopenms_5




.. py:attribute:: ProteinGroup.probability
   :module: pyopenms.pyopenms_5




.. py:class:: ProteinIdentification
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _ProteinIdentification


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ProteinIdentification.html
 -- Inherits from ['MetaInfoInterface']




.. py:attribute:: ProteinIdentification.PeakMassType
   :module: pyopenms.pyopenms_5


alias of :py:class:`pyopenms.pyopenms_5.__PeakMassType`


.. py:method:: ProteinIdentification.addPrimaryMSRunPath
   :module: pyopenms.pyopenms_5


- Cython signature: void addPrimaryMSRunPath(StringList & s)
- Cython signature: void addPrimaryMSRunPath(StringList & s, bool raw)




.. py:method:: ProteinIdentification.assignRanks
   :module: pyopenms.pyopenms_5


Cython signature: void assignRanks()
Sorts the protein hits by score and assigns ranks (best score has rank 1)




.. py:method:: ProteinIdentification.clearMetaInfo
   :module: pyopenms.pyopenms_5


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: ProteinIdentification.computeCoverage
   :module: pyopenms.pyopenms_5


Cython signature: void computeCoverage(libcpp_vector[PeptideIdentification] pep_ids)
Compute the coverage (in percent) of all ProteinHits given PeptideHits




.. py:method:: ProteinIdentification.getDateTime
   :module: pyopenms.pyopenms_5


Cython signature: DateTime getDateTime()
Returns the date of the protein identification run




.. py:method:: ProteinIdentification.getHits
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_vector[ProteinHit] getHits()
Returns the protein hits




.. py:method:: ProteinIdentification.getIdentifier
   :module: pyopenms.pyopenms_5


Cython signature: String getIdentifier()
Returns the identifier




.. py:method:: ProteinIdentification.getIndistinguishableProteins
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_vector[ProteinGroup] getIndistinguishableProteins()
Returns the indistinguishable proteins




.. py:method:: ProteinIdentification.getKeys
   :module: pyopenms.pyopenms_5


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: ProteinIdentification.getMetaValue
   :module: pyopenms.pyopenms_5


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: ProteinIdentification.getPrimaryMSRunPath
   :module: pyopenms.pyopenms_5


- Cython signature: void getPrimaryMSRunPath(StringList & output)
- Cython signature: void getPrimaryMSRunPath(StringList & output, bool raw)




.. py:method:: ProteinIdentification.getProteinGroups
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_vector[ProteinGroup] getProteinGroups()
Returns the protein groups




.. py:method:: ProteinIdentification.getScoreType
   :module: pyopenms.pyopenms_5


Cython signature: String getScoreType()
Returns the protein score type




.. py:method:: ProteinIdentification.getSearchEngine
   :module: pyopenms.pyopenms_5


Cython signature: String getSearchEngine()
Returns the type of search engine used




.. py:method:: ProteinIdentification.getSearchEngineVersion
   :module: pyopenms.pyopenms_5


Cython signature: String getSearchEngineVersion()
Returns the search engine version




.. py:method:: ProteinIdentification.getSearchParameters
   :module: pyopenms.pyopenms_5


Cython signature: SearchParameters getSearchParameters()
Returns the search parameters




.. py:method:: ProteinIdentification.getSignificanceThreshold
   :module: pyopenms.pyopenms_5


Cython signature: double getSignificanceThreshold()
Returns the protein significance threshold value




.. py:method:: ProteinIdentification.insertHit
   :module: pyopenms.pyopenms_5


Cython signature: void insertHit(ProteinHit input)
Appends a protein hit




.. py:method:: ProteinIdentification.insertIndistinguishableProteins
   :module: pyopenms.pyopenms_5


Cython signature: void insertIndistinguishableProteins(ProteinGroup group)
Appends new indistinguishable proteins




.. py:method:: ProteinIdentification.insertProteinGroup
   :module: pyopenms.pyopenms_5


Cython signature: void insertProteinGroup(ProteinGroup group)
Appends a new protein group




.. py:method:: ProteinIdentification.isHigherScoreBetter
   :module: pyopenms.pyopenms_5


Cython signature: bool isHigherScoreBetter()
Returns true if a higher score represents a better score




.. py:method:: ProteinIdentification.isMetaEmpty
   :module: pyopenms.pyopenms_5


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: ProteinIdentification.metaRegistry
   :module: pyopenms.pyopenms_5


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: ProteinIdentification.metaValueExists
   :module: pyopenms.pyopenms_5


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: ProteinIdentification.removeMetaValue
   :module: pyopenms.pyopenms_5


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: ProteinIdentification.setDateTime
   :module: pyopenms.pyopenms_5


Cython signature: void setDateTime(DateTime date)
Sets the date of the protein identification run




.. py:method:: ProteinIdentification.setHigherScoreBetter
   :module: pyopenms.pyopenms_5


Cython signature: void setHigherScoreBetter(bool higher_is_better)
Sets the orientation of the score (is higher better?)




.. py:method:: ProteinIdentification.setHits
   :module: pyopenms.pyopenms_5


Cython signature: void setHits(libcpp_vector[ProteinHit] hits)
Sets the protein hits




.. py:method:: ProteinIdentification.setIdentifier
   :module: pyopenms.pyopenms_5


Cython signature: void setIdentifier(String id_)
Sets the identifier




.. py:method:: ProteinIdentification.setMetaValue
   :module: pyopenms.pyopenms_5


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:method:: ProteinIdentification.setPrimaryMSRunPath
   :module: pyopenms.pyopenms_5


         - Cython signature: void setPrimaryMSRunPath(StringList & s)


Set the file paths to the primary MS runs (usually the mzML files obtained after data conversion from raw files)
-----
:param raw: Store paths to the raw files (or equivalent) rather than mzMLs
         - Cython signature: void setPrimaryMSRunPath(StringList & s, bool raw)




.. py:method:: ProteinIdentification.setScoreType
   :module: pyopenms.pyopenms_5


Cython signature: void setScoreType(String type)
Sets the protein score type




.. py:method:: ProteinIdentification.setSearchEngine
   :module: pyopenms.pyopenms_5


Cython signature: void setSearchEngine(String search_engine)
Sets the search engine type




.. py:method:: ProteinIdentification.setSearchEngineVersion
   :module: pyopenms.pyopenms_5


Cython signature: void setSearchEngineVersion(String search_engine_version)
Sets the search engine version




.. py:method:: ProteinIdentification.setSearchParameters
   :module: pyopenms.pyopenms_5


Cython signature: void setSearchParameters(SearchParameters search_parameters)
Sets the search parameters




.. py:method:: ProteinIdentification.setSignificanceThreshold
   :module: pyopenms.pyopenms_5


Cython signature: void setSignificanceThreshold(double value)
Sets the protein significance threshold value




.. py:method:: ProteinIdentification.sort
   :module: pyopenms.pyopenms_5


Cython signature: void sort()
Sorts the protein hits according to their score




.. py:class:: RNPxlMarkerIonExtractor
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _RNPxlMarkerIonExtractor


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1RNPxlMarkerIonExtractor.html




.. py:method:: RNPxlMarkerIonExtractor.extractMarkerIons
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_map[String,libcpp_vector[libcpp_pair[double,double]]] extractMarkerIons(MSSpectrum & s, double marker_tolerance)




.. py:class:: RegularSwathFileConsumer
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _RegularSwathFileConsumer


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1RegularSwathFileConsumer.html
 -- Inherits from ['FullSwathFileConsumer']




.. py:method:: RegularSwathFileConsumer.consumeChromatogram
   :module: pyopenms.pyopenms_5


Cython signature: void consumeChromatogram(MSChromatogram & c)




.. py:method:: RegularSwathFileConsumer.consumeSpectrum
   :module: pyopenms.pyopenms_5


Cython signature: void consumeSpectrum(MSSpectrum & s)




.. py:method:: RegularSwathFileConsumer.retrieveSwathMaps
   :module: pyopenms.pyopenms_5


Cython signature: void retrieveSwathMaps(libcpp_vector[SwathMap] & maps)




.. py:method:: RegularSwathFileConsumer.setExpectedSize
   :module: pyopenms.pyopenms_5


Cython signature: void setExpectedSize(size_t s, size_t c)




.. py:method:: RegularSwathFileConsumer.setExperimentalSettings
   :module: pyopenms.pyopenms_5


Cython signature: void setExperimentalSettings(ExperimentalSettings exp)




.. py:class:: ResidueModification
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _ResidueModification


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ResidueModification.html




.. py:attribute:: ResidueModification.SourceClassification
   :module: pyopenms.pyopenms_5


alias of :py:class:`pyopenms.pyopenms_5.__SourceClassification`


.. py:attribute:: ResidueModification.TermSpecificity
   :module: pyopenms.pyopenms_5


alias of :py:class:`pyopenms.pyopenms_5.__TermSpecificity`


.. py:method:: ResidueModification.addSynonym
   :module: pyopenms.pyopenms_5


Cython signature: void addSynonym(const String & synonym)
Adds a synonym to the unique list




.. py:method:: ResidueModification.getAverageMass
   :module: pyopenms.pyopenms_5


Cython signature: double getAverageMass()
Returns the average mass if set




.. py:method:: ResidueModification.getDiffAverageMass
   :module: pyopenms.pyopenms_5


Cython signature: double getDiffAverageMass()
Returns the difference average mass, or 0.0 if not set




.. py:method:: ResidueModification.getDiffFormula
   :module: pyopenms.pyopenms_5


Cython signature: EmpiricalFormula getDiffFormula()
Returns the diff formula if one was set




.. py:method:: ResidueModification.getDiffMonoMass
   :module: pyopenms.pyopenms_5


Cython signature: double getDiffMonoMass()
Returns the diff monoisotopic mass, or 0.0 if not set




.. py:method:: ResidueModification.getFormula
   :module: pyopenms.pyopenms_5


Cython signature: String getFormula()
Returns the chemical formula if set




.. py:method:: ResidueModification.getFullId
   :module: pyopenms.pyopenms_5


Cython signature: String getFullId()




.. py:method:: ResidueModification.getFullName
   :module: pyopenms.pyopenms_5


Cython signature: String getFullName()
Returns the full name of the modification




.. py:method:: ResidueModification.getId
   :module: pyopenms.pyopenms_5


Cython signature: String getId()
Returns the identifier of the modification




.. py:method:: ResidueModification.getMonoMass
   :module: pyopenms.pyopenms_5


Cython signature: double getMonoMass()
Return the monoisotopic mass, or 0.0 if not set




.. py:method:: ResidueModification.getName
   :module: pyopenms.pyopenms_5


Cython signature: String getName()
Returns the PSI-MS-label if available; e.g. Mascot uses this name




.. py:method:: ResidueModification.getNeutralLossAverageMasses
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_vector[double] getNeutralLossAverageMasses()
Returns the neutral loss average weight




.. py:method:: ResidueModification.getNeutralLossDiffFormulas
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_vector[EmpiricalFormula] getNeutralLossDiffFormulas()
Returns the neutral loss diff formula (if available)




.. py:method:: ResidueModification.getNeutralLossMonoMasses
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_vector[double] getNeutralLossMonoMasses()
Returns the neutral loss mono weight




.. py:method:: ResidueModification.getOrigin
   :module: pyopenms.pyopenms_5


Cython signature: char getOrigin()
Returns the origin (i.e. modified amino acid)




.. py:method:: ResidueModification.getPSIMODAccession
   :module: pyopenms.pyopenms_5


Cython signature: String getPSIMODAccession()
Returns the PSI-MOD accession if available




.. py:method:: ResidueModification.getSourceClassification
   :module: pyopenms.pyopenms_5


Cython signature: SourceClassification getSourceClassification()
Returns the source classification, if none was set, it is unspecific




.. py:method:: ResidueModification.getSourceClassificationName
   :module: pyopenms.pyopenms_5


Cython signature: String getSourceClassificationName(SourceClassification classification)
Returns the classification




.. py:method:: ResidueModification.getSynonyms
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_set[String] getSynonyms()
Returns the set of synonyms




.. py:method:: ResidueModification.getTermSpecificity
   :module: pyopenms.pyopenms_5


Cython signature: TermSpecificity getTermSpecificity()
Returns terminal specificity




.. py:method:: ResidueModification.getTermSpecificityName
   :module: pyopenms.pyopenms_5


Cython signature: String getTermSpecificityName(TermSpecificity)
Returns the name of the terminal specificity




.. py:method:: ResidueModification.getUniModAccession
   :module: pyopenms.pyopenms_5


Cython signature: String getUniModAccession()
Returns the unimod accession if available




.. py:method:: ResidueModification.getUniModRecordId
   :module: pyopenms.pyopenms_5


Cython signature: int getUniModRecordId()
Gets the unimod record id




.. py:method:: ResidueModification.hasNeutralLoss
   :module: pyopenms.pyopenms_5


Cython signature: bool hasNeutralLoss()
Returns true if a neutral loss formula is set




.. py:method:: ResidueModification.isUserDefined
   :module: pyopenms.pyopenms_5


Cython signature: bool isUserDefined()
Returns true if it is a user-defined modification (empty id)




.. py:method:: ResidueModification.setAverageMass
   :module: pyopenms.pyopenms_5


Cython signature: void setAverageMass(double mass)
Sets the average mass




.. py:method:: ResidueModification.setDiffAverageMass
   :module: pyopenms.pyopenms_5


Cython signature: void setDiffAverageMass(double mass)
Sets the difference average mass




.. py:method:: ResidueModification.setDiffFormula
   :module: pyopenms.pyopenms_5


Cython signature: void setDiffFormula(EmpiricalFormula & diff_formula)
Sets diff formula (no masses will be changed)




.. py:method:: ResidueModification.setDiffMonoMass
   :module: pyopenms.pyopenms_5


Cython signature: void setDiffMonoMass(double mass)
Sets the difference monoisotopic mass




.. py:method:: ResidueModification.setFormula
   :module: pyopenms.pyopenms_5


Cython signature: void setFormula(const String & composition)
Sets the formula (no masses will be changed)




.. py:method:: ResidueModification.setFullId
   :module: pyopenms.pyopenms_5


Cython signature: void setFullId(const String & full_id)
Sets the full identifier (Unimod Accession + origin, if available)




.. py:method:: ResidueModification.setFullName
   :module: pyopenms.pyopenms_5


Cython signature: void setFullName(const String & full_name)
Sets the full name of the modification; must NOT contain the origin (or . for terminals!)




.. py:method:: ResidueModification.setId
   :module: pyopenms.pyopenms_5


Cython signature: void setId(const String & id_)
Sets the identifier of the modification




.. py:method:: ResidueModification.setMonoMass
   :module: pyopenms.pyopenms_5


Cython signature: void setMonoMass(double mass)
Sets the monoisotopic mass (this must include the weight of the residue itself!)




.. py:method:: ResidueModification.setName
   :module: pyopenms.pyopenms_5


Cython signature: void setName(const String & name)
Sets the name of modification




.. py:method:: ResidueModification.setNeutralLossAverageMasses
   :module: pyopenms.pyopenms_5


Cython signature: void setNeutralLossAverageMasses(libcpp_vector[double] average_masses)
Sets the neutral loss average weight




.. py:method:: ResidueModification.setNeutralLossDiffFormulas
   :module: pyopenms.pyopenms_5


Cython signature: void setNeutralLossDiffFormulas(libcpp_vector[EmpiricalFormula] & diff_formulas)
Sets the neutral loss formula




.. py:method:: ResidueModification.setNeutralLossMonoMasses
   :module: pyopenms.pyopenms_5


Cython signature: void setNeutralLossMonoMasses(libcpp_vector[double] mono_masses)
Sets the neutral loss mono weight




.. py:method:: ResidueModification.setOrigin
   :module: pyopenms.pyopenms_5


Cython signature: void setOrigin(char origin)
Sets the origin (i.e. modified amino acid)




.. py:method:: ResidueModification.setPSIMODAccession
   :module: pyopenms.pyopenms_5


Cython signature: void setPSIMODAccession(const String & id_)
Sets the MOD-XXXXX accession of PSI-MOD




.. py:method:: ResidueModification.setSourceClassification
   :module: pyopenms.pyopenms_5


- Cython signature: void setSourceClassification(const String & classification)
  Classification as defined by the PSI-MOD


- Cython signature: void setSourceClassification(SourceClassification classification)
  Sets the source classification




.. py:method:: ResidueModification.setSynonyms
   :module: pyopenms.pyopenms_5


Cython signature: void setSynonyms(libcpp_set[String] & synonyms)
Sets the synonyms of that modification




.. py:method:: ResidueModification.setTermSpecificity
   :module: pyopenms.pyopenms_5


- Cython signature: void setTermSpecificity(TermSpecificity term_spec)
  Sets the term specificity


- Cython signature: void setTermSpecificity(const String & name)
  Sets the terminal specificity using a name




.. py:method:: ResidueModification.setUniModRecordId
   :module: pyopenms.pyopenms_5


Cython signature: void setUniModRecordId(int id_)
Sets the unimod record id




.. py:class:: RichPeak2D
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _RichPeak2D


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1RichPeak2D.html
 -- Inherits from ['Peak2D', 'UniqueIdInterface', 'MetaInfoInterface']




.. py:method:: RichPeak2D.clearMetaInfo
   :module: pyopenms.pyopenms_5


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: RichPeak2D.clearUniqueId
   :module: pyopenms.pyopenms_5


Cython signature: size_t clearUniqueId()
Clear the unique id. The new unique id will be invalid. Returns 1 if the unique id was changed, 0 otherwise




.. py:method:: RichPeak2D.ensureUniqueId
   :module: pyopenms.pyopenms_5


Cython signature: size_t ensureUniqueId()
Assigns a valid unique id, but only if the present one is invalid. Returns 1 if the unique id was changed, 0 otherwise




.. py:method:: RichPeak2D.getIntensity
   :module: pyopenms.pyopenms_5


Cython signature: float getIntensity()
Returns the data point intensity (height)




.. py:method:: RichPeak2D.getKeys
   :module: pyopenms.pyopenms_5


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: RichPeak2D.getMZ
   :module: pyopenms.pyopenms_5


Cython signature: double getMZ()
Returns the m/z coordinate (index 1)




.. py:method:: RichPeak2D.getMetaValue
   :module: pyopenms.pyopenms_5


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: RichPeak2D.getRT
   :module: pyopenms.pyopenms_5


Cython signature: double getRT()
Returns the RT coordinate (index 0)




.. py:method:: RichPeak2D.getUniqueId
   :module: pyopenms.pyopenms_5


Cython signature: size_t getUniqueId()
Returns the unique id




.. py:method:: RichPeak2D.hasInvalidUniqueId
   :module: pyopenms.pyopenms_5


Cython signature: size_t hasInvalidUniqueId()
Returns whether the unique id is invalid. Returns 1 if the unique id is invalid, 0 otherwise




.. py:method:: RichPeak2D.hasValidUniqueId
   :module: pyopenms.pyopenms_5


Cython signature: size_t hasValidUniqueId()
Returns whether the unique id is valid. Returns 1 if the unique id is valid, 0 otherwise




.. py:method:: RichPeak2D.isMetaEmpty
   :module: pyopenms.pyopenms_5


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: RichPeak2D.isValid
   :module: pyopenms.pyopenms_5


Cython signature: bool isValid(uint64_t unique_id)
Returns true if the unique_id is valid, false otherwise




.. py:method:: RichPeak2D.metaRegistry
   :module: pyopenms.pyopenms_5


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: RichPeak2D.metaValueExists
   :module: pyopenms.pyopenms_5


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: RichPeak2D.removeMetaValue
   :module: pyopenms.pyopenms_5


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: RichPeak2D.setIntensity
   :module: pyopenms.pyopenms_5


Cython signature: void setIntensity(float)
Returns the data point intensity (height)




.. py:method:: RichPeak2D.setMZ
   :module: pyopenms.pyopenms_5


Cython signature: void setMZ(double)
Returns the m/z coordinate (index 1)




.. py:method:: RichPeak2D.setMetaValue
   :module: pyopenms.pyopenms_5


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:method:: RichPeak2D.setRT
   :module: pyopenms.pyopenms_5


Cython signature: void setRT(double)
Returns the RT coordinate (index 0)




.. py:method:: RichPeak2D.setUniqueId
   :module: pyopenms.pyopenms_5


Cython signature: void setUniqueId(uint64_t rhs)
Assigns a new, valid unique id. Always returns 1




.. py:class:: SILACLabeler
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _SILACLabeler


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SILACLabeler.html




.. py:method:: SILACLabeler.getProductName
   :module: pyopenms.pyopenms_5


Cython signature: String getProductName()
Name of the model (needed by Factory)




.. py:method:: SILACLabeler.preCheck
   :module: pyopenms.pyopenms_5


Cython signature: void preCheck(Param & param)




.. py:class:: SVMPrediction
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _SVMPrediction


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SVMPrediction.html




.. py:attribute:: SVMPrediction.label
   :module: pyopenms.pyopenms_5




.. py:attribute:: SVMPrediction.probabilities
   :module: pyopenms.pyopenms_5




.. py:class:: Scaler
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _Scaler


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1Scaler.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: Scaler.filterPeakMap
   :module: pyopenms.pyopenms_5


Cython signature: void filterPeakMap(MSExperiment & exp)




.. py:method:: Scaler.filterPeakSpectrum
   :module: pyopenms.pyopenms_5


Cython signature: void filterPeakSpectrum(MSSpectrum & spec)




.. py:method:: Scaler.filterSpectrum
   :module: pyopenms.pyopenms_5


Cython signature: void filterSpectrum(MSSpectrum & spec)




.. py:method:: Scaler.getDefaults
   :module: pyopenms.pyopenms_5


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: Scaler.getName
   :module: pyopenms.pyopenms_5


Cython signature: String getName()
Returns the name




.. py:method:: Scaler.getParameters
   :module: pyopenms.pyopenms_5


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: Scaler.getSubsections
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: Scaler.setName
   :module: pyopenms.pyopenms_5


Cython signature: void setName(const String &)
Sets the name




.. py:method:: Scaler.setParameters
   :module: pyopenms.pyopenms_5


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: SearchParameters
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _SearchParameters


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SearchParameters.html
 -- Inherits from ['MetaInfoInterface']




.. py:attribute:: SearchParameters.charges
   :module: pyopenms.pyopenms_5




.. py:method:: SearchParameters.clearMetaInfo
   :module: pyopenms.pyopenms_5


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:attribute:: SearchParameters.db
   :module: pyopenms.pyopenms_5




.. py:attribute:: SearchParameters.db_version
   :module: pyopenms.pyopenms_5




.. py:attribute:: SearchParameters.digestion_enzyme
   :module: pyopenms.pyopenms_5




.. py:attribute:: SearchParameters.fixed_modifications
   :module: pyopenms.pyopenms_5




.. py:attribute:: SearchParameters.fragment_mass_tolerance
   :module: pyopenms.pyopenms_5




.. py:attribute:: SearchParameters.fragment_mass_tolerance_ppm
   :module: pyopenms.pyopenms_5




.. py:method:: SearchParameters.getKeys
   :module: pyopenms.pyopenms_5


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: SearchParameters.getMetaValue
   :module: pyopenms.pyopenms_5


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: SearchParameters.isMetaEmpty
   :module: pyopenms.pyopenms_5


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:attribute:: SearchParameters.mass_type
   :module: pyopenms.pyopenms_5




.. py:method:: SearchParameters.metaRegistry
   :module: pyopenms.pyopenms_5


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: SearchParameters.metaValueExists
   :module: pyopenms.pyopenms_5


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:attribute:: SearchParameters.missed_cleavages
   :module: pyopenms.pyopenms_5




.. py:attribute:: SearchParameters.precursor_mass_tolerance
   :module: pyopenms.pyopenms_5




.. py:attribute:: SearchParameters.precursor_mass_tolerance_ppm
   :module: pyopenms.pyopenms_5




.. py:method:: SearchParameters.removeMetaValue
   :module: pyopenms.pyopenms_5


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: SearchParameters.setMetaValue
   :module: pyopenms.pyopenms_5


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:attribute:: SearchParameters.taxonomy
   :module: pyopenms.pyopenms_5




.. py:attribute:: SearchParameters.variable_modifications
   :module: pyopenms.pyopenms_5




.. py:class:: SimpleSVM
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _SimpleSVM


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SimpleSVM.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: SimpleSVM.getDefaults
   :module: pyopenms.pyopenms_5


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: SimpleSVM.getFeatureWeights
   :module: pyopenms.pyopenms_5


Cython signature: void getFeatureWeights(libcpp_map[String,double] & feature_weights)


Returns the weights used for features (predictors) in the SVM model
-----
Currently only supported for two-class classification
If a linear kernel is used, the weights are informative for ranking features




.. py:method:: SimpleSVM.getName
   :module: pyopenms.pyopenms_5


Cython signature: String getName()
Returns the name




.. py:method:: SimpleSVM.getParameters
   :module: pyopenms.pyopenms_5


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: SimpleSVM.getSubsections
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: SimpleSVM.predict
   :module: pyopenms.pyopenms_5


Cython signature: void predict(libcpp_vector[SVMPrediction] & predictions, libcpp_vector[size_t] indexes)


Predict class labels (and probabilities)
-----
:param predictions: Output vector of prediction results (same order as ``)
:param indexes: Vector of observation indexes for which predictions are desired. If empty (default), predictions are made for all observations




.. py:method:: SimpleSVM.setName
   :module: pyopenms.pyopenms_5


Cython signature: void setName(const String &)
Sets the name




.. py:method:: SimpleSVM.setParameters
   :module: pyopenms.pyopenms_5


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: SimpleSVM.writeXvalResults
   :module: pyopenms.pyopenms_5


Cython signature: void writeXvalResults(const String & path)




.. py:class:: TICFilter
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _TICFilter


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1TICFilter.html
 -- Inherits from ['FilterFunctor']




.. py:method:: TICFilter.apply
   :module: pyopenms.pyopenms_5


Cython signature: double apply(MSSpectrum &)




.. py:method:: TICFilter.getDefaults
   :module: pyopenms.pyopenms_5


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: TICFilter.getName
   :module: pyopenms.pyopenms_5


Cython signature: String getName()
Returns the name




.. py:method:: TICFilter.getParameters
   :module: pyopenms.pyopenms_5


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: TICFilter.getProductName
   :module: pyopenms.pyopenms_5


Cython signature: String getProductName()




.. py:method:: TICFilter.getSubsections
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: TICFilter.registerChildren
   :module: pyopenms.pyopenms_5


Cython signature: void registerChildren()




.. py:method:: TICFilter.setName
   :module: pyopenms.pyopenms_5


Cython signature: void setName(const String &)
Sets the name




.. py:method:: TICFilter.setParameters
   :module: pyopenms.pyopenms_5


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: TMTElevenPlexQuantitationMethod
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _TMTElevenPlexQuantitationMethod


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1TMTElevenPlexQuantitationMethod.html
 -- Inherits from ['IsobaricQuantitationMethod']




.. py:method:: TMTElevenPlexQuantitationMethod.getChannelInformation
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_vector[IsobaricChannelInformation] getChannelInformation()




.. py:method:: TMTElevenPlexQuantitationMethod.getDefaults
   :module: pyopenms.pyopenms_5


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: TMTElevenPlexQuantitationMethod.getIsotopeCorrectionMatrix
   :module: pyopenms.pyopenms_5


Cython signature: MatrixDouble getIsotopeCorrectionMatrix()




.. py:method:: TMTElevenPlexQuantitationMethod.getName
   :module: pyopenms.pyopenms_5


Cython signature: String getName()




.. py:method:: TMTElevenPlexQuantitationMethod.getNumberOfChannels
   :module: pyopenms.pyopenms_5


Cython signature: size_t getNumberOfChannels()




.. py:method:: TMTElevenPlexQuantitationMethod.getParameters
   :module: pyopenms.pyopenms_5


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: TMTElevenPlexQuantitationMethod.getReferenceChannel
   :module: pyopenms.pyopenms_5


Cython signature: size_t getReferenceChannel()




.. py:method:: TMTElevenPlexQuantitationMethod.getSubsections
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: TMTElevenPlexQuantitationMethod.setName
   :module: pyopenms.pyopenms_5


Cython signature: void setName(const String &)
Sets the name




.. py:method:: TMTElevenPlexQuantitationMethod.setParameters
   :module: pyopenms.pyopenms_5


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: TheoreticalSpectrumGeneratorXLMS
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _TheoreticalSpectrumGeneratorXLMS


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1TheoreticalSpectrumGeneratorXLMS.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: TheoreticalSpectrumGeneratorXLMS.getDefaults
   :module: pyopenms.pyopenms_5


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: TheoreticalSpectrumGeneratorXLMS.getLinearIonSpectrum
   :module: pyopenms.pyopenms_5


Cython signature: void getLinearIonSpectrum(MSSpectrum & spectrum, AASequence peptide, size_t link_pos, bool frag_alpha, int charge, size_t link_pos_2)


Generates fragment ions not containing the cross-linker for one peptide
-----
B-ions are generated from the beginning of the peptide up to the first linked position,
y-ions are generated from the second linked position up the end of the peptide.
If link_pos_2 is 0, a mono-link or cross-link is assumed and the second position is the same as the first position.
For a loop-link two different positions can be set and link_pos_2 must be larger than link_pos
The generated ion types and other additional settings are determined by the tool parameters
-----
:param spectrum: The spectrum to which the new peaks are added. Does not have to be empty, the generated peaks will be pushed onto it
:param peptide: The peptide to fragment
:param link_pos: The position of the cross-linker on the given peptide
:param frag_alpha: True, if the fragmented peptide is the Alpha peptide. Used for ion-name annotation
:param charge: The maximal charge of the ions
:param link_pos_2: A second position for the linker, in case it is a loop link




.. py:method:: TheoreticalSpectrumGeneratorXLMS.getName
   :module: pyopenms.pyopenms_5


Cython signature: String getName()
Returns the name




.. py:method:: TheoreticalSpectrumGeneratorXLMS.getParameters
   :module: pyopenms.pyopenms_5


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: TheoreticalSpectrumGeneratorXLMS.getSubsections
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: TheoreticalSpectrumGeneratorXLMS.getXLinkIonSpectrum
   :module: pyopenms.pyopenms_5


     - Cython signature: void getXLinkIonSpectrum(MSSpectrum & spectrum, AASequence peptide, size_t link_pos, double precursor_mass, bool frag_alpha, int mincharge, int maxcharge, size_t link_pos_2)


Generates fragment ions containing the cross-linker for one peptide
-----
B-ions are generated from the first linked position up to the end of the peptide,
y-ions are generated from the beginning of the peptide up to the second linked position.
If link_pos_2 is 0, a mono-link or cross-link is assumed and the second position is the same as the first position.
For a loop-link two different positions can be set and link_pos_2 must be larger than link_pos.
Since in the case of a cross-link a whole second peptide is attached to the other side of the cross-link,
a precursor mass for the two peptides and the linker is needed.
In the case of a loop link the precursor mass is the mass of the only peptide and the linker.
Although this function is more general, currently it is mainly used for loop-links and mono-links,
because residues in the second, unknown peptide cannot be considered for possible neutral losses.
The generated ion types and other additional settings are determined by the tool parameters
-----
:param spectrum: The spectrum to which the new peaks are added. Does not have to be empty, the generated peaks will be pushed onto it
:param peptide: The peptide to fragment
:param link_pos: The position of the cross-linker on the given peptide
:param precursor_mass: The mass of the whole cross-link candidate or the precursor mass of the experimental MS2 spectrum.
:param frag_alpha: True, if the fragmented peptide is the Alpha peptide. Used for ion-name annotation.
:param mincharge: The minimal charge of the ions
:param maxcharge: The maximal charge of the ions, it should be the precursor charge and is used to generate precursor ion peaks
:param link_pos_2: A second position for the linker, in case it is a loop link
     - Cython signature: void getXLinkIonSpectrum(MSSpectrum & spectrum, ProteinProteinCrossLink crosslink, bool frag_alpha, int mincharge, int maxcharge)


Generates fragment ions containing the cross-linker for a pair of peptides
-----
B-ions are generated from the first linked position up to the end of the peptide,
y-ions are generated from the beginning of the peptide up to the second linked position.
This function generates neutral loss ions by considering both linked peptides.
Only one of the peptides, decided by @frag_alpha, is fragmented.
This function is not suitable to generate fragments for mono-links or loop-links.
This simplifies the function, but it has to be called twice to get all fragments of a peptide pair.
The generated ion types and other additional settings are determined by the tool parameters
-----
:param spectrum: The spectrum to which the new peaks are added. Does not have to be empty, the generated peaks will be pushed onto it
:param crosslink: ProteinProteinCrossLink to be fragmented
:param link_pos: The position of the cross-linker on the given peptide
:param precursor_mass: The mass of the whole cross-link candidate or the precursor mass of the experimental MS2 spectrum
:param frag_alpha: True, if the fragmented peptide is the Alpha peptide
:param mincharge: The minimal charge of the ions
:param maxcharge: The maximal charge of the ions, it should be the precursor charge and is used to generate precursor ion peaks




.. py:method:: TheoreticalSpectrumGeneratorXLMS.setName
   :module: pyopenms.pyopenms_5


Cython signature: void setName(const String &)
Sets the name




.. py:method:: TheoreticalSpectrumGeneratorXLMS.setParameters
   :module: pyopenms.pyopenms_5


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: TraceInfo
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _TraceInfo


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1TraceInfo.html




.. py:attribute:: TraceInfo.description
   :module: pyopenms.pyopenms_5




.. py:attribute:: TraceInfo.name
   :module: pyopenms.pyopenms_5




.. py:attribute:: TraceInfo.opened
   :module: pyopenms.pyopenms_5




.. py:class:: UniqueIdGenerator
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _UniqueIdGenerator


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1UniqueIdGenerator.html




.. py:method:: UniqueIdGenerator.getSeed
   :module: pyopenms.pyopenms_5


Cython signature: uint64_t getSeed()




.. py:method:: UniqueIdGenerator.getUniqueId
   :module: pyopenms.pyopenms_5


Cython signature: uint64_t getUniqueId()




.. py:method:: UniqueIdGenerator.setSeed
   :module: pyopenms.pyopenms_5


Cython signature: void setSeed(uint64_t)




.. py:class:: Unit
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _Unit


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1Unit.html




.. py:attribute:: Unit.accession
   :module: pyopenms.pyopenms_5




.. py:attribute:: Unit.cv_ref
   :module: pyopenms.pyopenms_5




.. py:attribute:: Unit.name
   :module: pyopenms.pyopenms_5




.. py:class:: XQuestScores
   :module: pyopenms.pyopenms_5


   Bases: :py:class:`object`


Cython implementation of _XQuestScores


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1XQuestScores.html




.. py:method:: XQuestScores.logOccupancyProb
   :module: pyopenms.pyopenms_5


Cython signature: double logOccupancyProb(MSSpectrum theoretical_spec, size_t matched_size, double fragment_mass_tolerance, bool fragment_mass_tolerance_unit_ppm)


Compute the logOccupancyProb score, similar to the match_odds, a score based on the probability of getting the given number of matched peaks by chance
-----
:param theoretical_spec: Theoretical spectrum, sorted by position
:param matched_size: Number of matched peaks between experimental and theoretical spectra
:param fragment_mass_tolerance: The tolerance of the alignment
:param fragment_mass_tolerance_unit: The tolerance unit of the alignment, true = ppm, false = Da




.. py:method:: XQuestScores.matchOddsScore
   :module: pyopenms.pyopenms_5


Cython signature: double matchOddsScore(MSSpectrum & theoretical_spec, double fragment_mass_tolerance, bool fragment_mass_tolerance_unit_ppm, bool is_xlink_spectrum, size_t n_charges)


Compute the match-odds score, a score based on the probability of getting the given number of matched peaks by chance
-----
:param theoretical_spec: Theoretical spectrum, sorted by position
:param matched_size: Alignment between the theoretical and the experimental spectra
:param fragment_mass_tolerance: Fragment mass tolerance of the alignment
:param fragment_mass_tolerance_unit_ppm: Fragment mass tolerance unit of the alignment, true = ppm, false = Da
:param is_xlink_spectrum: Type of cross-link, true = cross-link, false = mono-link
:param n_charges: Number of considered charges in the theoretical spectrum




.. py:method:: XQuestScores.matchedCurrentChain
   :module: pyopenms.pyopenms_5


Cython signature: double matchedCurrentChain(libcpp_vector[libcpp_pair[size_t,size_t]] & matched_spec_common, libcpp_vector[libcpp_pair[size_t,size_t]] & matched_spec_xlinks, MSSpectrum & spectrum_common_peaks, MSSpectrum & spectrum_xlink_peaks)




.. py:method:: XQuestScores.preScore
   :module: pyopenms.pyopenms_5


         - Cython signature: float preScore(size_t matched_alpha, size_t ions_alpha, size_t matched_beta, size_t ions_beta)


Compute a simple and fast to compute pre-score for a cross-link spectrum match
-----
:param matched_alpha: Number of experimental peaks matched to theoretical linear ions from the alpha peptide
:param ions_alpha: Number of theoretical ions from the alpha peptide
:param matched_beta: Number of experimental peaks matched to theoretical linear ions from the beta peptide
:param ions_beta: Number of theoretical ions from the beta peptide
         - Cython signature: float preScore(size_t matched_alpha, size_t ions_alpha)


Compute a simple and fast to compute pre-score for a mono-link spectrum match
-----
:param matched_alpha: Number of experimental peaks matched to theoretical linear ions from the alpha peptide
:param ions_alpha: Number of theoretical ions from the alpha peptide




.. py:method:: XQuestScores.totalMatchedCurrent
   :module: pyopenms.pyopenms_5


Cython signature: double totalMatchedCurrent(libcpp_vector[libcpp_pair[size_t,size_t]] & matched_spec_common_alpha, libcpp_vector[libcpp_pair[size_t,size_t]] & matched_spec_common_beta, libcpp_vector[libcpp_pair[size_t,size_t]] & matched_spec_xlinks_alpha, libcpp_vector[libcpp_pair[size_t,size_t]] & matched_spec_xlinks_beta, MSSpectrum & spectrum_common_peaks, MSSpectrum & spectrum_xlink_peaks)




.. py:method:: XQuestScores.weightedTICScore
   :module: pyopenms.pyopenms_5


Cython signature: double weightedTICScore(size_t alpha_size, size_t beta_size, double intsum_alpha, double intsum_beta, double total_current, bool type_is_cross_link)




.. py:method:: XQuestScores.weightedTICScoreXQuest
   :module: pyopenms.pyopenms_5


Cython signature: double weightedTICScoreXQuest(size_t alpha_size, size_t beta_size, double intsum_alpha, double intsum_beta, double total_current, bool type_is_cross_link)




.. py:method:: XQuestScores.xCorrelation
   :module: pyopenms.pyopenms_5


Cython signature: libcpp_vector[double] xCorrelation(MSSpectrum & spec1, MSSpectrum & spec2, int maxshift, double tolerance)




.. py:method:: XQuestScores.xCorrelationPrescore
   :module: pyopenms.pyopenms_5


Cython signature: double xCorrelationPrescore(MSSpectrum & spec1, MSSpectrum & spec2, double tolerance)




.. py:module:: pyopenms.pyopenms_6




.. py:class:: AMSE_AdductInfo
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _AMSE_AdductInfo


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1AMSE_AdductInfo.html




.. py:method:: AMSE_AdductInfo.getCharge
   :module: pyopenms.pyopenms_6


Cython signature: int getCharge()




.. py:method:: AMSE_AdductInfo.getMZ
   :module: pyopenms.pyopenms_6


Cython signature: double getMZ(double neutral_mass)




.. py:method:: AMSE_AdductInfo.getName
   :module: pyopenms.pyopenms_6


Cython signature: String getName()




.. py:method:: AMSE_AdductInfo.getNeutralMass
   :module: pyopenms.pyopenms_6


Cython signature: double getNeutralMass(double observed_mz)




.. py:method:: AMSE_AdductInfo.isCompatible
   :module: pyopenms.pyopenms_6


Cython signature: bool isCompatible(EmpiricalFormula db_entry)




.. py:class:: AbsoluteQuantitation
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _AbsoluteQuantitation


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1AbsoluteQuantitation.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: AbsoluteQuantitation.applyCalibration
   :module: pyopenms.pyopenms_6


Cython signature: double applyCalibration(const Feature & component, const Feature & IS_component, const String & feature_name, const String & transformation_model, const Param & transformation_model_params)




.. py:method:: AbsoluteQuantitation.calculateBias
   :module: pyopenms.pyopenms_6


Cython signature: double calculateBias(double actual_concentration, double calculated_concentration)
This function calculates the bias of the calibration




.. py:method:: AbsoluteQuantitation.calculateBiasAndR
   :module: pyopenms.pyopenms_6


Cython signature: void calculateBiasAndR(libcpp_vector[AQS_featureConcentration] & component_concentrations, const String & feature_name, const String & transformation_model, Param & transformation_model_params, libcpp_vector[double] & biases, double & correlation_coefficient)




.. py:method:: AbsoluteQuantitation.calculateRatio
   :module: pyopenms.pyopenms_6


Cython signature: double calculateRatio(Feature & component_1, Feature & component_2, const String & feature_name)




.. py:method:: AbsoluteQuantitation.fitCalibration
   :module: pyopenms.pyopenms_6


Cython signature: Param fitCalibration(libcpp_vector[AQS_featureConcentration] & component_concentrations, const String & feature_name, const String & transformation_model, Param transformation_model_params)




.. py:method:: AbsoluteQuantitation.getDefaults
   :module: pyopenms.pyopenms_6


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: AbsoluteQuantitation.getName
   :module: pyopenms.pyopenms_6


Cython signature: String getName()
Returns the name




.. py:method:: AbsoluteQuantitation.getParameters
   :module: pyopenms.pyopenms_6


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: AbsoluteQuantitation.getQuantMethods
   :module: pyopenms.pyopenms_6


Cython signature: libcpp_vector[AbsoluteQuantitationMethod] getQuantMethods()




.. py:method:: AbsoluteQuantitation.getSubsections
   :module: pyopenms.pyopenms_6


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: AbsoluteQuantitation.optimizeCalibrationCurveIterative
   :module: pyopenms.pyopenms_6


Cython signature: bool optimizeCalibrationCurveIterative(libcpp_vector[AQS_featureConcentration] & component_concentrations, const String & feature_name, const String & transformation_model, const Param & transformation_model_params, Param & optimized_params)




.. py:method:: AbsoluteQuantitation.optimizeSingleCalibrationCurve
   :module: pyopenms.pyopenms_6


Cython signature: void optimizeSingleCalibrationCurve(const String & component_name, libcpp_vector[AQS_featureConcentration] & component_concentrations)




.. py:method:: AbsoluteQuantitation.quantifyComponents
   :module: pyopenms.pyopenms_6


Cython signature: void quantifyComponents(FeatureMap & unknowns)
This function applies the calibration curve, hence quantifying all the components




.. py:method:: AbsoluteQuantitation.setName
   :module: pyopenms.pyopenms_6


Cython signature: void setName(const String &)
Sets the name




.. py:method:: AbsoluteQuantitation.setParameters
   :module: pyopenms.pyopenms_6


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: AbsoluteQuantitation.setQuantMethods
   :module: pyopenms.pyopenms_6


Cython signature: void setQuantMethods(libcpp_vector[AbsoluteQuantitationMethod] & quant_methods)




.. py:class:: AbsoluteQuantitationMethod
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _AbsoluteQuantitationMethod


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1AbsoluteQuantitationMethod.html




.. py:method:: AbsoluteQuantitationMethod.checkLOD
   :module: pyopenms.pyopenms_6


Cython signature: bool checkLOD(double value)




.. py:method:: AbsoluteQuantitationMethod.checkLOQ
   :module: pyopenms.pyopenms_6


Cython signature: bool checkLOQ(double value)




.. py:method:: AbsoluteQuantitationMethod.getComponentName
   :module: pyopenms.pyopenms_6


Cython signature: String getComponentName()




.. py:method:: AbsoluteQuantitationMethod.getConcentrationUnits
   :module: pyopenms.pyopenms_6


Cython signature: String getConcentrationUnits()




.. py:method:: AbsoluteQuantitationMethod.getCorrelationCoefficient
   :module: pyopenms.pyopenms_6


Cython signature: double getCorrelationCoefficient()




.. py:method:: AbsoluteQuantitationMethod.getFeatureName
   :module: pyopenms.pyopenms_6


Cython signature: String getFeatureName()




.. py:method:: AbsoluteQuantitationMethod.getISName
   :module: pyopenms.pyopenms_6


Cython signature: String getISName()




.. py:method:: AbsoluteQuantitationMethod.getLLOD
   :module: pyopenms.pyopenms_6


Cython signature: double getLLOD()




.. py:method:: AbsoluteQuantitationMethod.getLLOQ
   :module: pyopenms.pyopenms_6


Cython signature: double getLLOQ()




.. py:method:: AbsoluteQuantitationMethod.getNPoints
   :module: pyopenms.pyopenms_6


Cython signature: int getNPoints()




.. py:method:: AbsoluteQuantitationMethod.getTransformationModel
   :module: pyopenms.pyopenms_6


Cython signature: String getTransformationModel()




.. py:method:: AbsoluteQuantitationMethod.getTransformationModelParams
   :module: pyopenms.pyopenms_6


Cython signature: Param getTransformationModelParams()




.. py:method:: AbsoluteQuantitationMethod.getULOD
   :module: pyopenms.pyopenms_6


Cython signature: double getULOD()




.. py:method:: AbsoluteQuantitationMethod.getULOQ
   :module: pyopenms.pyopenms_6


Cython signature: double getULOQ()




.. py:method:: AbsoluteQuantitationMethod.setComponentName
   :module: pyopenms.pyopenms_6


Cython signature: void setComponentName(const String & component_name)




.. py:method:: AbsoluteQuantitationMethod.setConcentrationUnits
   :module: pyopenms.pyopenms_6


Cython signature: void setConcentrationUnits(const String & concentration_units)




.. py:method:: AbsoluteQuantitationMethod.setCorrelationCoefficient
   :module: pyopenms.pyopenms_6


Cython signature: void setCorrelationCoefficient(double correlation_coefficient)




.. py:method:: AbsoluteQuantitationMethod.setFeatureName
   :module: pyopenms.pyopenms_6


Cython signature: void setFeatureName(const String & feature_name)




.. py:method:: AbsoluteQuantitationMethod.setISName
   :module: pyopenms.pyopenms_6


Cython signature: void setISName(const String & IS_name)




.. py:method:: AbsoluteQuantitationMethod.setLLOD
   :module: pyopenms.pyopenms_6


Cython signature: void setLLOD(double llod)




.. py:method:: AbsoluteQuantitationMethod.setLLOQ
   :module: pyopenms.pyopenms_6


Cython signature: void setLLOQ(double lloq)




.. py:method:: AbsoluteQuantitationMethod.setNPoints
   :module: pyopenms.pyopenms_6


Cython signature: void setNPoints(int n_points)




.. py:method:: AbsoluteQuantitationMethod.setTransformationModel
   :module: pyopenms.pyopenms_6


Cython signature: void setTransformationModel(const String & transformation_model)




.. py:method:: AbsoluteQuantitationMethod.setTransformationModelParams
   :module: pyopenms.pyopenms_6


Cython signature: void setTransformationModelParams(Param transformation_model_param)




.. py:method:: AbsoluteQuantitationMethod.setULOD
   :module: pyopenms.pyopenms_6


Cython signature: void setULOD(double ulod)




.. py:method:: AbsoluteQuantitationMethod.setULOQ
   :module: pyopenms.pyopenms_6


Cython signature: void setULOQ(double uloq)




.. py:class:: ArrayWrapperFloat
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`




.. py:class:: BSpline2d
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _BSpline2d


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1BSpline2d.html




.. py:method:: BSpline2d.debug
   :module: pyopenms.pyopenms_6


Cython signature: void debug(bool enable)
Enable or disable debug messages from the B-spline library




.. py:method:: BSpline2d.derivative
   :module: pyopenms.pyopenms_6


Cython signature: double derivative(double x)
Returns the first derivative of the spline curve at the given position x. Returns zero if the current state is not ok()




.. py:method:: BSpline2d.eval
   :module: pyopenms.pyopenms_6


Cython signature: double eval(double x)
Returns the evaluation of the smoothed curve at a particular x value. If current state is not ok(), returns zero




.. py:method:: BSpline2d.ok
   :module: pyopenms.pyopenms_6


Cython signature: bool ok()
Returns whether the spline fit was successful




.. py:method:: BSpline2d.solve
   :module: pyopenms.pyopenms_6


Cython signature: bool solve(libcpp_vector[double] y)
Solve the spline curve for a new set of y values. Returns false if the solution fails




.. py:class:: BoundaryCondition
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`




.. py:attribute:: BoundaryCondition.BC_ZERO_ENDPOINTS
   :module: pyopenms.pyopenms_6
   :value: 0




.. py:attribute:: BoundaryCondition.BC_ZERO_FIRST
   :module: pyopenms.pyopenms_6
   :value: 1




.. py:attribute:: BoundaryCondition.BC_ZERO_SECOND
   :module: pyopenms.pyopenms_6
   :value: 2




.. py:method:: BoundaryCondition.getMapping
   :module: pyopenms.pyopenms_6




.. py:class:: CVMappingTerm
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _CVMappingTerm


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1CVMappingTerm.html




.. py:method:: CVMappingTerm.getAccession
   :module: pyopenms.pyopenms_6


Cython signature: String getAccession()
Returns the accession string of the term




.. py:method:: CVMappingTerm.getAllowChildren
   :module: pyopenms.pyopenms_6


Cython signature: bool getAllowChildren()
Returns true if the children of this term are allowed to be used




.. py:method:: CVMappingTerm.getCVIdentifierRef
   :module: pyopenms.pyopenms_6


Cython signature: String getCVIdentifierRef()
Returns the CV identifier reference string




.. py:method:: CVMappingTerm.getIsRepeatable
   :module: pyopenms.pyopenms_6


Cython signature: bool getIsRepeatable()
Returns true if this term can be repeated, false otherwise




.. py:method:: CVMappingTerm.getTermName
   :module: pyopenms.pyopenms_6


Cython signature: String getTermName()
Returns the name of the term




.. py:method:: CVMappingTerm.getUseTerm
   :module: pyopenms.pyopenms_6


Cython signature: bool getUseTerm()
Returns true if the term can be used, false if only children are allowed




.. py:method:: CVMappingTerm.getUseTermName
   :module: pyopenms.pyopenms_6


Cython signature: bool getUseTermName()
Returns whether the term name should be used, instead of the accession




.. py:method:: CVMappingTerm.setAccession
   :module: pyopenms.pyopenms_6


Cython signature: void setAccession(String accession)
Sets the accession string of the term




.. py:method:: CVMappingTerm.setAllowChildren
   :module: pyopenms.pyopenms_6


Cython signature: void setAllowChildren(bool allow_children)
Sets whether children of this term are allowed




.. py:method:: CVMappingTerm.setCVIdentifierRef
   :module: pyopenms.pyopenms_6


Cython signature: void setCVIdentifierRef(String cv_identifier_ref)
Sets the CV identifier reference string, e.g. UO for unit obo




.. py:method:: CVMappingTerm.setIsRepeatable
   :module: pyopenms.pyopenms_6


Cython signature: void setIsRepeatable(bool is_repeatable)
Sets whether this term can be repeated




.. py:method:: CVMappingTerm.setTermName
   :module: pyopenms.pyopenms_6


Cython signature: void setTermName(String term_name)
Sets the name of the term




.. py:method:: CVMappingTerm.setUseTerm
   :module: pyopenms.pyopenms_6


Cython signature: void setUseTerm(bool use_term)
Sets whether the term itself can be used (or only its children)




.. py:method:: CVMappingTerm.setUseTermName
   :module: pyopenms.pyopenms_6


Cython signature: void setUseTermName(bool use_term_name)
Sets whether the term name should be used, instead of the accession




.. py:class:: ColumnHeader
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _ColumnHeader


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::ConsensusMap_1_1ColumnHeader.html
 -- Inherits from ['MetaInfoInterface']




.. py:method:: ColumnHeader.clearMetaInfo
   :module: pyopenms.pyopenms_6


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:attribute:: ColumnHeader.filename
   :module: pyopenms.pyopenms_6




.. py:method:: ColumnHeader.getKeys
   :module: pyopenms.pyopenms_6


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: ColumnHeader.getMetaValue
   :module: pyopenms.pyopenms_6


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: ColumnHeader.isMetaEmpty
   :module: pyopenms.pyopenms_6


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:attribute:: ColumnHeader.label
   :module: pyopenms.pyopenms_6




.. py:method:: ColumnHeader.metaRegistry
   :module: pyopenms.pyopenms_6


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: ColumnHeader.metaValueExists
   :module: pyopenms.pyopenms_6


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: ColumnHeader.removeMetaValue
   :module: pyopenms.pyopenms_6


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: ColumnHeader.setMetaValue
   :module: pyopenms.pyopenms_6


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:attribute:: ColumnHeader.size
   :module: pyopenms.pyopenms_6




.. py:attribute:: ColumnHeader.unique_id
   :module: pyopenms.pyopenms_6




.. py:class:: ComplementFilter
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _ComplementFilter


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ComplementFilter.html
 -- Inherits from ['FilterFunctor']




.. py:method:: ComplementFilter.apply
   :module: pyopenms.pyopenms_6


Cython signature: double apply(MSSpectrum &)
Returns the total intensity of peak pairs which could result from complementing fragments




.. py:method:: ComplementFilter.getDefaults
   :module: pyopenms.pyopenms_6


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: ComplementFilter.getName
   :module: pyopenms.pyopenms_6


Cython signature: String getName()
Returns the name




.. py:method:: ComplementFilter.getParameters
   :module: pyopenms.pyopenms_6


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: ComplementFilter.getProductName
   :module: pyopenms.pyopenms_6


Cython signature: String getProductName()
Returns the name for registration at the factory




.. py:method:: ComplementFilter.getSubsections
   :module: pyopenms.pyopenms_6


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: ComplementFilter.registerChildren
   :module: pyopenms.pyopenms_6


Cython signature: void registerChildren()




.. py:method:: ComplementFilter.setName
   :module: pyopenms.pyopenms_6


Cython signature: void setName(const String &)
Sets the name




.. py:method:: ComplementFilter.setParameters
   :module: pyopenms.pyopenms_6


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: ConsensusIDAlgorithmIdentity
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _ConsensusIDAlgorithmIdentity


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ConsensusIDAlgorithmIdentity.html
 -- Inherits from ['ConsensusIDAlgorithm']




.. py:method:: ConsensusIDAlgorithmIdentity.apply
   :module: pyopenms.pyopenms_6


Cython signature: void apply(libcpp_vector[PeptideIdentification] & ids, size_t number_of_runs)
Calculates the consensus ID for a set of peptide identifications of one spectrum or (consensus) feature




.. py:method:: ConsensusIDAlgorithmIdentity.getDefaults
   :module: pyopenms.pyopenms_6


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: ConsensusIDAlgorithmIdentity.getName
   :module: pyopenms.pyopenms_6


Cython signature: String getName()
Returns the name




.. py:method:: ConsensusIDAlgorithmIdentity.getParameters
   :module: pyopenms.pyopenms_6


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: ConsensusIDAlgorithmIdentity.getSubsections
   :module: pyopenms.pyopenms_6


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: ConsensusIDAlgorithmIdentity.setName
   :module: pyopenms.pyopenms_6


Cython signature: void setName(const String &)
Sets the name




.. py:method:: ConsensusIDAlgorithmIdentity.setParameters
   :module: pyopenms.pyopenms_6


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: ConsensusIDAlgorithmPEPMatrix
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _ConsensusIDAlgorithmPEPMatrix


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ConsensusIDAlgorithmPEPMatrix.html
 -- Inherits from ['ConsensusIDAlgorithmSimilarity']




.. py:method:: ConsensusIDAlgorithmPEPMatrix.apply
   :module: pyopenms.pyopenms_6


Cython signature: void apply(libcpp_vector[PeptideIdentification] & ids, size_t number_of_runs)
Calculates the consensus ID for a set of peptide identifications of one spectrum or (consensus) feature




.. py:method:: ConsensusIDAlgorithmPEPMatrix.getDefaults
   :module: pyopenms.pyopenms_6


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: ConsensusIDAlgorithmPEPMatrix.getName
   :module: pyopenms.pyopenms_6


Cython signature: String getName()
Returns the name




.. py:method:: ConsensusIDAlgorithmPEPMatrix.getParameters
   :module: pyopenms.pyopenms_6


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: ConsensusIDAlgorithmPEPMatrix.getSubsections
   :module: pyopenms.pyopenms_6


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: ConsensusIDAlgorithmPEPMatrix.setName
   :module: pyopenms.pyopenms_6


Cython signature: void setName(const String &)
Sets the name




.. py:method:: ConsensusIDAlgorithmPEPMatrix.setParameters
   :module: pyopenms.pyopenms_6


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: ConsensusMap
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _ConsensusMap


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::ConsensusMap_1_1ConsensusMap.html
 -- Inherits from ['UniqueIdInterface', 'DocumentIdentifier', 'RangeManagerRtMzInt', 'MetaInfoInterface']


 A container for consensus elements.
 -----
 A ConsensusMap is a container holding 2-dimensional consensus elements
 (ConsensusFeature) which in turn represent analytes that have been
 quantified across multiple LC-MS/MS experiments. Each analyte in a
 ConsensusFeature is linked to its original LC-MS/MS run, the links are
 maintained by the ConsensusMap class.
 The map is implemented as a vector of elements of type ConsensusFeature.
 -----
 To be consistent, all maps who are referenced by ConsensusFeature objects
 (through a unique id) need to be registered in this class.
 -----
 This class supports direct iteration in Python.




.. py:method:: ConsensusMap.appendColumns
   :module: pyopenms.pyopenms_6


Cython signature: ConsensusMap appendColumns(ConsensusMap)
Add consensus map entries as new columns




.. py:method:: ConsensusMap.appendRows
   :module: pyopenms.pyopenms_6


Cython signature: ConsensusMap appendRows(ConsensusMap)
Add consensus map entries as new rows




.. py:method:: ConsensusMap.clear
   :module: pyopenms.pyopenms_6


- Cython signature: void clear(bool clear_meta_data)
  Clears all data and meta data


- Cython signature: void clear()




.. py:method:: ConsensusMap.clearMetaInfo
   :module: pyopenms.pyopenms_6


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: ConsensusMap.clearRanges
   :module: pyopenms.pyopenms_6


Cython signature: void clearRanges()
Resets all range dimensions as empty




.. py:method:: ConsensusMap.clearUniqueId
   :module: pyopenms.pyopenms_6


Cython signature: size_t clearUniqueId()
Clear the unique id. The new unique id will be invalid. Returns 1 if the unique id was changed, 0 otherwise




.. py:method:: ConsensusMap.empty
   :module: pyopenms.pyopenms_6


Cython signature: bool empty()




.. py:method:: ConsensusMap.ensureUniqueId
   :module: pyopenms.pyopenms_6


Cython signature: size_t ensureUniqueId()
Assigns a valid unique id, but only if the present one is invalid. Returns 1 if the unique id was changed, 0 otherwise




.. py:method:: ConsensusMap.getColumnHeaders
   :module: pyopenms.pyopenms_6




.. py:method:: ConsensusMap.getDataProcessing
   :module: pyopenms.pyopenms_6


Cython signature: libcpp_vector[DataProcessing] getDataProcessing()
Returns a const reference to the description of the applied data processing




.. py:method:: ConsensusMap.getExperimentType
   :module: pyopenms.pyopenms_6


Cython signature: String getExperimentType()
Non-mutable access to the experiment type




.. py:method:: ConsensusMap.getIdentifier
   :module: pyopenms.pyopenms_6


Cython signature: String getIdentifier()
Retrieve document identifier (e.g. an LSID)




.. py:method:: ConsensusMap.getKeys
   :module: pyopenms.pyopenms_6


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: ConsensusMap.getLoadedFilePath
   :module: pyopenms.pyopenms_6


Cython signature: String getLoadedFilePath()
Returns the file_name which is the absolute path to the file loaded




.. py:method:: ConsensusMap.getLoadedFileType
   :module: pyopenms.pyopenms_6


Cython signature: int getLoadedFileType()
Returns the file_type (e.g. featureXML, consensusXML, mzData, mzXML, mzML, ...) of the file loaded




.. py:method:: ConsensusMap.getMaxIntensity
   :module: pyopenms.pyopenms_6


Cython signature: double getMaxIntensity()
Returns the maximum intensity




.. py:method:: ConsensusMap.getMaxMZ
   :module: pyopenms.pyopenms_6


Cython signature: double getMaxMZ()
Returns the maximum m/z




.. py:method:: ConsensusMap.getMaxRT
   :module: pyopenms.pyopenms_6


Cython signature: double getMaxRT()
Returns the maximum RT




.. py:method:: ConsensusMap.getMetaValue
   :module: pyopenms.pyopenms_6


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: ConsensusMap.getMinIntensity
   :module: pyopenms.pyopenms_6


Cython signature: double getMinIntensity()
Returns the minimum intensity




.. py:method:: ConsensusMap.getMinMZ
   :module: pyopenms.pyopenms_6


Cython signature: double getMinMZ()
Returns the minimum m/z




.. py:method:: ConsensusMap.getMinRT
   :module: pyopenms.pyopenms_6


Cython signature: double getMinRT()
Returns the minimum RT




.. py:method:: ConsensusMap.getPrimaryMSRunPath
   :module: pyopenms.pyopenms_6


Cython signature: void getPrimaryMSRunPath(StringList & toFill)
Returns the MS run path (stored in ColumnHeaders)




.. py:method:: ConsensusMap.getProteinIdentifications
   :module: pyopenms.pyopenms_6


Cython signature: libcpp_vector[ProteinIdentification] getProteinIdentifications()




.. py:method:: ConsensusMap.getUnassignedPeptideIdentifications
   :module: pyopenms.pyopenms_6


Cython signature: libcpp_vector[PeptideIdentification] getUnassignedPeptideIdentifications()




.. py:method:: ConsensusMap.getUniqueId
   :module: pyopenms.pyopenms_6


Cython signature: size_t getUniqueId()
Returns the unique id




.. py:method:: ConsensusMap.hasInvalidUniqueId
   :module: pyopenms.pyopenms_6


Cython signature: size_t hasInvalidUniqueId()
Returns whether the unique id is invalid. Returns 1 if the unique id is invalid, 0 otherwise




.. py:method:: ConsensusMap.hasValidUniqueId
   :module: pyopenms.pyopenms_6


Cython signature: size_t hasValidUniqueId()
Returns whether the unique id is valid. Returns 1 if the unique id is valid, 0 otherwise




.. py:method:: ConsensusMap.isMetaEmpty
   :module: pyopenms.pyopenms_6


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: ConsensusMap.isValid
   :module: pyopenms.pyopenms_6


Cython signature: bool isValid(uint64_t unique_id)
Returns true if the unique_id is valid, false otherwise




.. py:method:: ConsensusMap.metaRegistry
   :module: pyopenms.pyopenms_6


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: ConsensusMap.metaValueExists
   :module: pyopenms.pyopenms_6


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: ConsensusMap.push_back
   :module: pyopenms.pyopenms_6


Cython signature: void push_back(ConsensusFeature spec)




.. py:method:: ConsensusMap.removeMetaValue
   :module: pyopenms.pyopenms_6


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: ConsensusMap.reserve
   :module: pyopenms.pyopenms_6


Cython signature: void reserve(size_t s)




.. py:method:: ConsensusMap.setColumnHeaders
   :module: pyopenms.pyopenms_6




.. py:method:: ConsensusMap.setDataProcessing
   :module: pyopenms.pyopenms_6


Cython signature: void setDataProcessing(libcpp_vector[DataProcessing])
Sets the description of the applied data processing




.. py:method:: ConsensusMap.setExperimentType
   :module: pyopenms.pyopenms_6


Cython signature: void setExperimentType(String experiment_type)
Mutable access to the experiment type




.. py:method:: ConsensusMap.setIdentifier
   :module: pyopenms.pyopenms_6


Cython signature: void setIdentifier(String id)
Sets document identifier (e.g. an LSID)




.. py:method:: ConsensusMap.setLoadedFilePath
   :module: pyopenms.pyopenms_6


Cython signature: void setLoadedFilePath(String file_name)
Sets the file_name according to absolute path of the file loaded, preferably done whilst loading




.. py:method:: ConsensusMap.setLoadedFileType
   :module: pyopenms.pyopenms_6


Cython signature: void setLoadedFileType(String file_name)
Sets the file_type according to the type of the file loaded from, preferably done whilst loading




.. py:method:: ConsensusMap.setMetaValue
   :module: pyopenms.pyopenms_6


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:method:: ConsensusMap.setPrimaryMSRunPath
   :module: pyopenms.pyopenms_6


- Cython signature: void setPrimaryMSRunPath(StringList & s)
  Sets the file paths to the primary MS run (stored in ColumnHeaders)


- Cython signature: void setPrimaryMSRunPath(StringList & s, MSExperiment & e)




.. py:method:: ConsensusMap.setProteinIdentifications
   :module: pyopenms.pyopenms_6


Cython signature: void setProteinIdentifications(libcpp_vector[ProteinIdentification])
Sets the protein identifications




.. py:method:: ConsensusMap.setUnassignedPeptideIdentifications
   :module: pyopenms.pyopenms_6


Cython signature: void setUnassignedPeptideIdentifications(libcpp_vector[PeptideIdentification])
Sets the unassigned peptide identifications




.. py:method:: ConsensusMap.setUniqueId
   :module: pyopenms.pyopenms_6


Cython signature: void setUniqueId(uint64_t rhs)
Assigns a new, valid unique id. Always returns 1




.. py:method:: ConsensusMap.setUniqueIds
   :module: pyopenms.pyopenms_6




.. py:method:: ConsensusMap.size
   :module: pyopenms.pyopenms_6


Cython signature: int size()




.. py:method:: ConsensusMap.sortByIntensity
   :module: pyopenms.pyopenms_6


- Cython signature: void sortByIntensity(bool reverse)
  Sorts the peaks according to ascending intensity.


- Cython signature: void sortByIntensity()




.. py:method:: ConsensusMap.sortByMZ
   :module: pyopenms.pyopenms_6


Cython signature: void sortByMZ()
Sorts the peaks according to m/z position




.. py:method:: ConsensusMap.sortByMaps
   :module: pyopenms.pyopenms_6


Cython signature: void sortByMaps()
Sorts with respect to the sets of maps covered by the consensus features (lexicographically)




.. py:method:: ConsensusMap.sortByPosition
   :module: pyopenms.pyopenms_6


Cython signature: void sortByPosition()
Lexicographically sorts the peaks by their position (First RT then m/z)




.. py:method:: ConsensusMap.sortByQuality
   :module: pyopenms.pyopenms_6


- Cython signature: void sortByQuality(bool reverse)
  Sorts the peaks according to ascending quality.


- Cython signature: void sortByQuality()




.. py:method:: ConsensusMap.sortByRT
   :module: pyopenms.pyopenms_6


Cython signature: void sortByRT()
Sorts the peaks according to RT position




.. py:method:: ConsensusMap.sortBySize
   :module: pyopenms.pyopenms_6


Cython signature: void sortBySize()
Sorts with respect to the size (number of elements)




.. py:method:: ConsensusMap.sortPeptideIdentificationsByMapIndex
   :module: pyopenms.pyopenms_6


Cython signature: void sortPeptideIdentificationsByMapIndex()
Sorts PeptideIdentifications of consensus features with respect to their map index.




.. py:method:: ConsensusMap.updateRanges
   :module: pyopenms.pyopenms_6


Cython signature: void updateRanges()




.. py:class:: DigestionEnzymeProtein
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _DigestionEnzymeProtein


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1DigestionEnzymeProtein.html
 -- Inherits from ['DigestionEnzyme']


 Representation of a digestion enzyme for proteins (protease)




.. py:method:: DigestionEnzymeProtein.addSynonym
   :module: pyopenms.pyopenms_6


Cython signature: void addSynonym(const String & synonym)
Adds a synonym




.. py:method:: DigestionEnzymeProtein.getCTermGain
   :module: pyopenms.pyopenms_6


Cython signature: EmpiricalFormula getCTermGain()
Returns the C-term gain




.. py:method:: DigestionEnzymeProtein.getCometID
   :module: pyopenms.pyopenms_6


Cython signature: int getCometID()
Returns the Comet enzyme ID




.. py:method:: DigestionEnzymeProtein.getCruxID
   :module: pyopenms.pyopenms_6


Cython signature: String getCruxID()
Returns the Crux enzyme ID




.. py:method:: DigestionEnzymeProtein.getMSGFID
   :module: pyopenms.pyopenms_6


Cython signature: int getMSGFID()
Returns the MSGFPlus enzyme id




.. py:method:: DigestionEnzymeProtein.getNTermGain
   :module: pyopenms.pyopenms_6


Cython signature: EmpiricalFormula getNTermGain()
Returns the N-term gain




.. py:method:: DigestionEnzymeProtein.getName
   :module: pyopenms.pyopenms_6


Cython signature: String getName()
Returns the name of the enzyme




.. py:method:: DigestionEnzymeProtein.getOMSSAID
   :module: pyopenms.pyopenms_6


Cython signature: int getOMSSAID()
Returns the OMSSA enzyme ID




.. py:method:: DigestionEnzymeProtein.getPSIID
   :module: pyopenms.pyopenms_6


Cython signature: String getPSIID()
Returns the PSI ID




.. py:method:: DigestionEnzymeProtein.getRegEx
   :module: pyopenms.pyopenms_6


Cython signature: String getRegEx()
Returns the cleavage regex




.. py:method:: DigestionEnzymeProtein.getRegExDescription
   :module: pyopenms.pyopenms_6


Cython signature: String getRegExDescription()
Returns the regex description




.. py:method:: DigestionEnzymeProtein.getSynonyms
   :module: pyopenms.pyopenms_6


Cython signature: libcpp_set[String] getSynonyms()
Returns the synonyms




.. py:method:: DigestionEnzymeProtein.getXTandemID
   :module: pyopenms.pyopenms_6


Cython signature: String getXTandemID()
Returns the X! Tandem enzyme ID




.. py:method:: DigestionEnzymeProtein.setCTermGain
   :module: pyopenms.pyopenms_6


Cython signature: void setCTermGain(EmpiricalFormula value)
Sets the C-term gain




.. py:method:: DigestionEnzymeProtein.setCometID
   :module: pyopenms.pyopenms_6


Cython signature: void setCometID(int value)
Sets the Comet enzyme ID




.. py:method:: DigestionEnzymeProtein.setCruxID
   :module: pyopenms.pyopenms_6


Cython signature: void setCruxID(const String & value)
Sets the Crux enzyme ID




.. py:method:: DigestionEnzymeProtein.setMSGFID
   :module: pyopenms.pyopenms_6


Cython signature: void setMSGFID(int value)
Sets the MSGFPlus enzyme id




.. py:method:: DigestionEnzymeProtein.setNTermGain
   :module: pyopenms.pyopenms_6


Cython signature: void setNTermGain(EmpiricalFormula value)
Sets the N-term gain




.. py:method:: DigestionEnzymeProtein.setName
   :module: pyopenms.pyopenms_6


Cython signature: void setName(const String & name)
Sets the name of the enzyme




.. py:method:: DigestionEnzymeProtein.setOMSSAID
   :module: pyopenms.pyopenms_6


Cython signature: void setOMSSAID(int value)
Sets the OMSSA enzyme ID




.. py:method:: DigestionEnzymeProtein.setPSIID
   :module: pyopenms.pyopenms_6


Cython signature: void setPSIID(String value)
Sets the PSI ID




.. py:method:: DigestionEnzymeProtein.setRegEx
   :module: pyopenms.pyopenms_6


Cython signature: void setRegEx(const String & cleavage_regex)
Sets the cleavage regex




.. py:method:: DigestionEnzymeProtein.setRegExDescription
   :module: pyopenms.pyopenms_6


Cython signature: void setRegExDescription(const String & value)
Sets the regex description




.. py:method:: DigestionEnzymeProtein.setSynonyms
   :module: pyopenms.pyopenms_6


Cython signature: void setSynonyms(libcpp_set[String] & synonyms)
Sets the synonyms




.. py:method:: DigestionEnzymeProtein.setValueFromFile
   :module: pyopenms.pyopenms_6


Cython signature: bool setValueFromFile(String key, String value)
Sets the value of a member variable based on an entry from an input file




.. py:method:: DigestionEnzymeProtein.setXTandemID
   :module: pyopenms.pyopenms_6


Cython signature: void setXTandemID(String value)
Sets the X! Tandem enzyme ID




.. py:class:: ElutionPeakDetection
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _ElutionPeakDetection


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ElutionPeakDetection.html
 -- Inherits from ['ProgressLogger', 'DefaultParamHandler']




.. py:method:: ElutionPeakDetection.computeApexSNR
   :module: pyopenms.pyopenms_6


Cython signature: double computeApexSNR(Kernel_MassTrace &)
Compute the signal to noise ratio at the apex (estimated by computeMassTraceNoise)




.. py:method:: ElutionPeakDetection.computeMassTraceNoise
   :module: pyopenms.pyopenms_6


Cython signature: double computeMassTraceNoise(Kernel_MassTrace &)
Compute noise level (as RMSE of the actual signal and the smoothed signal)




.. py:method:: ElutionPeakDetection.computeMassTraceSNR
   :module: pyopenms.pyopenms_6


Cython signature: double computeMassTraceSNR(Kernel_MassTrace &)
Compute the signal to noise ratio (estimated by computeMassTraceNoise)




.. py:method:: ElutionPeakDetection.detectPeaks
   :module: pyopenms.pyopenms_6


- Cython signature: void detectPeaks(Kernel_MassTrace & in_, libcpp_vector[Kernel_MassTrace] & out)
- Cython signature: void detectPeaks(libcpp_vector[Kernel_MassTrace] & in_, libcpp_vector[Kernel_MassTrace] & out)




.. py:method:: ElutionPeakDetection.endProgress
   :module: pyopenms.pyopenms_6


Cython signature: void endProgress()
Ends the progress display




.. py:method:: ElutionPeakDetection.filterByPeakWidth
   :module: pyopenms.pyopenms_6


Cython signature: void filterByPeakWidth(libcpp_vector[Kernel_MassTrace] & in_, libcpp_vector[Kernel_MassTrace] & out)




.. py:method:: ElutionPeakDetection.findLocalExtrema
   :module: pyopenms.pyopenms_6


Cython signature: void findLocalExtrema(Kernel_MassTrace &, size_t &, libcpp_vector[size_t] &, libcpp_vector[size_t] &)




.. py:method:: ElutionPeakDetection.getDefaults
   :module: pyopenms.pyopenms_6


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: ElutionPeakDetection.getLogType
   :module: pyopenms.pyopenms_6


Cython signature: LogType getLogType()
Returns the type of progress log being used




.. py:method:: ElutionPeakDetection.getName
   :module: pyopenms.pyopenms_6


Cython signature: String getName()
Returns the name




.. py:method:: ElutionPeakDetection.getParameters
   :module: pyopenms.pyopenms_6


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: ElutionPeakDetection.getSubsections
   :module: pyopenms.pyopenms_6


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: ElutionPeakDetection.nextProgress
   :module: pyopenms.pyopenms_6


Cython signature: void nextProgress()
Increment progress by 1 (according to range begin-end)




.. py:method:: ElutionPeakDetection.setLogType
   :module: pyopenms.pyopenms_6


Cython signature: void setLogType(LogType)
Sets the progress log that should be used. The default type is NONE!




.. py:method:: ElutionPeakDetection.setName
   :module: pyopenms.pyopenms_6


Cython signature: void setName(const String &)
Sets the name




.. py:method:: ElutionPeakDetection.setParameters
   :module: pyopenms.pyopenms_6


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: ElutionPeakDetection.setProgress
   :module: pyopenms.pyopenms_6


Cython signature: void setProgress(ptrdiff_t value)
Sets the current progress




.. py:method:: ElutionPeakDetection.smoothData
   :module: pyopenms.pyopenms_6


Cython signature: void smoothData(Kernel_MassTrace & mt, int win_size)




.. py:method:: ElutionPeakDetection.startProgress
   :module: pyopenms.pyopenms_6


Cython signature: void startProgress(ptrdiff_t begin, ptrdiff_t end, String label)




.. py:class:: FeatureDeconvolution
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _FeatureDeconvolution


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1FeatureDeconvolution.html
 -- Inherits from ['DefaultParamHandler']




.. py:attribute:: FeatureDeconvolution.CHARGEMODE_FD
   :module: pyopenms.pyopenms_6


alias of :py:class:`pyopenms.pyopenms_6.__CHARGEMODE_FD`


.. py:method:: FeatureDeconvolution.compute
   :module: pyopenms.pyopenms_6


Cython signature: void compute(FeatureMap & input, FeatureMap & output, ConsensusMap & cmap1, ConsensusMap & cmap2)




.. py:method:: FeatureDeconvolution.getDefaults
   :module: pyopenms.pyopenms_6


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: FeatureDeconvolution.getName
   :module: pyopenms.pyopenms_6


Cython signature: String getName()
Returns the name




.. py:method:: FeatureDeconvolution.getParameters
   :module: pyopenms.pyopenms_6


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: FeatureDeconvolution.getSubsections
   :module: pyopenms.pyopenms_6


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: FeatureDeconvolution.setName
   :module: pyopenms.pyopenms_6


Cython signature: void setName(const String &)
Sets the name




.. py:method:: FeatureDeconvolution.setParameters
   :module: pyopenms.pyopenms_6


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: FeatureFileOptions
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _FeatureFileOptions


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1FeatureFileOptions.html




.. py:method:: FeatureFileOptions.getIntensityRange
   :module: pyopenms.pyopenms_6


Cython signature: DRange1 getIntensityRange()
Returns the intensity range




.. py:method:: FeatureFileOptions.getLoadConvexHull
   :module: pyopenms.pyopenms_6


Cython signature: bool getLoadConvexHull()
Returns whether or not to load convex hull




.. py:method:: FeatureFileOptions.getLoadSubordinates
   :module: pyopenms.pyopenms_6


Cython signature: bool getLoadSubordinates()
Returns whether or not to load subordinates




.. py:method:: FeatureFileOptions.getMZRange
   :module: pyopenms.pyopenms_6


Cython signature: DRange1 getMZRange()
Returns the MZ range




.. py:method:: FeatureFileOptions.getMetadataOnly
   :module: pyopenms.pyopenms_6


Cython signature: bool getMetadataOnly()
Returns whether or not to load only meta data




.. py:method:: FeatureFileOptions.getRTRange
   :module: pyopenms.pyopenms_6


Cython signature: DRange1 getRTRange()
Returns the RT range




.. py:method:: FeatureFileOptions.getSizeOnly
   :module: pyopenms.pyopenms_6


Cython signature: bool getSizeOnly()
Returns whether or not to load only meta data




.. py:method:: FeatureFileOptions.hasIntensityRange
   :module: pyopenms.pyopenms_6


Cython signature: bool hasIntensityRange()
Returns true if an intensity range has been set




.. py:method:: FeatureFileOptions.hasMZRange
   :module: pyopenms.pyopenms_6


Cython signature: bool hasMZRange()
Returns true if an MZ range has been set




.. py:method:: FeatureFileOptions.hasRTRange
   :module: pyopenms.pyopenms_6


Cython signature: bool hasRTRange()
Returns true if an RT range has been set




.. py:method:: FeatureFileOptions.setIntensityRange
   :module: pyopenms.pyopenms_6


Cython signature: void setIntensityRange(DRange1 & range_)
Restricts the range of intensity values for peaks to load




.. py:method:: FeatureFileOptions.setLoadConvexHull
   :module: pyopenms.pyopenms_6


Cython signature: void setLoadConvexHull(bool)
Sets whether or not to load convex hull




.. py:method:: FeatureFileOptions.setLoadSubordinates
   :module: pyopenms.pyopenms_6


Cython signature: void setLoadSubordinates(bool)
Sets whether or not load subordinates




.. py:method:: FeatureFileOptions.setMZRange
   :module: pyopenms.pyopenms_6


Cython signature: void setMZRange(DRange1 & range_)
Restricts the range of MZ values for peaks to load




.. py:method:: FeatureFileOptions.setMetadataOnly
   :module: pyopenms.pyopenms_6


Cython signature: void setMetadataOnly(bool)
Sets whether or not to load only meta data




.. py:method:: FeatureFileOptions.setRTRange
   :module: pyopenms.pyopenms_6


Cython signature: void setRTRange(DRange1 & range_)
Restricts the range of RT values for peaks to load




.. py:method:: FeatureFileOptions.setSizeOnly
   :module: pyopenms.pyopenms_6


Cython signature: void setSizeOnly(bool)
Sets whether or not to load only feature count




.. py:class:: FeatureFinderAlgorithmMetaboIdent
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _FeatureFinderAlgorithmMetaboIdent


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1FeatureFinderAlgorithmMetaboIdent.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: FeatureFinderAlgorithmMetaboIdent.getChromatograms
   :module: pyopenms.pyopenms_6


Cython signature: MSExperiment & getChromatograms()
Retrieves chromatograms (empty if run was not executed)




.. py:method:: FeatureFinderAlgorithmMetaboIdent.getDefaults
   :module: pyopenms.pyopenms_6


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: FeatureFinderAlgorithmMetaboIdent.getLibrary
   :module: pyopenms.pyopenms_6


Cython signature: const TargetedExperiment & getLibrary()
Retrieves the assay library (e.g., to store as TraML, empty if run was not executed)




.. py:method:: FeatureFinderAlgorithmMetaboIdent.getMSData
   :module: pyopenms.pyopenms_6


Cython signature: const MSExperiment & getMSData()
Returns spectra




.. py:method:: FeatureFinderAlgorithmMetaboIdent.getNShared
   :module: pyopenms.pyopenms_6


Cython signature: size_t getNShared()
Retrieves number of features with shared identifications




.. py:method:: FeatureFinderAlgorithmMetaboIdent.getName
   :module: pyopenms.pyopenms_6


Cython signature: String getName()
Returns the name




.. py:method:: FeatureFinderAlgorithmMetaboIdent.getParameters
   :module: pyopenms.pyopenms_6


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: FeatureFinderAlgorithmMetaboIdent.getSubsections
   :module: pyopenms.pyopenms_6


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: FeatureFinderAlgorithmMetaboIdent.getTransformations
   :module: pyopenms.pyopenms_6


Cython signature: const TransformationDescription & getTransformations()
Retrieves deviations between provided coordinates and extacted ones (e.g., to store as TrafoXML or for plotting)




.. py:method:: FeatureFinderAlgorithmMetaboIdent.run
   :module: pyopenms.pyopenms_6


Cython signature: void run(const libcpp_vector[FeatureFinderMetaboIdentCompound] metaboIdentTable, FeatureMap & features, String spectra_path)


Run feature extraction. spectra_path get's annotated as primaryMSRunPath in the resulting feature map.




.. py:method:: FeatureFinderAlgorithmMetaboIdent.setMSData
   :module: pyopenms.pyopenms_6


Cython signature: void setMSData(MSExperiment & input)
Sets spectra




.. py:method:: FeatureFinderAlgorithmMetaboIdent.setName
   :module: pyopenms.pyopenms_6


Cython signature: void setName(const String &)
Sets the name




.. py:method:: FeatureFinderAlgorithmMetaboIdent.setParameters
   :module: pyopenms.pyopenms_6


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: FeatureFinderMetaboIdentCompound
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _FeatureFinderMetaboIdentCompound


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1FeatureFinderMetaboIdentCompound.html




.. py:class:: FeatureGroupingAlgorithmQT
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _FeatureGroupingAlgorithmQT


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1FeatureGroupingAlgorithmQT.html
 -- Inherits from ['FeatureGroupingAlgorithm']




.. py:method:: FeatureGroupingAlgorithmQT.getDefaults
   :module: pyopenms.pyopenms_6


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: FeatureGroupingAlgorithmQT.getName
   :module: pyopenms.pyopenms_6


Cython signature: String getName()
Returns the name




.. py:method:: FeatureGroupingAlgorithmQT.getParameters
   :module: pyopenms.pyopenms_6


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: FeatureGroupingAlgorithmQT.getProductName
   :module: pyopenms.pyopenms_6


Cython signature: String getProductName()




.. py:method:: FeatureGroupingAlgorithmQT.getSubsections
   :module: pyopenms.pyopenms_6


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: FeatureGroupingAlgorithmQT.group
   :module: pyopenms.pyopenms_6


- Cython signature: void group(libcpp_vector[FeatureMap] & maps, ConsensusMap & out)
- Cython signature: void group(libcpp_vector[ConsensusMap] & maps, ConsensusMap & out)




.. py:method:: FeatureGroupingAlgorithmQT.registerChildren
   :module: pyopenms.pyopenms_6


Cython signature: void registerChildren()
Register all derived classes in this method




.. py:method:: FeatureGroupingAlgorithmQT.setName
   :module: pyopenms.pyopenms_6


Cython signature: void setName(const String &)
Sets the name




.. py:method:: FeatureGroupingAlgorithmQT.setParameters
   :module: pyopenms.pyopenms_6


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: FeatureGroupingAlgorithmQT.transferSubelements
   :module: pyopenms.pyopenms_6


Cython signature: void transferSubelements(libcpp_vector[ConsensusMap] maps, ConsensusMap & out)
Transfers subelements (grouped features) from input consensus maps to the result consensus map




.. py:class:: FileType
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`




.. py:attribute:: FileType.ANALYSISXML
   :module: pyopenms.pyopenms_6
   :value: 38




.. py:attribute:: FileType.CACHEDMZML
   :module: pyopenms.pyopenms_6
   :value: 13




.. py:attribute:: FileType.CONSENSUSXML
   :module: pyopenms.pyopenms_6
   :value: 7




.. py:attribute:: FileType.CSV
   :module: pyopenms.pyopenms_6
   :value: 33




.. py:attribute:: FileType.DTA
   :module: pyopenms.pyopenms_6
   :value: 1




.. py:attribute:: FileType.DTA2D
   :module: pyopenms.pyopenms_6
   :value: 2




.. py:attribute:: FileType.EDTA
   :module: pyopenms.pyopenms_6
   :value: 32




.. py:attribute:: FileType.FASTA
   :module: pyopenms.pyopenms_6
   :value: 31




.. py:attribute:: FileType.FEATUREXML
   :module: pyopenms.pyopenms_6
   :value: 5




.. py:attribute:: FileType.GELML
   :module: pyopenms.pyopenms_6
   :value: 20




.. py:attribute:: FileType.HARDKLOER
   :module: pyopenms.pyopenms_6
   :value: 29




.. py:attribute:: FileType.HTML
   :module: pyopenms.pyopenms_6
   :value: 36




.. py:attribute:: FileType.IDXML
   :module: pyopenms.pyopenms_6
   :value: 6




.. py:attribute:: FileType.INI
   :module: pyopenms.pyopenms_6
   :value: 9




.. py:attribute:: FileType.KROENIK
   :module: pyopenms.pyopenms_6
   :value: 30




.. py:attribute:: FileType.MASCOTXML
   :module: pyopenms.pyopenms_6
   :value: 24




.. py:attribute:: FileType.MGF
   :module: pyopenms.pyopenms_6
   :value: 8




.. py:attribute:: FileType.MRM
   :module: pyopenms.pyopenms_6
   :value: 41




.. py:attribute:: FileType.MS2
   :module: pyopenms.pyopenms_6
   :value: 14




.. py:attribute:: FileType.MSP
   :module: pyopenms.pyopenms_6
   :value: 22




.. py:attribute:: FileType.MZDATA
   :module: pyopenms.pyopenms_6
   :value: 3




.. py:attribute:: FileType.MZIDENTML
   :module: pyopenms.pyopenms_6
   :value: 17




.. py:attribute:: FileType.MZML
   :module: pyopenms.pyopenms_6
   :value: 12




.. py:attribute:: FileType.MZQUANTML
   :module: pyopenms.pyopenms_6
   :value: 18




.. py:attribute:: FileType.MZXML
   :module: pyopenms.pyopenms_6
   :value: 4




.. py:attribute:: FileType.OBO
   :module: pyopenms.pyopenms_6
   :value: 35




.. py:attribute:: FileType.OMSSAXML
   :module: pyopenms.pyopenms_6
   :value: 23




.. py:attribute:: FileType.OSW
   :module: pyopenms.pyopenms_6
   :value: 44




.. py:attribute:: FileType.PARAMXML
   :module: pyopenms.pyopenms_6
   :value: 46




.. py:attribute:: FileType.PEPLIST
   :module: pyopenms.pyopenms_6
   :value: 28




.. py:attribute:: FileType.PEPXML
   :module: pyopenms.pyopenms_6
   :value: 15




.. py:attribute:: FileType.PNG
   :module: pyopenms.pyopenms_6
   :value: 25




.. py:attribute:: FileType.PQP
   :module: pyopenms.pyopenms_6
   :value: 43




.. py:attribute:: FileType.PROTXML
   :module: pyopenms.pyopenms_6
   :value: 16




.. py:attribute:: FileType.PSMS
   :module: pyopenms.pyopenms_6
   :value: 45




.. py:attribute:: FileType.PSQ
   :module: pyopenms.pyopenms_6
   :value: 40




.. py:attribute:: FileType.QCML
   :module: pyopenms.pyopenms_6
   :value: 19




.. py:attribute:: FileType.SIZE_OF_TYPE
   :module: pyopenms.pyopenms_6
   :value: 47




.. py:attribute:: FileType.SQMASS
   :module: pyopenms.pyopenms_6
   :value: 42




.. py:attribute:: FileType.TOPPAS
   :module: pyopenms.pyopenms_6
   :value: 10




.. py:attribute:: FileType.TRAML
   :module: pyopenms.pyopenms_6
   :value: 21




.. py:attribute:: FileType.TRANSFORMATIONXML
   :module: pyopenms.pyopenms_6
   :value: 11




.. py:attribute:: FileType.TSV
   :module: pyopenms.pyopenms_6
   :value: 27




.. py:attribute:: FileType.TXT
   :module: pyopenms.pyopenms_6
   :value: 34




.. py:attribute:: FileType.UNKNOWN
   :module: pyopenms.pyopenms_6
   :value: 0




.. py:attribute:: FileType.XMASS
   :module: pyopenms.pyopenms_6
   :value: 26




.. py:attribute:: FileType.XML
   :module: pyopenms.pyopenms_6
   :value: 37




.. py:attribute:: FileType.XSD
   :module: pyopenms.pyopenms_6
   :value: 39




.. py:method:: FileType.getMapping
   :module: pyopenms.pyopenms_6




.. py:class:: FileTypes
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _FileTypes


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1FileTypes.html




.. py:method:: FileTypes.nameToType
   :module: pyopenms.pyopenms_6


Cython signature: FileType nameToType(String name)


Converts a file type name into a Type
-----
:param name: A case-insensitive name (e.g. FASTA or Fasta, etc.)




.. py:method:: FileTypes.typeToMZML
   :module: pyopenms.pyopenms_6


Cython signature: String typeToMZML(FileType t)
Returns the mzML name




.. py:method:: FileTypes.typeToName
   :module: pyopenms.pyopenms_6


Cython signature: String typeToName(FileType t)
Returns the name/extension of the type




.. py:class:: IBSpectraFile
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _IBSpectraFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1IBSpectraFile.html




.. py:method:: IBSpectraFile.store
   :module: pyopenms.pyopenms_6


Cython signature: void store(const String & filename, ConsensusMap & cm)


Writes the contents of the ConsensusMap cm into the file named by filename
-----
:param filename: The name of the file where the contents of cm should be stored
:param cm: The ConsensusMap that should be exported to filename
:raises:
  Exception: InvalidParameter if the ConsensusMap does not hold the result of an isobaric quantification experiment (e.g., itraq)




.. py:class:: ISDGroup
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _ISDGroup


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ISDGroup.html




.. py:attribute:: ISDGroup.index
   :module: pyopenms.pyopenms_6




.. py:class:: IdXMLFile
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _IdXMLFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1IdXMLFile.html




.. py:method:: IdXMLFile.load
   :module: pyopenms.pyopenms_6


Cython signature: void load(String filename, libcpp_vector[ProteinIdentification] & protein_ids, libcpp_vector[PeptideIdentification] & peptide_ids)
Loads the identifications of an idXML file without identifier




.. py:method:: IdXMLFile.store
   :module: pyopenms.pyopenms_6


- Cython signature: void store(String filename, libcpp_vector[ProteinIdentification] & protein_ids, libcpp_vector[PeptideIdentification] & peptide_ids, String document_id)
  Stores the data in an idXML file


- Cython signature: void store(String filename, libcpp_vector[ProteinIdentification] & protein_ids, libcpp_vector[PeptideIdentification] & peptide_ids)




.. py:class:: InspectInfile
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _InspectInfile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1InspectInfile.html




.. py:method:: InspectInfile.getBlind
   :module: pyopenms.pyopenms_6


Cython signature: unsigned int getBlind()
Run inspect in a blind mode




.. py:method:: InspectInfile.getDb
   :module: pyopenms.pyopenms_6


Cython signature: String getDb()
Specifies the name of a database (.trie file) to search




.. py:method:: InspectInfile.getEnzyme
   :module: pyopenms.pyopenms_6


Cython signature: String getEnzyme()
Specifies the name of a enzyme. "Trypsin", "None", and "Chymotrypsin" are the available values




.. py:method:: InspectInfile.getInstrument
   :module: pyopenms.pyopenms_6


Cython signature: String getInstrument()
If set to QTOF, uses a QTOF-derived fragmentation model, and does not attempt to correct the parent mass




.. py:method:: InspectInfile.getMaxPTMsize
   :module: pyopenms.pyopenms_6


Cython signature: float getMaxPTMsize()
The maximum modification size (in Da) to consider in a blind search




.. py:method:: InspectInfile.getModifications
   :module: pyopenms.pyopenms_6




.. py:method:: InspectInfile.getModificationsPerPeptide
   :module: pyopenms.pyopenms_6


Cython signature: int getModificationsPerPeptide()
Number of PTMs permitted in a single peptide




.. py:method:: InspectInfile.getMulticharge
   :module: pyopenms.pyopenms_6


Cython signature: unsigned int getMulticharge()
If set to true, attempt to guess the precursor charge and mass, and consider multiple charge states if feasible




.. py:method:: InspectInfile.getPeakMassTolerance
   :module: pyopenms.pyopenms_6


Cython signature: float getPeakMassTolerance()
How far b and y peaks can be shifted from their expected masses.




.. py:method:: InspectInfile.getPrecursorMassTolerance
   :module: pyopenms.pyopenms_6


Cython signature: float getPrecursorMassTolerance()
Specifies the parent mass tolerance, in Daltons




.. py:method:: InspectInfile.getSpectra
   :module: pyopenms.pyopenms_6


Cython signature: String getSpectra()
Specifies a spectrum file to search




.. py:method:: InspectInfile.getTagCount
   :module: pyopenms.pyopenms_6


Cython signature: int getTagCount()
Number of tags to generate




.. py:method:: InspectInfile.handlePTMs
   :module: pyopenms.pyopenms_6


Cython signature: void handlePTMs(const String & modification_line, const String & modifications_filename, bool monoisotopic)


Retrieves the name, mass change, affected residues, type and position for all modifications from a string
-----
:param modification_line
:param modifications_filename
:param monoisotopic: if true, masses are considered to be monoisotopic
:raises:
  Exception: FileNotReadable if the modifications_filename could not be read
:raises:
  Exception: FileNotFound if modifications_filename could not be found
:raises:
  Exception: ParseError if modifications_filename could not be parsed




.. py:method:: InspectInfile.setBlind
   :module: pyopenms.pyopenms_6


Cython signature: void setBlind(unsigned int blind)
Run inspect in a blind mode




.. py:method:: InspectInfile.setDb
   :module: pyopenms.pyopenms_6


Cython signature: void setDb(const String & db)
Specifies the name of a database (.trie file) to search




.. py:method:: InspectInfile.setEnzyme
   :module: pyopenms.pyopenms_6


Cython signature: void setEnzyme(const String & enzyme)
Specifies the name of a enzyme. "Trypsin", "None", and "Chymotrypsin" are the available values




.. py:method:: InspectInfile.setInstrument
   :module: pyopenms.pyopenms_6


Cython signature: void setInstrument(const String & instrument)
If set to QTOF, uses a QTOF-derived fragmentation model, and does not attempt to correct the parent mass




.. py:method:: InspectInfile.setMaxPTMsize
   :module: pyopenms.pyopenms_6


Cython signature: void setMaxPTMsize(float maxptmsize)
The maximum modification size (in Da) to consider in a blind search




.. py:method:: InspectInfile.setModificationsPerPeptide
   :module: pyopenms.pyopenms_6


Cython signature: void setModificationsPerPeptide(int modifications_per_peptide)
Number of PTMs permitted in a single peptide




.. py:method:: InspectInfile.setMulticharge
   :module: pyopenms.pyopenms_6


Cython signature: void setMulticharge(unsigned int multicharge)
If set to true, attempt to guess the precursor charge and mass, and consider multiple charge states if feasible




.. py:method:: InspectInfile.setPeakMassTolerance
   :module: pyopenms.pyopenms_6


Cython signature: void setPeakMassTolerance(float peak_mass_tolerance)
How far b and y peaks can be shifted from their expected masses




.. py:method:: InspectInfile.setPrecursorMassTolerance
   :module: pyopenms.pyopenms_6


Cython signature: void setPrecursorMassTolerance(float precursor_mass_tolerance)
Specifies the parent mass tolerance, in Daltons




.. py:method:: InspectInfile.setSpectra
   :module: pyopenms.pyopenms_6


Cython signature: void setSpectra(const String & spectra)
Specifies a spectrum file to search




.. py:method:: InspectInfile.setTagCount
   :module: pyopenms.pyopenms_6


Cython signature: void setTagCount(int TagCount)
Number of tags to generate




.. py:method:: InspectInfile.store
   :module: pyopenms.pyopenms_6


Cython signature: void store(const String & filename)
Stores the experiment data in an Inspect input file that can be used as input for Inspect shell execution




.. py:class:: InspectOutfile
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _InspectOutfile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1InspectOutfile.html




.. py:method:: InspectOutfile.compressTrieDB
   :module: pyopenms.pyopenms_6


Cython signature: void compressTrieDB(const String & database_filename, const String & index_filename, libcpp_vector[size_t] & wanted_records, const String & snd_database_filename, const String & snd_index_filename, bool append)
Generates a trie database from another one, using the wanted records only




.. py:method:: InspectOutfile.generateTrieDB
   :module: pyopenms.pyopenms_6


Cython signature: void generateTrieDB(const String & source_database_filename, const String & database_filename, const String & index_filename, bool append, const String species)
Generates a trie database from a given one (the type of database is determined by getLabels)




.. py:method:: InspectOutfile.getACAndACType
   :module: pyopenms.pyopenms_6


Cython signature: void getACAndACType(String line, String & accession, String & accession_type)
Retrieve the accession type and accession number from a protein description line




.. py:method:: InspectOutfile.getExperiment
   :module: pyopenms.pyopenms_6


Cython signature: void getExperiment(MSExperiment & exp, String & type_, const String & in_filename)
Get the experiment from a file




.. py:method:: InspectOutfile.getLabels
   :module: pyopenms.pyopenms_6


Cython signature: void getLabels(const String & source_database_filename, String & ac_label, String & sequence_start_label, String & sequence_end_label, String & comment_label, String & species_label)
Retrieve the labels of a given database (at the moment FASTA and Swissprot)




.. py:method:: InspectOutfile.getSearchEngineAndVersion
   :module: pyopenms.pyopenms_6


Cython signature: bool getSearchEngineAndVersion(const String & cmd_output, ProteinIdentification & protein_identification)
Get the search engine and its version from the output of the InsPecT executable without parameters. Returns true on success, false otherwise




.. py:method:: InspectOutfile.getSequences
   :module: pyopenms.pyopenms_6


Cython signature: libcpp_vector[size_t] getSequences(const String & database_filename, libcpp_map[size_t,size_t] & wanted_records, libcpp_vector[String] & sequences)
Retrieve sequences from a trie database




.. py:method:: InspectOutfile.getWantedRecords
   :module: pyopenms.pyopenms_6


Cython signature: libcpp_vector[size_t] getWantedRecords(const String & result_filename, double p_value_threshold)


Loads only results which exceeds a given p-value threshold
-----
:param result_filename: The filename of the results file
:param p_value_threshold: Only identifications exceeding this threshold are read
:raises:
  Exception: FileNotFound is thrown if the given file could not be found
:raises:
  Exception: FileEmpty is thrown if the given file is empty




.. py:method:: InspectOutfile.load
   :module: pyopenms.pyopenms_6


Cython signature: libcpp_vector[size_t] load(const String & result_filename, libcpp_vector[PeptideIdentification] & peptide_identifications, ProteinIdentification & protein_identification, double p_value_threshold, const String & database_filename)


Load the results of an Inspect search
-----
:param result_filename: Input parameter which is the file name of the input file
:param peptide_identifications: Output parameter which holds the peptide identifications from the given file
:param protein_identification: Output parameter which holds the protein identifications from the given file
:param p_value_threshold
:param database_filename
:raises:
  Exception: FileNotFound is thrown if the given file could not be found
:raises:
  Exception: ParseError is thrown if the given file could not be parsed
:raises:
  Exception: FileEmpty is thrown if the given file is empty




.. py:method:: InspectOutfile.readOutHeader
   :module: pyopenms.pyopenms_6


Cython signature: void readOutHeader(const String & filename, const String & header_line, int & spectrum_file_column, int & scan_column, int & peptide_column, int & protein_column, int & charge_column, int & MQ_score_column, int & p_value_column, int & record_number_column, int & DB_file_pos_column, int & spec_file_pos_column, size_t & number_of_columns)
Read the header of an inspect output file and retrieve various information




.. py:class:: Interfaces()
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`




.. py:attribute:: Interfaces.BinaryDataArray
   :module: pyopenms.pyopenms_6


alias of :py:class:`pyopenms.pyopenms_2._Interfaces_BinaryDataArray`


.. py:attribute:: Interfaces.Chromatogram
   :module: pyopenms.pyopenms_6


alias of :py:class:`pyopenms.pyopenms_2._Interfaces_Chromatogram`


.. py:attribute:: Interfaces.Spectrum
   :module: pyopenms.pyopenms_6


alias of :py:class:`pyopenms.pyopenms_2._Interfaces_Spectrum`


.. py:class:: InternalCalibration
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _InternalCalibration


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1InternalCalibration.html
 -- Inherits from ['ProgressLogger']




.. py:method:: InternalCalibration.applyTransformation
   :module: pyopenms.pyopenms_6


Cython signature: void applyTransformation(MSExperiment & exp, IntList & target_mslvl, MZTrafoModel & trafo)




.. py:method:: InternalCalibration.calibrate
   :module: pyopenms.pyopenms_6


Cython signature: bool calibrate(MSExperiment, libcpp_vector[int], MZTrafoModel_MODELTYPE, double rt_chunk, bool use_RANSAC, double post_ppm_median, double post_ppm_MAD, String file_models, String file_models_plot, String file_residuals, String file_residuals_plot, String rscript_executable)


Apply calibration to data
-----
For each spectrum, a calibration model will be computed and applied.
Make sure to call fillCalibrants() before, so a model can be created.
-----
The MSExperiment will be sorted by RT and m/z if unsorted.
-----
:param exp: MSExperiment holding the Raw data to calibrate
:param target_mslvl: MS-levels where calibration should be applied to
:param model_type: Linear or quadratic model; select based on your instrument
:param rt_chunk: RT-window size (one-sided) of calibration points to collect around each spectrum. Set to negative values, to build one global model instead.
:param use_RANSAC: Remove outliers before fitting a model?!
:param post_ppm_median: The median ppm error of the calibrants must be at least this good after calibration; otherwise this method returns false(fail)
:param post_ppm_MAD: The median absolute deviation of the calibrants must be at least this good after calibration; otherwise this method returns false(fail)
:param file_models: Output CSV filename, where model parameters are written to (pass empty string to skip)
:param file_models_plot: Output PNG image model parameters (pass empty string to skip)
:param file_residuals: Output CSV filename, where ppm errors of calibrants before and after model fitting parameters are written to (pass empty string to skip)
:param file_residuals_plot: Output PNG image of the ppm errors of calibrants (pass empty string to skip)
:param rscript_executable: Full path to the Rscript executable
:returns: true upon successful calibration




.. py:method:: InternalCalibration.endProgress
   :module: pyopenms.pyopenms_6


Cython signature: void endProgress()
Ends the progress display




.. py:method:: InternalCalibration.fillCalibrants
   :module: pyopenms.pyopenms_6


         - Cython signature: size_t fillCalibrants(MSExperiment, libcpp_vector[InternalCalibration_LockMass], double tol_ppm, bool lock_require_mono, bool lock_require_iso, CalibrationData & failed_lock_masses, bool verbose)


Extract calibrants from Raw data (mzML)
-----
Lock masses are searched in each spectrum and added to the internal calibrant database
-----
Filters can be used to exclude spurious peaks, i.e. require the calibrant peak to be monoisotopic or
to have a +1 isotope (should not be used for very low abundant calibrants)
If a calibrant is not found, it is added to a 'failed_lock_masses' database which is returned and not stored internally.
The intensity of the peaks describe the reason for failed detection: 0.0 - peak not found with the given ppm tolerance;
1.0 - peak is not monoisotopic (can only occur if 'lock_require_mono' is true)
2.0 - peak has no +1 isotope (can only occur if 'lock_require_iso' is true)
-----
:param exp: Peak map containing the lock masses
:param ref_masses: List of lock masses
:param tol_ppm: Search window for lock masses in 'exp'
:param lock_require_mono: Require that a lock mass is the monoisotopic peak (i.e. not an isotope peak) -- lock mass is rejected otherwise
:param lock_require_iso: Require that a lock mass has isotope peaks to its right -- lock mass is rejected otherwise
:param failed_lock_masses: Set of calibration masses which were not found, i.e. their expected m/z and RT positions
:param verbose: Print information on 'lock_require_XXX' matches during search
:returns: Number of calibration masses found
         - Cython signature: size_t fillCalibrants(FeatureMap, double)


Extract calibrants from identifications
-----
Extracts only the first hit from the first peptide identification of each feature
Hits are sorted beforehand
Ambiguities should be resolved before, e.g. using IDFilter
RT and m/z are taken from the features, not from the identifications (for an exception see below)!
-----
Unassigned peptide identifications are also taken into account!
RT and m/z are naturally taken from the IDs, since to feature is assigned
If you do not want these IDs, remove them from the feature map before calling this function
-----
A filtering step is done in the m/z dimension using 'tol_ppm'
Since precursor masses could be annotated wrongly (e.g. isotope peak instead of mono),
larger outliers are removed before accepting an ID as calibrant
-----
:param fm: FeatureMap with peptide identifications
:param tol_ppm: Only accept ID's whose theoretical mass deviates at most this much from annotated
:returns: Number of calibration masses found
         - Cython signature: size_t fillCalibrants(libcpp_vector[PeptideIdentification], double)


Extract calibrants from identifications
-----
Extracts only the first hit from each peptide identification
Hits are sorted beforehand
Ambiguities should be resolved before, e.g. using IDFilter
-----
Unassigned peptide identifications are also taken into account!
RT and m/z are naturally taken from the IDs, since to feature is assigned
If you do not want these IDs, remove them from the feature map before calling this function
-----
A filtering step is done in the m/z dimension using 'tol_ppm'
Since precursor masses could be annotated wrongly (e.g. isotope peak instead of mono),
larger outliers are removed before accepting an ID as calibrant
-----
:param pep_ids: Peptide ids (e.g. from an idXML file)
:param tol_ppm: Only accept ID's whose theoretical mass deviates at most this much from annotated
:returns: Number of calibration masses found




.. py:method:: InternalCalibration.getCalibrationPoints
   :module: pyopenms.pyopenms_6


Cython signature: CalibrationData getCalibrationPoints()


Get container of calibration points
-----
Filled using fillCalibrants() methods
-----
:returns: Container of calibration points




.. py:method:: InternalCalibration.getLogType
   :module: pyopenms.pyopenms_6


Cython signature: LogType getLogType()
Returns the type of progress log being used




.. py:method:: InternalCalibration.nextProgress
   :module: pyopenms.pyopenms_6


Cython signature: void nextProgress()
Increment progress by 1 (according to range begin-end)




.. py:method:: InternalCalibration.setLogType
   :module: pyopenms.pyopenms_6


Cython signature: void setLogType(LogType)
Sets the progress log that should be used. The default type is NONE!




.. py:method:: InternalCalibration.setProgress
   :module: pyopenms.pyopenms_6


Cython signature: void setProgress(ptrdiff_t value)
Sets the current progress




.. py:method:: InternalCalibration.startProgress
   :module: pyopenms.pyopenms_6


Cython signature: void startProgress(ptrdiff_t begin, ptrdiff_t end, String label)




.. py:class:: InternalCalibration_LockMass
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _InternalCalibration_LockMass


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1InternalCalibration_LockMass.html




.. py:attribute:: InternalCalibration_LockMass.charge
   :module: pyopenms.pyopenms_6




.. py:attribute:: InternalCalibration_LockMass.ms_level
   :module: pyopenms.pyopenms_6




.. py:attribute:: InternalCalibration_LockMass.mz
   :module: pyopenms.pyopenms_6




.. py:class:: InterpolationModel
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _InterpolationModel


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1InterpolationModel.html




.. py:method:: InterpolationModel.getCenter
   :module: pyopenms.pyopenms_6


Cython signature: double getCenter()
Returns the "center" of the model, particular definition (depends on the derived model)




.. py:method:: InterpolationModel.getIntensity
   :module: pyopenms.pyopenms_6


Cython signature: double getIntensity(double coord)
Access model predicted intensity at position 'pos'




.. py:method:: InterpolationModel.getInterpolation
   :module: pyopenms.pyopenms_6


Cython signature: LinearInterpolation getInterpolation()
Returns the interpolation class




.. py:method:: InterpolationModel.getScalingFactor
   :module: pyopenms.pyopenms_6


Cython signature: double getScalingFactor()
Returns the interpolation class




.. py:method:: InterpolationModel.setInterpolationStep
   :module: pyopenms.pyopenms_6


Cython signature: void setInterpolationStep(double interpolation_step)
Sets the interpolation step for the linear interpolation of the model




.. py:method:: InterpolationModel.setOffset
   :module: pyopenms.pyopenms_6


Cython signature: void setOffset(double offset)
Sets the offset of the model




.. py:method:: InterpolationModel.setSamples
   :module: pyopenms.pyopenms_6


Cython signature: void setSamples()
Sets sample/supporting points of interpolation wrt params




.. py:method:: InterpolationModel.setScalingFactor
   :module: pyopenms.pyopenms_6


Cython signature: void setScalingFactor(double scaling)
Sets the scaling factor of the model




.. py:class:: LinearResamplerAlign
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _LinearResamplerAlign


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1LinearResamplerAlign.html
 -- Inherits from ['LinearResampler']




.. py:method:: LinearResamplerAlign.endProgress
   :module: pyopenms.pyopenms_6


Cython signature: void endProgress()
Ends the progress display




.. py:method:: LinearResamplerAlign.getDefaults
   :module: pyopenms.pyopenms_6


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: LinearResamplerAlign.getLogType
   :module: pyopenms.pyopenms_6


Cython signature: LogType getLogType()
Returns the type of progress log being used




.. py:method:: LinearResamplerAlign.getName
   :module: pyopenms.pyopenms_6


Cython signature: String getName()
Returns the name




.. py:method:: LinearResamplerAlign.getParameters
   :module: pyopenms.pyopenms_6


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: LinearResamplerAlign.getSubsections
   :module: pyopenms.pyopenms_6


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: LinearResamplerAlign.nextProgress
   :module: pyopenms.pyopenms_6


Cython signature: void nextProgress()
Increment progress by 1 (according to range begin-end)




.. py:method:: LinearResamplerAlign.raster
   :module: pyopenms.pyopenms_6


Cython signature: void raster(MSSpectrum & input)
Applies the resampling algorithm to an MSSpectrum




.. py:method:: LinearResamplerAlign.rasterExperiment
   :module: pyopenms.pyopenms_6


Cython signature: void rasterExperiment(MSExperiment & input)
Resamples the data in an MSExperiment




.. py:method:: LinearResamplerAlign.setLogType
   :module: pyopenms.pyopenms_6


Cython signature: void setLogType(LogType)
Sets the progress log that should be used. The default type is NONE!




.. py:method:: LinearResamplerAlign.setName
   :module: pyopenms.pyopenms_6


Cython signature: void setName(const String &)
Sets the name




.. py:method:: LinearResamplerAlign.setParameters
   :module: pyopenms.pyopenms_6


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: LinearResamplerAlign.setProgress
   :module: pyopenms.pyopenms_6


Cython signature: void setProgress(ptrdiff_t value)
Sets the current progress




.. py:method:: LinearResamplerAlign.startProgress
   :module: pyopenms.pyopenms_6


Cython signature: void startProgress(ptrdiff_t begin, ptrdiff_t end, String label)




.. py:class:: MRMAssay
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _MRMAssay


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MRMAssay.html
 -- Inherits from ['ProgressLogger']




.. py:method:: MRMAssay.detectingTransitions
   :module: pyopenms.pyopenms_6


Cython signature: void detectingTransitions(TargetedExperiment & exp, int min_transitions, int max_transitions)


Select detecting fragment ions
-----
:param exp: The input, unfiltered transitions
:param min_transitions: The minimum number of transitions required per assay
:param max_transitions: The maximum number of transitions required per assay




.. py:method:: MRMAssay.endProgress
   :module: pyopenms.pyopenms_6


Cython signature: void endProgress()
Ends the progress display




.. py:method:: MRMAssay.filterMinMaxTransitionsCompound
   :module: pyopenms.pyopenms_6


Cython signature: void filterMinMaxTransitionsCompound(TargetedExperiment & exp, int min_transitions, int max_transitions)


Filters target and decoy transitions by intensity, only keeping the top N transitions
-----
:param exp: The transition list which will be filtered
:param min_transitions: The minimum number of transitions required per assay (targets only)
:param max_transitions: The maximum number of transitions allowed per assay




.. py:method:: MRMAssay.filterUnreferencedDecoysCompound
   :module: pyopenms.pyopenms_6


Cython signature: void filterUnreferencedDecoysCompound(TargetedExperiment & exp)


Filters decoy transitions, which do not have respective target transition
based on the transitionID.
-----
References between targets and decoys will be constructed based on the transitionsID
and the "_decoy_" string. For example:
-----
target: 84_CompoundName_[M+H]+_88_22
decoy: 84_CompoundName_decoy_[M+H]+_88_22
-----
:param exp: The transition list which will be filtered




.. py:method:: MRMAssay.getLogType
   :module: pyopenms.pyopenms_6


Cython signature: LogType getLogType()
Returns the type of progress log being used




.. py:method:: MRMAssay.nextProgress
   :module: pyopenms.pyopenms_6


Cython signature: void nextProgress()
Increment progress by 1 (according to range begin-end)




.. py:method:: MRMAssay.reannotateTransitions
   :module: pyopenms.pyopenms_6


Cython signature: void reannotateTransitions(TargetedExperiment & exp, double precursor_mz_threshold, double product_mz_threshold, libcpp_vector[String] fragment_types, libcpp_vector[size_t] fragment_charges, bool enable_specific_losses, bool enable_unspecific_losses, int round_decPow)


Annotates and filters transitions in a TargetedExperiment
-----
:param exp: The input, unfiltered transitions
:param precursor_mz_threshold: The precursor m/z threshold in Th for annotation
:param product_mz_threshold: The product m/z threshold in Th for annotation
:param fragment_types: The fragment types to consider for annotation
:param fragment_charges: The fragment charges to consider for annotation
:param enable_specific_losses: Whether specific neutral losses should be considered
:param enable_unspecific_losses: Whether unspecific neutral losses (H2O1, H3N1, C1H2N2, C1H2N1O1) should be considered
:param round_decPow: Round product m/z values to decimal power (default: -4)




.. py:method:: MRMAssay.restrictTransitions
   :module: pyopenms.pyopenms_6


Cython signature: void restrictTransitions(TargetedExperiment & exp, double lower_mz_limit, double upper_mz_limit, libcpp_vector[libcpp_pair[double,double]] swathes)


Restrict and filter transitions in a TargetedExperiment
-----
:param exp: The input, unfiltered transitions
:param lower_mz_limit: The lower product m/z limit in Th
:param upper_mz_limit: The upper product m/z limit in Th
:param swathes: The swath window settings (to exclude fragment ions falling into the precursor isolation window)




.. py:method:: MRMAssay.setLogType
   :module: pyopenms.pyopenms_6


Cython signature: void setLogType(LogType)
Sets the progress log that should be used. The default type is NONE!




.. py:method:: MRMAssay.setProgress
   :module: pyopenms.pyopenms_6


Cython signature: void setProgress(ptrdiff_t value)
Sets the current progress




.. py:method:: MRMAssay.startProgress
   :module: pyopenms.pyopenms_6


Cython signature: void startProgress(ptrdiff_t begin, ptrdiff_t end, String label)




.. py:method:: MRMAssay.uisTransitions
   :module: pyopenms.pyopenms_6


Cython signature: void uisTransitions(TargetedExperiment & exp, libcpp_vector[String] fragment_types, libcpp_vector[size_t] fragment_charges, bool enable_specific_losses, bool enable_unspecific_losses, bool enable_ms2_precursors, double mz_threshold, libcpp_vector[libcpp_pair[double,double]] swathes, int round_decPow, size_t max_num_alternative_localizations, int shuffle_seed)


Annotate UIS / site-specific transitions
-----
Performs the following actions:
-----
- Step 1: For each peptide, compute all theoretical alternative peptidoforms; see transitions generateTargetInSilicoMap_()
- Step 2: Generate target identification transitions; see generateTargetAssays_()
-----
- Step 3a: Generate decoy sequences that share peptidoform properties with targets; see generateDecoySequences_()
- Step 3b: Generate decoy in silico peptide map containing theoretical transition; see generateDecoyInSilicoMap_()
- Step 4: Generate decoy identification transitions; see generateDecoyAssays_()
-----
The IPF algorithm uses the concept of "identification transitions" that
are used to discriminate different peptidoforms, these are generated in
this function.  In brief, the algorithm takes the existing set of
peptides and transitions and then appends these "identification
transitions" for targets and decoys. The novel transitions are set to be
non-detecting and non-quantifying and are annotated with the set of
peptidoforms to which they map.
-----
:param exp: The input, unfiltered transitions
:param fragment_types: The fragment types to consider for annotation
:param fragment_charges: The fragment charges to consider for annotation
:param enable_specific_losses: Whether specific neutral losses should be considered
:param enable_unspecific_losses: Whether unspecific neutral losses (H2O1, H3N1, C1H2N2, C1H2N1O1) should be considered
:param enable_ms2_precursors: Whether MS2 precursors should be considered
:param mz_threshold: The product m/z threshold in Th for annotation
:param swathes: The swath window settings (to exclude fragment ions falling
:param round_decPow: Round product m/z values to decimal power (default: -4)
:param max_num_alternative_localizations: Maximum number of allowed peptide sequence permutations
:param shuffle_seed: Set seed for shuffle (-1: select seed based on time)
:param disable_decoy_transitions: Whether to disable generation of decoy UIS transitions




.. py:class:: MS2File
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _MS2File


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MS2File.html
 -- Inherits from ['ProgressLogger']




.. py:method:: MS2File.endProgress
   :module: pyopenms.pyopenms_6


Cython signature: void endProgress()
Ends the progress display




.. py:method:: MS2File.getLogType
   :module: pyopenms.pyopenms_6


Cython signature: LogType getLogType()
Returns the type of progress log being used




.. py:method:: MS2File.load
   :module: pyopenms.pyopenms_6


Cython signature: void load(const String & filename, MSExperiment & exp)




.. py:method:: MS2File.nextProgress
   :module: pyopenms.pyopenms_6


Cython signature: void nextProgress()
Increment progress by 1 (according to range begin-end)




.. py:method:: MS2File.setLogType
   :module: pyopenms.pyopenms_6


Cython signature: void setLogType(LogType)
Sets the progress log that should be used. The default type is NONE!




.. py:method:: MS2File.setProgress
   :module: pyopenms.pyopenms_6


Cython signature: void setProgress(ptrdiff_t value)
Sets the current progress




.. py:method:: MS2File.startProgress
   :module: pyopenms.pyopenms_6


Cython signature: void startProgress(ptrdiff_t begin, ptrdiff_t end, String label)




.. py:class:: MSDGroup
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _MSDGroup


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MSDGroup.html




.. py:attribute:: MSDGroup.index
   :module: pyopenms.pyopenms_6




.. py:attribute:: MSDGroup.intensity
   :module: pyopenms.pyopenms_6




.. py:attribute:: MSDGroup.isd_group
   :module: pyopenms.pyopenms_6




.. py:attribute:: MSDGroup.number_of_decoy
   :module: pyopenms.pyopenms_6




.. py:attribute:: MSDGroup.number_of_target
   :module: pyopenms.pyopenms_6




.. py:attribute:: MSDGroup.number_of_target_plus_decoy
   :module: pyopenms.pyopenms_6




.. py:class:: MapAlignmentAlgorithmSpectrumAlignment
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _MapAlignmentAlgorithmSpectrumAlignment


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MapAlignmentAlgorithmSpectrumAlignment.html
 -- Inherits from ['DefaultParamHandler', 'ProgressLogger']




.. py:method:: MapAlignmentAlgorithmSpectrumAlignment.align
   :module: pyopenms.pyopenms_6


Cython signature: void align(libcpp_vector[MSExperiment] &, libcpp_vector[TransformationDescription] &)
Align peak maps




.. py:method:: MapAlignmentAlgorithmSpectrumAlignment.endProgress
   :module: pyopenms.pyopenms_6


Cython signature: void endProgress()
Ends the progress display




.. py:method:: MapAlignmentAlgorithmSpectrumAlignment.getDefaults
   :module: pyopenms.pyopenms_6


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: MapAlignmentAlgorithmSpectrumAlignment.getLogType
   :module: pyopenms.pyopenms_6


Cython signature: LogType getLogType()
Returns the type of progress log being used




.. py:method:: MapAlignmentAlgorithmSpectrumAlignment.getName
   :module: pyopenms.pyopenms_6


Cython signature: String getName()
Returns the name




.. py:method:: MapAlignmentAlgorithmSpectrumAlignment.getParameters
   :module: pyopenms.pyopenms_6


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: MapAlignmentAlgorithmSpectrumAlignment.getSubsections
   :module: pyopenms.pyopenms_6


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: MapAlignmentAlgorithmSpectrumAlignment.nextProgress
   :module: pyopenms.pyopenms_6


Cython signature: void nextProgress()
Increment progress by 1 (according to range begin-end)




.. py:method:: MapAlignmentAlgorithmSpectrumAlignment.setLogType
   :module: pyopenms.pyopenms_6


Cython signature: void setLogType(LogType)
Sets the progress log that should be used. The default type is NONE!




.. py:method:: MapAlignmentAlgorithmSpectrumAlignment.setName
   :module: pyopenms.pyopenms_6


Cython signature: void setName(const String &)
Sets the name




.. py:method:: MapAlignmentAlgorithmSpectrumAlignment.setParameters
   :module: pyopenms.pyopenms_6


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: MapAlignmentAlgorithmSpectrumAlignment.setProgress
   :module: pyopenms.pyopenms_6


Cython signature: void setProgress(ptrdiff_t value)
Sets the current progress




.. py:method:: MapAlignmentAlgorithmSpectrumAlignment.startProgress
   :module: pyopenms.pyopenms_6


Cython signature: void startProgress(ptrdiff_t begin, ptrdiff_t end, String label)




.. py:class:: MassDecompositionAlgorithm
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _MassDecompositionAlgorithm


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MassDecompositionAlgorithm.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: MassDecompositionAlgorithm.getDecompositions
   :module: pyopenms.pyopenms_6


Cython signature: void getDecompositions(libcpp_vector[MassDecomposition] & decomps, double weight)
Returns the possible decompositions given the weight




.. py:method:: MassDecompositionAlgorithm.getDefaults
   :module: pyopenms.pyopenms_6


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: MassDecompositionAlgorithm.getName
   :module: pyopenms.pyopenms_6


Cython signature: String getName()
Returns the name




.. py:method:: MassDecompositionAlgorithm.getParameters
   :module: pyopenms.pyopenms_6


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: MassDecompositionAlgorithm.getSubsections
   :module: pyopenms.pyopenms_6


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: MassDecompositionAlgorithm.setName
   :module: pyopenms.pyopenms_6


Cython signature: void setName(const String &)
Sets the name




.. py:method:: MassDecompositionAlgorithm.setParameters
   :module: pyopenms.pyopenms_6


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: MassExplainer
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _MassExplainer


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MassExplainer.html




.. py:method:: MassExplainer.compute
   :module: pyopenms.pyopenms_6


Cython signature: void compute()
Fill map with possible mass-differences along with their explanation




.. py:method:: MassExplainer.getAdductBase
   :module: pyopenms.pyopenms_6


Cython signature: libcpp_vector[Adduct] getAdductBase()
Returns the set of adducts




.. py:method:: MassExplainer.getCompomerById
   :module: pyopenms.pyopenms_6


Cython signature: Compomer getCompomerById(size_t id)
Returns a compomer by its Id (useful after a query() )




.. py:method:: MassExplainer.setAdductBase
   :module: pyopenms.pyopenms_6


Cython signature: void setAdductBase(libcpp_vector[Adduct] adduct_base)
Sets the set of possible adducts




.. py:class:: MetaInfo
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _MetaInfo


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MetaInfo.html


 A Type-Name-Value tuple class
 -----
 MetaInfo maps an index (an integer corresponding to a string) to
 DataValue objects.  The mapping of strings to the index is performed by
 the MetaInfoRegistry, which can be accessed by the method registry()
 -----
 There are two versions of nearly all members. One which operates with a
 string name and another one which operates on an index. The index version
 is always faster, as it does not need to look up the index corresponding
 to the string in the MetaInfoRegistry
 -----
 If you wish to add a MetaInfo member to a class, consider deriving that
 class from MetaInfoInterface, instead of simply adding MetaInfo as
 member. MetaInfoInterface implements a full interface to a MetaInfo
 member and is more memory efficient if no meta info gets added




.. py:method:: MetaInfo.clear
   :module: pyopenms.pyopenms_6


Cython signature: void clear()
Removes all meta values




.. py:method:: MetaInfo.empty
   :module: pyopenms.pyopenms_6


Cython signature: bool empty()
Returns if the MetaInfo is empty




.. py:method:: MetaInfo.exists
   :module: pyopenms.pyopenms_6


- Cython signature: bool exists(String name)
  Returns if this MetaInfo is set


- Cython signature: bool exists(unsigned int index)
  Returns if this MetaInfo is set




.. py:method:: MetaInfo.getKeys
   :module: pyopenms.pyopenms_6


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: MetaInfo.getKeysAsIntegers
   :module: pyopenms.pyopenms_6


Cython signature: void getKeysAsIntegers(libcpp_vector[unsigned int] & keys)




.. py:method:: MetaInfo.getValue
   :module: pyopenms.pyopenms_6


- Cython signature: DataValue getValue(String name)
  Returns the value corresponding to a string


- Cython signature: DataValue getValue(unsigned int index)
  Returns the value corresponding to an index


- Cython signature: DataValue getValue(String name, DataValue default_value)
  Returns the value corresponding to a string


- Cython signature: DataValue getValue(unsigned int index, DataValue default_value)
  Returns the value corresponding to an index




.. py:method:: MetaInfo.registry
   :module: pyopenms.pyopenms_6


Cython signature: MetaInfoRegistry registry()




.. py:method:: MetaInfo.removeValue
   :module: pyopenms.pyopenms_6


- Cython signature: void removeValue(String name)
  Removes the DataValue corresponding to `name` if it exists


- Cython signature: void removeValue(unsigned int index)
  Removes the DataValue corresponding to `index` if it exists




.. py:method:: MetaInfo.setValue
   :module: pyopenms.pyopenms_6


- Cython signature: void setValue(String name, DataValue value)
  Sets the DataValue corresponding to a name


- Cython signature: void setValue(unsigned int index, DataValue value)
  Sets the DataValue corresponding to an index




.. py:class:: MetaInfoDescription
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _MetaInfoDescription


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MetaInfoDescription.html
 -- Inherits from ['MetaInfoInterface']




.. py:method:: MetaInfoDescription.clearMetaInfo
   :module: pyopenms.pyopenms_6


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: MetaInfoDescription.getDataProcessing
   :module: pyopenms.pyopenms_6


Cython signature: libcpp_vector[shared_ptr[DataProcessing]] getDataProcessing()
Returns a reference to the description of the applied processing




.. py:method:: MetaInfoDescription.getKeys
   :module: pyopenms.pyopenms_6


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: MetaInfoDescription.getMetaValue
   :module: pyopenms.pyopenms_6


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: MetaInfoDescription.getName
   :module: pyopenms.pyopenms_6


Cython signature: String getName()
Returns the name of the peak annotations




.. py:method:: MetaInfoDescription.isMetaEmpty
   :module: pyopenms.pyopenms_6


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: MetaInfoDescription.metaRegistry
   :module: pyopenms.pyopenms_6


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: MetaInfoDescription.metaValueExists
   :module: pyopenms.pyopenms_6


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: MetaInfoDescription.removeMetaValue
   :module: pyopenms.pyopenms_6


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: MetaInfoDescription.setDataProcessing
   :module: pyopenms.pyopenms_6


Cython signature: void setDataProcessing(libcpp_vector[shared_ptr[DataProcessing]])
Sets the description of the applied processing




.. py:method:: MetaInfoDescription.setMetaValue
   :module: pyopenms.pyopenms_6


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:method:: MetaInfoDescription.setName
   :module: pyopenms.pyopenms_6


Cython signature: void setName(String name)
Sets the name of the peak annotations




.. py:class:: MetaboliteSpectralMatching
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _MetaboliteSpectralMatching


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MetaboliteSpectralMatching.html
 -- Inherits from ['ProgressLogger', 'DefaultParamHandler']




.. py:method:: MetaboliteSpectralMatching.computeHyperScore
   :module: pyopenms.pyopenms_6


Cython signature: double computeHyperScore(double fragment_mass_error, bool fragment_mass_tolerance_unit_ppm, MSSpectrum exp_spectrum, MSSpectrum db_spectrum, libcpp_vector[PeptideHit_PeakAnnotation] & annotations, double mz_lower_bound)




.. py:method:: MetaboliteSpectralMatching.endProgress
   :module: pyopenms.pyopenms_6


Cython signature: void endProgress()
Ends the progress display




.. py:method:: MetaboliteSpectralMatching.getDefaults
   :module: pyopenms.pyopenms_6


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: MetaboliteSpectralMatching.getLogType
   :module: pyopenms.pyopenms_6


Cython signature: LogType getLogType()
Returns the type of progress log being used




.. py:method:: MetaboliteSpectralMatching.getName
   :module: pyopenms.pyopenms_6


Cython signature: String getName()
Returns the name




.. py:method:: MetaboliteSpectralMatching.getParameters
   :module: pyopenms.pyopenms_6


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: MetaboliteSpectralMatching.getSubsections
   :module: pyopenms.pyopenms_6


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: MetaboliteSpectralMatching.nextProgress
   :module: pyopenms.pyopenms_6


Cython signature: void nextProgress()
Increment progress by 1 (according to range begin-end)




.. py:method:: MetaboliteSpectralMatching.run
   :module: pyopenms.pyopenms_6


Cython signature: void run(MSExperiment & exp, MSExperiment & speclib, MzTab & mz_tab)




.. py:method:: MetaboliteSpectralMatching.setLogType
   :module: pyopenms.pyopenms_6


Cython signature: void setLogType(LogType)
Sets the progress log that should be used. The default type is NONE!




.. py:method:: MetaboliteSpectralMatching.setName
   :module: pyopenms.pyopenms_6


Cython signature: void setName(const String &)
Sets the name




.. py:method:: MetaboliteSpectralMatching.setParameters
   :module: pyopenms.pyopenms_6


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: MetaboliteSpectralMatching.setProgress
   :module: pyopenms.pyopenms_6


Cython signature: void setProgress(ptrdiff_t value)
Sets the current progress




.. py:method:: MetaboliteSpectralMatching.startProgress
   :module: pyopenms.pyopenms_6


Cython signature: void startProgress(ptrdiff_t begin, ptrdiff_t end, String label)




.. py:class:: ModifiedPeptideGenerator
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _ModifiedPeptideGenerator


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ModifiedPeptideGenerator.html




.. py:class:: ModifiedPeptideGenerator_MapToResidueType
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _ModifiedPeptideGenerator_MapToResidueType


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ModifiedPeptideGenerator_MapToResidueType.html




.. py:class:: MsInspectFile
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _MsInspectFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MsInspectFile.html




.. py:method:: MsInspectFile.load
   :module: pyopenms.pyopenms_6


Cython signature: void load(const String & filename, FeatureMap & feature_map)


Loads a MsInspect file into a featureXML
-----
The content of the file is stored in `features`
:raises:
  Exception: FileNotFound is thrown if the file could not be opened
:raises:
  Exception: ParseError is thrown if an error occurs during parsing




.. py:method:: MsInspectFile.store
   :module: pyopenms.pyopenms_6


Cython signature: void store(const String & filename, MSSpectrum & spectrum)
Stores a featureXML as a MsInspect file




.. py:class:: MzMLFile
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _MzMLFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MzMLFile.html
 -- Inherits from ['ProgressLogger']


 File adapter for MzML files
 -----
 Provides methods to load and store MzML files.
 PeakFileOptions allow to load a reduced subset of the data into an MSExperiment.
 -----
 See help(MSExperiment) how data is stored after loading.
 See help(PeakFileOptions) for available options.
 -----
 Usage:
   exp = MSExperiment()
   MzMLFile().load("test.mzML", exp)
   spec = []
   for s in exp.getSpectra():
     if s.getMSLevel() != 1:
       spec.append(s)
   exp.setSpectra(spec)
   MzMLFile().store("filtered.mzML", exp)
 -----




.. py:method:: MzMLFile.endProgress
   :module: pyopenms.pyopenms_6


Cython signature: void endProgress()
Ends the progress display




.. py:method:: MzMLFile.getLogType
   :module: pyopenms.pyopenms_6


Cython signature: LogType getLogType()
Returns the type of progress log being used




.. py:method:: MzMLFile.getOptions
   :module: pyopenms.pyopenms_6


Cython signature: PeakFileOptions getOptions()




.. py:method:: MzMLFile.isSemanticallyValid
   :module: pyopenms.pyopenms_6


Cython signature: bool isSemanticallyValid(const String & filename, StringList & errors, StringList & warnings)




.. py:method:: MzMLFile.load
   :module: pyopenms.pyopenms_6


Cython signature: void load(const String & filename, MSExperiment &)
Loads from an MzML file. Spectra and chromatograms are sorted by default (this can be disabled using PeakFileOptions)




.. py:method:: MzMLFile.loadBuffer
   :module: pyopenms.pyopenms_6


Cython signature: void loadBuffer(const String & input, MSExperiment & exp)


Loads a map from a MzML file stored in a buffer (in memory)
-----
:param buffer: The buffer with the data (i.e. string with content of an mzML file)
:param exp: Is an MSExperiment
-----
:raises:
  Exception: ParseError is thrown if an error occurs during parsing




.. py:method:: MzMLFile.nextProgress
   :module: pyopenms.pyopenms_6


Cython signature: void nextProgress()
Increment progress by 1 (according to range begin-end)




.. py:method:: MzMLFile.setLogType
   :module: pyopenms.pyopenms_6


Cython signature: void setLogType(LogType)
Sets the progress log that should be used. The default type is NONE!




.. py:method:: MzMLFile.setOptions
   :module: pyopenms.pyopenms_6


Cython signature: void setOptions(PeakFileOptions)
Set PeakFileOptions to perform filtering during loading. E.g., to load only MS1 spectra or meta data only




.. py:method:: MzMLFile.setProgress
   :module: pyopenms.pyopenms_6


Cython signature: void setProgress(ptrdiff_t value)
Sets the current progress




.. py:method:: MzMLFile.startProgress
   :module: pyopenms.pyopenms_6


Cython signature: void startProgress(ptrdiff_t begin, ptrdiff_t end, String label)




.. py:method:: MzMLFile.store
   :module: pyopenms.pyopenms_6


Cython signature: void store(const String & filename, MSExperiment &)
Stores a MSExperiment in an MzML file




.. py:method:: MzMLFile.storeBuffer
   :module: pyopenms.pyopenms_6


Cython signature: void storeBuffer(String & output, MSExperiment exp)


Stores a map in an output string
-----
:param output: An empty string to store the result
:param exp: Has to be an MSExperiment




.. py:method:: MzMLFile.transform
   :module: pyopenms.pyopenms_6




.. py:class:: MzMLSqliteHandler
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _MzMLSqliteHandler


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::Internal_1_1MzMLSqliteHandler.html




.. py:method:: MzMLSqliteHandler.createTables
   :module: pyopenms.pyopenms_6


Cython signature: void createTables()
Create data tables for a new file




.. py:method:: MzMLSqliteHandler.getNrChromatograms
   :module: pyopenms.pyopenms_6


Cython signature: size_t getNrChromatograms()
Returns the number of chromatograms in the file




.. py:method:: MzMLSqliteHandler.getNrSpectra
   :module: pyopenms.pyopenms_6


Cython signature: size_t getNrSpectra()
Returns number of spectra in the file, reutrns the number of spectra




.. py:method:: MzMLSqliteHandler.getRunID
   :module: pyopenms.pyopenms_6


Cython signature: uint64_t getRunID()
Extract the `RUN` ID from the sqMass file




.. py:method:: MzMLSqliteHandler.getSpectraIndicesbyRT
   :module: pyopenms.pyopenms_6


Cython signature: libcpp_vector[size_t] getSpectraIndicesbyRT(double RT, double deltaRT, libcpp_vector[int] indices)


Returns spectral indices around a specific retention time
-----
:param RT: The retention time
:param deltaRT: Tolerance window around RT (if less or equal than zero, only the first spectrum *after* RT is returned)
:param indices: Spectra to consider (if empty, all spectra are considered)
:returns: The indices of the spectra within RT +/- deltaRT




.. py:method:: MzMLSqliteHandler.readChromatograms
   :module: pyopenms.pyopenms_6


Cython signature: void readChromatograms(libcpp_vector[MSChromatogram] & exp, libcpp_vector[int] indices, bool meta_only)


Read a set of chromatograms (potentially restricted to a subset)
-----
:param exp: The result data structure
:param indices: A list of indices restricting the resulting spectra only to those specified here
:param meta_only: Only read the meta data




.. py:method:: MzMLSqliteHandler.readExperiment
   :module: pyopenms.pyopenms_6


Cython signature: void readExperiment(MSExperiment & exp, bool meta_only)


Read an experiment into an MSExperiment structure
-----
:param exp: The result data structure
:param meta_only: Only read the meta data




.. py:method:: MzMLSqliteHandler.readSpectra
   :module: pyopenms.pyopenms_6


Cython signature: void readSpectra(libcpp_vector[MSSpectrum] & exp, libcpp_vector[int] indices, bool meta_only)


Read a set of spectra (potentially restricted to a subset)
-----
:param exp: The result data structure
:param indices: A list of indices restricting the resulting spectra only to those specified here
:param meta_only: Only read the meta data




.. py:method:: MzMLSqliteHandler.setConfig
   :module: pyopenms.pyopenms_6


Cython signature: void setConfig(bool write_full_meta, bool use_lossy_compression, double linear_abs_mass_acc)


Sets file configuration
-----
:param write_full_meta: Whether to write a complete mzML meta data structure into the RUN_EXTRA field (allows complete recovery of the input file)
:param use_lossy_compression: Whether to use lossy compression (ms numpress)
:param linear_abs_mass_acc: Accepted loss in mass accuracy (absolute m/z, in Th)




.. py:method:: MzMLSqliteHandler.writeChromatograms
   :module: pyopenms.pyopenms_6


Cython signature: void writeChromatograms(libcpp_vector[MSChromatogram] chroms)
Writes a set of chromatograms to disk




.. py:method:: MzMLSqliteHandler.writeExperiment
   :module: pyopenms.pyopenms_6


Cython signature: void writeExperiment(MSExperiment exp)
Write an MSExperiment to disk




.. py:method:: MzMLSqliteHandler.writeRunLevelInformation
   :module: pyopenms.pyopenms_6


Cython signature: void writeRunLevelInformation(MSExperiment exp, bool write_full_meta)


Write the run-level information for an experiment into tables
-----
This is a low level function, do not call this function unless you know what you are doing
-----
:param exp: The result data structure
:param meta_only: Only read the meta data




.. py:method:: MzMLSqliteHandler.writeSpectra
   :module: pyopenms.pyopenms_6


Cython signature: void writeSpectra(libcpp_vector[MSSpectrum] spectra)
Writes a set of spectra to disk




.. py:class:: MzQuantMLFile
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _MzQuantMLFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MzQuantMLFile.html




.. py:method:: MzQuantMLFile.isSemanticallyValid
   :module: pyopenms.pyopenms_6


Cython signature: bool isSemanticallyValid(String filename, StringList & errors, StringList & warnings)


Checks if a file is valid with respect to the mapping file and the controlled vocabulary
-----
:param filename: File name of the file to be checked
:param errors: Errors during the validation are returned in this output parameter
:param warnings: Warnings during the validation are returned in this output parameter
-----
:raises:
  Exception: UnableToCreateFile is thrown if the file could not be created




.. py:method:: MzQuantMLFile.load
   :module: pyopenms.pyopenms_6


Cython signature: void load(String filename, MSQuantifications & msq)


Loads a map from a MzQuantML file
-----
:raises:
  Exception: FileNotFound is thrown if the file could not be opened
:raises:
  Exception: ParseError is thrown if an error occurs during parsing




.. py:method:: MzQuantMLFile.store
   :module: pyopenms.pyopenms_6


Cython signature: void store(String filename, MSQuantifications & msq)


Stores a map in a MzQuantML file
-----
:raises:
  Exception: UnableToCreateFile is thrown if the file could not be created




.. py:class:: MzTab
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _MzTab


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MzTab.html


 Data model of MzTab files
 -----
 Please see the official MzTab specification at https://code.google.com/p/mztab/




.. py:class:: MzTabFile
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _MzTabFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MzTabFile.html




.. py:method:: MzTabFile.load
   :module: pyopenms.pyopenms_6


Cython signature: void load(String filename, MzTab & mz_tab)
Loads MzTab file




.. py:method:: MzTabFile.store
   :module: pyopenms.pyopenms_6


Cython signature: void store(String filename, MzTab & mz_tab)
Stores MzTab file




.. py:class:: NeutralLossDiffFilter
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _NeutralLossDiffFilter


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1NeutralLossDiffFilter.html
 -- Inherits from ['FilterFunctor']




.. py:method:: NeutralLossDiffFilter.apply
   :module: pyopenms.pyopenms_6


Cython signature: double apply(MSSpectrum &)




.. py:method:: NeutralLossDiffFilter.getDefaults
   :module: pyopenms.pyopenms_6


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: NeutralLossDiffFilter.getName
   :module: pyopenms.pyopenms_6


Cython signature: String getName()
Returns the name




.. py:method:: NeutralLossDiffFilter.getParameters
   :module: pyopenms.pyopenms_6


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: NeutralLossDiffFilter.getProductName
   :module: pyopenms.pyopenms_6


Cython signature: String getProductName()




.. py:method:: NeutralLossDiffFilter.getSubsections
   :module: pyopenms.pyopenms_6


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: NeutralLossDiffFilter.registerChildren
   :module: pyopenms.pyopenms_6


Cython signature: void registerChildren()




.. py:method:: NeutralLossDiffFilter.setName
   :module: pyopenms.pyopenms_6


Cython signature: void setName(const String &)
Sets the name




.. py:method:: NeutralLossDiffFilter.setParameters
   :module: pyopenms.pyopenms_6


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: OPXLHelper
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _OPXLHelper


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1OPXLHelper.html




.. py:method:: OPXLHelper.addBetaAccessions
   :module: pyopenms.pyopenms_6


Cython signature: void addBetaAccessions(libcpp_vector[PeptideIdentification] & peptide_ids)




.. py:method:: OPXLHelper.addPercolatorFeatureList
   :module: pyopenms.pyopenms_6


Cython signature: void addPercolatorFeatureList(ProteinIdentification & prot_id)




.. py:method:: OPXLHelper.addProteinPositionMetaValues
   :module: pyopenms.pyopenms_6


Cython signature: void addProteinPositionMetaValues(libcpp_vector[PeptideIdentification] & peptide_ids)




.. py:method:: OPXLHelper.addXLTargetDecoyMV
   :module: pyopenms.pyopenms_6


Cython signature: void addXLTargetDecoyMV(libcpp_vector[PeptideIdentification] & peptide_ids)




.. py:method:: OPXLHelper.buildCandidates
   :module: pyopenms.pyopenms_6


Cython signature: libcpp_vector[ProteinProteinCrossLink] buildCandidates(libcpp_vector[XLPrecursor] & candidates, libcpp_vector[int] & precursor_corrections, libcpp_vector[int] & precursor_correction_positions, libcpp_vector[AASeqWithMass] & peptide_masses, const StringList & cross_link_residue1, const StringList & cross_link_residue2, double cross_link_mass, DoubleList cross_link_mass_mono_link, libcpp_vector[double] & spectrum_precursor_vector, libcpp_vector[double] & allowed_error_vector, String cross_link_name)




.. py:method:: OPXLHelper.buildFragmentAnnotations
   :module: pyopenms.pyopenms_6


Cython signature: void buildFragmentAnnotations(libcpp_vector[PeptideHit_PeakAnnotation] & frag_annotations, libcpp_vector[libcpp_pair[size_t,size_t]] matching, MSSpectrum theoretical_spectrum, MSSpectrum experiment_spectrum)




.. py:method:: OPXLHelper.buildPeptideIDs
   :module: pyopenms.pyopenms_6


Cython signature: void buildPeptideIDs(libcpp_vector[PeptideIdentification] & peptide_ids, libcpp_vector[CrossLinkSpectrumMatch] top_csms_spectrum, libcpp_vector[libcpp_vector[CrossLinkSpectrumMatch]] & all_top_csms, size_t all_top_csms_current_index, MSExperiment spectra, size_t scan_index, size_t scan_index_heavy)




.. py:method:: OPXLHelper.collectPrecursorCandidates
   :module: pyopenms.pyopenms_6


Cython signature: libcpp_vector[ProteinProteinCrossLink] collectPrecursorCandidates(IntList precursor_correction_steps, double precursor_mass, double precursor_mass_tolerance, bool precursor_mass_tolerance_unit_ppm, libcpp_vector[AASeqWithMass] filtered_peptide_masses, double cross_link_mass, DoubleList cross_link_mass_mono_link, StringList cross_link_residue1, StringList cross_link_residue2, String cross_link_name, bool use_sequence_tags, const libcpp_vector[libcpp_utf8_string] & tags)




.. py:method:: OPXLHelper.combineTopRanksFromPairs
   :module: pyopenms.pyopenms_6


Cython signature: libcpp_vector[PeptideIdentification] combineTopRanksFromPairs(libcpp_vector[PeptideIdentification] & peptide_ids, size_t number_top_hits)




.. py:method:: OPXLHelper.computeDeltaScores
   :module: pyopenms.pyopenms_6


Cython signature: void computeDeltaScores(libcpp_vector[PeptideIdentification] & peptide_ids)




.. py:method:: OPXLHelper.computePrecursorError
   :module: pyopenms.pyopenms_6


Cython signature: double computePrecursorError(CrossLinkSpectrumMatch csm, double precursor_mz, int precursor_charge)




.. py:method:: OPXLHelper.digestDatabase
   :module: pyopenms.pyopenms_6


Cython signature: libcpp_vector[AASeqWithMass] digestDatabase(libcpp_vector[FASTAEntry] fasta_db, EnzymaticDigestion digestor, size_t min_peptide_length, StringList cross_link_residue1, StringList cross_link_residue2, ModifiedPeptideGenerator_MapToResidueType & fixed_modifications, ModifiedPeptideGenerator_MapToResidueType & variable_modifications, size_t max_variable_mods_per_peptide)




.. py:method:: OPXLHelper.enumerateCrossLinksAndMasses
   :module: pyopenms.pyopenms_6


Cython signature: libcpp_vector[XLPrecursor] enumerateCrossLinksAndMasses(libcpp_vector[AASeqWithMass] peptides, double cross_link_mass_light, DoubleList cross_link_mass_mono_link, StringList cross_link_residue1, StringList cross_link_residue2, libcpp_vector[double] & spectrum_precursors, libcpp_vector[int] & precursor_correction_positions, double precursor_mass_tolerance, bool precursor_mass_tolerance_unit_ppm)




.. py:method:: OPXLHelper.isoPeakMeans
   :module: pyopenms.pyopenms_6


Cython signature: void isoPeakMeans(CrossLinkSpectrumMatch & csm, IntegerDataArray & num_iso_peaks_array, libcpp_vector[libcpp_pair[size_t,size_t]] & matched_spec_linear_alpha, libcpp_vector[libcpp_pair[size_t,size_t]] & matched_spec_linear_beta, libcpp_vector[libcpp_pair[size_t,size_t]] & matched_spec_xlinks_alpha, libcpp_vector[libcpp_pair[size_t,size_t]] & matched_spec_xlinks_beta)




.. py:method:: OPXLHelper.removeBetaPeptideHits
   :module: pyopenms.pyopenms_6


Cython signature: void removeBetaPeptideHits(libcpp_vector[PeptideIdentification] & peptide_ids)




.. py:class:: PeakCandidate
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _PeakCandidate


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1PeakCandidate.html




.. py:attribute:: PeakCandidate.int_max
   :module: pyopenms.pyopenms_6




.. py:attribute:: PeakCandidate.left_boundary
   :module: pyopenms.pyopenms_6




.. py:attribute:: PeakCandidate.mz_max
   :module: pyopenms.pyopenms_6




.. py:attribute:: PeakCandidate.pos
   :module: pyopenms.pyopenms_6




.. py:attribute:: PeakCandidate.right_boundary
   :module: pyopenms.pyopenms_6




.. py:class:: PeakMarker
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _PeakMarker


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1PeakMarker.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: PeakMarker.getDefaults
   :module: pyopenms.pyopenms_6


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: PeakMarker.getName
   :module: pyopenms.pyopenms_6


Cython signature: String getName()
Returns the name




.. py:method:: PeakMarker.getParameters
   :module: pyopenms.pyopenms_6


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: PeakMarker.getProductName
   :module: pyopenms.pyopenms_6


Cython signature: String getProductName()
Returns the product name




.. py:method:: PeakMarker.getSubsections
   :module: pyopenms.pyopenms_6


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: PeakMarker.setName
   :module: pyopenms.pyopenms_6


Cython signature: void setName(const String &)
Sets the name




.. py:method:: PeakMarker.setParameters
   :module: pyopenms.pyopenms_6


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: PeakPickerMaxima
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _PeakPickerMaxima


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1PeakPickerMaxima.html


 This class implements a fast peak-picking algorithm best suited for
 high resolution MS data (FT-ICR-MS, Orbitrap). In high resolution data, the
 signals of ions with similar mass-to-charge ratios (m/z) exhibit little or
 no overlapping and therefore allow for a clear separation. Furthermore, ion
 signals tend to show well-defined peak shapes with narrow peak width
 -----
 This peak-picking algorithm detects ion signals in raw data and
 reconstructs the corresponding peak shape by cubic spline interpolation.
 Signal detection depends on the signal-to-noise ratio which is adjustable
 by the user (see parameter signal_to_noise). A picked peak's m/z and
 intensity value is given by the maximum of the underlying peak spline
 -----
 So far, this peak picker was mainly tested on high resolution data. With
 appropriate preprocessing steps (e.g. noise reduction and baseline
 subtraction), it might be also applied to low resolution data




.. py:method:: PeakPickerMaxima.findMaxima
   :module: pyopenms.pyopenms_6


Cython signature: void findMaxima(libcpp_vector[double] mz_array, libcpp_vector[double] int_array, libcpp_vector[PeakCandidate] & pc)


Will find local maxima in raw data
-----
:param mz_array: The array containing m/z values
:param int_array: The array containing intensity values
:param pc: The resulting array containing the peak candidates
:param check_spacings: Check spacing constraints (recommended settings: yes for spectra, no for chromatograms)




.. py:method:: PeakPickerMaxima.pick
   :module: pyopenms.pyopenms_6


Cython signature: void pick(libcpp_vector[double] mz_array, libcpp_vector[double] int_array, libcpp_vector[PeakCandidate] & pc)




.. py:class:: PepXMLFileMascot
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _PepXMLFileMascot


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1PepXMLFileMascot.html


 Used to load Mascot PepXML files
 -----
 A schema for this format can be found at http://www.matrixscience.com/xmlns/schema/pepXML_v18/pepXML_v18.xsd




.. py:class:: PeptideAndProteinQuant
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _PeptideAndProteinQuant


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1PeptideAndProteinQuant.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: PeptideAndProteinQuant.getDefaults
   :module: pyopenms.pyopenms_6


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: PeptideAndProteinQuant.getName
   :module: pyopenms.pyopenms_6


Cython signature: String getName()
Returns the name




.. py:method:: PeptideAndProteinQuant.getParameters
   :module: pyopenms.pyopenms_6


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: PeptideAndProteinQuant.getStatistics
   :module: pyopenms.pyopenms_6


Cython signature: PeptideAndProteinQuant_Statistics getStatistics()




.. py:method:: PeptideAndProteinQuant.getSubsections
   :module: pyopenms.pyopenms_6


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: PeptideAndProteinQuant.quantifyPeptides
   :module: pyopenms.pyopenms_6


Cython signature: void quantifyPeptides(libcpp_vector[PeptideIdentification] & peptides)


Compute peptide abundances
-----
Based on quantitative data for individual charge states (in member `pep_quant_`), overall abundances for peptides are computed (and stored again in `pep_quant_`)
Quantitative data must first be read via readQuantData()
Optional (peptide-level) protein inference information (e.g. from Fido or ProteinProphet) can be supplied via `peptides`. In that case, peptide-to-protein associations - the basis for protein-level quantification - will also be read from `peptides`!




.. py:method:: PeptideAndProteinQuant.quantifyProteins
   :module: pyopenms.pyopenms_6


Cython signature: void quantifyProteins(ProteinIdentification & proteins)


Compute protein abundances
-----
Peptide abundances must be computed first with quantifyPeptides(). Optional protein inference information (e.g. from Fido or ProteinProphet) can be supplied via `proteins`




.. py:method:: PeptideAndProteinQuant.readQuantData
   :module: pyopenms.pyopenms_6


         - Cython signature: void readQuantData(FeatureMap & map_in, ExperimentalDesign & ed)


Read quantitative data from a feature map
-----
Parameters should be set before using this method, as setting parameters will clear all results
         - Cython signature: void readQuantData(ConsensusMap & map_in, ExperimentalDesign & ed)


Read quantitative data from a consensus map
-----
Parameters should be set before using this method, as setting parameters will clear all results
         - Cython signature: void readQuantData(libcpp_vector[ProteinIdentification] & proteins, libcpp_vector[PeptideIdentification] & peptides, ExperimentalDesign & ed)


Read quantitative data from identification results (for quantification via spectral counting)
-----
Parameters should be set before using this method, as setting parameters will clear all results




.. py:method:: PeptideAndProteinQuant.setName
   :module: pyopenms.pyopenms_6


Cython signature: void setName(const String &)
Sets the name




.. py:method:: PeptideAndProteinQuant.setParameters
   :module: pyopenms.pyopenms_6


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: PeptideAndProteinQuant_PeptideData
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _PeptideAndProteinQuant_PeptideData


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1PeptideAndProteinQuant_PeptideData.html




.. py:attribute:: PeptideAndProteinQuant_PeptideData.accessions
   :module: pyopenms.pyopenms_6




.. py:attribute:: PeptideAndProteinQuant_PeptideData.psm_count
   :module: pyopenms.pyopenms_6




.. py:class:: PeptideAndProteinQuant_ProteinData
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _PeptideAndProteinQuant_ProteinData


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1PeptideAndProteinQuant_ProteinData.html




.. py:attribute:: PeptideAndProteinQuant_ProteinData.psm_count
   :module: pyopenms.pyopenms_6




.. py:class:: PeptideAndProteinQuant_Statistics
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _PeptideAndProteinQuant_Statistics


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1PeptideAndProteinQuant_Statistics.html




.. py:attribute:: PeptideAndProteinQuant_Statistics.ambig_features
   :module: pyopenms.pyopenms_6




.. py:attribute:: PeptideAndProteinQuant_Statistics.blank_features
   :module: pyopenms.pyopenms_6




.. py:attribute:: PeptideAndProteinQuant_Statistics.n_samples
   :module: pyopenms.pyopenms_6




.. py:attribute:: PeptideAndProteinQuant_Statistics.quant_features
   :module: pyopenms.pyopenms_6




.. py:attribute:: PeptideAndProteinQuant_Statistics.quant_peptides
   :module: pyopenms.pyopenms_6




.. py:attribute:: PeptideAndProteinQuant_Statistics.quant_proteins
   :module: pyopenms.pyopenms_6




.. py:attribute:: PeptideAndProteinQuant_Statistics.too_few_peptides
   :module: pyopenms.pyopenms_6




.. py:attribute:: PeptideAndProteinQuant_Statistics.total_features
   :module: pyopenms.pyopenms_6




.. py:attribute:: PeptideAndProteinQuant_Statistics.total_peptides
   :module: pyopenms.pyopenms_6




.. py:class:: PeptideEntry
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _PeptideEntry


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1PeptideEntry.html




.. py:attribute:: PeptideEntry.experimental
   :module: pyopenms.pyopenms_6




.. py:attribute:: PeptideEntry.index
   :module: pyopenms.pyopenms_6




.. py:attribute:: PeptideEntry.intensity
   :module: pyopenms.pyopenms_6




.. py:attribute:: PeptideEntry.isd_group
   :module: pyopenms.pyopenms_6




.. py:attribute:: PeptideEntry.msd_group
   :module: pyopenms.pyopenms_6




.. py:attribute:: PeptideEntry.origin
   :module: pyopenms.pyopenms_6




.. py:attribute:: PeptideEntry.peptide_hit
   :module: pyopenms.pyopenms_6




.. py:attribute:: PeptideEntry.peptide_identification
   :module: pyopenms.pyopenms_6




.. py:attribute:: PeptideEntry.sequence
   :module: pyopenms.pyopenms_6




.. py:attribute:: PeptideEntry.traversed
   :module: pyopenms.pyopenms_6




.. py:class:: PeptideEvidence
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _PeptideEvidence


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1PeptideEvidence.html




.. py:method:: PeptideEvidence.getAAAfter
   :module: pyopenms.pyopenms_6


Cython signature: char getAAAfter()
Returns the amino acid single letter code after the sequence (subsequent amino acid in the protein). If not available, UNKNOWN_AA is returned. If C-terminal, C_TERMINAL_AA is returned




.. py:method:: PeptideEvidence.getAABefore
   :module: pyopenms.pyopenms_6


Cython signature: char getAABefore()
Returns the amino acid single letter code before the sequence (preceding amino acid in the protein). If not available, UNKNOWN_AA is returned. If N-terminal, N_TERMINAL_AA is returned




.. py:method:: PeptideEvidence.getEnd
   :module: pyopenms.pyopenms_6


Cython signature: int getEnd()
Returns the position of the last AA of the peptide in protein coordinates (starting at 0 for the N-terminus). If not available UNKNOWN_POSITION constant is returned




.. py:method:: PeptideEvidence.getProteinAccession
   :module: pyopenms.pyopenms_6


Cython signature: String getProteinAccession()
Returns the protein accession the peptide matches to. If not available the empty string is returned




.. py:method:: PeptideEvidence.getStart
   :module: pyopenms.pyopenms_6


Cython signature: int getStart()
Returns the position in the protein (starting at 0 for the N-terminus). If not available UNKNOWN_POSITION constant is returned




.. py:method:: PeptideEvidence.hasValidLimits
   :module: pyopenms.pyopenms_6


Cython signature: bool hasValidLimits()
Start and end numbers in evidence represent actual numeric indices




.. py:method:: PeptideEvidence.setAAAfter
   :module: pyopenms.pyopenms_6


Cython signature: void setAAAfter(char rhs)
Sets the amino acid single letter code after the sequence (subsequent amino acid in the protein). If not available, set to UNKNOWN_AA. If C-terminal set to C_TERMINAL_AA




.. py:method:: PeptideEvidence.setAABefore
   :module: pyopenms.pyopenms_6


Cython signature: void setAABefore(char rhs)
Sets the amino acid single letter code before the sequence (preceding amino acid in the protein). If not available, set to UNKNOWN_AA. If N-terminal set to N_TERMINAL_AA




.. py:method:: PeptideEvidence.setEnd
   :module: pyopenms.pyopenms_6


Cython signature: void setEnd(int end)
Sets the position of the last AA of the peptide in protein coordinates (starting at 0 for the N-terminus). If not available, set UNKNOWN_POSITION. C-terminal positions must be marked with C_TERMINAL_AA




.. py:method:: PeptideEvidence.setProteinAccession
   :module: pyopenms.pyopenms_6


Cython signature: void setProteinAccession(String s)
Sets the protein accession the peptide matches to. If not available set to empty string




.. py:method:: PeptideEvidence.setStart
   :module: pyopenms.pyopenms_6


Cython signature: void setStart(int start)
Sets the position of the last AA of the peptide in protein coordinates (starting at 0 for the N-terminus). If not available, set to UNKNOWN_POSITION. N-terminal positions must be marked with `N_TERMINAL_AA`




.. py:class:: PosteriorErrorProbabilityModel
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _PosteriorErrorProbabilityModel


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::Math_1_1PosteriorErrorProbabilityModel.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: PosteriorErrorProbabilityModel.computeLogLikelihood
   :module: pyopenms.pyopenms_6


Cython signature: double computeLogLikelihood(libcpp_vector[double] & incorrect_density, libcpp_vector[double] & correct_density)
Computes the Maximum Likelihood with a log-likelihood function




.. py:method:: PosteriorErrorProbabilityModel.computeProbability
   :module: pyopenms.pyopenms_6


Cython signature: double computeProbability(double score)
Returns the computed posterior error probability for a given score




.. py:method:: PosteriorErrorProbabilityModel.fillDensities
   :module: pyopenms.pyopenms_6


Cython signature: void fillDensities(libcpp_vector[double] & x_scores, libcpp_vector[double] & incorrect_density, libcpp_vector[double] & correct_density)
Writes the distributions densities into the two vectors for a set of scores. Incorrect_densities represent the incorrectly assigned sequences




.. py:method:: PosteriorErrorProbabilityModel.fillLogDensities
   :module: pyopenms.pyopenms_6


Cython signature: void fillLogDensities(libcpp_vector[double] & x_scores, libcpp_vector[double] & incorrect_density, libcpp_vector[double] & correct_density)
Writes the log distributions densities into the two vectors for a set of scores. Incorrect_densities represent the incorrectly assigned sequences




.. py:method:: PosteriorErrorProbabilityModel.fit
   :module: pyopenms.pyopenms_6


         - Cython signature: bool fit(libcpp_vector[double] & search_engine_scores, String outlier_handling)


Fits the distributions to the data points(search_engine_scores). Estimated parameters for the distributions are saved in member variables
computeProbability can be used afterwards
Uses two Gaussians to fit. And Gauss+Gauss or Gumbel+Gauss to plot and calculate final probabilities
-----
:param search_engine_scores: A vector which holds the data points
:returns: `true` if algorithm has run through. Else false will be returned. In that case no plot and no probabilities are calculated
         - Cython signature: bool fit(libcpp_vector[double] & search_engine_scores, libcpp_vector[double] & probabilities, String outlier_handling)


Fits the distributions to the data points(search_engine_scores). Estimated parameters for the distributions are saved in member variables
computeProbability can be used afterwards
Uses two Gaussians to fit. And Gauss+Gauss or Gumbel+Gauss to plot and calculate final probabilities
-----
:param search_engine_scores: A vector which holds the data points
:param probabilities a vector which holds the probability for each data point after running this function. If it has some content it will be overwritten
:returns: `true` if algorithm has run through. Else false will be returned. In that case no plot and no probabilities are calculated




.. py:method:: PosteriorErrorProbabilityModel.getBothGnuplotFormula
   :module: pyopenms.pyopenms_6


Cython signature: String getBothGnuplotFormula(GaussFitResult & incorrect, GaussFitResult & correct)
Returns the gnuplot formula of the fitted mixture distribution




.. py:method:: PosteriorErrorProbabilityModel.getCorrectlyAssignedFitResult
   :module: pyopenms.pyopenms_6


Cython signature: GaussFitResult getCorrectlyAssignedFitResult()
Returns estimated parameters for correctly assigned sequences. Fit should be used before




.. py:method:: PosteriorErrorProbabilityModel.getDefaults
   :module: pyopenms.pyopenms_6


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: PosteriorErrorProbabilityModel.getGaussGnuplotFormula
   :module: pyopenms.pyopenms_6


Cython signature: String getGaussGnuplotFormula(GaussFitResult & params)
Returns the gnuplot formula of the fitted gauss distribution




.. py:method:: PosteriorErrorProbabilityModel.getGumbelGnuplotFormula
   :module: pyopenms.pyopenms_6


Cython signature: String getGumbelGnuplotFormula(GaussFitResult & params)
Returns the gnuplot formula of the fitted gumbel distribution




.. py:method:: PosteriorErrorProbabilityModel.getIncorrectlyAssignedFitResult
   :module: pyopenms.pyopenms_6


Cython signature: GaussFitResult getIncorrectlyAssignedFitResult()
Returns estimated parameters for correctly assigned sequences. Fit should be used before




.. py:method:: PosteriorErrorProbabilityModel.getName
   :module: pyopenms.pyopenms_6


Cython signature: String getName()
Returns the name




.. py:method:: PosteriorErrorProbabilityModel.getNegativePrior
   :module: pyopenms.pyopenms_6


Cython signature: double getNegativePrior()
Returns the estimated negative prior probability




.. py:method:: PosteriorErrorProbabilityModel.getParameters
   :module: pyopenms.pyopenms_6


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: PosteriorErrorProbabilityModel.getSmallestScore
   :module: pyopenms.pyopenms_6


Cython signature: double getSmallestScore()
Returns the smallest score used in the last fit




.. py:method:: PosteriorErrorProbabilityModel.getSubsections
   :module: pyopenms.pyopenms_6


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: PosteriorErrorProbabilityModel.initPlots
   :module: pyopenms.pyopenms_6


Cython signature: TextFile initPlots(libcpp_vector[double] & x_scores)
Initializes the plots




.. py:method:: PosteriorErrorProbabilityModel.plotTargetDecoyEstimation
   :module: pyopenms.pyopenms_6


Cython signature: void plotTargetDecoyEstimation(libcpp_vector[double] & target, libcpp_vector[double] & decoy)
Plots the estimated distribution against target and decoy hits




.. py:method:: PosteriorErrorProbabilityModel.pos_neg_mean_weighted_posteriors
   :module: pyopenms.pyopenms_6


Cython signature: libcpp_pair[double,double] pos_neg_mean_weighted_posteriors(libcpp_vector[double] & x_scores, libcpp_vector[double] & incorrect_posteriors)




.. py:method:: PosteriorErrorProbabilityModel.setName
   :module: pyopenms.pyopenms_6


Cython signature: void setName(const String &)
Sets the name




.. py:method:: PosteriorErrorProbabilityModel.setParameters
   :module: pyopenms.pyopenms_6


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: PosteriorErrorProbabilityModel.tryGnuplot
   :module: pyopenms.pyopenms_6


Cython signature: void tryGnuplot(const String & gp_file)




.. py:class:: PrecursorCorrection
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _PrecursorCorrection


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1PrecursorCorrection.html




.. py:method:: PrecursorCorrection.correctToHighestIntensityMS1Peak
   :module: pyopenms.pyopenms_6


Cython signature: libcpp_set[size_t] correctToHighestIntensityMS1Peak(MSExperiment & exp, double mz_tolerance, bool ppm, libcpp_vector[double] & delta_mzs, libcpp_vector[double] & mzs, libcpp_vector[double] & rts)




.. py:method:: PrecursorCorrection.correctToNearestFeature
   :module: pyopenms.pyopenms_6


Cython signature: libcpp_set[size_t] correctToNearestFeature(FeatureMap & features, MSExperiment & exp, double rt_tolerance_s, double mz_tolerance, bool ppm, bool believe_charge, bool keep_original, bool all_matching_features, int max_trace, int debug_level)




.. py:method:: PrecursorCorrection.correctToNearestMS1Peak
   :module: pyopenms.pyopenms_6


Cython signature: libcpp_set[size_t] correctToNearestMS1Peak(MSExperiment & exp, double mz_tolerance, bool ppm, libcpp_vector[double] & delta_mzs, libcpp_vector[double] & mzs, libcpp_vector[double] & rts)




.. py:method:: PrecursorCorrection.getPrecursors
   :module: pyopenms.pyopenms_6


Cython signature: void getPrecursors(MSExperiment & exp, libcpp_vector[Precursor] & precursors, libcpp_vector[double] & precursors_rt, libcpp_vector[size_t] & precursor_scan_index)




.. py:method:: PrecursorCorrection.writeHist
   :module: pyopenms.pyopenms_6


Cython signature: void writeHist(String & out_csv, libcpp_vector[double] & delta_mzs, libcpp_vector[double] & mzs, libcpp_vector[double] & rts)




.. py:class:: Product
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _Product


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1Product.html


 This class describes the product isolation window for special scan types, such as MRM




.. py:method:: Product.getIsolationWindowLowerOffset
   :module: pyopenms.pyopenms_6


Cython signature: double getIsolationWindowLowerOffset()
Returns the lower offset from the target m/z




.. py:method:: Product.getIsolationWindowUpperOffset
   :module: pyopenms.pyopenms_6


Cython signature: double getIsolationWindowUpperOffset()
Returns the upper offset from the target m/z




.. py:method:: Product.getMZ
   :module: pyopenms.pyopenms_6


Cython signature: double getMZ()
Returns the target m/z




.. py:method:: Product.setIsolationWindowLowerOffset
   :module: pyopenms.pyopenms_6


Cython signature: void setIsolationWindowLowerOffset(double bound)
Sets the lower offset from the target m/z




.. py:method:: Product.setIsolationWindowUpperOffset
   :module: pyopenms.pyopenms_6


Cython signature: void setIsolationWindowUpperOffset(double bound)
Sets the upper offset from the target m/z




.. py:method:: Product.setMZ
   :module: pyopenms.pyopenms_6


Cython signature: void setMZ(double)
Sets the target m/z




.. py:class:: ProteinEntry
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _ProteinEntry


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ProteinEntry.html




.. py:attribute:: ProteinEntry.ProteinEntry_type
   :module: pyopenms.pyopenms_6


alias of :py:class:`pyopenms.pyopenms_6.__ProteinEntry_type`


.. py:attribute:: ProteinEntry.coverage
   :module: pyopenms.pyopenms_6




.. py:attribute:: ProteinEntry.fasta_entry
   :module: pyopenms.pyopenms_6




.. py:attribute:: ProteinEntry.index
   :module: pyopenms.pyopenms_6




.. py:attribute:: ProteinEntry.isd_group
   :module: pyopenms.pyopenms_6




.. py:attribute:: ProteinEntry.msd_group
   :module: pyopenms.pyopenms_6




.. py:attribute:: ProteinEntry.number_of_experimental_peptides
   :module: pyopenms.pyopenms_6




.. py:attribute:: ProteinEntry.protein_type
   :module: pyopenms.pyopenms_6




.. py:attribute:: ProteinEntry.traversed
   :module: pyopenms.pyopenms_6




.. py:attribute:: ProteinEntry.weight
   :module: pyopenms.pyopenms_6




.. py:class:: ProteinHit
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _ProteinHit


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ProteinHit.html
 -- Inherits from ['MetaInfoInterface']




.. py:method:: ProteinHit.clearMetaInfo
   :module: pyopenms.pyopenms_6


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: ProteinHit.getAccession
   :module: pyopenms.pyopenms_6


Cython signature: String getAccession()
Returns the accession of the protein




.. py:method:: ProteinHit.getCoverage
   :module: pyopenms.pyopenms_6


Cython signature: double getCoverage()
Returns the coverage (in percent) of the protein hit based upon matched peptides




.. py:method:: ProteinHit.getDescription
   :module: pyopenms.pyopenms_6


Cython signature: String getDescription()
Returns the description of the protein




.. py:method:: ProteinHit.getKeys
   :module: pyopenms.pyopenms_6


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: ProteinHit.getMetaValue
   :module: pyopenms.pyopenms_6


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: ProteinHit.getRank
   :module: pyopenms.pyopenms_6


Cython signature: unsigned int getRank()
Returns the rank of the protein hit




.. py:method:: ProteinHit.getScore
   :module: pyopenms.pyopenms_6


Cython signature: float getScore()
Returns the score of the protein hit




.. py:method:: ProteinHit.getSequence
   :module: pyopenms.pyopenms_6


Cython signature: String getSequence()
Returns the protein sequence




.. py:method:: ProteinHit.isMetaEmpty
   :module: pyopenms.pyopenms_6


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: ProteinHit.metaRegistry
   :module: pyopenms.pyopenms_6


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: ProteinHit.metaValueExists
   :module: pyopenms.pyopenms_6


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: ProteinHit.removeMetaValue
   :module: pyopenms.pyopenms_6


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: ProteinHit.setAccession
   :module: pyopenms.pyopenms_6


Cython signature: void setAccession(String)
Sets the accession of the protein




.. py:method:: ProteinHit.setCoverage
   :module: pyopenms.pyopenms_6


Cython signature: void setCoverage(double)
Sets the coverage (in percent) of the protein hit based upon matched peptides




.. py:method:: ProteinHit.setDescription
   :module: pyopenms.pyopenms_6


Cython signature: void setDescription(String description)
Sets the description of the protein




.. py:method:: ProteinHit.setMetaValue
   :module: pyopenms.pyopenms_6


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:method:: ProteinHit.setRank
   :module: pyopenms.pyopenms_6


Cython signature: void setRank(unsigned int)
Sets the rank




.. py:method:: ProteinHit.setScore
   :module: pyopenms.pyopenms_6


Cython signature: void setScore(float)
Sets the score of the protein hit




.. py:method:: ProteinHit.setSequence
   :module: pyopenms.pyopenms_6


Cython signature: void setSequence(String)
Sets the protein sequence




.. py:class:: ProteinProteinCrossLink
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _ProteinProteinCrossLink


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::OPXLDataStructs_1_1ProteinProteinCrossLink.html




.. py:attribute:: ProteinProteinCrossLink.alpha
   :module: pyopenms.pyopenms_6




.. py:attribute:: ProteinProteinCrossLink.beta
   :module: pyopenms.pyopenms_6




.. py:attribute:: ProteinProteinCrossLink.cross_link_position
   :module: pyopenms.pyopenms_6




.. py:attribute:: ProteinProteinCrossLink.cross_linker_mass
   :module: pyopenms.pyopenms_6




.. py:attribute:: ProteinProteinCrossLink.cross_linker_name
   :module: pyopenms.pyopenms_6




.. py:method:: ProteinProteinCrossLink.getType
   :module: pyopenms.pyopenms_6


Cython signature: ProteinProteinCrossLinkType getType()




.. py:attribute:: ProteinProteinCrossLink.precursor_correction
   :module: pyopenms.pyopenms_6




.. py:attribute:: ProteinProteinCrossLink.term_spec_alpha
   :module: pyopenms.pyopenms_6




.. py:attribute:: ProteinProteinCrossLink.term_spec_beta
   :module: pyopenms.pyopenms_6




.. py:class:: ProteinResolver
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _ProteinResolver


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ProteinResolver.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: ProteinResolver.clearResult
   :module: pyopenms.pyopenms_6


Cython signature: void clearResult()




.. py:method:: ProteinResolver.countTargetDecoy
   :module: pyopenms.pyopenms_6


- Cython signature: void countTargetDecoy(libcpp_vector[MSDGroup] & msd_groups, ConsensusMap & consensus)
- Cython signature: void countTargetDecoy(libcpp_vector[MSDGroup] & msd_groups, libcpp_vector[PeptideIdentification] & peptide_nodes)




.. py:method:: ProteinResolver.getDefaults
   :module: pyopenms.pyopenms_6


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: ProteinResolver.getName
   :module: pyopenms.pyopenms_6


Cython signature: String getName()
Returns the name




.. py:method:: ProteinResolver.getParameters
   :module: pyopenms.pyopenms_6


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: ProteinResolver.getPeptideHit
   :module: pyopenms.pyopenms_6


- Cython signature: PeptideHit getPeptideHit(ConsensusMap & consensus, PeptideEntry * peptide)
- Cython signature: PeptideHit getPeptideHit(libcpp_vector[PeptideIdentification] & peptide_nodes, PeptideEntry * peptide)




.. py:method:: ProteinResolver.getPeptideIdentification
   :module: pyopenms.pyopenms_6


- Cython signature: PeptideIdentification getPeptideIdentification(ConsensusMap & consensus, PeptideEntry * peptide)
- Cython signature: PeptideIdentification getPeptideIdentification(libcpp_vector[PeptideIdentification] & peptide_nodes, PeptideEntry * peptide)




.. py:method:: ProteinResolver.getResults
   :module: pyopenms.pyopenms_6


Cython signature: libcpp_vector[ResolverResult] getResults()




.. py:method:: ProteinResolver.getSubsections
   :module: pyopenms.pyopenms_6


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: ProteinResolver.resolveConsensus
   :module: pyopenms.pyopenms_6


Cython signature: void resolveConsensus(ConsensusMap & consensus)




.. py:method:: ProteinResolver.resolveID
   :module: pyopenms.pyopenms_6


Cython signature: void resolveID(libcpp_vector[PeptideIdentification] & peptide_identifications)




.. py:method:: ProteinResolver.setName
   :module: pyopenms.pyopenms_6


Cython signature: void setName(const String &)
Sets the name




.. py:method:: ProteinResolver.setParameters
   :module: pyopenms.pyopenms_6


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: ProteinResolver.setProteinData
   :module: pyopenms.pyopenms_6


Cython signature: void setProteinData(libcpp_vector[FASTAEntry] & protein_data)




.. py:class:: ProteinResolverResult_Type
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`




.. py:attribute:: ProteinResolverResult_Type.Consensus
   :module: pyopenms.pyopenms_6
   :value: 1




.. py:attribute:: ProteinResolverResult_Type.PeptideIdent
   :module: pyopenms.pyopenms_6
   :value: 0




.. py:method:: ProteinResolverResult_Type.getMapping
   :module: pyopenms.pyopenms_6




.. py:class:: QuotingMethod
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`




.. py:attribute:: QuotingMethod.DOUBLE
   :module: pyopenms.pyopenms_6
   :value: 2




.. py:attribute:: QuotingMethod.ESCAPE
   :module: pyopenms.pyopenms_6
   :value: 1




.. py:attribute:: QuotingMethod.NONE
   :module: pyopenms.pyopenms_6
   :value: 0




.. py:method:: QuotingMethod.getMapping
   :module: pyopenms.pyopenms_6




.. py:class:: RansacModelQuadratic
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _RansacModelQuadratic


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::Math_1_1RansacModelQuadratic.html




.. py:class:: ResolverResult
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _ResolverResult


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ResolverResult.html




.. py:attribute:: ResolverResult.consensus_map
   :module: pyopenms.pyopenms_6




.. py:attribute:: ResolverResult.identifier
   :module: pyopenms.pyopenms_6




.. py:attribute:: ResolverResult.input_type
   :module: pyopenms.pyopenms_6




.. py:attribute:: ResolverResult.isds
   :module: pyopenms.pyopenms_6




.. py:attribute:: ResolverResult.msds
   :module: pyopenms.pyopenms_6




.. py:attribute:: ResolverResult.peptide_entries
   :module: pyopenms.pyopenms_6




.. py:attribute:: ResolverResult.peptide_identification
   :module: pyopenms.pyopenms_6




.. py:attribute:: ResolverResult.protein_entries
   :module: pyopenms.pyopenms_6




.. py:class:: ScanWindow
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _ScanWindow


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ScanWindow.html
 -- Inherits from ['MetaInfoInterface']




.. py:attribute:: ScanWindow.begin
   :module: pyopenms.pyopenms_6




.. py:method:: ScanWindow.clearMetaInfo
   :module: pyopenms.pyopenms_6


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:attribute:: ScanWindow.end
   :module: pyopenms.pyopenms_6




.. py:method:: ScanWindow.getKeys
   :module: pyopenms.pyopenms_6


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: ScanWindow.getMetaValue
   :module: pyopenms.pyopenms_6


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: ScanWindow.isMetaEmpty
   :module: pyopenms.pyopenms_6


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: ScanWindow.metaRegistry
   :module: pyopenms.pyopenms_6


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: ScanWindow.metaValueExists
   :module: pyopenms.pyopenms_6


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: ScanWindow.removeMetaValue
   :module: pyopenms.pyopenms_6


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: ScanWindow.setMetaValue
   :module: pyopenms.pyopenms_6


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:class:: SemanticValidator
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _SemanticValidator


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::Internal_1_1SemanticValidator.html




.. py:method:: SemanticValidator.locateTerm
   :module: pyopenms.pyopenms_6


Cython signature: bool locateTerm(String path, SemanticValidator_CVTerm & parsed_term)
Checks if a CVTerm is allowed in a given path




.. py:method:: SemanticValidator.setAccessionAttribute
   :module: pyopenms.pyopenms_6


Cython signature: void setAccessionAttribute(String accession)
Sets the name of the attribute for accessions in the CV parameter tag name (default 'accession')




.. py:method:: SemanticValidator.setCheckTermValueTypes
   :module: pyopenms.pyopenms_6


Cython signature: void setCheckTermValueTypes(bool check)
Sets if CV term value types should be check (enabled by default)




.. py:method:: SemanticValidator.setCheckUnits
   :module: pyopenms.pyopenms_6


Cython signature: void setCheckUnits(bool check)
Sets if CV term units should be check (disabled by default)




.. py:method:: SemanticValidator.setNameAttribute
   :module: pyopenms.pyopenms_6


Cython signature: void setNameAttribute(String name)
Sets the name of the attribute for accessions in the CV parameter tag name (default 'name')




.. py:method:: SemanticValidator.setTag
   :module: pyopenms.pyopenms_6


Cython signature: void setTag(String tag)
Sets the CV parameter tag name (default 'cvParam')




.. py:method:: SemanticValidator.setUnitAccessionAttribute
   :module: pyopenms.pyopenms_6


Cython signature: void setUnitAccessionAttribute(String accession)
Sets the name of the unit accession attribute (default 'unitAccession')




.. py:method:: SemanticValidator.setUnitNameAttribute
   :module: pyopenms.pyopenms_6


Cython signature: void setUnitNameAttribute(String name)
Sets the name of the unit name attribute (default 'unitName')




.. py:method:: SemanticValidator.setValueAttribute
   :module: pyopenms.pyopenms_6


Cython signature: void setValueAttribute(String value)
Sets the name of the attribute for accessions in the CV parameter tag name (default 'value')




.. py:method:: SemanticValidator.validate
   :module: pyopenms.pyopenms_6


Cython signature: bool validate(String filename, StringList errors, StringList warnings)




.. py:class:: SemanticValidator_CVTerm
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _SemanticValidator_CVTerm


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::Internal_1_1SemanticValidator_CVTerm.html




.. py:attribute:: SemanticValidator_CVTerm.accession
   :module: pyopenms.pyopenms_6




.. py:attribute:: SemanticValidator_CVTerm.has_unit_accession
   :module: pyopenms.pyopenms_6




.. py:attribute:: SemanticValidator_CVTerm.has_unit_name
   :module: pyopenms.pyopenms_6




.. py:attribute:: SemanticValidator_CVTerm.has_value
   :module: pyopenms.pyopenms_6




.. py:attribute:: SemanticValidator_CVTerm.name
   :module: pyopenms.pyopenms_6




.. py:attribute:: SemanticValidator_CVTerm.unit_accession
   :module: pyopenms.pyopenms_6




.. py:attribute:: SemanticValidator_CVTerm.unit_name
   :module: pyopenms.pyopenms_6




.. py:attribute:: SemanticValidator_CVTerm.value
   :module: pyopenms.pyopenms_6




.. py:class:: SignalToNoiseEstimatorMeanIterative
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _SignalToNoiseEstimatorMeanIterative[_MSSpectrum]


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SignalToNoiseEstimatorMeanIterative[_MSSpectrum].html




.. py:attribute:: SignalToNoiseEstimatorMeanIterative.IntensityThresholdCalculation
   :module: pyopenms.pyopenms_6


alias of :py:class:`pyopenms.pyopenms_6.__IntensityThresholdCalculation`


.. py:method:: SignalToNoiseEstimatorMeanIterative.getSignalToNoise
   :module: pyopenms.pyopenms_6


Cython signature: double getSignalToNoise(size_t index)




.. py:method:: SignalToNoiseEstimatorMeanIterative.init
   :module: pyopenms.pyopenms_6


Cython signature: void init(MSSpectrum & c)




.. py:class:: SpectraSTSimilarityScore
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _SpectraSTSimilarityScore


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SpectraSTSimilarityScore.html




.. py:method:: SpectraSTSimilarityScore.compute_F
   :module: pyopenms.pyopenms_6


Cython signature: double compute_F(double dot_product, double delta_D, double dot_bias)


Computes the overall all score
-----
:param dot_product: dot_product of a match
:param delta_D: delta_D should be calculated after all dot products for a unidentified spectrum are computed
:param dot_bias
:returns: The SpectraST similarity score




.. py:method:: SpectraSTSimilarityScore.delta_D
   :module: pyopenms.pyopenms_6


Cython signature: double delta_D(double top_hit, double runner_up)


Calculates the normalized distance between top_hit and runner_up
-----
:param top_hit: Is the best score for a given match
:param runner_up: A match with a worse score than top_hit, e.g. the second best score
:returns: normalized distance




.. py:method:: SpectraSTSimilarityScore.dot_bias
   :module: pyopenms.pyopenms_6


Cython signature: double dot_bias(BinnedSpectrum & bin1, BinnedSpectrum & bin2, double dot_product)


Calculates how much of the dot product is dominated by a few peaks
-----
:param dot_product: If -1 this value will be calculated as well.
:param bin1: First spectrum in binned representation
:param bin2: Second spectrum in binned representation




.. py:method:: SpectraSTSimilarityScore.getProductName
   :module: pyopenms.pyopenms_6


Cython signature: String getProductName()
Reimplemented from PeakSpectrumCompareFunctor




.. py:method:: SpectraSTSimilarityScore.preprocess
   :module: pyopenms.pyopenms_6


Cython signature: bool preprocess(MSSpectrum & spec, float remove_peak_intensity_threshold, unsigned int cut_peaks_below, size_t min_peak_number, size_t max_peak_number)


Preprocesses the spectrum
-----
The preprocessing removes peak below a intensity threshold, reject spectra that does
not have enough peaks, and cuts peaks exceeding the max_peak_number most intense peaks
-----
:returns: true if spectrum passes filtering




.. py:method:: SpectraSTSimilarityScore.transform
   :module: pyopenms.pyopenms_6


Cython signature: BinnedSpectrum transform(MSSpectrum & spec)
Spectrum is transformed into a binned spectrum with bin size 1 and spread 1 and the intensities are normalized




.. py:class:: SpectralMatch
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _SpectralMatch


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SpectralMatch.html




.. py:method:: SpectralMatch.getCommonName
   :module: pyopenms.pyopenms_6


Cython signature: String getCommonName()




.. py:method:: SpectralMatch.getFoundPrecursorCharge
   :module: pyopenms.pyopenms_6


Cython signature: int getFoundPrecursorCharge()




.. py:method:: SpectralMatch.getFoundPrecursorMass
   :module: pyopenms.pyopenms_6


Cython signature: double getFoundPrecursorMass()




.. py:method:: SpectralMatch.getInchiString
   :module: pyopenms.pyopenms_6


Cython signature: String getInchiString()




.. py:method:: SpectralMatch.getMatchingScore
   :module: pyopenms.pyopenms_6


Cython signature: double getMatchingScore()




.. py:method:: SpectralMatch.getMatchingSpectrumIndex
   :module: pyopenms.pyopenms_6


Cython signature: size_t getMatchingSpectrumIndex()




.. py:method:: SpectralMatch.getObservedPrecursorMass
   :module: pyopenms.pyopenms_6


Cython signature: double getObservedPrecursorMass()




.. py:method:: SpectralMatch.getObservedPrecursorRT
   :module: pyopenms.pyopenms_6


Cython signature: double getObservedPrecursorRT()




.. py:method:: SpectralMatch.getObservedSpectrumIndex
   :module: pyopenms.pyopenms_6


Cython signature: size_t getObservedSpectrumIndex()




.. py:method:: SpectralMatch.getPrecursorAdduct
   :module: pyopenms.pyopenms_6


Cython signature: String getPrecursorAdduct()




.. py:method:: SpectralMatch.getPrimaryIdentifier
   :module: pyopenms.pyopenms_6


Cython signature: String getPrimaryIdentifier()




.. py:method:: SpectralMatch.getSMILESString
   :module: pyopenms.pyopenms_6


Cython signature: String getSMILESString()




.. py:method:: SpectralMatch.getSecondaryIdentifier
   :module: pyopenms.pyopenms_6


Cython signature: String getSecondaryIdentifier()




.. py:method:: SpectralMatch.getSumFormula
   :module: pyopenms.pyopenms_6


Cython signature: String getSumFormula()




.. py:method:: SpectralMatch.setCommonName
   :module: pyopenms.pyopenms_6


Cython signature: void setCommonName(String)




.. py:method:: SpectralMatch.setFoundPrecursorCharge
   :module: pyopenms.pyopenms_6


Cython signature: void setFoundPrecursorCharge(int)




.. py:method:: SpectralMatch.setFoundPrecursorMass
   :module: pyopenms.pyopenms_6


Cython signature: void setFoundPrecursorMass(double)




.. py:method:: SpectralMatch.setInchiString
   :module: pyopenms.pyopenms_6


Cython signature: void setInchiString(String)




.. py:method:: SpectralMatch.setMatchingScore
   :module: pyopenms.pyopenms_6


Cython signature: void setMatchingScore(double)




.. py:method:: SpectralMatch.setMatchingSpectrumIndex
   :module: pyopenms.pyopenms_6


Cython signature: void setMatchingSpectrumIndex(size_t)




.. py:method:: SpectralMatch.setObservedPrecursorMass
   :module: pyopenms.pyopenms_6


Cython signature: void setObservedPrecursorMass(double)




.. py:method:: SpectralMatch.setObservedPrecursorRT
   :module: pyopenms.pyopenms_6


Cython signature: void setObservedPrecursorRT(double)




.. py:method:: SpectralMatch.setObservedSpectrumIndex
   :module: pyopenms.pyopenms_6


Cython signature: void setObservedSpectrumIndex(size_t)




.. py:method:: SpectralMatch.setPrecursorAdduct
   :module: pyopenms.pyopenms_6


Cython signature: void setPrecursorAdduct(String)




.. py:method:: SpectralMatch.setPrimaryIdentifier
   :module: pyopenms.pyopenms_6


Cython signature: void setPrimaryIdentifier(String)




.. py:method:: SpectralMatch.setSMILESString
   :module: pyopenms.pyopenms_6


Cython signature: void setSMILESString(String)




.. py:method:: SpectralMatch.setSecondaryIdentifier
   :module: pyopenms.pyopenms_6


Cython signature: void setSecondaryIdentifier(String)




.. py:method:: SpectralMatch.setSumFormula
   :module: pyopenms.pyopenms_6


Cython signature: void setSumFormula(String)




.. py:class:: SpectrumAccessOpenMSCached
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _SpectrumAccessOpenMSCached


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SpectrumAccessOpenMSCached.html
 -- Inherits from ['ISpectrumAccess']




.. py:method:: SpectrumAccessOpenMSCached.getChromatogramById
   :module: pyopenms.pyopenms_6


Cython signature: shared_ptr[OSChromatogram] getChromatogramById(int id_)
Returns a pointer to a chromatogram at the given id




.. py:method:: SpectrumAccessOpenMSCached.getChromatogramNativeID
   :module: pyopenms.pyopenms_6


Cython signature: libcpp_utf8_output_string getChromatogramNativeID(int id_)




.. py:method:: SpectrumAccessOpenMSCached.getNrChromatograms
   :module: pyopenms.pyopenms_6


Cython signature: size_t getNrChromatograms()
Returns the number of chromatograms available




.. py:method:: SpectrumAccessOpenMSCached.getNrSpectra
   :module: pyopenms.pyopenms_6


Cython signature: size_t getNrSpectra()
Returns the number of spectra available




.. py:method:: SpectrumAccessOpenMSCached.getSpectraByRT
   :module: pyopenms.pyopenms_6


Cython signature: libcpp_vector[size_t] getSpectraByRT(double RT, double deltaRT)
Returns a vector of ids of spectra that are within RT +/- deltaRT




.. py:method:: SpectrumAccessOpenMSCached.getSpectrumById
   :module: pyopenms.pyopenms_6


Cython signature: shared_ptr[OSSpectrum] getSpectrumById(int id_)
Returns a pointer to a spectrum at the given string id




.. py:class:: SpectrumHelper
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _SpectrumHelper


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SpectrumHelper.html




.. py:method:: SpectrumHelper.removePeaks
   :module: pyopenms.pyopenms_6


Cython signature: void removePeaks(MSSpectrum & p, double pos_start, double pos_end)




.. py:method:: SpectrumHelper.subtractMinimumIntensity
   :module: pyopenms.pyopenms_6


Cython signature: void subtractMinimumIntensity(MSSpectrum & p)




.. py:class:: String
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _String


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1String.html




.. py:method:: String.c_str
   :module: pyopenms.pyopenms_6


Cython signature: const_char * c_str()




.. py:method:: String.toString
   :module: pyopenms.pyopenms_6


Cython signature: str toString()
-- Note: this returns a unicode string and assumes the input is UTF8 encoded.




.. py:class:: SvmTheoreticalSpectrumGeneratorSet
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _SvmTheoreticalSpectrumGeneratorSet


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SvmTheoreticalSpectrumGeneratorSet.html




.. py:method:: SvmTheoreticalSpectrumGeneratorSet.getSupportedCharges
   :module: pyopenms.pyopenms_6


Cython signature: void getSupportedCharges(libcpp_set[size_t] & charges)




.. py:method:: SvmTheoreticalSpectrumGeneratorSet.getSvmModel
   :module: pyopenms.pyopenms_6


Cython signature: SvmTheoreticalSpectrumGenerator getSvmModel(size_t)




.. py:method:: SvmTheoreticalSpectrumGeneratorSet.load
   :module: pyopenms.pyopenms_6


Cython signature: void load(String)




.. py:class:: TMTSixPlexQuantitationMethod
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _TMTSixPlexQuantitationMethod


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1TMTSixPlexQuantitationMethod.html
 -- Inherits from ['IsobaricQuantitationMethod']




.. py:method:: TMTSixPlexQuantitationMethod.getChannelInformation
   :module: pyopenms.pyopenms_6


Cython signature: libcpp_vector[IsobaricChannelInformation] getChannelInformation()




.. py:method:: TMTSixPlexQuantitationMethod.getDefaults
   :module: pyopenms.pyopenms_6


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: TMTSixPlexQuantitationMethod.getIsotopeCorrectionMatrix
   :module: pyopenms.pyopenms_6


Cython signature: MatrixDouble getIsotopeCorrectionMatrix()




.. py:method:: TMTSixPlexQuantitationMethod.getName
   :module: pyopenms.pyopenms_6


Cython signature: String getName()




.. py:method:: TMTSixPlexQuantitationMethod.getNumberOfChannels
   :module: pyopenms.pyopenms_6


Cython signature: size_t getNumberOfChannels()




.. py:method:: TMTSixPlexQuantitationMethod.getParameters
   :module: pyopenms.pyopenms_6


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: TMTSixPlexQuantitationMethod.getReferenceChannel
   :module: pyopenms.pyopenms_6


Cython signature: size_t getReferenceChannel()




.. py:method:: TMTSixPlexQuantitationMethod.getSubsections
   :module: pyopenms.pyopenms_6


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: TMTSixPlexQuantitationMethod.setName
   :module: pyopenms.pyopenms_6


Cython signature: void setName(const String &)
Sets the name




.. py:method:: TMTSixPlexQuantitationMethod.setParameters
   :module: pyopenms.pyopenms_6


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: TMTSixteenPlexQuantitationMethod
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _TMTSixteenPlexQuantitationMethod


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1TMTSixteenPlexQuantitationMethod.html
 -- Inherits from ['IsobaricQuantitationMethod']




.. py:method:: TMTSixteenPlexQuantitationMethod.getChannelInformation
   :module: pyopenms.pyopenms_6


Cython signature: libcpp_vector[IsobaricChannelInformation] getChannelInformation()




.. py:method:: TMTSixteenPlexQuantitationMethod.getDefaults
   :module: pyopenms.pyopenms_6


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: TMTSixteenPlexQuantitationMethod.getIsotopeCorrectionMatrix
   :module: pyopenms.pyopenms_6


Cython signature: MatrixDouble getIsotopeCorrectionMatrix()




.. py:method:: TMTSixteenPlexQuantitationMethod.getName
   :module: pyopenms.pyopenms_6


Cython signature: String getName()




.. py:method:: TMTSixteenPlexQuantitationMethod.getNumberOfChannels
   :module: pyopenms.pyopenms_6


Cython signature: size_t getNumberOfChannels()




.. py:method:: TMTSixteenPlexQuantitationMethod.getParameters
   :module: pyopenms.pyopenms_6


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: TMTSixteenPlexQuantitationMethod.getReferenceChannel
   :module: pyopenms.pyopenms_6


Cython signature: size_t getReferenceChannel()




.. py:method:: TMTSixteenPlexQuantitationMethod.getSubsections
   :module: pyopenms.pyopenms_6


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: TMTSixteenPlexQuantitationMethod.setName
   :module: pyopenms.pyopenms_6


Cython signature: void setName(const String &)
Sets the name




.. py:method:: TMTSixteenPlexQuantitationMethod.setParameters
   :module: pyopenms.pyopenms_6


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: TheoreticalSpectrumGenerator
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _TheoreticalSpectrumGenerator


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1TheoreticalSpectrumGenerator.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: TheoreticalSpectrumGenerator.getDefaults
   :module: pyopenms.pyopenms_6


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: TheoreticalSpectrumGenerator.getName
   :module: pyopenms.pyopenms_6


Cython signature: String getName()
Returns the name




.. py:method:: TheoreticalSpectrumGenerator.getParameters
   :module: pyopenms.pyopenms_6


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: TheoreticalSpectrumGenerator.getSpectrum
   :module: pyopenms.pyopenms_6


Cython signature: void getSpectrum(MSSpectrum & spec, AASequence & peptide, int min_charge, int max_charge)
Generates a spectrum for a peptide sequence, with the ion types that are set in the tool parameters. If precursor_charge is set to 0 max_charge + 1 will be used




.. py:method:: TheoreticalSpectrumGenerator.getSubsections
   :module: pyopenms.pyopenms_6


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: TheoreticalSpectrumGenerator.setName
   :module: pyopenms.pyopenms_6


Cython signature: void setName(const String &)
Sets the name




.. py:method:: TheoreticalSpectrumGenerator.setParameters
   :module: pyopenms.pyopenms_6


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: TransformationModelLowess
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _TransformationModelLowess


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1TransformationModelLowess.html
 -- Inherits from ['TransformationModel']




.. py:method:: TransformationModelLowess.checkDatumRange
   :module: pyopenms.pyopenms_6


Cython signature: double checkDatumRange(const double & datum, const double & datum_min, const double & datum_max)
Check that the datum is within the valid min and max bounds




.. py:method:: TransformationModelLowess.checkValidWeight
   :module: pyopenms.pyopenms_6


Cython signature: bool checkValidWeight(const String & weight, libcpp_vector[String] & valid_weights)
Check for a valid weighting function string




.. py:method:: TransformationModelLowess.evaluate
   :module: pyopenms.pyopenms_6


Cython signature: double evaluate(double value)




.. py:method:: TransformationModelLowess.getDefaultParameters
   :module: pyopenms.pyopenms_6


Cython signature: void getDefaultParameters(Param &)




.. py:method:: TransformationModelLowess.getParameters
   :module: pyopenms.pyopenms_6


Cython signature: Param getParameters()




.. py:method:: TransformationModelLowess.getValidXWeights
   :module: pyopenms.pyopenms_6


Cython signature: libcpp_vector[String] getValidXWeights()
Returns a list of valid x weight function stringss




.. py:method:: TransformationModelLowess.getValidYWeights
   :module: pyopenms.pyopenms_6


Cython signature: libcpp_vector[String] getValidYWeights()
Returns a list of valid y weight function strings




.. py:method:: TransformationModelLowess.unWeightData
   :module: pyopenms.pyopenms_6


Cython signature: void unWeightData(libcpp_vector[TM_DataPoint] & data)
Unweight the data by the given weight function




.. py:method:: TransformationModelLowess.unWeightDatum
   :module: pyopenms.pyopenms_6


Cython signature: double unWeightDatum(double & datum, const String & weight)
Apply the reverse of the weighting function to the data




.. py:method:: TransformationModelLowess.weightData
   :module: pyopenms.pyopenms_6


Cython signature: void weightData(libcpp_vector[TM_DataPoint] & data)
Weight the data by the given weight function




.. py:method:: TransformationModelLowess.weightDatum
   :module: pyopenms.pyopenms_6


Cython signature: double weightDatum(double & datum, const String & weight)
Weight the data according to the weighting function




.. py:class:: TransitionTSVFile
   :module: pyopenms.pyopenms_6


   Bases: :py:class:`object`


Cython implementation of _TransitionTSVFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1TransitionTSVFile.html
 -- Inherits from ['ProgressLogger']




.. py:method:: TransitionTSVFile.convertTSVToTargetedExperiment
   :module: pyopenms.pyopenms_6


- Cython signature: void convertTSVToTargetedExperiment(char * filename, FileType filetype, TargetedExperiment & targeted_exp)
  Read in a tsv/mrm file and construct a targeted experiment (TraML structure)


- Cython signature: void convertTSVToTargetedExperiment(char * filename, FileType filetype, LightTargetedExperiment & targeted_exp)
  Read in a tsv file and construct a targeted experiment (Light transition structure)




.. py:method:: TransitionTSVFile.convertTargetedExperimentToTSV
   :module: pyopenms.pyopenms_6


Cython signature: void convertTargetedExperimentToTSV(char * filename, TargetedExperiment & targeted_exp)
Write out a targeted experiment (TraML structure) into a tsv file




.. py:method:: TransitionTSVFile.endProgress
   :module: pyopenms.pyopenms_6


Cython signature: void endProgress()
Ends the progress display




.. py:method:: TransitionTSVFile.getLogType
   :module: pyopenms.pyopenms_6


Cython signature: LogType getLogType()
Returns the type of progress log being used




.. py:method:: TransitionTSVFile.nextProgress
   :module: pyopenms.pyopenms_6


Cython signature: void nextProgress()
Increment progress by 1 (according to range begin-end)




.. py:method:: TransitionTSVFile.setLogType
   :module: pyopenms.pyopenms_6


Cython signature: void setLogType(LogType)
Sets the progress log that should be used. The default type is NONE!




.. py:method:: TransitionTSVFile.setProgress
   :module: pyopenms.pyopenms_6


Cython signature: void setProgress(ptrdiff_t value)
Sets the current progress




.. py:method:: TransitionTSVFile.startProgress
   :module: pyopenms.pyopenms_6


Cython signature: void startProgress(ptrdiff_t begin, ptrdiff_t end, String label)




.. py:method:: TransitionTSVFile.validateTargetedExperiment
   :module: pyopenms.pyopenms_6


Cython signature: void validateTargetedExperiment(TargetedExperiment targeted_exp)
Validate a TargetedExperiment (check that all ids are unique)




.. py:module:: pyopenms.pyopenms_7




.. py:class:: ArrayWrapperFloat
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`




.. py:class:: BiGaussModel
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _BiGaussModel


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1BiGaussModel.html




.. py:method:: BiGaussModel.getCenter
   :module: pyopenms.pyopenms_7


Cython signature: double getCenter()




.. py:method:: BiGaussModel.getProductName
   :module: pyopenms.pyopenms_7


Cython signature: String getProductName()
Name of the model (needed by Factory)




.. py:method:: BiGaussModel.setOffset
   :module: pyopenms.pyopenms_7


Cython signature: void setOffset(double offset)




.. py:method:: BiGaussModel.setSamples
   :module: pyopenms.pyopenms_7


Cython signature: void setSamples()




.. py:class:: BinnedSpectrum
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _BinnedSpectrum


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1BinnedSpectrum.html




.. py:method:: BinnedSpectrum.getBinIndex
   :module: pyopenms.pyopenms_7


Cython signature: unsigned int getBinIndex(float mz)
Returns the bin index of a given m/z position




.. py:method:: BinnedSpectrum.getBinIntensity
   :module: pyopenms.pyopenms_7


Cython signature: float getBinIntensity(double mz)
Returns the bin intensity at a given m/z position




.. py:method:: BinnedSpectrum.getBinLowerMZ
   :module: pyopenms.pyopenms_7


Cython signature: float getBinLowerMZ(size_t i)
Returns the lower m/z of a bin given its index




.. py:method:: BinnedSpectrum.getBinSize
   :module: pyopenms.pyopenms_7


Cython signature: float getBinSize()
Returns the bin size




.. py:method:: BinnedSpectrum.getBinSpread
   :module: pyopenms.pyopenms_7


Cython signature: unsigned int getBinSpread()
Returns the bin spread




.. py:method:: BinnedSpectrum.getOffset
   :module: pyopenms.pyopenms_7


Cython signature: float getOffset()
Returns offset




.. py:method:: BinnedSpectrum.getPrecursors
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[Precursor] getPrecursors()




.. py:method:: BinnedSpectrum.isCompatible
   :module: pyopenms.pyopenms_7


Cython signature: bool isCompatible(BinnedSpectrum & a, BinnedSpectrum & b)




.. py:class:: BoxElement
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _BoxElement


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1BoxElement.html




.. py:attribute:: BoxElement.MZ_begin
   :module: pyopenms.pyopenms_7




.. py:attribute:: BoxElement.MZ_end
   :module: pyopenms.pyopenms_7




.. py:attribute:: BoxElement.RT
   :module: pyopenms.pyopenms_7




.. py:attribute:: BoxElement.RT_index
   :module: pyopenms.pyopenms_7




.. py:attribute:: BoxElement.c
   :module: pyopenms.pyopenms_7




.. py:attribute:: BoxElement.intens
   :module: pyopenms.pyopenms_7




.. py:attribute:: BoxElement.mz
   :module: pyopenms.pyopenms_7




.. py:attribute:: BoxElement.ref_intens
   :module: pyopenms.pyopenms_7




.. py:attribute:: BoxElement.score
   :module: pyopenms.pyopenms_7




.. py:class:: CV
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _CV


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::TargetedExperimentHelper::RetentionTime::RTUnit_1_1CV.html




.. py:attribute:: CV.URI
   :module: pyopenms.pyopenms_7




.. py:attribute:: CV.fullname
   :module: pyopenms.pyopenms_7




.. py:attribute:: CV.id
   :module: pyopenms.pyopenms_7




.. py:attribute:: CV.version
   :module: pyopenms.pyopenms_7




.. py:class:: ChromatogramExtractor
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _ChromatogramExtractor


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ChromatogramExtractor.html
 -- Inherits from ['ProgressLogger']




.. py:method:: ChromatogramExtractor.endProgress
   :module: pyopenms.pyopenms_7


Cython signature: void endProgress()
Ends the progress display




.. py:method:: ChromatogramExtractor.extractChromatograms
   :module: pyopenms.pyopenms_7


Cython signature: void extractChromatograms(MSExperiment & input, MSExperiment & output, TargetedExperiment & transition_exp, double extract_window, bool ppm, TransformationDescription trafo, double rt_extraction_window, String filter)
Extract chromatograms at the m/z and RT defined by the ExtractionCoordinates




.. py:method:: ChromatogramExtractor.getLogType
   :module: pyopenms.pyopenms_7


Cython signature: LogType getLogType()
Returns the type of progress log being used




.. py:method:: ChromatogramExtractor.nextProgress
   :module: pyopenms.pyopenms_7


Cython signature: void nextProgress()
Increment progress by 1 (according to range begin-end)




.. py:method:: ChromatogramExtractor.setLogType
   :module: pyopenms.pyopenms_7


Cython signature: void setLogType(LogType)
Sets the progress log that should be used. The default type is NONE!




.. py:method:: ChromatogramExtractor.setProgress
   :module: pyopenms.pyopenms_7


Cython signature: void setProgress(ptrdiff_t value)
Sets the current progress




.. py:method:: ChromatogramExtractor.startProgress
   :module: pyopenms.pyopenms_7


Cython signature: void startProgress(ptrdiff_t begin, ptrdiff_t end, String label)




.. py:class:: ChromatogramPeak
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _ChromatogramPeak


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::ChromatogramPeak_1_1ChromatogramPeak.html




.. py:method:: ChromatogramPeak.getIntensity
   :module: pyopenms.pyopenms_7


Cython signature: double getIntensity()
Returns the intensity




.. py:method:: ChromatogramPeak.getPos
   :module: pyopenms.pyopenms_7


Cython signature: double getPos()
Alias for getRT()




.. py:method:: ChromatogramPeak.getPosition
   :module: pyopenms.pyopenms_7


Cython signature: DPosition1 getPosition()




.. py:method:: ChromatogramPeak.getRT
   :module: pyopenms.pyopenms_7


Cython signature: double getRT()
Returns the retention time




.. py:method:: ChromatogramPeak.setIntensity
   :module: pyopenms.pyopenms_7


Cython signature: void setIntensity(double)
Sets the intensity




.. py:method:: ChromatogramPeak.setPos
   :module: pyopenms.pyopenms_7


Cython signature: void setPos(double)
Alias for setRT()




.. py:method:: ChromatogramPeak.setPosition
   :module: pyopenms.pyopenms_7


Cython signature: void setPosition(DPosition1)




.. py:method:: ChromatogramPeak.setRT
   :module: pyopenms.pyopenms_7


Cython signature: void setRT(double)
Sets retention time




.. py:class:: ClusteringGrid
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _ClusteringGrid


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ClusteringGrid.html




.. py:method:: ClusteringGrid.addCluster
   :module: pyopenms.pyopenms_7


Cython signature: void addCluster(libcpp_pair[int,int] cell_index, int & cluster_index)
Adds a cluster to this grid cell




.. py:method:: ClusteringGrid.getCellCount
   :module: pyopenms.pyopenms_7


Cython signature: int getCellCount()
Returns number of grid cells occupied by one or more clusters




.. py:method:: ClusteringGrid.getGridSpacingX
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[double] getGridSpacingX()




.. py:method:: ClusteringGrid.getGridSpacingY
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[double] getGridSpacingY()




.. py:method:: ClusteringGrid.getIndex
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_pair[int,int] getIndex(DPosition2 position)




.. py:method:: ClusteringGrid.isNonEmptyCell
   :module: pyopenms.pyopenms_7


Cython signature: bool isNonEmptyCell(libcpp_pair[int,int] cell_index)
Checks if there are clusters at this cell index




.. py:method:: ClusteringGrid.removeAllClusters
   :module: pyopenms.pyopenms_7


Cython signature: void removeAllClusters()
Removes all clusters from this grid (and hence all cells)




.. py:method:: ClusteringGrid.removeCluster
   :module: pyopenms.pyopenms_7


Cython signature: void removeCluster(libcpp_pair[int,int] cell_index, int & cluster_index)
Removes a cluster from this grid cell and removes the cell if no other cluster left




.. py:class:: Compound
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _Compound


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::TargetedExperimentHelper::RetentionTime::RTUnit_1_1Compound.html
 -- Inherits from ['CVTermList']




.. py:method:: Compound.addCVTerm
   :module: pyopenms.pyopenms_7


Cython signature: void addCVTerm(CVTerm & term)
Adds a CV term




.. py:method:: Compound.clearMetaInfo
   :module: pyopenms.pyopenms_7


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: Compound.consumeCVTerms
   :module: pyopenms.pyopenms_7


Cython signature: void consumeCVTerms(Map[String,libcpp_vector[CVTerm]] cv_term_map)
Merges the given map into the member map, no duplicate checking




.. py:method:: Compound.empty
   :module: pyopenms.pyopenms_7


Cython signature: bool empty()




.. py:method:: Compound.getCVTerms
   :module: pyopenms.pyopenms_7


Cython signature: Map[String,libcpp_vector[CVTerm]] getCVTerms()
Returns the accession string of the term




.. py:method:: Compound.getChargeState
   :module: pyopenms.pyopenms_7


Cython signature: int getChargeState()
Returns the peptide or compound charge state




.. py:method:: Compound.getKeys
   :module: pyopenms.pyopenms_7


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: Compound.getMetaValue
   :module: pyopenms.pyopenms_7


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: Compound.getRetentionTime
   :module: pyopenms.pyopenms_7


Cython signature: double getRetentionTime()
Gets compound or peptide retention time




.. py:method:: Compound.getRetentionTimeType
   :module: pyopenms.pyopenms_7


Cython signature: RTType getRetentionTimeType()
Get compound or peptide retentiontime type




.. py:method:: Compound.getRetentionTimeUnit
   :module: pyopenms.pyopenms_7


Cython signature: RTUnit getRetentionTimeUnit()
Get compound or peptide retentiontime type




.. py:method:: Compound.hasCVTerm
   :module: pyopenms.pyopenms_7


Cython signature: bool hasCVTerm(String accession)




.. py:method:: Compound.hasCharge
   :module: pyopenms.pyopenms_7


Cython signature: bool hasCharge()
Whether peptide or compound has set charge state




.. py:method:: Compound.hasRetentionTime
   :module: pyopenms.pyopenms_7


Cython signature: bool hasRetentionTime()
Check whether compound or peptide has an annotated retention time




.. py:attribute:: Compound.id
   :module: pyopenms.pyopenms_7




.. py:method:: Compound.isMetaEmpty
   :module: pyopenms.pyopenms_7


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: Compound.metaRegistry
   :module: pyopenms.pyopenms_7


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: Compound.metaValueExists
   :module: pyopenms.pyopenms_7


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:attribute:: Compound.molecular_formula
   :module: pyopenms.pyopenms_7




.. py:method:: Compound.removeMetaValue
   :module: pyopenms.pyopenms_7


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: Compound.replaceCVTerm
   :module: pyopenms.pyopenms_7


Cython signature: void replaceCVTerm(CVTerm & term)
Replaces the specified CV term




.. py:method:: Compound.replaceCVTerms
   :module: pyopenms.pyopenms_7


Cython signature: void replaceCVTerms(libcpp_vector[CVTerm] cv_terms, String accession)




.. py:attribute:: Compound.rts
   :module: pyopenms.pyopenms_7




.. py:method:: Compound.setCVTerms
   :module: pyopenms.pyopenms_7


Cython signature: void setCVTerms(libcpp_vector[CVTerm] & terms)
Sets the CV terms




.. py:method:: Compound.setChargeState
   :module: pyopenms.pyopenms_7


Cython signature: void setChargeState(int charge)
Sets the peptide or compound charge state




.. py:method:: Compound.setMetaValue
   :module: pyopenms.pyopenms_7


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:attribute:: Compound.smiles_string
   :module: pyopenms.pyopenms_7




.. py:attribute:: Compound.theoretical_mass
   :module: pyopenms.pyopenms_7




.. py:class:: Configuration
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _Configuration


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::TargetedExperimentHelper::RetentionTime::RTUnit_1_1Configuration.html
 -- Inherits from ['CVTermList']




.. py:method:: Configuration.addCVTerm
   :module: pyopenms.pyopenms_7


Cython signature: void addCVTerm(CVTerm & term)
Adds a CV term




.. py:method:: Configuration.clearMetaInfo
   :module: pyopenms.pyopenms_7


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: Configuration.consumeCVTerms
   :module: pyopenms.pyopenms_7


Cython signature: void consumeCVTerms(Map[String,libcpp_vector[CVTerm]] cv_term_map)
Merges the given map into the member map, no duplicate checking




.. py:attribute:: Configuration.contact_ref
   :module: pyopenms.pyopenms_7




.. py:method:: Configuration.empty
   :module: pyopenms.pyopenms_7


Cython signature: bool empty()




.. py:method:: Configuration.getCVTerms
   :module: pyopenms.pyopenms_7


Cython signature: Map[String,libcpp_vector[CVTerm]] getCVTerms()
Returns the accession string of the term




.. py:method:: Configuration.getKeys
   :module: pyopenms.pyopenms_7


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: Configuration.getMetaValue
   :module: pyopenms.pyopenms_7


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: Configuration.hasCVTerm
   :module: pyopenms.pyopenms_7


Cython signature: bool hasCVTerm(String accession)




.. py:attribute:: Configuration.instrument_ref
   :module: pyopenms.pyopenms_7




.. py:method:: Configuration.isMetaEmpty
   :module: pyopenms.pyopenms_7


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: Configuration.metaRegistry
   :module: pyopenms.pyopenms_7


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: Configuration.metaValueExists
   :module: pyopenms.pyopenms_7


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: Configuration.removeMetaValue
   :module: pyopenms.pyopenms_7


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: Configuration.replaceCVTerm
   :module: pyopenms.pyopenms_7


Cython signature: void replaceCVTerm(CVTerm & term)
Replaces the specified CV term




.. py:method:: Configuration.replaceCVTerms
   :module: pyopenms.pyopenms_7


Cython signature: void replaceCVTerms(libcpp_vector[CVTerm] cv_terms, String accession)




.. py:method:: Configuration.setCVTerms
   :module: pyopenms.pyopenms_7


Cython signature: void setCVTerms(libcpp_vector[CVTerm] & terms)
Sets the CV terms




.. py:method:: Configuration.setMetaValue
   :module: pyopenms.pyopenms_7


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:attribute:: Configuration.validations
   :module: pyopenms.pyopenms_7




.. py:class:: ConsensusIDAlgorithmPEPIons
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _ConsensusIDAlgorithmPEPIons


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ConsensusIDAlgorithmPEPIons.html
 -- Inherits from ['ConsensusIDAlgorithmSimilarity']




.. py:method:: ConsensusIDAlgorithmPEPIons.apply
   :module: pyopenms.pyopenms_7


Cython signature: void apply(libcpp_vector[PeptideIdentification] & ids, size_t number_of_runs)
Calculates the consensus ID for a set of peptide identifications of one spectrum or (consensus) feature




.. py:method:: ConsensusIDAlgorithmPEPIons.getDefaults
   :module: pyopenms.pyopenms_7


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: ConsensusIDAlgorithmPEPIons.getName
   :module: pyopenms.pyopenms_7


Cython signature: String getName()
Returns the name




.. py:method:: ConsensusIDAlgorithmPEPIons.getParameters
   :module: pyopenms.pyopenms_7


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: ConsensusIDAlgorithmPEPIons.getSubsections
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: ConsensusIDAlgorithmPEPIons.setName
   :module: pyopenms.pyopenms_7


Cython signature: void setName(const String &)
Sets the name




.. py:method:: ConsensusIDAlgorithmPEPIons.setParameters
   :module: pyopenms.pyopenms_7


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: ConsensusMapNormalizerAlgorithmMedian
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _ConsensusMapNormalizerAlgorithmMedian


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::ConsensusMapNormalizerAlgorithmMedian_1_1ConsensusMapNormalizerAlgorithmMedian.html




.. py:method:: ConsensusMapNormalizerAlgorithmMedian.computeMedians
   :module: pyopenms.pyopenms_7


Cython signature: size_t computeMedians(ConsensusMap & input_map, libcpp_vector[double] & medians, const String & acc_filter, const String & desc_filter)
Computes medians of all maps and returns index of map with most features




.. py:method:: ConsensusMapNormalizerAlgorithmMedian.normalizeMaps
   :module: pyopenms.pyopenms_7


Cython signature: void normalizeMaps(ConsensusMap & input_map, NormalizationMethod method, const String & acc_filter, const String & desc_filter)
Normalizes the maps of the consensusMap




.. py:class:: Contact
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _Contact


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::TargetedExperimentHelper::RetentionTime::RTUnit_1_1Contact.html
 -- Inherits from ['CVTermList']




.. py:method:: Contact.addCVTerm
   :module: pyopenms.pyopenms_7


Cython signature: void addCVTerm(CVTerm & term)
Adds a CV term




.. py:method:: Contact.clearMetaInfo
   :module: pyopenms.pyopenms_7


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: Contact.consumeCVTerms
   :module: pyopenms.pyopenms_7


Cython signature: void consumeCVTerms(Map[String,libcpp_vector[CVTerm]] cv_term_map)
Merges the given map into the member map, no duplicate checking




.. py:method:: Contact.empty
   :module: pyopenms.pyopenms_7


Cython signature: bool empty()




.. py:method:: Contact.getCVTerms
   :module: pyopenms.pyopenms_7


Cython signature: Map[String,libcpp_vector[CVTerm]] getCVTerms()
Returns the accession string of the term




.. py:method:: Contact.getKeys
   :module: pyopenms.pyopenms_7


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: Contact.getMetaValue
   :module: pyopenms.pyopenms_7


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: Contact.hasCVTerm
   :module: pyopenms.pyopenms_7


Cython signature: bool hasCVTerm(String accession)




.. py:attribute:: Contact.id
   :module: pyopenms.pyopenms_7




.. py:method:: Contact.isMetaEmpty
   :module: pyopenms.pyopenms_7


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: Contact.metaRegistry
   :module: pyopenms.pyopenms_7


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: Contact.metaValueExists
   :module: pyopenms.pyopenms_7


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: Contact.removeMetaValue
   :module: pyopenms.pyopenms_7


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: Contact.replaceCVTerm
   :module: pyopenms.pyopenms_7


Cython signature: void replaceCVTerm(CVTerm & term)
Replaces the specified CV term




.. py:method:: Contact.replaceCVTerms
   :module: pyopenms.pyopenms_7


Cython signature: void replaceCVTerms(libcpp_vector[CVTerm] cv_terms, String accession)




.. py:method:: Contact.setCVTerms
   :module: pyopenms.pyopenms_7


Cython signature: void setCVTerms(libcpp_vector[CVTerm] & terms)
Sets the CV terms




.. py:method:: Contact.setMetaValue
   :module: pyopenms.pyopenms_7


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:class:: CubicSpline2d
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _CubicSpline2d


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1CubicSpline2d.html




.. py:method:: CubicSpline2d.derivatives
   :module: pyopenms.pyopenms_7


Cython signature: double derivatives(double x, unsigned int order)
Returns first, second or third derivative of cubic spline




.. py:method:: CubicSpline2d.eval
   :module: pyopenms.pyopenms_7


Cython signature: double eval(double x)
Evaluates the cubic spline




.. py:class:: DPosition1
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`




.. py:class:: DPosition2
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`




.. py:class:: DTA2DFile
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _DTA2DFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1DTA2DFile.html
 -- Inherits from ['ProgressLogger']




.. py:method:: DTA2DFile.endProgress
   :module: pyopenms.pyopenms_7


Cython signature: void endProgress()
Ends the progress display




.. py:method:: DTA2DFile.getLogType
   :module: pyopenms.pyopenms_7


Cython signature: LogType getLogType()
Returns the type of progress log being used




.. py:method:: DTA2DFile.getOptions
   :module: pyopenms.pyopenms_7


Cython signature: PeakFileOptions getOptions()




.. py:method:: DTA2DFile.load
   :module: pyopenms.pyopenms_7


Cython signature: void load(String filename, MSExperiment & peakmap)




.. py:method:: DTA2DFile.nextProgress
   :module: pyopenms.pyopenms_7


Cython signature: void nextProgress()
Increment progress by 1 (according to range begin-end)




.. py:method:: DTA2DFile.setLogType
   :module: pyopenms.pyopenms_7


Cython signature: void setLogType(LogType)
Sets the progress log that should be used. The default type is NONE!




.. py:method:: DTA2DFile.setProgress
   :module: pyopenms.pyopenms_7


Cython signature: void setProgress(ptrdiff_t value)
Sets the current progress




.. py:method:: DTA2DFile.startProgress
   :module: pyopenms.pyopenms_7


Cython signature: void startProgress(ptrdiff_t begin, ptrdiff_t end, String label)




.. py:method:: DTA2DFile.store
   :module: pyopenms.pyopenms_7


Cython signature: void store(String filename, MSExperiment & peakmap)




.. py:method:: DTA2DFile.storeTIC
   :module: pyopenms.pyopenms_7


Cython signature: void storeTIC(String filename, MSExperiment & peakmap)




.. py:class:: ExperimentalDesignFile
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _ExperimentalDesignFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ExperimentalDesignFile.html




.. py:method:: ExperimentalDesignFile.load
   :module: pyopenms.pyopenms_7


Cython signature: ExperimentalDesign load(const String & tsv_file, bool)




.. py:class:: FileHandler
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _FileHandler


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1FileHandler.html




.. py:method:: FileHandler.computeFileHash
   :module: pyopenms.pyopenms_7


Cython signature: String computeFileHash(const String & filename)




.. py:method:: FileHandler.getOptions
   :module: pyopenms.pyopenms_7


Cython signature: PeakFileOptions getOptions()
Access to the options for loading/storing




.. py:method:: FileHandler.getType
   :module: pyopenms.pyopenms_7


Cython signature: int getType(const String & filename)




.. py:method:: FileHandler.getTypeByContent
   :module: pyopenms.pyopenms_7


Cython signature: FileType getTypeByContent(const String & filename)




.. py:method:: FileHandler.getTypeByFileName
   :module: pyopenms.pyopenms_7


Cython signature: FileType getTypeByFileName(const String & filename)




.. py:method:: FileHandler.hasValidExtension
   :module: pyopenms.pyopenms_7


Cython signature: bool hasValidExtension(const String & filename, FileType type_)




.. py:method:: FileHandler.isSupported
   :module: pyopenms.pyopenms_7


Cython signature: bool isSupported(FileType type_)




.. py:method:: FileHandler.loadExperiment
   :module: pyopenms.pyopenms_7


Cython signature: bool loadExperiment(String, MSExperiment &)


Loads a file into an MSExperiment
-----
:param filename: The file name of the file to load
:param exp: The experiment to load the data into
:param force_type: Forces to load the file with that file type. If no type is forced, it is determined from the extension (or from the content if that fails)
:param log: Progress logging mode
:param rewrite_source_file: Set's the SourceFile name and path to the current file. Note that this looses the link to the primary MS run the file originated from
:param compute_hash: If source files are rewritten, this flag triggers a recomputation of hash values. A SHA1 string gets stored in the checksum member of SourceFile
:returns: true if the file could be loaded, false otherwise
:raises:
  Exception: FileNotFound is thrown if the file could not be opened
:raises:
  Exception: ParseError is thrown if an error occurs during parsing
Stores an MSExperiment to a file
-----
The file type to store the data in is determined by the file name. Supported formats for storing are mzML, mzXML, mzData and DTA2D. If the file format cannot be determined from the file name, the mzML format is used
-----
:param filename: The name of the file to store the data in
:param exp: The experiment to store
:param log: Progress logging mode
:raises:
  Exception: UnableToCreateFile is thrown if the file could not be written
Loads a file into a FeatureMap
-----
:param filename: The file name of the file to load
:param map: The FeatureMap to load the data into
:param force_type: Forces to load the file with that file type. If no type is forced, it is determined from the extension (or from the content if that fails)
:returns: true if the file could be loaded, false otherwise
:raises:
  Exception: FileNotFound is thrown if the file could not be opened
:raises:
  Exception: ParseError is thrown if an error occurs during parsing




.. py:method:: FileHandler.loadFeatures
   :module: pyopenms.pyopenms_7


Cython signature: bool loadFeatures(String, FeatureMap &)


Loads a file into a FeatureMap
-----
:param filename: The file name of the file to load
:param map: The FeatureMap to load the data into
:param force_type: Forces to load the file with that file type. If no type is forced, it is determined from the extension (or from the content if that fails)
:returns: true if the file could be loaded, false otherwise
:raises:
  Exception: FileNotFound is thrown if the file could not be opened
:raises:
  Exception: ParseError is thrown if an error occurs during parsing




.. py:method:: FileHandler.setOptions
   :module: pyopenms.pyopenms_7


Cython signature: void setOptions(PeakFileOptions)
Sets options for loading/storing




.. py:method:: FileHandler.storeExperiment
   :module: pyopenms.pyopenms_7


Cython signature: void storeExperiment(String, MSExperiment)


Stores an MSExperiment to a file
-----
The file type to store the data in is determined by the file name. Supported formats for storing are mzML, mzXML, mzData and DTA2D. If the file format cannot be determined from the file name, the mzML format is used
-----
:param filename: The name of the file to store the data in
:param exp: The experiment to store
:param log: Progress logging mode
:raises:
  Exception: UnableToCreateFile is thrown if the file could not be written
Loads a file into a FeatureMap
-----
:param filename: The file name of the file to load
:param map: The FeatureMap to load the data into
:param force_type: Forces to load the file with that file type. If no type is forced, it is determined from the extension (or from the content if that fails)
:returns: true if the file could be loaded, false otherwise
:raises:
  Exception: FileNotFound is thrown if the file could not be opened
:raises:
  Exception: ParseError is thrown if an error occurs during parsing




.. py:method:: FileHandler.stripExtension
   :module: pyopenms.pyopenms_7


Cython signature: String stripExtension(String file)




.. py:method:: FileHandler.swapExtension
   :module: pyopenms.pyopenms_7


Cython signature: String swapExtension(String filename, FileType new_type)




.. py:class:: FilterFunctor
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _FilterFunctor


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1FilterFunctor.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: FilterFunctor.getDefaults
   :module: pyopenms.pyopenms_7


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: FilterFunctor.getName
   :module: pyopenms.pyopenms_7


Cython signature: String getName()
Returns the name




.. py:method:: FilterFunctor.getParameters
   :module: pyopenms.pyopenms_7


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: FilterFunctor.getSubsections
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: FilterFunctor.registerChildren
   :module: pyopenms.pyopenms_7


Cython signature: void registerChildren()




.. py:method:: FilterFunctor.setName
   :module: pyopenms.pyopenms_7


Cython signature: void setName(const String &)
Sets the name




.. py:method:: FilterFunctor.setParameters
   :module: pyopenms.pyopenms_7


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: GridBasedCluster
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _GridBasedCluster


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1GridBasedCluster.html




.. py:method:: GridBasedCluster.getBoundingBox
   :module: pyopenms.pyopenms_7


Cython signature: DBoundingBox2 getBoundingBox()
Returns bounding box




.. py:method:: GridBasedCluster.getCentre
   :module: pyopenms.pyopenms_7


Cython signature: DPosition2 getCentre()
Returns cluster centre




.. py:method:: GridBasedCluster.getPoints
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[int] getPoints()
Returns indices of points in cluster




.. py:method:: GridBasedCluster.getPropertiesB
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[int] getPropertiesB()
Returns properties B of all points




.. py:method:: GridBasedCluster.getPropertyA
   :module: pyopenms.pyopenms_7


Cython signature: int getPropertyA()
Returns property A




.. py:class:: HyperScore
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _HyperScore


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1HyperScore.html




.. py:method:: HyperScore.compute
   :module: pyopenms.pyopenms_7


Cython signature: double compute(double fragment_mass_tolerance, bool fragment_mass_tolerance_unit_ppm, MSSpectrum & exp_spectrum, MSSpectrum & theo_spectrum)


Compute the (ln transformed) X!Tandem HyperScore
-----
1. the dot product of peak intensities between matching peaks in experimental and theoretical spectrum is calculated
2. the HyperScore is calculated from the dot product by multiplying by factorials of matching b- and y-ions
-----
:note: Peak intensities of the theoretical spectrum are typically 1 or TIC normalized, but can also be e.g. ion probabilities
:param fragment_mass_tolerance: Mass tolerance applied left and right of the theoretical spectrum peak position
:param fragment_mass_tolerance_unit_ppm: Unit of the mass tolerance is: Thomson if false, ppm if true
:param exp_spectrum: Measured spectrum
:param theo_spectrum: Theoretical spectrum Peaks need to contain an ion annotation as provided by TheoreticalSpectrumGenerator




.. py:class:: Identification
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _Identification


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1Identification.html
 -- Inherits from ['MetaInfoInterface']




.. py:method:: Identification.addSpectrumIdentification
   :module: pyopenms.pyopenms_7


Cython signature: void addSpectrumIdentification(SpectrumIdentification & id)
Adds a spectrum identification




.. py:method:: Identification.clearMetaInfo
   :module: pyopenms.pyopenms_7


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: Identification.getCreationDate
   :module: pyopenms.pyopenms_7


Cython signature: DateTime getCreationDate()
Returns the date and time the file was created




.. py:method:: Identification.getKeys
   :module: pyopenms.pyopenms_7


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: Identification.getMetaValue
   :module: pyopenms.pyopenms_7


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: Identification.getSpectrumIdentifications
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[SpectrumIdentification] getSpectrumIdentifications()
Returns the spectrum identifications stored




.. py:method:: Identification.isMetaEmpty
   :module: pyopenms.pyopenms_7


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: Identification.metaRegistry
   :module: pyopenms.pyopenms_7


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: Identification.metaValueExists
   :module: pyopenms.pyopenms_7


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: Identification.removeMetaValue
   :module: pyopenms.pyopenms_7


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: Identification.setCreationDate
   :module: pyopenms.pyopenms_7


Cython signature: void setCreationDate(DateTime date)
Sets the date and time the file was written




.. py:method:: Identification.setMetaValue
   :module: pyopenms.pyopenms_7


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:method:: Identification.setSpectrumIdentifications
   :module: pyopenms.pyopenms_7


Cython signature: void setSpectrumIdentifications(libcpp_vector[SpectrumIdentification] & ids)
Sets the spectrum identifications




.. py:class:: IdentificationHit
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _IdentificationHit


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1IdentificationHit.html
 -- Inherits from ['MetaInfoInterface']




.. py:method:: IdentificationHit.clearMetaInfo
   :module: pyopenms.pyopenms_7


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: IdentificationHit.getCalculatedMassToCharge
   :module: pyopenms.pyopenms_7


Cython signature: double getCalculatedMassToCharge()
Returns the calculated mass to charge ratio




.. py:method:: IdentificationHit.getCharge
   :module: pyopenms.pyopenms_7


Cython signature: int getCharge()
Returns the charge state




.. py:method:: IdentificationHit.getExperimentalMassToCharge
   :module: pyopenms.pyopenms_7


Cython signature: double getExperimentalMassToCharge()
Returns the experimental mass to charge




.. py:method:: IdentificationHit.getId
   :module: pyopenms.pyopenms_7


Cython signature: String getId()
Returns the id




.. py:method:: IdentificationHit.getKeys
   :module: pyopenms.pyopenms_7


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: IdentificationHit.getMetaValue
   :module: pyopenms.pyopenms_7


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: IdentificationHit.getName
   :module: pyopenms.pyopenms_7


Cython signature: String getName()
Returns the name




.. py:method:: IdentificationHit.getPassThreshold
   :module: pyopenms.pyopenms_7


Cython signature: bool getPassThreshold()
Returns whether the peptide passed the threshold




.. py:method:: IdentificationHit.getRank
   :module: pyopenms.pyopenms_7


Cython signature: int getRank()
Returns the rank of the peptide




.. py:method:: IdentificationHit.isMetaEmpty
   :module: pyopenms.pyopenms_7


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: IdentificationHit.metaRegistry
   :module: pyopenms.pyopenms_7


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: IdentificationHit.metaValueExists
   :module: pyopenms.pyopenms_7


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: IdentificationHit.removeMetaValue
   :module: pyopenms.pyopenms_7


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: IdentificationHit.setCalculatedMassToCharge
   :module: pyopenms.pyopenms_7


Cython signature: void setCalculatedMassToCharge(double mz)
Sets the calculated mass to charge ratio




.. py:method:: IdentificationHit.setCharge
   :module: pyopenms.pyopenms_7


Cython signature: void setCharge(int charge)
Sets the charge state of the peptide




.. py:method:: IdentificationHit.setExperimentalMassToCharge
   :module: pyopenms.pyopenms_7


Cython signature: void setExperimentalMassToCharge(double mz)
Sets the experimental mass to charge ratio




.. py:method:: IdentificationHit.setId
   :module: pyopenms.pyopenms_7


Cython signature: void setId(String id)
Sets the identifier




.. py:method:: IdentificationHit.setMetaValue
   :module: pyopenms.pyopenms_7


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:method:: IdentificationHit.setName
   :module: pyopenms.pyopenms_7


Cython signature: void setName(String name)
Sets the name




.. py:method:: IdentificationHit.setPassThreshold
   :module: pyopenms.pyopenms_7


Cython signature: void setPassThreshold(bool)
Sets whether the peptide passed the threshold




.. py:method:: IdentificationHit.setRank
   :module: pyopenms.pyopenms_7


Cython signature: void setRank(int rank)
Sets the rank of the peptide




.. py:class:: IndexedMzMLDecoder
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _IndexedMzMLDecoder


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1IndexedMzMLDecoder.html


 A class to analyze indexedmzML files and extract the offsets of individual tags
 -----
 Specifically, this class allows one to extract the offsets of the <indexList>
 tag and of all <spectrum> and <chromatogram> tag using the indices found at
 the end of the indexedmzML XML structure
 -----
 While findIndexListOffset tries extracts the offset of the indexList tag from
 the last 1024 bytes of the file, this offset allows the function parseOffsets
 to extract all elements contained in the <indexList> tag and thus get access
 to all spectra and chromatogram offsets




.. py:method:: IndexedMzMLDecoder.findIndexListOffset
   :module: pyopenms.pyopenms_7


Cython signature: streampos findIndexListOffset(String in_, int buffersize)


Tries to extract the indexList offset from an indexedmzML
-----
This function reads by default the last few (1024) bytes of the given
input file and tries to read the content of the <indexListOffset> tag
The idea is that somewhere in the last parts of the file specified by the
input string, the string <indexListOffset>xxx</indexListOffset> occurs
This function returns the xxx part converted to an integer
-----
Since this function cannot determine where it will start reading
the XML, no regular XML parser can be used for this. Therefore it uses
regex to do its job. It matches the <indexListOffset> part and any
numerical characters that follow
-----
:param in: Filename of the input indexedmzML file
:param buffersize: How many bytes of the input file should be searched for the tag
:returns: A positive integer containing the content of the indexListOffset tag, returns -1 in case of failure no tag was found (you can re-try with a larger buffersize but most likely its not an indexed mzML). Using -1 is what the reference docu recommends: http://en.cppreference.com/w/cpp/io/streamoff
:raises:
  Exception: FileNotFound is thrown if file cannot be found
:raises:
  Exception: ParseError if offset cannot be parsed




.. py:class:: Instrument
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _Instrument


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1Instrument.html
 -- Inherits from ['MetaInfoInterface']




.. py:method:: Instrument.clearMetaInfo
   :module: pyopenms.pyopenms_7


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: Instrument.getCustomizations
   :module: pyopenms.pyopenms_7


Cython signature: String getCustomizations()
Returns a description of customizations




.. py:method:: Instrument.getIonDetectors
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[IonDetector] getIonDetectors()
Returns the ion detector list




.. py:method:: Instrument.getIonOptics
   :module: pyopenms.pyopenms_7


Cython signature: IonOpticsType getIonOptics()
Returns the ion optics type




.. py:method:: Instrument.getIonSources
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[IonSource] getIonSources()
Returns the ion source list




.. py:method:: Instrument.getKeys
   :module: pyopenms.pyopenms_7


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: Instrument.getMassAnalyzers
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[MassAnalyzer] getMassAnalyzers()
Returns the mass analyzer list




.. py:method:: Instrument.getMetaValue
   :module: pyopenms.pyopenms_7


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: Instrument.getModel
   :module: pyopenms.pyopenms_7


Cython signature: String getModel()
Returns the instrument model




.. py:method:: Instrument.getName
   :module: pyopenms.pyopenms_7


Cython signature: String getName()
Returns the name of the instrument




.. py:method:: Instrument.getSoftware
   :module: pyopenms.pyopenms_7


Cython signature: Software getSoftware()
Returns the instrument software




.. py:method:: Instrument.getVendor
   :module: pyopenms.pyopenms_7


Cython signature: String getVendor()
Returns the instrument vendor




.. py:method:: Instrument.isMetaEmpty
   :module: pyopenms.pyopenms_7


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: Instrument.metaRegistry
   :module: pyopenms.pyopenms_7


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: Instrument.metaValueExists
   :module: pyopenms.pyopenms_7


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: Instrument.removeMetaValue
   :module: pyopenms.pyopenms_7


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: Instrument.setCustomizations
   :module: pyopenms.pyopenms_7


Cython signature: void setCustomizations(String customizations)
Sets the a description of customizations




.. py:method:: Instrument.setIonDetectors
   :module: pyopenms.pyopenms_7


Cython signature: void setIonDetectors(libcpp_vector[IonDetector] ion_detectors)
Sets the ion detector list




.. py:method:: Instrument.setIonOptics
   :module: pyopenms.pyopenms_7


Cython signature: void setIonOptics(IonOpticsType ion_optics)
Sets the ion optics type




.. py:method:: Instrument.setIonSources
   :module: pyopenms.pyopenms_7


Cython signature: void setIonSources(libcpp_vector[IonSource] ion_sources)
Sets the ion source list




.. py:method:: Instrument.setMassAnalyzers
   :module: pyopenms.pyopenms_7


Cython signature: void setMassAnalyzers(libcpp_vector[MassAnalyzer] mass_analyzers)
Sets the mass analyzer list




.. py:method:: Instrument.setMetaValue
   :module: pyopenms.pyopenms_7


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:method:: Instrument.setModel
   :module: pyopenms.pyopenms_7


Cython signature: void setModel(String model)
Sets the instrument model




.. py:method:: Instrument.setName
   :module: pyopenms.pyopenms_7


Cython signature: void setName(String name)
Sets the name of the instrument




.. py:method:: Instrument.setSoftware
   :module: pyopenms.pyopenms_7


Cython signature: void setSoftware(Software software)
Sets the instrument software




.. py:method:: Instrument.setVendor
   :module: pyopenms.pyopenms_7


Cython signature: void setVendor(String vendor)
Sets the instrument vendor




.. py:class:: IntegerDataArray
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _IntegerDataArray


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::DataArrays_1_1IntegerDataArray.html
 -- Inherits from ['MetaInfoDescription']


 The representation of extra integer data attached to a spectrum or chromatogram.
 Raw data access is proved by `get_peaks` and `set_peaks`, which yields numpy arrays




.. py:method:: IntegerDataArray.clear
   :module: pyopenms.pyopenms_7


Cython signature: void clear()




.. py:method:: IntegerDataArray.clearMetaInfo
   :module: pyopenms.pyopenms_7


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: IntegerDataArray.getDataProcessing
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[shared_ptr[DataProcessing]] getDataProcessing()
Returns a reference to the description of the applied processing




.. py:method:: IntegerDataArray.getKeys
   :module: pyopenms.pyopenms_7


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: IntegerDataArray.getMetaValue
   :module: pyopenms.pyopenms_7


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: IntegerDataArray.getName
   :module: pyopenms.pyopenms_7


Cython signature: String getName()
Returns the name of the peak annotations




.. py:method:: IntegerDataArray.get_data
   :module: pyopenms.pyopenms_7


Gets the raw data for the integer data array


Example usage:


  idata = pyopenms.IntegerDataArray()
  data = idata.get_data()






.. py:method:: IntegerDataArray.isMetaEmpty
   :module: pyopenms.pyopenms_7


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: IntegerDataArray.metaRegistry
   :module: pyopenms.pyopenms_7


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: IntegerDataArray.metaValueExists
   :module: pyopenms.pyopenms_7


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: IntegerDataArray.push_back
   :module: pyopenms.pyopenms_7


Cython signature: void push_back(int)




.. py:method:: IntegerDataArray.removeMetaValue
   :module: pyopenms.pyopenms_7


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: IntegerDataArray.reserve
   :module: pyopenms.pyopenms_7


Cython signature: void reserve(size_t n)




.. py:method:: IntegerDataArray.resize
   :module: pyopenms.pyopenms_7


Cython signature: void resize(size_t n)




.. py:method:: IntegerDataArray.setDataProcessing
   :module: pyopenms.pyopenms_7


Cython signature: void setDataProcessing(libcpp_vector[shared_ptr[DataProcessing]])
Sets the description of the applied processing




.. py:method:: IntegerDataArray.setMetaValue
   :module: pyopenms.pyopenms_7


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:method:: IntegerDataArray.setName
   :module: pyopenms.pyopenms_7


Cython signature: void setName(String name)
Sets the name of the peak annotations




.. py:method:: IntegerDataArray.set_data
   :module: pyopenms.pyopenms_7


Sets the raw data for the integer data array


Example usage:


  idata = pyopenms.IntegerDataArray()
  data = numpy.array( [1, 2, 3, 5 ,6] ).astype(np.intc)
  idata.set_data(data)






.. py:method:: IntegerDataArray.size
   :module: pyopenms.pyopenms_7


Cython signature: size_t size()




.. py:class:: Interfaces()
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`




.. py:attribute:: Interfaces.BinaryDataArray
   :module: pyopenms.pyopenms_7


alias of :py:class:`pyopenms.pyopenms_2._Interfaces_BinaryDataArray`


.. py:attribute:: Interfaces.Chromatogram
   :module: pyopenms.pyopenms_7


alias of :py:class:`pyopenms.pyopenms_2._Interfaces_Chromatogram`


.. py:attribute:: Interfaces.Spectrum
   :module: pyopenms.pyopenms_7


alias of :py:class:`pyopenms.pyopenms_2._Interfaces_Spectrum`


.. py:class:: IonOpticsType
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`




.. py:attribute:: IonOpticsType.COLLISION_QUADRUPOLE
   :module: pyopenms.pyopenms_7
   :value: 3




.. py:attribute:: IonOpticsType.DELAYED_EXTRACTION
   :module: pyopenms.pyopenms_7
   :value: 2




.. py:attribute:: IonOpticsType.EINZEL_LENS
   :module: pyopenms.pyopenms_7
   :value: 7




.. py:attribute:: IonOpticsType.FIRST_STABILITY_REGION
   :module: pyopenms.pyopenms_7
   :value: 8




.. py:attribute:: IonOpticsType.FRINGING_FIELD
   :module: pyopenms.pyopenms_7
   :value: 9




.. py:attribute:: IonOpticsType.KINETIC_ENERGY_ANALYZER
   :module: pyopenms.pyopenms_7
   :value: 10




.. py:attribute:: IonOpticsType.MAGNETIC_DEFLECTION
   :module: pyopenms.pyopenms_7
   :value: 1




.. py:attribute:: IonOpticsType.REFLECTRON
   :module: pyopenms.pyopenms_7
   :value: 6




.. py:attribute:: IonOpticsType.SELECTED_ION_FLOW_TUBE
   :module: pyopenms.pyopenms_7
   :value: 4




.. py:attribute:: IonOpticsType.SIZE_OF_IONOPTICSTYPE
   :module: pyopenms.pyopenms_7
   :value: 12




.. py:attribute:: IonOpticsType.STATIC_FIELD
   :module: pyopenms.pyopenms_7
   :value: 11




.. py:attribute:: IonOpticsType.TIME_LAG_FOCUSING
   :module: pyopenms.pyopenms_7
   :value: 5




.. py:attribute:: IonOpticsType.UNKNOWN
   :module: pyopenms.pyopenms_7
   :value: 0




.. py:method:: IonOpticsType.getMapping
   :module: pyopenms.pyopenms_7




.. py:class:: IsotopeWaveletTransform
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _IsotopeWaveletTransform[_Peak1D]


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1IsotopeWaveletTransform[_Peak1D].html




.. py:method:: IsotopeWaveletTransform.computeMinSpacing
   :module: pyopenms.pyopenms_7


Cython signature: void computeMinSpacing(MSSpectrum & c_ref)




.. py:method:: IsotopeWaveletTransform.getLinearInterpolation
   :module: pyopenms.pyopenms_7


Cython signature: double getLinearInterpolation(double mz_a, double intens_a, double mz_pos, double mz_b, double intens_b)


Computes a linear (intensity) interpolation
-----
:param mz_a: The m/z value of the point left to the query
:param intens_a: The intensity value of the point left to the query
:param mz_pos: The query point
:param mz_b: The m/z value of the point right to the query
:param intens_b: The intensity value of the point left to the query




.. py:method:: IsotopeWaveletTransform.getMaxScanSize
   :module: pyopenms.pyopenms_7


Cython signature: size_t getMaxScanSize()




.. py:method:: IsotopeWaveletTransform.getMinSpacing
   :module: pyopenms.pyopenms_7


Cython signature: double getMinSpacing()




.. py:method:: IsotopeWaveletTransform.getSigma
   :module: pyopenms.pyopenms_7


Cython signature: double getSigma()




.. py:method:: IsotopeWaveletTransform.getTransform
   :module: pyopenms.pyopenms_7


Cython signature: void getTransform(MSSpectrum & c_trans, MSSpectrum & c_ref, unsigned int c)


Computes the isotope wavelet transform of charge state `c`
-----
:param c_trans: The transform
:param c_ref: The reference spectrum
:param c: The charge state minus 1 (e.g. c=2 means charge state 3) at which you want to compute the transform




.. py:method:: IsotopeWaveletTransform.getTransformHighRes
   :module: pyopenms.pyopenms_7


Cython signature: void getTransformHighRes(MSSpectrum & c_trans, MSSpectrum & c_ref, unsigned int c)


Computes the isotope wavelet transform of charge state `c`
-----
:param c_trans: The transform
:param c_ref: The reference spectrum
:param c: The charge state minus 1 (e.g. c=2 means charge state 3) at which you want to compute the transform




.. py:method:: IsotopeWaveletTransform.identifyCharge
   :module: pyopenms.pyopenms_7


Cython signature: void identifyCharge(MSSpectrum & candidates, MSSpectrum & ref, unsigned int scan_index, unsigned int c, double ampl_cutoff, bool check_PPMs)


Given an isotope wavelet transformed spectrum 'candidates', this function assigns to every significant
pattern its corresponding charge state and a score indicating the reliability of the prediction. The result of this
process is stored internally. Important: Before calling this function, apply updateRanges() to the original map
-----
:param candidates: A isotope wavelet transformed spectrum. Entry "number i" in this vector must correspond to the
charge-"(i-1)"-transform of its mass signal. (This is exactly the output of the function `getTransforms`.)
:param ref: The reference scan (the untransformed raw data) corresponding to `candidates`
:param c: The corresponding charge state minus 1 (e.g. c=2 means charge state 3)
:param scan_index: The index of the scan (w.r.t. to some map) currently under consideration
:param ampl_cutoff: The thresholding parameter. This parameter is the only (and hence a really important)
parameter of the isotope wavelet transform. On the basis of `ampl_cutoff` the program tries to distinguish between
noise and signal. Please note that it is not a "simple" hard thresholding parameter in the sense of drawing a virtual
line in the spectrum, which is then used as a guillotine cut. Maybe you should play around a bit with this parameter to
get a feeling about its range. For peptide mass fingerprints on small data sets (like single MALDI-scans e.g.), it
makes sense to start `ampl_cutoff=0` or even `ampl_cutoff=-1`,
indicating no thresholding at all. Note that also ampl_cutoff=0 triggers (a moderate) thresholding based on the
average intensity in the wavelet transform
:param check_PPMs: If enabled, the algorithm will check each monoisotopic mass candidate for its plausibility
by computing the ppm difference between this mass and the averagine model




.. py:method:: IsotopeWaveletTransform.initializeScan
   :module: pyopenms.pyopenms_7


Cython signature: void initializeScan(MSSpectrum & c_ref, unsigned int c)




.. py:method:: IsotopeWaveletTransform.mapSeeds2Features
   :module: pyopenms.pyopenms_7


Cython signature: FeatureMap mapSeeds2Features(MSExperiment & map_, unsigned int RT_votes_cutoff)


Filters the candidates further more and maps the internally used data structures to the OpenMS framework
-----
:param map: The original map containing the data set to be analyzed
:param max_charge: The maximal charge state under consideration
:param RT_votes_cutoff: See the IsotopeWaveletFF class




.. py:method:: IsotopeWaveletTransform.setSigma
   :module: pyopenms.pyopenms_7


Cython signature: void setSigma(double sigma)




.. py:method:: IsotopeWaveletTransform.updateBoxStates
   :module: pyopenms.pyopenms_7


Cython signature: void updateBoxStates(MSExperiment & map_, size_t scan_index, unsigned int RT_interleave, unsigned int RT_votes_cutoff, int front_bound, int end_bound)


A function keeping track of currently open and closed sweep line boxes
This function is used by the isotope wavelet feature finder and must be called for each processed scan
-----
:param map: The original map containing the data set to be analyzed
:param scan_index: The index of the scan currently under consideration w.r.t. its MS map
This information is necessary to sweep across the map after each scan has been evaluated
:param RT_votes_cutoff: See the IsotopeWaveletFF class




.. py:class:: JavaInfo
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _JavaInfo


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1JavaInfo.html




.. py:method:: JavaInfo.canRun
   :module: pyopenms.pyopenms_7


Cython signature: bool canRun(String java_executable)


Determine if Java is installed and reachable
-----
The call fails if either Java is not installed or if a relative location is given and Java is not on the search PATH
-----
:param java_executable: Path to Java executable. Can be absolute, relative or just a filename
:returns: Returns false if Java executable can not be called; true if Java executable can be executed




.. py:class:: LabeledPairFinder
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _LabeledPairFinder


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1LabeledPairFinder.html
 -- Inherits from ['BaseGroupFinder']


 The LabeledPairFinder allows the matching of labeled features (features with a fixed distance)
 -----
 Finds feature pairs that have a defined distance in RT and m/z in the same map




.. py:method:: LabeledPairFinder.endProgress
   :module: pyopenms.pyopenms_7


Cython signature: void endProgress()
Ends the progress display




.. py:method:: LabeledPairFinder.getDefaults
   :module: pyopenms.pyopenms_7


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: LabeledPairFinder.getLogType
   :module: pyopenms.pyopenms_7


Cython signature: LogType getLogType()
Returns the type of progress log being used




.. py:method:: LabeledPairFinder.getName
   :module: pyopenms.pyopenms_7


Cython signature: String getName()
Returns the name




.. py:method:: LabeledPairFinder.getParameters
   :module: pyopenms.pyopenms_7


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: LabeledPairFinder.getProductName
   :module: pyopenms.pyopenms_7


Cython signature: String getProductName()
Returns the name of this module




.. py:method:: LabeledPairFinder.getSubsections
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: LabeledPairFinder.nextProgress
   :module: pyopenms.pyopenms_7


Cython signature: void nextProgress()
Increment progress by 1 (according to range begin-end)




.. py:method:: LabeledPairFinder.registerChildren
   :module: pyopenms.pyopenms_7


Cython signature: void registerChildren()
Register all derived classes here




.. py:method:: LabeledPairFinder.run
   :module: pyopenms.pyopenms_7


Cython signature: void run(libcpp_vector[ConsensusMap] & input_maps, ConsensusMap & result_map)
Runs the LabeledPairFinder algorithm




.. py:method:: LabeledPairFinder.setLogType
   :module: pyopenms.pyopenms_7


Cython signature: void setLogType(LogType)
Sets the progress log that should be used. The default type is NONE!




.. py:method:: LabeledPairFinder.setName
   :module: pyopenms.pyopenms_7


Cython signature: void setName(const String &)
Sets the name




.. py:method:: LabeledPairFinder.setParameters
   :module: pyopenms.pyopenms_7


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: LabeledPairFinder.setProgress
   :module: pyopenms.pyopenms_7


Cython signature: void setProgress(ptrdiff_t value)
Sets the current progress




.. py:method:: LabeledPairFinder.startProgress
   :module: pyopenms.pyopenms_7


Cython signature: void startProgress(ptrdiff_t begin, ptrdiff_t end, String label)




.. py:class:: MRMFQC_ComponentGroupPairQCs
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _MRMFQC_ComponentGroupPairQCs


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MRMFQC_ComponentGroupPairQCs.html




.. py:attribute:: MRMFQC_ComponentGroupPairQCs.component_group_name
   :module: pyopenms.pyopenms_7




.. py:attribute:: MRMFQC_ComponentGroupPairQCs.resolution_l
   :module: pyopenms.pyopenms_7




.. py:attribute:: MRMFQC_ComponentGroupPairQCs.resolution_pair_name
   :module: pyopenms.pyopenms_7




.. py:attribute:: MRMFQC_ComponentGroupPairQCs.resolution_u
   :module: pyopenms.pyopenms_7




.. py:attribute:: MRMFQC_ComponentGroupPairQCs.rt_diff_l
   :module: pyopenms.pyopenms_7




.. py:attribute:: MRMFQC_ComponentGroupPairQCs.rt_diff_u
   :module: pyopenms.pyopenms_7




.. py:class:: MRMFQC_ComponentGroupQCs
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _MRMFQC_ComponentGroupQCs


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MRMFQC_ComponentGroupQCs.html




.. py:attribute:: MRMFQC_ComponentGroupQCs.component_group_name
   :module: pyopenms.pyopenms_7




.. py:attribute:: MRMFQC_ComponentGroupQCs.intensity_l
   :module: pyopenms.pyopenms_7




.. py:attribute:: MRMFQC_ComponentGroupQCs.intensity_u
   :module: pyopenms.pyopenms_7




.. py:attribute:: MRMFQC_ComponentGroupQCs.ion_ratio_feature_name
   :module: pyopenms.pyopenms_7




.. py:attribute:: MRMFQC_ComponentGroupQCs.ion_ratio_l
   :module: pyopenms.pyopenms_7




.. py:attribute:: MRMFQC_ComponentGroupQCs.ion_ratio_pair_name_1
   :module: pyopenms.pyopenms_7




.. py:attribute:: MRMFQC_ComponentGroupQCs.ion_ratio_pair_name_2
   :module: pyopenms.pyopenms_7




.. py:attribute:: MRMFQC_ComponentGroupQCs.ion_ratio_u
   :module: pyopenms.pyopenms_7




.. py:attribute:: MRMFQC_ComponentGroupQCs.n_detecting_l
   :module: pyopenms.pyopenms_7




.. py:attribute:: MRMFQC_ComponentGroupQCs.n_detecting_u
   :module: pyopenms.pyopenms_7




.. py:attribute:: MRMFQC_ComponentGroupQCs.n_heavy_l
   :module: pyopenms.pyopenms_7




.. py:attribute:: MRMFQC_ComponentGroupQCs.n_heavy_u
   :module: pyopenms.pyopenms_7




.. py:attribute:: MRMFQC_ComponentGroupQCs.n_identifying_l
   :module: pyopenms.pyopenms_7




.. py:attribute:: MRMFQC_ComponentGroupQCs.n_identifying_u
   :module: pyopenms.pyopenms_7




.. py:attribute:: MRMFQC_ComponentGroupQCs.n_light_l
   :module: pyopenms.pyopenms_7




.. py:attribute:: MRMFQC_ComponentGroupQCs.n_light_u
   :module: pyopenms.pyopenms_7




.. py:attribute:: MRMFQC_ComponentGroupQCs.n_quantifying_l
   :module: pyopenms.pyopenms_7




.. py:attribute:: MRMFQC_ComponentGroupQCs.n_quantifying_u
   :module: pyopenms.pyopenms_7




.. py:attribute:: MRMFQC_ComponentGroupQCs.n_transitions_l
   :module: pyopenms.pyopenms_7




.. py:attribute:: MRMFQC_ComponentGroupQCs.n_transitions_u
   :module: pyopenms.pyopenms_7




.. py:attribute:: MRMFQC_ComponentGroupQCs.overall_quality_l
   :module: pyopenms.pyopenms_7




.. py:attribute:: MRMFQC_ComponentGroupQCs.overall_quality_u
   :module: pyopenms.pyopenms_7




.. py:attribute:: MRMFQC_ComponentGroupQCs.retention_time_l
   :module: pyopenms.pyopenms_7




.. py:attribute:: MRMFQC_ComponentGroupQCs.retention_time_u
   :module: pyopenms.pyopenms_7




.. py:class:: MRMFQC_ComponentQCs
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _MRMFQC_ComponentQCs


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MRMFQC_ComponentQCs.html




.. py:attribute:: MRMFQC_ComponentQCs.component_name
   :module: pyopenms.pyopenms_7




.. py:attribute:: MRMFQC_ComponentQCs.intensity_l
   :module: pyopenms.pyopenms_7




.. py:attribute:: MRMFQC_ComponentQCs.intensity_u
   :module: pyopenms.pyopenms_7




.. py:attribute:: MRMFQC_ComponentQCs.overall_quality_l
   :module: pyopenms.pyopenms_7




.. py:attribute:: MRMFQC_ComponentQCs.overall_quality_u
   :module: pyopenms.pyopenms_7




.. py:attribute:: MRMFQC_ComponentQCs.retention_time_l
   :module: pyopenms.pyopenms_7




.. py:attribute:: MRMFQC_ComponentQCs.retention_time_u
   :module: pyopenms.pyopenms_7




.. py:class:: MRMFeatureQC
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _MRMFeatureQC


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MRMFeatureQC.html




.. py:attribute:: MRMFeatureQC.component_group_pair_qcs
   :module: pyopenms.pyopenms_7




.. py:attribute:: MRMFeatureQC.component_group_qcs
   :module: pyopenms.pyopenms_7




.. py:attribute:: MRMFeatureQC.component_qcs
   :module: pyopenms.pyopenms_7




.. py:class:: MRMFragmentSelection
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _MRMFragmentSelection


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MRMFragmentSelection.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: MRMFragmentSelection.getDefaults
   :module: pyopenms.pyopenms_7


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: MRMFragmentSelection.getName
   :module: pyopenms.pyopenms_7


Cython signature: String getName()
Returns the name




.. py:method:: MRMFragmentSelection.getParameters
   :module: pyopenms.pyopenms_7


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: MRMFragmentSelection.getSubsections
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: MRMFragmentSelection.selectFragments
   :module: pyopenms.pyopenms_7


Cython signature: void selectFragments(libcpp_vector[Peak1D] & selected_peaks, MSSpectrum & spec)
Selects accordingly to the parameters the best peaks of spec and writes them into `selected_peaks`




.. py:method:: MRMFragmentSelection.setName
   :module: pyopenms.pyopenms_7


Cython signature: void setName(const String &)
Sets the name




.. py:method:: MRMFragmentSelection.setParameters
   :module: pyopenms.pyopenms_7


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: MRMIonSeries
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _MRMIonSeries


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MRMIonSeries.html




.. py:method:: MRMIonSeries.annotateTransition
   :module: pyopenms.pyopenms_7


Cython signature: void annotateTransition(ReactionMonitoringTransition & tr, Peptide peptide, double precursor_mz_threshold, double product_mz_threshold, bool enable_reannotation, libcpp_vector[String] fragment_types, libcpp_vector[size_t] fragment_charges, bool enable_specific_losses, bool enable_unspecific_losses, int round_decPow)


Annotates transition
-----
:param tr: The transition to annotate
:param peptide: The corresponding peptide
:param precursor_mz_threshold: The m/z threshold for annotation of the precursor ion
:param product_mz_threshold: The m/z threshold for annotation of the fragment ion
:param enable_reannotation: Whether the original (e.g. SpectraST) annotation should be used or reannotation should be conducted
:param fragment_types: The fragment ion types for reannotation
:param fragment_charges: The fragment ion charges for reannotation
:param enable_specific_losses: Whether specific neutral losses should be considered
:param enable_unspecific_losses: Whether unspecific neutral losses (H2O1, H3N1, C1H2N2, C1H2N1O1) should be considered
:param round_decPow: Round precursor and product m/z values to decimal power (default: -4)




.. py:method:: MRMIonSeries.annotateTransitionCV
   :module: pyopenms.pyopenms_7


Cython signature: void annotateTransitionCV(ReactionMonitoringTransition & tr, String annotation)


Annotates transition with CV terms
-----
:param tr: The transition to annotate
:param annotation: The fragment ion annotation




.. py:class:: MRMScoring
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _MRMScoring


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenSwath_1_1MRMScoring.html




.. py:method:: MRMScoring.calcMIPrecursorCombinedScore
   :module: pyopenms.pyopenms_7


Cython signature: double calcMIPrecursorCombinedScore()




.. py:method:: MRMScoring.calcMIPrecursorContrastScore
   :module: pyopenms.pyopenms_7


Cython signature: double calcMIPrecursorContrastScore()




.. py:method:: MRMScoring.calcMIPrecursorScore
   :module: pyopenms.pyopenms_7


Cython signature: double calcMIPrecursorScore()




.. py:method:: MRMScoring.calcMIScore
   :module: pyopenms.pyopenms_7


Cython signature: double calcMIScore()




.. py:method:: MRMScoring.calcMIWeightedScore
   :module: pyopenms.pyopenms_7


Cython signature: double calcMIWeightedScore(const libcpp_vector[double] & normalized_library_intensity)




.. py:method:: MRMScoring.calcRTScore
   :module: pyopenms.pyopenms_7


Cython signature: double calcRTScore(LightCompound & peptide, double normalized_experimental_rt)




.. py:method:: MRMScoring.calcSeparateMIContrastScore
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[double] calcSeparateMIContrastScore()




.. py:method:: MRMScoring.calcSeparateXcorrContrastCoelutionScore
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[double] calcSeparateXcorrContrastCoelutionScore()
Calculate the separate cross-correlation contrast score




.. py:method:: MRMScoring.calcSeparateXcorrContrastShapeScore
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[double] calcSeparateXcorrContrastShapeScore()
Calculate the separate cross-correlation contrast shape score




.. py:method:: MRMScoring.calcXcorrCoelutionScore
   :module: pyopenms.pyopenms_7


Cython signature: double calcXcorrCoelutionScore()
Calculate the cross-correlation coelution score. The score is a distance where zero indicates perfect coelution




.. py:method:: MRMScoring.calcXcorrCoelutionWeightedScore
   :module: pyopenms.pyopenms_7


Cython signature: double calcXcorrCoelutionWeightedScore(libcpp_vector[double] & normalized_library_intensity)


Calculate the weighted cross-correlation coelution score
-----
The score is a distance where zero indicates perfect coelution. The
score is weighted by the transition intensities, non-perfect coelution
in low-intensity transitions should thus become less important




.. py:method:: MRMScoring.calcXcorrPrecursorContrastCoelutionScore
   :module: pyopenms.pyopenms_7


Cython signature: double calcXcorrPrecursorContrastCoelutionScore()


Calculate the precursor cross-correlation contrast score against the transitions
-----
The score is a distance where zero indicates perfect coelution




.. py:method:: MRMScoring.calcXcorrPrecursorContrastShapeScore
   :module: pyopenms.pyopenms_7


Cython signature: double calcXcorrPrecursorContrastShapeScore()
Calculate the precursor cross-correlation shape score against the transitions




.. py:method:: MRMScoring.calcXcorrShapeScore
   :module: pyopenms.pyopenms_7


Cython signature: double calcXcorrShapeScore()


Calculate the cross-correlation shape score
-----
The score is a correlation measure where 1 indicates perfect correlation
and 0 means no correlation.




.. py:method:: MRMScoring.calcXcorrShapeWeightedScore
   :module: pyopenms.pyopenms_7


Cython signature: double calcXcorrShapeWeightedScore(libcpp_vector[double] & normalized_library_intensity)


Calculate the weighted cross-correlation shape score
-----
The score is a correlation measure where 1 indicates perfect correlation
and 0 means no correlation. The score is weighted by the transition
intensities, non-perfect coelution in low-intensity transitions should
thus become less important




.. py:method:: MRMScoring.getMIMatrix
   :module: pyopenms.pyopenms_7


Cython signature: MatrixDouble getMIMatrix()




.. py:class:: MSNumpressCoder
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _MSNumpressCoder


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MSNumpressCoder.html




.. py:attribute:: MSNumpressCoder.NumpressCompression
   :module: pyopenms.pyopenms_7


alias of :py:class:`pyopenms.pyopenms_7.__NumpressCompression`


.. py:method:: MSNumpressCoder.decodeNP
   :module: pyopenms.pyopenms_7


Cython signature: void decodeNP(const String & in_, libcpp_vector[double] & out, bool zlib_compression, NumpressConfig config)


Decodes a Base64 string to a vector of floating point numbers using numpress
-----
This code is obtained from the proteowizard implementation
./pwiz/pwiz/data/msdata/BinaryDataEncoder.cpp (adapted by Hannes Roest)
-----
This function will first decode the input base64 string (with optional
zlib decompression after decoding) and then apply numpress decoding to
the data
-----
:param in: The base64 encoded string
:param out: The resulting vector of doubles
:param zlib_compression: Whether to apply zlib de-compression before numpress de-compression
:param config: The numpress configuration defining the compression strategy
:raises:
  Exception: ConversionError if the string cannot be converted




.. py:method:: MSNumpressCoder.decodeNPRaw
   :module: pyopenms.pyopenms_7


Cython signature: void decodeNPRaw(const String & in_, libcpp_vector[double] & out, NumpressConfig config)


Decode the raw byte array "in" to the result vector "out"
-----
:note The string in should *only* contain the data and _no_ extra
null terminating byte
-----
This performs the raw numpress decoding on a raw byte array (not Base64
encoded). Therefore the input string is likely *unsafe* to handle and is
basically a byte container
-----
Please use the safe versions above unless you need access to the raw
byte arrays
-----
:param in: The base64 encoded string
:param out: The resulting vector of doubles
:param config: The numpress configuration defining the compression strategy




.. py:method:: MSNumpressCoder.encodeNP
   :module: pyopenms.pyopenms_7


Cython signature: void encodeNP(libcpp_vector[double] in_, String & result, bool zlib_compression, NumpressConfig config)


Encodes a vector of floating point numbers into a Base64 string using numpress
-----
This code is obtained from the proteowizard implementation
./pwiz/pwiz/data/msdata/BinaryDataEncoder.cpp (adapted by Hannes Roest)
-----
This function will first apply the numpress encoding to the data, then
encode the result in base64 (with optional zlib compression before
base64 encoding)
-----
:note In case of error, result string is empty
-----
:param in: The vector of floating point numbers to be encoded
:param result: The resulting string
:param zlib_compression: Whether to apply zlib compression after numpress compression
:param config: The numpress configuration defining the compression strategy




.. py:method:: MSNumpressCoder.encodeNPRaw
   :module: pyopenms.pyopenms_7


Cython signature: void encodeNPRaw(libcpp_vector[double] in_, String & result, NumpressConfig config)


Encode the data vector "in" to a raw byte array
-----
:note In case of error, "result" is given back unmodified
:note The result is not a string but a raw byte array and may contain zero bytes
-----
This performs the raw numpress encoding on a set of data and does no
Base64 encoding on the result. Therefore the result string is likely
*unsafe* to handle and is a raw byte array.
-----
Please use the safe versions above unless you need access to the raw
byte arrays
-----
:param in: The vector of floating point numbers to be encoded
:param result: The resulting string
:param config: The numpress configuration defining the compression strategy




.. py:class:: MSSpectrum
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _MSSpectrum


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MSSpectrum.html
 -- Inherits from ['SpectrumSettings', 'RangeManagerMzInt']


 The representation of a 1D spectrum.
 Raw data access is proved by `get_peaks` and `set_peaks`, which yields numpy arrays
 Iterations yields access to underlying peak objects but is slower
 Extra data arrays can be accessed through getFloatDataArrays / getIntegerDataArrays / getStringDataArrays
 See help(SpectrumSettings) for information about meta-information
 -----
 Usage:
   ms_level = spectrum.getMSLevel()
   rt = spectrum.getRT()
   mz, intensities = spectrum.get_peaks()




.. py:method:: MSSpectrum.calculateTIC
   :module: pyopenms.pyopenms_7


Cython signature: double calculateTIC()
Returns the total ion current (=sum) of peak intensities in the spectrum




.. py:method:: MSSpectrum.clear
   :module: pyopenms.pyopenms_7


Cython signature: void clear(bool clear_meta_data)
Clears all data (and meta data if clear_meta_data is true)




.. py:method:: MSSpectrum.clearMetaInfo
   :module: pyopenms.pyopenms_7


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: MSSpectrum.clearRanges
   :module: pyopenms.pyopenms_7


Cython signature: void clearRanges()
Resets all range dimensions as empty




.. py:method:: MSSpectrum.findHighestInWindow
   :module: pyopenms.pyopenms_7


Cython signature: int findHighestInWindow(double mz, double tolerance_left, double tolerance_right)
Returns the index of the highest peak in the provided abs. m/z tolerance window to the left and right (-1 if none match)




.. py:method:: MSSpectrum.findNearest
   :module: pyopenms.pyopenms_7


- Cython signature: int findNearest(double mz)
  Returns the index of the closest peak in m/z


- Cython signature: int findNearest(double mz, double tolerance)
  Returns the index of the closest peak in the provided +/- m/z tolerance window (-1 if none match)


- Cython signature: int findNearest(double mz, double tolerance_left, double tolerance_right)
  Returns the index of the closest peak in the provided abs. m/z tolerance window to the left and right (-1 if none match)




.. py:method:: MSSpectrum.getAcquisitionInfo
   :module: pyopenms.pyopenms_7


Cython signature: AcquisitionInfo getAcquisitionInfo()
Returns a const reference to the acquisition info




.. py:method:: MSSpectrum.getComment
   :module: pyopenms.pyopenms_7


Cython signature: String getComment()
Returns the free-text comment




.. py:method:: MSSpectrum.getDataProcessing
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[shared_ptr[DataProcessing]] getDataProcessing()




.. py:method:: MSSpectrum.getDriftTime
   :module: pyopenms.pyopenms_7


Cython signature: double getDriftTime()
Returns the drift time (-1 if not set)




.. py:method:: MSSpectrum.getFloatDataArrays
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[FloatDataArray] getFloatDataArrays()
Returns the additional float data arrays to store e.g. meta data




.. py:method:: MSSpectrum.getInstrumentSettings
   :module: pyopenms.pyopenms_7


Cython signature: InstrumentSettings getInstrumentSettings()
Returns a const reference to the instrument settings of the current spectrum




.. py:method:: MSSpectrum.getIntegerDataArrays
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[IntegerDataArray] getIntegerDataArrays()
Returns the additional int data arrays to store e.g. meta data




.. py:method:: MSSpectrum.getKeys
   :module: pyopenms.pyopenms_7


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: MSSpectrum.getMSLevel
   :module: pyopenms.pyopenms_7


Cython signature: unsigned int getMSLevel()
Returns the MS level




.. py:method:: MSSpectrum.getMaxIntensity
   :module: pyopenms.pyopenms_7


Cython signature: double getMaxIntensity()
Returns the maximum intensity




.. py:method:: MSSpectrum.getMaxMZ
   :module: pyopenms.pyopenms_7


Cython signature: double getMaxMZ()
Returns the maximum m/z




.. py:method:: MSSpectrum.getMetaValue
   :module: pyopenms.pyopenms_7


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: MSSpectrum.getMinIntensity
   :module: pyopenms.pyopenms_7


Cython signature: double getMinIntensity()
Returns the minimum intensity




.. py:method:: MSSpectrum.getMinMZ
   :module: pyopenms.pyopenms_7


Cython signature: double getMinMZ()
Returns the minimum m/z




.. py:method:: MSSpectrum.getName
   :module: pyopenms.pyopenms_7


Cython signature: String getName()




.. py:method:: MSSpectrum.getNativeID
   :module: pyopenms.pyopenms_7


Cython signature: String getNativeID()
Returns the native identifier for the spectrum, used by the acquisition software




.. py:method:: MSSpectrum.getPeptideIdentifications
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[PeptideIdentification] getPeptideIdentifications()
Returns a const reference to the PeptideIdentification vector




.. py:method:: MSSpectrum.getPrecursors
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[Precursor] getPrecursors()
Returns a const reference to the precursors




.. py:method:: MSSpectrum.getProducts
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[Product] getProducts()
Returns a const reference to the products




.. py:method:: MSSpectrum.getRT
   :module: pyopenms.pyopenms_7


Cython signature: double getRT()
Returns the absolute retention time (in seconds)




.. py:method:: MSSpectrum.getSourceFile
   :module: pyopenms.pyopenms_7


Cython signature: SourceFile getSourceFile()
Returns a const reference to the source file




.. py:method:: MSSpectrum.getStringDataArrays
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[StringDataArray] getStringDataArrays()
Returns the additional string data arrays to store e.g. meta data




.. py:method:: MSSpectrum.getType
   :module: pyopenms.pyopenms_7


Cython signature: int getType()
Returns the spectrum type (centroided (PEAKS) or profile data (RAW))




.. py:method:: MSSpectrum.get_peaks
   :module: pyopenms.pyopenms_7


Cython signature: numpy_vector, numpy_vector get_peaks()


Will return a tuple of two numpy arrays (m/z, intensity) corresponding
to the peaks in the MSSpectrum. Provides fast access to peaks.




.. py:method:: MSSpectrum.intensityInRange
   :module: pyopenms.pyopenms_7




.. py:method:: MSSpectrum.isMetaEmpty
   :module: pyopenms.pyopenms_7


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: MSSpectrum.isSorted
   :module: pyopenms.pyopenms_7


Cython signature: bool isSorted()
Returns true if the spectrum is sorte by m/z




.. py:method:: MSSpectrum.metaRegistry
   :module: pyopenms.pyopenms_7


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: MSSpectrum.metaValueExists
   :module: pyopenms.pyopenms_7


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: MSSpectrum.push_back
   :module: pyopenms.pyopenms_7


Cython signature: void push_back(Peak1D)
Append a peak




.. py:method:: MSSpectrum.removeMetaValue
   :module: pyopenms.pyopenms_7


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: MSSpectrum.reserve
   :module: pyopenms.pyopenms_7


Cython signature: void reserve(size_t n)




.. py:method:: MSSpectrum.select
   :module: pyopenms.pyopenms_7


Cython signature: MSSpectrum select(libcpp_vector[size_t] & indices)
Subset the spectrum by indices. Also applies to associated data arrays if present.




.. py:method:: MSSpectrum.setAcquisitionInfo
   :module: pyopenms.pyopenms_7


Cython signature: void setAcquisitionInfo(AcquisitionInfo)
Sets the acquisition info




.. py:method:: MSSpectrum.setComment
   :module: pyopenms.pyopenms_7


Cython signature: void setComment(String)
Sets the free-text comment




.. py:method:: MSSpectrum.setDataProcessing
   :module: pyopenms.pyopenms_7


Cython signature: void setDataProcessing(libcpp_vector[shared_ptr[DataProcessing]])




.. py:method:: MSSpectrum.setDriftTime
   :module: pyopenms.pyopenms_7


Cython signature: void setDriftTime(double)
Sets the drift time (-1 if not set)




.. py:method:: MSSpectrum.setFloatDataArrays
   :module: pyopenms.pyopenms_7


Cython signature: void setFloatDataArrays(libcpp_vector[FloatDataArray] fda)
Sets the additional float data arrays to store e.g. meta data




.. py:method:: MSSpectrum.setInstrumentSettings
   :module: pyopenms.pyopenms_7


Cython signature: void setInstrumentSettings(InstrumentSettings)
Sets the instrument settings of the current spectrum




.. py:method:: MSSpectrum.setIntegerDataArrays
   :module: pyopenms.pyopenms_7


Cython signature: void setIntegerDataArrays(libcpp_vector[IntegerDataArray] ida)
Sets the additional int data arrays to store e.g. meta data




.. py:method:: MSSpectrum.setMSLevel
   :module: pyopenms.pyopenms_7


Cython signature: void setMSLevel(unsigned int)
Sets the MS level




.. py:method:: MSSpectrum.setMetaValue
   :module: pyopenms.pyopenms_7


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:method:: MSSpectrum.setName
   :module: pyopenms.pyopenms_7


Cython signature: void setName(String)




.. py:method:: MSSpectrum.setNativeID
   :module: pyopenms.pyopenms_7


Cython signature: void setNativeID(String)
Sets the native identifier for the spectrum, used by the acquisition software




.. py:method:: MSSpectrum.setPeptideIdentifications
   :module: pyopenms.pyopenms_7


Cython signature: void setPeptideIdentifications(libcpp_vector[PeptideIdentification])
Sets the PeptideIdentification vector




.. py:method:: MSSpectrum.setPrecursors
   :module: pyopenms.pyopenms_7


Cython signature: void setPrecursors(libcpp_vector[Precursor])
Sets the precursors




.. py:method:: MSSpectrum.setProducts
   :module: pyopenms.pyopenms_7


Cython signature: void setProducts(libcpp_vector[Product])
Sets the products




.. py:method:: MSSpectrum.setRT
   :module: pyopenms.pyopenms_7


Cython signature: void setRT(double)
Sets the absolute retention time (in seconds)




.. py:method:: MSSpectrum.setSourceFile
   :module: pyopenms.pyopenms_7


Cython signature: void setSourceFile(SourceFile)
Sets the source file




.. py:method:: MSSpectrum.setStringDataArrays
   :module: pyopenms.pyopenms_7


Cython signature: void setStringDataArrays(libcpp_vector[StringDataArray] sda)
Sets the additional string data arrays to store e.g. meta data




.. py:method:: MSSpectrum.setType
   :module: pyopenms.pyopenms_7


Cython signature: void setType(SpectrumType)
Sets the spectrum type




.. py:method:: MSSpectrum.set_peaks
   :module: pyopenms.pyopenms_7


Cython signature: set_peaks((numpy_vector, numpy_vector))


Takes a tuple or list of two arrays (m/z, intensity) and populates the
MSSpectrum. The arrays can be numpy arrays (faster).




.. py:method:: MSSpectrum.size
   :module: pyopenms.pyopenms_7


Cython signature: size_t size()
Returns the number of peaks in the spectrum




.. py:method:: MSSpectrum.sortByIntensity
   :module: pyopenms.pyopenms_7


Cython signature: void sortByIntensity(bool reverse)




.. py:method:: MSSpectrum.sortByPosition
   :module: pyopenms.pyopenms_7


Cython signature: void sortByPosition()




.. py:method:: MSSpectrum.unify
   :module: pyopenms.pyopenms_7


Cython signature: void unify(SpectrumSettings)




.. py:method:: MSSpectrum.updateRanges
   :module: pyopenms.pyopenms_7


Cython signature: void updateRanges()




.. py:class:: MZTrafoModel
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _MZTrafoModel


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MZTrafoModel.html


 Create and apply models of a mass recalibration function
 -----
 The input is a list of calibration points (ideally spanning a wide m/z range to prevent extrapolation when applying to model)
 -----
 Models (LINEAR, LINEAR_WEIGHTED, QUADRATIC, QUADRATIC_WEIGHTED) can be trained using CalData points (or a subset of them)
 Calibration points can have different retention time points, and a model should be build such that it captures
 the local (in time) decalibration of the instrument, i.e. choose appropriate time windows along RT to calibrate the
 spectra in this RT region
 From the available calibrant data, a model is build. Later, any uncalibrated m/z value can be fed to the model, to obtain
 a calibrated m/z
 -----
 The input domain can either be absolute mass differences in [Th], or relative differences in [ppm]
 The models are build based on this input
 -----
 Outlier detection before model building via the RANSAC algorithm is supported for LINEAR and QUADRATIC models




.. py:method:: MZTrafoModel.enumToName
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_string enumToName(MZTrafoModel_MODELTYPE mt)




.. py:method:: MZTrafoModel.findNearest
   :module: pyopenms.pyopenms_7


Cython signature: size_t findNearest(libcpp_vector[MZTrafoModel] & tms, double rt)




.. py:method:: MZTrafoModel.getCoefficients
   :module: pyopenms.pyopenms_7


Cython signature: void getCoefficients(double & intercept, double & slope, double & power)


Get model coefficients
-----
Parameters will be filled with internal model parameters
The model must be trained before; Exception is thrown otherwise!
-----
:param intercept: The intercept
:param slope: The slope
:param power: The coefficient for x*x (will be 0 for linear models)




.. py:method:: MZTrafoModel.getRT
   :module: pyopenms.pyopenms_7


Cython signature: double getRT()
Get RT associated with the model (training region)




.. py:method:: MZTrafoModel.isTrained
   :module: pyopenms.pyopenms_7


Cython signature: bool isTrained()
Returns true if the model have coefficients (i.e. was trained successfully)




.. py:method:: MZTrafoModel.isValidModel
   :module: pyopenms.pyopenms_7


Cython signature: bool isValidModel(MZTrafoModel & trafo)




.. py:method:: MZTrafoModel.nameToEnum
   :module: pyopenms.pyopenms_7


Cython signature: MZTrafoModel_MODELTYPE nameToEnum(libcpp_string name)




.. py:method:: MZTrafoModel.predict
   :module: pyopenms.pyopenms_7


Cython signature: double predict(double mz)


Apply the model to an uncalibrated m/z value
-----
Make sure the model was trained (train()) and is valid (isValidModel()) before calling this function!
-----
Applies the function y = intercept + slope*mz + power*mz^2
and returns y
-----
:param mz: The uncalibrated m/z value
:returns The calibrated m/z value




.. py:method:: MZTrafoModel.setCoefficientLimits
   :module: pyopenms.pyopenms_7


Cython signature: void setCoefficientLimits(double offset, double scale, double power)




.. py:method:: MZTrafoModel.setCoefficients
   :module: pyopenms.pyopenms_7


         - Cython signature: void setCoefficients(MZTrafoModel)
           Copy model coefficients from another model


         - Cython signature: void setCoefficients(double, double, double)


Manually set model coefficients
-----
Can be used instead of train(), so manually set coefficients
It must be exactly three values. If you want a linear model, set 'power' to zero
If you want a constant model, set slope to zero in addition
-----
:param intercept: The offset
:param slope: The slope
:param power: The x*x coefficient (for quadratic models)




.. py:method:: MZTrafoModel.setRANSACParams
   :module: pyopenms.pyopenms_7


Cython signature: void setRANSACParams(RANSACParam p)




.. py:method:: MZTrafoModel.toString
   :module: pyopenms.pyopenms_7


Cython signature: String toString()




.. py:method:: MZTrafoModel.train
   :module: pyopenms.pyopenms_7


         - Cython signature: bool train(CalibrationData cd, MZTrafoModel_MODELTYPE md, bool use_RANSAC, double rt_left, double rt_right)


Train a model using calibrant data
-----
If the CalibrationData was created using peak groups (usually corresponding to mass traces),
the median for each group is used as a group representative. This
is more robust, and reduces the number of data points drastically, i.e. one value per group
-----
Internally, these steps take place:
- apply RT filter
- [compute median per group] (only if groups were given in 'cd')
- set Model's rt position
- call train() (see overloaded method)
-----
:param cd: List of calibrants
:param md: Type of model (linear, quadratic, ...)
:param use_RANSAC: Remove outliers before computing the model?
:param rt_left: Filter 'cd' by RT; all calibrants with RT < 'rt_left' are removed
:param rt_right: Filter 'cd' by RT; all calibrants with RT > 'rt_right' are removed
:returns: True if model was build, false otherwise
         - Cython signature: bool train(libcpp_vector[double] error_mz, libcpp_vector[double] theo_mz, libcpp_vector[double] weights, MZTrafoModel_MODELTYPE md, bool use_RANSAC)


Train a model using calibrant data
-----
Given theoretical and observed mass values (and corresponding weights),
a model (linear, quadratic, ...) is build
Outlier removal is applied before
The 'obs_mz' can be either given as absolute masses in [Th] or relative deviations in [ppm]
The MZTrafoModel must be constructed accordingly (see constructor). This has no influence on the model building itself, but
rather on how 'predict()' works internally
-----
Outlier detection before model building via the RANSAC algorithm is supported for LINEAR and QUADRATIC models
-----
Internally, these steps take place:
- [apply RANSAC] (depending on 'use_RANSAC')
- build model and store its parameters internally
-----
:param error_mz: Observed Mass error (in ppm or Th)
:param theo_mz: Theoretical m/z values, corresponding to 'error_mz'
:param weights: For weighted models only: weight of calibrants; ignored otherwise
:param md: Type of model (linear, quadratic, ...)
:param use_RANSAC: Remove outliers before computing the model?
:returns: True if model was build, false otherwise




.. py:class:: MZTrafoModel_MODELTYPE
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`




.. py:attribute:: MZTrafoModel_MODELTYPE.LINEAR
   :module: pyopenms.pyopenms_7
   :value: 0




.. py:attribute:: MZTrafoModel_MODELTYPE.LINEAR_WEIGHTED
   :module: pyopenms.pyopenms_7
   :value: 1




.. py:attribute:: MZTrafoModel_MODELTYPE.QUADRATIC
   :module: pyopenms.pyopenms_7
   :value: 2




.. py:attribute:: MZTrafoModel_MODELTYPE.QUADRATIC_WEIGHTED
   :module: pyopenms.pyopenms_7
   :value: 3




.. py:attribute:: MZTrafoModel_MODELTYPE.SIZE_OF_MODELTYPE
   :module: pyopenms.pyopenms_7
   :value: 4




.. py:method:: MZTrafoModel_MODELTYPE.getMapping
   :module: pyopenms.pyopenms_7




.. py:class:: MatrixDouble
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _Matrix[double]


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1Matrix[double].html




.. py:method:: MatrixDouble.clear
   :module: pyopenms.pyopenms_7


Cython signature: void clear()




.. py:method:: MatrixDouble.colIndex
   :module: pyopenms.pyopenms_7


Cython signature: size_t colIndex(size_t index)
Calculate the column from an index into the underlying vector. Note that Matrix uses the (row,column) lexicographic ordering for indexing




.. py:method:: MatrixDouble.cols
   :module: pyopenms.pyopenms_7


Cython signature: size_t cols()




.. py:method:: MatrixDouble.getValue
   :module: pyopenms.pyopenms_7


Cython signature: double getValue(size_t i, size_t j)




.. py:method:: MatrixDouble.get_matrix
   :module: pyopenms.pyopenms_7


Cython signature: numpy_matrix get_matrix()






.. py:method:: MatrixDouble.get_matrix_as_view
   :module: pyopenms.pyopenms_7


Cython signature: numpy_matrix get_matrix()






.. py:method:: MatrixDouble.index
   :module: pyopenms.pyopenms_7


Cython signature: size_t index(size_t row, size_t col)




.. py:method:: MatrixDouble.indexPair
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_pair[size_t,size_t] indexPair(size_t index)




.. py:method:: MatrixDouble.resize
   :module: pyopenms.pyopenms_7


- Cython signature: void resize(size_t i, size_t j, double value)
- Cython signature: void resize(libcpp_pair[size_t,size_t] & size_pair, double value)




.. py:method:: MatrixDouble.rowIndex
   :module: pyopenms.pyopenms_7


Cython signature: size_t rowIndex(size_t index)
Calculate the row from an index into the underlying vector. Note that Matrix uses the (row,column) lexicographic ordering for indexing




.. py:method:: MatrixDouble.rows
   :module: pyopenms.pyopenms_7


Cython signature: size_t rows()




.. py:method:: MatrixDouble.setValue
   :module: pyopenms.pyopenms_7


Cython signature: void setValue(size_t i, size_t j, double value)




.. py:method:: MatrixDouble.set_matrix
   :module: pyopenms.pyopenms_7


Cython signature: numpy_matrix set_matrix()






.. py:method:: MatrixDouble.sizePair
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_pair[size_t,size_t] sizePair()




.. py:class:: MetaboTargetedAssay
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _MetaboTargetedAssay


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MetaboTargetedAssay.html




.. py:method:: MetaboTargetedAssay.extractMetaboTargetedAssay
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[MetaboTargetedAssay] extractMetaboTargetedAssay(MSExperiment & spectra, FeatureMapping_FeatureToMs2Indices & feature_ms2_index, double & precursor_rt_tol, double & precursor_mz_distance, double & cosine_sim_threshold, double & transition_threshold, double & min_fragment_mz, double & max_fragment_mz, bool & method_consensus_spectrum, bool & exclude_ms2_precursor, unsigned int & file_counter)


Extract a vector of MetaboTargetedAssays without using fragment annotation
-----
:param spectra: Input of MSExperiment with spectra information
:param feature_ms2_spectra_map: FeatureMapping class with associated MS2 spectra
:param precursor_rt_tol: Retention time tolerance of the precursor
:param precursor_mz_distance: Max m/z distance of the precursor entries of two spectra to be merged
:param cosine_sim_threshold: Cosine similarty threshold for the usage of SpectraMerger
:param transition_threshold: Intensity threshold for MS2 peak used in MetaboTargetedAssay
:param min_fragment_mz: Minimum m/z a fragment ion has to have to be considered as a transition
:param max_fragment_mz: Maximum m/z a fragment ion has to have to be considered as a transition
:param method_consensus_spectrum: Boolean to use consensus spectrum method
:param exclude_ms2_precursor: Boolean to exclude MS2 precursor from MetaboTargetedAssay
:param file_counter: Count if multiple files are used
:returns: Vector of MetaboTargetedAssay




.. py:method:: MetaboTargetedAssay.extractMetaboTargetedAssayFragmentAnnotation
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[MetaboTargetedAssay] extractMetaboTargetedAssayFragmentAnnotation(libcpp_vector[MetaboTargetedAssay_CompoundTargetDecoyPair] & v_cmp_spec, double & transition_threshold, double & min_fragment_mz, double & max_fragment_mz, bool & use_exact_mass, bool & exclude_ms2_precursor, unsigned int & file_counter)


Extract a vector of MetaboTargetedAssays using fragment annotation
-----
:param v_cmp_spec: Vector of CompoundInfo with associated fragment annotated MSspectrum
:param transition_threshold: Intensity threshold for MS2 peak used in MetaboTargetedAssay
:param min_fragment_mz: Minimum m/z a fragment ion has to have to be considered as a transition
:param max_fragment_mz: Maximum m/z a fragment ion has to have to be considered as a transition
:param use_exact_mass: Boolean if exact mass should be used as peak mass for annotated fragments
:param exclude_ms2_precursor: Boolean to exclude MS2 precursor from MetaboTargetedAssay
:param file_counter: Count if multiple files are used.
:returns: Vector of MetaboTargetedAssay




.. py:method:: MetaboTargetedAssay.pairCompoundWithAnnotatedSpectra
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[MetaboTargetedAssay_CompoundTargetDecoyPair] pairCompoundWithAnnotatedSpectra(libcpp_vector[SiriusMSFile_CompoundInfo] & v_cmpinfo, libcpp_vector[SiriusFragmentAnnotation_SiriusTargetDecoySpectra] & annotated_spectra)


Pair compound information (SiriusMSFile) with the annotated target and decoy spectrum from SIRIUS/Passatutto based on the m_id (unique identifier composed of description_filepath_native_id_k introduced in the SiriusMSConverter)
-----
:param v_cmpinfo: Vector of SiriusMSFile::CompoundInfo
:param annotated_spectra: Vector of SiriusTargetDecoySpectra
:return: Vector of MetaboTargetedAssay::CompoundTargetDecoyPair




.. py:class:: MetaboTargetedAssay_CompoundTargetDecoyPair
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _MetaboTargetedAssay_CompoundTargetDecoyPair


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MetaboTargetedAssay_CompoundTargetDecoyPair.html




.. py:class:: MetaboliteFeatureDeconvolution
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _MetaboliteFeatureDeconvolution


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MetaboliteFeatureDeconvolution.html
 -- Inherits from ['DefaultParamHandler']




.. py:attribute:: MetaboliteFeatureDeconvolution.CHARGEMODE_MFD
   :module: pyopenms.pyopenms_7


alias of :py:class:`pyopenms.pyopenms_7.__CHARGEMODE_MFD`


.. py:method:: MetaboliteFeatureDeconvolution.compute
   :module: pyopenms.pyopenms_7


Cython signature: void compute(FeatureMap & fm_in, FeatureMap & fm_out, ConsensusMap & cons_map, ConsensusMap & cons_map_p)


Compute a zero-charge feature map from a set of charged features
-----
Find putative ChargePairs, then score them and hand over to ILP
-----
:param fm_in: Input feature-map
:param fm_out: Output feature-map (sorted by position and augmented with user params)
:param cons_map: Output of grouped features belonging to a charge group
:param cons_map_p: Output of paired features connected by an edge




.. py:method:: MetaboliteFeatureDeconvolution.getDefaults
   :module: pyopenms.pyopenms_7


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: MetaboliteFeatureDeconvolution.getName
   :module: pyopenms.pyopenms_7


Cython signature: String getName()
Returns the name




.. py:method:: MetaboliteFeatureDeconvolution.getParameters
   :module: pyopenms.pyopenms_7


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: MetaboliteFeatureDeconvolution.getSubsections
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: MetaboliteFeatureDeconvolution.setName
   :module: pyopenms.pyopenms_7


Cython signature: void setName(const String &)
Sets the name




.. py:method:: MetaboliteFeatureDeconvolution.setParameters
   :module: pyopenms.pyopenms_7


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: ModificationDefinition
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _ModificationDefinition


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ModificationDefinition.html




.. py:method:: ModificationDefinition.getMaxOccurrences
   :module: pyopenms.pyopenms_7


Cython signature: unsigned int getMaxOccurrences()
Returns the maximal number of occurrences per peptide




.. py:method:: ModificationDefinition.getModification
   :module: pyopenms.pyopenms_7


Cython signature: ResidueModification getModification()




.. py:method:: ModificationDefinition.getModificationName
   :module: pyopenms.pyopenms_7


Cython signature: String getModificationName()
Returns the name of the modification




.. py:method:: ModificationDefinition.isFixedModification
   :module: pyopenms.pyopenms_7


Cython signature: bool isFixedModification()
Returns if the modification if fixed true, else false




.. py:method:: ModificationDefinition.setFixedModification
   :module: pyopenms.pyopenms_7


Cython signature: void setFixedModification(bool fixed)
Sets whether this modification definition is fixed or variable (modification must occur vs. can occur)




.. py:method:: ModificationDefinition.setMaxOccurrences
   :module: pyopenms.pyopenms_7


Cython signature: void setMaxOccurrences(unsigned int num)
Sets the maximal number of occurrences per peptide (unbounded if 0)




.. py:method:: ModificationDefinition.setModification
   :module: pyopenms.pyopenms_7


Cython signature: void setModification(const String & modification)
Sets the modification, allowed are unique names provided by ModificationsDB




.. py:class:: MultiplexDeltaMassesGenerator
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _MultiplexDeltaMassesGenerator


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MultiplexDeltaMassesGenerator.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: MultiplexDeltaMassesGenerator.generateKnockoutDeltaMasses
   :module: pyopenms.pyopenms_7


Cython signature: void generateKnockoutDeltaMasses()




.. py:method:: MultiplexDeltaMassesGenerator.getDefaults
   :module: pyopenms.pyopenms_7


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: MultiplexDeltaMassesGenerator.getDeltaMassesList
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[MultiplexDeltaMasses] getDeltaMassesList()




.. py:method:: MultiplexDeltaMassesGenerator.getLabelLong
   :module: pyopenms.pyopenms_7


Cython signature: String getLabelLong(String label)




.. py:method:: MultiplexDeltaMassesGenerator.getLabelShort
   :module: pyopenms.pyopenms_7


Cython signature: String getLabelShort(String label)




.. py:method:: MultiplexDeltaMassesGenerator.getName
   :module: pyopenms.pyopenms_7


Cython signature: String getName()
Returns the name




.. py:method:: MultiplexDeltaMassesGenerator.getParameters
   :module: pyopenms.pyopenms_7


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: MultiplexDeltaMassesGenerator.getSubsections
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: MultiplexDeltaMassesGenerator.setName
   :module: pyopenms.pyopenms_7


Cython signature: void setName(const String &)
Sets the name




.. py:method:: MultiplexDeltaMassesGenerator.setParameters
   :module: pyopenms.pyopenms_7


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: MultiplexDeltaMassesGenerator_Label
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _MultiplexDeltaMassesGenerator_Label


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MultiplexDeltaMassesGenerator_Label.html




.. py:attribute:: MultiplexDeltaMassesGenerator_Label.delta_mass
   :module: pyopenms.pyopenms_7




.. py:attribute:: MultiplexDeltaMassesGenerator_Label.description
   :module: pyopenms.pyopenms_7




.. py:attribute:: MultiplexDeltaMassesGenerator_Label.long_name
   :module: pyopenms.pyopenms_7




.. py:attribute:: MultiplexDeltaMassesGenerator_Label.short_name
   :module: pyopenms.pyopenms_7




.. py:class:: MultiplexIsotopicPeakPattern
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _MultiplexIsotopicPeakPattern


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MultiplexIsotopicPeakPattern.html




.. py:method:: MultiplexIsotopicPeakPattern.getCharge
   :module: pyopenms.pyopenms_7


Cython signature: int getCharge()
Returns charge




.. py:method:: MultiplexIsotopicPeakPattern.getMZShiftAt
   :module: pyopenms.pyopenms_7


Cython signature: double getMZShiftAt(int i)
Returns m/z shift at position i




.. py:method:: MultiplexIsotopicPeakPattern.getMZShiftCount
   :module: pyopenms.pyopenms_7


Cython signature: unsigned int getMZShiftCount()
Returns number of m/z shifts




.. py:method:: MultiplexIsotopicPeakPattern.getMassShiftAt
   :module: pyopenms.pyopenms_7


Cython signature: double getMassShiftAt(int i)
Returns mass shift at position i




.. py:method:: MultiplexIsotopicPeakPattern.getMassShiftCount
   :module: pyopenms.pyopenms_7


Cython signature: unsigned int getMassShiftCount()
Returns number of mass shifts i.e. the number of peptides in the multiplet




.. py:method:: MultiplexIsotopicPeakPattern.getMassShiftIndex
   :module: pyopenms.pyopenms_7


Cython signature: int getMassShiftIndex()
Returns mass shift index




.. py:method:: MultiplexIsotopicPeakPattern.getMassShifts
   :module: pyopenms.pyopenms_7


Cython signature: MultiplexDeltaMasses getMassShifts()
Returns mass shifts




.. py:method:: MultiplexIsotopicPeakPattern.getPeaksPerPeptide
   :module: pyopenms.pyopenms_7


Cython signature: int getPeaksPerPeptide()
Returns peaks per peptide




.. py:class:: NoiseEstimator
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _NoiseEstimator


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1NoiseEstimator.html




.. py:method:: NoiseEstimator.get_noise_even
   :module: pyopenms.pyopenms_7


Cython signature: double get_noise_even(double mz)




.. py:method:: NoiseEstimator.get_noise_odd
   :module: pyopenms.pyopenms_7


Cython signature: double get_noise_odd(double mz)




.. py:method:: NoiseEstimator.get_noise_value
   :module: pyopenms.pyopenms_7


Cython signature: double get_noise_value(double mz)




.. py:attribute:: NoiseEstimator.mz_start
   :module: pyopenms.pyopenms_7




.. py:attribute:: NoiseEstimator.nr_windows
   :module: pyopenms.pyopenms_7




.. py:attribute:: NoiseEstimator.result_windows_even
   :module: pyopenms.pyopenms_7




.. py:attribute:: NoiseEstimator.result_windows_odd
   :module: pyopenms.pyopenms_7




.. py:attribute:: NoiseEstimator.window_length
   :module: pyopenms.pyopenms_7




.. py:class:: NormalizationMethod
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`




.. py:attribute:: NormalizationMethod.NM_SCALE
   :module: pyopenms.pyopenms_7
   :value: 0




.. py:attribute:: NormalizationMethod.NM_SHIFT
   :module: pyopenms.pyopenms_7
   :value: 1




.. py:method:: NormalizationMethod.getMapping
   :module: pyopenms.pyopenms_7




.. py:class:: NumpressConfig
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _NumpressConfig


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1NumpressConfig.html




.. py:attribute:: NumpressConfig.estimate_fixed_point
   :module: pyopenms.pyopenms_7




.. py:attribute:: NumpressConfig.linear_fp_mass_acc
   :module: pyopenms.pyopenms_7




.. py:attribute:: NumpressConfig.np_compression
   :module: pyopenms.pyopenms_7




.. py:attribute:: NumpressConfig.numpressErrorTolerance
   :module: pyopenms.pyopenms_7




.. py:attribute:: NumpressConfig.numpressFixedPoint
   :module: pyopenms.pyopenms_7




.. py:method:: NumpressConfig.setCompression
   :module: pyopenms.pyopenms_7


Cython signature: void setCompression(const String & compression)




.. py:class:: OMSSACSVFile
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _OMSSACSVFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1OMSSACSVFile.html


 File adapter for OMSSACSV files
 -----
 The files contain the results of the OMSSA algorithm in a comma separated manner. This file adapter is able to
 load the data from such a file into the structures of OpenMS




.. py:method:: OMSSACSVFile.load
   :module: pyopenms.pyopenms_7


Cython signature: void load(const String & filename, ProteinIdentification & protein_identification, libcpp_vector[PeptideIdentification] & id_data)


Loads a OMSSA file
-----
:param filename: The name of the file to read from
:param protein_identification: The protein ProteinIdentification data
:param id_data: The peptide ids of the file
-----
The content of the file is stored in `features`
-----
:raises:
  Exception: FileNotFound is thrown if the file could not be opened
:raises:
  Exception: ParseError is thrown if an error occurs during parsing




.. py:class:: OSWFile
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _OSWFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1OSWFile.html


 This class serves for reading in and writing OpenSWATH OSW files
 -----
 See OpenSwathOSWWriter for more functionality
 -----
 The reader and writer returns data in a format suitable for PercolatorAdapter.
 OSW files have a flexible data structure. They contain all peptide query
 parameters of TraML/PQP files with the detected and quantified features of
 OpenSwathWorkflow (feature, feature_ms1, feature_ms2 & feature_transition)
 -----
 The OSWFile reader extracts the feature information from the OSW file for
 each level (MS1, MS2 & transition) separately and generates Percolator input
 files. For each of the three Percolator reports, OSWFile writer adds a table
 (score_ms1, score_ms2, score_transition) with the respective confidence metrics.
 These tables can be mapped to the corresponding feature tables, are very similar
 to PyProphet results and can thus be used interchangeably




.. py:class:: OfflinePrecursorIonSelection
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _OfflinePrecursorIonSelection


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1OfflinePrecursorIonSelection.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: OfflinePrecursorIonSelection.createProteinSequenceBasedLPInclusionList
   :module: pyopenms.pyopenms_7


Cython signature: void createProteinSequenceBasedLPInclusionList(String include_, String rt_model_file, String pt_model_file, FeatureMap & precursors)




.. py:method:: OfflinePrecursorIonSelection.getDefaults
   :module: pyopenms.pyopenms_7


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: OfflinePrecursorIonSelection.getLPSolver
   :module: pyopenms.pyopenms_7


Cython signature: SOLVER getLPSolver()




.. py:method:: OfflinePrecursorIonSelection.getName
   :module: pyopenms.pyopenms_7


Cython signature: String getName()
Returns the name




.. py:method:: OfflinePrecursorIonSelection.getParameters
   :module: pyopenms.pyopenms_7


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: OfflinePrecursorIonSelection.getSubsections
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: OfflinePrecursorIonSelection.makePrecursorSelectionForKnownLCMSMap
   :module: pyopenms.pyopenms_7


Cython signature: void makePrecursorSelectionForKnownLCMSMap(FeatureMap & features, MSExperiment & experiment, MSExperiment & ms2, libcpp_set[int] & charges_set, bool feature_based)


Makes the precursor selection for a given feature map, either feature or scan based
-----
:param features: Input feature map
:param experiment: Input raw data
:param ms2: Precursors are added as empty MS2 spectra to this MSExperiment
:param charges_set: Allowed charge states
:param feature_based: If true the selection is feature based, if false it is scan based and the highest signals in each spectrum are chosen




.. py:method:: OfflinePrecursorIonSelection.setLPSolver
   :module: pyopenms.pyopenms_7


Cython signature: void setLPSolver(SOLVER solver)




.. py:method:: OfflinePrecursorIonSelection.setName
   :module: pyopenms.pyopenms_7


Cython signature: void setName(const String &)
Sets the name




.. py:method:: OfflinePrecursorIonSelection.setParameters
   :module: pyopenms.pyopenms_7


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: ParamValue
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _ParamValue


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ParamValue.html


 Class to hold strings, numeric values, vectors of strings and vectors of numeric values using the stl types
 -----
 - To choose one of these types, just use the appropriate constructor
 - Automatic conversion is supported and throws Exceptions in case of invalid conversions
 - An empty object is created with the default constructor




.. py:method:: ParamValue.isEmpty
   :module: pyopenms.pyopenms_7


Cython signature: int isEmpty()
Test if the value is empty




.. py:method:: ParamValue.toBool
   :module: pyopenms.pyopenms_7


Cython signature: bool toBool()
Converts the strings 'true' and 'false' to a bool




.. py:method:: ParamValue.toDouble
   :module: pyopenms.pyopenms_7




.. py:method:: ParamValue.toDoubleVector
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[double] toDoubleVector()
Explicitly convert ParamValue to DoubleList




.. py:method:: ParamValue.toInt
   :module: pyopenms.pyopenms_7




.. py:method:: ParamValue.toIntVector
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[int] toIntVector()
Explicitly convert ParamValue to IntList




.. py:method:: ParamValue.toString
   :module: pyopenms.pyopenms_7




.. py:method:: ParamValue.toStringVector
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[libcpp_utf8_string] toStringVector()
Explicitly convert ParamValue to string vector




.. py:method:: ParamValue.valueType
   :module: pyopenms.pyopenms_7


Cython signature: ValueType valueType()




.. py:class:: PeakShape
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _PeakShape


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1PeakShape.html


 Internal representation of a peak shape (used by the PeakPickerCWT)
 -----
 It defines an asymmetric Lorentzian and asymmetric hyperbolic squared secan function




.. py:attribute:: PeakShape.PeakShape_Type
   :module: pyopenms.pyopenms_7


alias of :py:class:`pyopenms.pyopenms_7.__PeakShape_Type`


.. py:attribute:: PeakShape.area
   :module: pyopenms.pyopenms_7




.. py:method:: PeakShape.getFWHM
   :module: pyopenms.pyopenms_7


Cython signature: double getFWHM()
Estimates the full width at half maximum




.. py:method:: PeakShape.getSymmetricMeasure
   :module: pyopenms.pyopenms_7


Cython signature: double getSymmetricMeasure()
Computes symmetry measure of the peak shape, which is corresponds to the ratio of the left and right width parameters




.. py:attribute:: PeakShape.height
   :module: pyopenms.pyopenms_7




.. py:method:: PeakShape.iteratorsSet
   :module: pyopenms.pyopenms_7


Cython signature: bool iteratorsSet()
Check if endpoint iterators are provided




.. py:attribute:: PeakShape.left_width
   :module: pyopenms.pyopenms_7




.. py:attribute:: PeakShape.mz_position
   :module: pyopenms.pyopenms_7




.. py:attribute:: PeakShape.r_value
   :module: pyopenms.pyopenms_7




.. py:attribute:: PeakShape.right_width
   :module: pyopenms.pyopenms_7




.. py:attribute:: PeakShape.signal_to_noise
   :module: pyopenms.pyopenms_7




.. py:attribute:: PeakShape.type
   :module: pyopenms.pyopenms_7




.. py:attribute:: PeakSpectrum
   :module: pyopenms.pyopenms_7


alias of :py:class:`pyopenms.pyopenms_7.MSSpectrum`


.. py:class:: PeakTypeEstimator
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _PeakTypeEstimator


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1PeakTypeEstimator.html


 Estimates if the data of a spectrum is raw data or peak data




.. py:method:: PeakTypeEstimator.estimateType
   :module: pyopenms.pyopenms_7




.. py:class:: Peptide
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _Peptide


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::TargetedExperimentHelper::RetentionTime::RTUnit_1_1Peptide.html
 -- Inherits from ['CVTermList']




.. py:method:: Peptide.addCVTerm
   :module: pyopenms.pyopenms_7


Cython signature: void addCVTerm(CVTerm & term)
Adds a CV term




.. py:method:: Peptide.clearMetaInfo
   :module: pyopenms.pyopenms_7


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: Peptide.consumeCVTerms
   :module: pyopenms.pyopenms_7


Cython signature: void consumeCVTerms(Map[String,libcpp_vector[CVTerm]] cv_term_map)
Merges the given map into the member map, no duplicate checking




.. py:method:: Peptide.empty
   :module: pyopenms.pyopenms_7


Cython signature: bool empty()




.. py:attribute:: Peptide.evidence
   :module: pyopenms.pyopenms_7




.. py:method:: Peptide.getCVTerms
   :module: pyopenms.pyopenms_7


Cython signature: Map[String,libcpp_vector[CVTerm]] getCVTerms()
Returns the accession string of the term




.. py:method:: Peptide.getChargeState
   :module: pyopenms.pyopenms_7


Cython signature: int getChargeState()
Returns the peptide or compound charge state




.. py:method:: Peptide.getKeys
   :module: pyopenms.pyopenms_7


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: Peptide.getMetaValue
   :module: pyopenms.pyopenms_7


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: Peptide.getPeptideGroupLabel
   :module: pyopenms.pyopenms_7


Cython signature: String getPeptideGroupLabel()
Get the peptide group label




.. py:method:: Peptide.getRetentionTime
   :module: pyopenms.pyopenms_7


Cython signature: double getRetentionTime()
Gets compound or peptide retention time




.. py:method:: Peptide.getRetentionTimeType
   :module: pyopenms.pyopenms_7


Cython signature: RTType getRetentionTimeType()
Get compound or peptide retentiontime type




.. py:method:: Peptide.getRetentionTimeUnit
   :module: pyopenms.pyopenms_7


Cython signature: RTUnit getRetentionTimeUnit()
Get compound or peptide retentiontime unit (minute/seconds)




.. py:method:: Peptide.hasCVTerm
   :module: pyopenms.pyopenms_7


Cython signature: bool hasCVTerm(String accession)




.. py:method:: Peptide.hasCharge
   :module: pyopenms.pyopenms_7


Cython signature: bool hasCharge()
Whether product has set charge state




.. py:method:: Peptide.hasRetentionTime
   :module: pyopenms.pyopenms_7


Cython signature: bool hasRetentionTime()
Gets compound or peptide retention time




.. py:attribute:: Peptide.id
   :module: pyopenms.pyopenms_7




.. py:method:: Peptide.isMetaEmpty
   :module: pyopenms.pyopenms_7


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: Peptide.metaRegistry
   :module: pyopenms.pyopenms_7


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: Peptide.metaValueExists
   :module: pyopenms.pyopenms_7


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:attribute:: Peptide.mods
   :module: pyopenms.pyopenms_7




.. py:attribute:: Peptide.protein_refs
   :module: pyopenms.pyopenms_7




.. py:method:: Peptide.removeMetaValue
   :module: pyopenms.pyopenms_7


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: Peptide.replaceCVTerm
   :module: pyopenms.pyopenms_7


Cython signature: void replaceCVTerm(CVTerm & term)
Replaces the specified CV term




.. py:method:: Peptide.replaceCVTerms
   :module: pyopenms.pyopenms_7


Cython signature: void replaceCVTerms(libcpp_vector[CVTerm] cv_terms, String accession)




.. py:attribute:: Peptide.rts
   :module: pyopenms.pyopenms_7




.. py:attribute:: Peptide.sequence
   :module: pyopenms.pyopenms_7




.. py:method:: Peptide.setCVTerms
   :module: pyopenms.pyopenms_7


Cython signature: void setCVTerms(libcpp_vector[CVTerm] & terms)
Sets the CV terms




.. py:method:: Peptide.setChargeState
   :module: pyopenms.pyopenms_7


Cython signature: void setChargeState(int charge)
Sets the peptide or compound charge states




.. py:method:: Peptide.setMetaValue
   :module: pyopenms.pyopenms_7


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:method:: Peptide.setPeptideGroupLabel
   :module: pyopenms.pyopenms_7


Cython signature: void setPeptideGroupLabel(String label)
Sets the peptide group label




.. py:class:: PercolatorOutfile
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _PercolatorOutfile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1PercolatorOutfile.html


 Class for reading Percolator tab-delimited output files
 -----
 For PSM-level output, the file extension should be ".psms"




.. py:attribute:: PercolatorOutfile.PercolatorOutfile_ScoreType
   :module: pyopenms.pyopenms_7


alias of :py:class:`pyopenms.pyopenms_7.__PercolatorOutfile_ScoreType`


.. py:method:: PercolatorOutfile.getScoreType
   :module: pyopenms.pyopenms_7


Cython signature: PercolatorOutfile_ScoreType getScoreType(String score_type_name)
Returns a score type given its name




.. py:method:: PercolatorOutfile.load
   :module: pyopenms.pyopenms_7


Cython signature: void load(const String & filename, ProteinIdentification & proteins, libcpp_vector[PeptideIdentification] & peptides, SpectrumMetaDataLookup & lookup, PercolatorOutfile_ScoreType output_score)
Loads a Percolator output file




.. py:class:: Prediction
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _Prediction


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::TargetedExperimentHelper::RetentionTime::RTUnit_1_1Prediction.html
 -- Inherits from ['CVTermList']




.. py:method:: Prediction.addCVTerm
   :module: pyopenms.pyopenms_7


Cython signature: void addCVTerm(CVTerm & term)
Adds a CV term




.. py:method:: Prediction.clearMetaInfo
   :module: pyopenms.pyopenms_7


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: Prediction.consumeCVTerms
   :module: pyopenms.pyopenms_7


Cython signature: void consumeCVTerms(Map[String,libcpp_vector[CVTerm]] cv_term_map)
Merges the given map into the member map, no duplicate checking




.. py:attribute:: Prediction.contact_ref
   :module: pyopenms.pyopenms_7




.. py:method:: Prediction.empty
   :module: pyopenms.pyopenms_7


Cython signature: bool empty()




.. py:method:: Prediction.getCVTerms
   :module: pyopenms.pyopenms_7


Cython signature: Map[String,libcpp_vector[CVTerm]] getCVTerms()
Returns the accession string of the term




.. py:method:: Prediction.getKeys
   :module: pyopenms.pyopenms_7


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: Prediction.getMetaValue
   :module: pyopenms.pyopenms_7


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: Prediction.hasCVTerm
   :module: pyopenms.pyopenms_7


Cython signature: bool hasCVTerm(String accession)




.. py:method:: Prediction.isMetaEmpty
   :module: pyopenms.pyopenms_7


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: Prediction.metaRegistry
   :module: pyopenms.pyopenms_7


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: Prediction.metaValueExists
   :module: pyopenms.pyopenms_7


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: Prediction.removeMetaValue
   :module: pyopenms.pyopenms_7


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: Prediction.replaceCVTerm
   :module: pyopenms.pyopenms_7


Cython signature: void replaceCVTerm(CVTerm & term)
Replaces the specified CV term




.. py:method:: Prediction.replaceCVTerms
   :module: pyopenms.pyopenms_7


Cython signature: void replaceCVTerms(libcpp_vector[CVTerm] cv_terms, String accession)




.. py:method:: Prediction.setCVTerms
   :module: pyopenms.pyopenms_7


Cython signature: void setCVTerms(libcpp_vector[CVTerm] & terms)
Sets the CV terms




.. py:method:: Prediction.setMetaValue
   :module: pyopenms.pyopenms_7


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:attribute:: Prediction.software_ref
   :module: pyopenms.pyopenms_7




.. py:class:: ProtXMLFile
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _ProtXMLFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ProtXMLFile.html


 Used to load (storing not supported, yet) ProtXML files
 -----
 This class is used to load (storing not supported, yet) documents that implement
 the schema of ProtXML files




.. py:method:: ProtXMLFile.load
   :module: pyopenms.pyopenms_7


Cython signature: void load(String filename, ProteinIdentification & protein_ids, PeptideIdentification & peptide_ids)


Loads the identifications of an ProtXML file without identifier
-----
The information is read in and the information is stored in the
corresponding variables
-----
:raises:
  Exception: FileNotFound is thrown if the file could not be found
:raises:
  Exception: ParseError is thrown if an error occurs during parsing




.. py:method:: ProtXMLFile.store
   :module: pyopenms.pyopenms_7


Cython signature: void store(String filename, ProteinIdentification & protein_ids, PeptideIdentification & peptide_ids, String document_id)




.. py:class:: ProteaseDigestion
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _ProteaseDigestion


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ProteaseDigestion.html
 -- Inherits from ['EnzymaticDigestion']


   Class for the enzymatic digestion of proteins
   -----
   Digestion can be performed using simple regular expressions, e.g. [KR] | [^P] for trypsin.
   Also missed cleavages can be modeled, i.e. adjacent peptides are not cleaved
   due to enzyme malfunction/access restrictions. If n missed cleavages are allowed, all possible resulting
   peptides (cleaved and uncleaved) with up to n missed cleavages are returned.
   Thus no random selection of just n specific missed cleavage sites is performed.
   -----
   Usage:
       from pyopenms import *
       from urllib.request import urlretrieve
       #
       urlretrieve ("http://www.uniprot.org/uniprot/P02769.fasta", "bsa.fasta")
       #
       dig = ProteaseDigestion()
       dig.setEnzyme('Lys-C')
       bsa_string = "".join([l.strip() for l in open("bsa.fasta").readlines()[1:]])
       bsa_oms_string = String(bsa_string) # convert python string to OpenMS::String for further processing
       #
       minlen = 6
       maxlen = 30
       #
       # Using AASequence and digest
       result_digest = []
       result_digest_min_max = []
       bsa_aaseq = AASequence.fromString(bsa_oms_string)
       dig.digest(bsa_aaseq, result_digest)
       dig.digest(bsa_aaseq, result_digest_min_max, minlen, maxlen)
       print(result_digest[4].toString()) # GLVLIAFSQYLQQCPFDEHVK
       print(len(result_digest)) # 57 peptides
       print(result_digest_min_max[4].toString()) # LVNELTEFAK
       print(len(result_digest_min_max)) # 42 peptides
       #
       # Using digestUnmodified without the need for AASequence from the EnzymaticDigestion base class
       result_digest_unmodified = []
       dig.digestUnmodified(StringView(bsa_oms_string), result_digest_unmodified, minlen, maxlen)
       print(result_digest_unmodified[4].getString()) # LVNELTEFAK
       print(len(result_digest_unmodified)) # 42 peptides




.. py:method:: ProteaseDigestion.digest
   :module: pyopenms.pyopenms_7


       - Cython signature: size_t digest(AASequence & protein, libcpp_vector[AASequence] & output)
       - Cython signature: size_t digest(AASequence & protein, libcpp_vector[AASequence] & output, size_t min_length, size_t max_length)


Performs the enzymatic digestion of a protein.
-----
:param protein: Sequence to digest
:param output: Digestion products (peptides)
:param min_length: Minimal length of reported products
:param max_length: Maximal length of reported products (0 = no restriction)
:returns: Number of discarded digestion products (which are not matching length restrictions)




.. py:method:: ProteaseDigestion.digestUnmodified
   :module: pyopenms.pyopenms_7


Cython signature: size_t digestUnmodified(StringView sequence, libcpp_vector[StringView] & output, size_t min_length, size_t max_length)


Performs the enzymatic digestion of an unmodified sequence
-----
By returning only references into the original string this is very fast
-----
:param sequence: Sequence to digest
:param output: Digestion products
:param min_length: Minimal length of reported products
:param max_length: Maximal length of reported products (0 = no restriction)
:returns: Number of discarded digestion products (which are not matching length restrictions)




.. py:method:: ProteaseDigestion.getEnzymeName
   :module: pyopenms.pyopenms_7


Cython signature: String getEnzymeName()
Returns the enzyme for the digestion




.. py:method:: ProteaseDigestion.getMissedCleavages
   :module: pyopenms.pyopenms_7


Cython signature: size_t getMissedCleavages()
Returns the number of missed cleavages for the digestion




.. py:method:: ProteaseDigestion.getSpecificity
   :module: pyopenms.pyopenms_7


Cython signature: Specificity getSpecificity()
Returns the specificity for the digestion




.. py:method:: ProteaseDigestion.getSpecificityByName
   :module: pyopenms.pyopenms_7


Cython signature: Specificity getSpecificityByName(String name)
Returns the specificity by name. Returns SPEC_UNKNOWN if name is not valid




.. py:method:: ProteaseDigestion.isValidProduct
   :module: pyopenms.pyopenms_7


         - Cython signature: bool isValidProduct(AASequence protein, size_t pep_pos, size_t pep_length, bool ignore_missed_cleavages, bool methionine_cleavage)


  Variant of EnzymaticDigestion::isValidProduct() with support for n-term protein cleavage and random D|P cleavage
  -----
  Checks if peptide is a valid digestion product of the enzyme, taking into account specificity and the flags provided here
  -----
  :param protein: Protein sequence
  :param pep_pos: Starting index of potential peptide
  :param pep_length: Length of potential peptide
  :param ignore_missed_cleavages: Do not compare MC's of potential peptide to the maximum allowed MC's
  :param allow_nterm_protein_cleavage: Regard peptide as n-terminal of protein if it starts only at pos=1 or 2 and protein starts with 'M'
  :param allow_random_asp_pro_cleavage: Allow cleavage at D|P sites to count as n/c-terminal
  :returns: True if peptide has correct n/c terminals (according to enzyme, specificity and above flags)
         - Cython signature: bool isValidProduct(String protein, size_t pep_pos, size_t pep_length, bool ignore_missed_cleavages, bool methionine_cleavage)
           Forwards to isValidProduct using protein.toUnmodifiedString()


         - Cython signature: bool isValidProduct(String sequence, int pos, int length, bool ignore_missed_cleavages)


Boolean operator returns true if the peptide fragment starting at position `pos` with length `length` within the sequence `sequence` generated by the current enzyme
-----
Checks if peptide is a valid digestion product of the enzyme, taking into account specificity and the MC flag provided here
-----
:param protein: Protein sequence
:param pep_pos: Starting index of potential peptide
:param pep_length: Length of potential peptide
:param ignore_missed_cleavages: Do not compare MC's of potential peptide to the maximum allowed MC's
:returns: True if peptide has correct n/c terminals (according to enzyme, specificity and missed cleavages)




.. py:method:: ProteaseDigestion.peptideCount
   :module: pyopenms.pyopenms_7


Cython signature: size_t peptideCount(AASequence & protein)
Returns the number of peptides a digestion of protein would yield under the current enzyme and missed cleavage settings




.. py:method:: ProteaseDigestion.setEnzyme
   :module: pyopenms.pyopenms_7


- Cython signature: void setEnzyme(String name)
  Sets the enzyme for the digestion (by name)


- Cython signature: void setEnzyme(DigestionEnzyme * enzyme)
  Sets the enzyme for the digestion




.. py:method:: ProteaseDigestion.setMissedCleavages
   :module: pyopenms.pyopenms_7


Cython signature: void setMissedCleavages(size_t missed_cleavages)
Sets the number of missed cleavages for the digestion (default is 0). This setting is ignored when log model is used




.. py:method:: ProteaseDigestion.setSpecificity
   :module: pyopenms.pyopenms_7


Cython signature: void setSpecificity(Specificity spec)
Sets the specificity for the digestion (default is SPEC_FULL)




.. py:class:: Protein
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _Protein


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::TargetedExperimentHelper::RetentionTime::RTUnit_1_1Protein.html
 -- Inherits from ['CVTermList']




.. py:method:: Protein.addCVTerm
   :module: pyopenms.pyopenms_7


Cython signature: void addCVTerm(CVTerm & term)
Adds a CV term




.. py:method:: Protein.clearMetaInfo
   :module: pyopenms.pyopenms_7


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: Protein.consumeCVTerms
   :module: pyopenms.pyopenms_7


Cython signature: void consumeCVTerms(Map[String,libcpp_vector[CVTerm]] cv_term_map)
Merges the given map into the member map, no duplicate checking




.. py:method:: Protein.empty
   :module: pyopenms.pyopenms_7


Cython signature: bool empty()




.. py:method:: Protein.getCVTerms
   :module: pyopenms.pyopenms_7


Cython signature: Map[String,libcpp_vector[CVTerm]] getCVTerms()
Returns the accession string of the term




.. py:method:: Protein.getKeys
   :module: pyopenms.pyopenms_7


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: Protein.getMetaValue
   :module: pyopenms.pyopenms_7


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: Protein.hasCVTerm
   :module: pyopenms.pyopenms_7


Cython signature: bool hasCVTerm(String accession)




.. py:attribute:: Protein.id
   :module: pyopenms.pyopenms_7




.. py:method:: Protein.isMetaEmpty
   :module: pyopenms.pyopenms_7


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: Protein.metaRegistry
   :module: pyopenms.pyopenms_7


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: Protein.metaValueExists
   :module: pyopenms.pyopenms_7


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: Protein.removeMetaValue
   :module: pyopenms.pyopenms_7


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: Protein.replaceCVTerm
   :module: pyopenms.pyopenms_7


Cython signature: void replaceCVTerm(CVTerm & term)
Replaces the specified CV term




.. py:method:: Protein.replaceCVTerms
   :module: pyopenms.pyopenms_7


Cython signature: void replaceCVTerms(libcpp_vector[CVTerm] cv_terms, String accession)




.. py:attribute:: Protein.sequence
   :module: pyopenms.pyopenms_7




.. py:method:: Protein.setCVTerms
   :module: pyopenms.pyopenms_7


Cython signature: void setCVTerms(libcpp_vector[CVTerm] & terms)
Sets the CV terms




.. py:method:: Protein.setMetaValue
   :module: pyopenms.pyopenms_7


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:class:: Publication
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _Publication


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::TargetedExperimentHelper::RetentionTime::RTUnit_1_1Publication.html
 -- Inherits from ['CVTermList']




.. py:method:: Publication.addCVTerm
   :module: pyopenms.pyopenms_7


Cython signature: void addCVTerm(CVTerm & term)
Adds a CV term




.. py:method:: Publication.clearMetaInfo
   :module: pyopenms.pyopenms_7


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: Publication.consumeCVTerms
   :module: pyopenms.pyopenms_7


Cython signature: void consumeCVTerms(Map[String,libcpp_vector[CVTerm]] cv_term_map)
Merges the given map into the member map, no duplicate checking




.. py:method:: Publication.empty
   :module: pyopenms.pyopenms_7


Cython signature: bool empty()




.. py:method:: Publication.getCVTerms
   :module: pyopenms.pyopenms_7


Cython signature: Map[String,libcpp_vector[CVTerm]] getCVTerms()
Returns the accession string of the term




.. py:method:: Publication.getKeys
   :module: pyopenms.pyopenms_7


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: Publication.getMetaValue
   :module: pyopenms.pyopenms_7


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: Publication.hasCVTerm
   :module: pyopenms.pyopenms_7


Cython signature: bool hasCVTerm(String accession)




.. py:attribute:: Publication.id
   :module: pyopenms.pyopenms_7




.. py:method:: Publication.isMetaEmpty
   :module: pyopenms.pyopenms_7


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: Publication.metaRegistry
   :module: pyopenms.pyopenms_7


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: Publication.metaValueExists
   :module: pyopenms.pyopenms_7


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: Publication.removeMetaValue
   :module: pyopenms.pyopenms_7


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: Publication.replaceCVTerm
   :module: pyopenms.pyopenms_7


Cython signature: void replaceCVTerm(CVTerm & term)
Replaces the specified CV term




.. py:method:: Publication.replaceCVTerms
   :module: pyopenms.pyopenms_7


Cython signature: void replaceCVTerms(libcpp_vector[CVTerm] cv_terms, String accession)




.. py:method:: Publication.setCVTerms
   :module: pyopenms.pyopenms_7


Cython signature: void setCVTerms(libcpp_vector[CVTerm] & terms)
Sets the CV terms




.. py:method:: Publication.setMetaValue
   :module: pyopenms.pyopenms_7


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:class:: QuantitativeExperimentalDesign
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _QuantitativeExperimentalDesign


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1QuantitativeExperimentalDesign.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: QuantitativeExperimentalDesign.applyDesign2Resolver
   :module: pyopenms.pyopenms_7


Cython signature: void applyDesign2Resolver(ProteinResolver & resolver, TextFile & file_, StringList & fileNames)




.. py:method:: QuantitativeExperimentalDesign.getDefaults
   :module: pyopenms.pyopenms_7


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: QuantitativeExperimentalDesign.getName
   :module: pyopenms.pyopenms_7


Cython signature: String getName()
Returns the name




.. py:method:: QuantitativeExperimentalDesign.getParameters
   :module: pyopenms.pyopenms_7


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: QuantitativeExperimentalDesign.getSubsections
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: QuantitativeExperimentalDesign.setName
   :module: pyopenms.pyopenms_7


Cython signature: void setName(const String &)
Sets the name




.. py:method:: QuantitativeExperimentalDesign.setParameters
   :module: pyopenms.pyopenms_7


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: RansacModelLinear
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _RansacModelLinear


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::Math_1_1RansacModelLinear.html




.. py:class:: RetentionTime
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _RetentionTime


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::TargetedExperimentHelper::RetentionTime::RTUnit_1_1RetentionTime.html
 -- Inherits from ['CVTermList']




.. py:attribute:: RetentionTime.RTType
   :module: pyopenms.pyopenms_7


alias of :py:class:`pyopenms.pyopenms_7.__RTType`


.. py:attribute:: RetentionTime.RTUnit
   :module: pyopenms.pyopenms_7


alias of :py:class:`pyopenms.pyopenms_7.__RTUnit`


.. py:method:: RetentionTime.addCVTerm
   :module: pyopenms.pyopenms_7


Cython signature: void addCVTerm(CVTerm & term)
Adds a CV term




.. py:method:: RetentionTime.clearMetaInfo
   :module: pyopenms.pyopenms_7


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: RetentionTime.consumeCVTerms
   :module: pyopenms.pyopenms_7


Cython signature: void consumeCVTerms(Map[String,libcpp_vector[CVTerm]] cv_term_map)
Merges the given map into the member map, no duplicate checking




.. py:method:: RetentionTime.empty
   :module: pyopenms.pyopenms_7


Cython signature: bool empty()




.. py:method:: RetentionTime.getCVTerms
   :module: pyopenms.pyopenms_7


Cython signature: Map[String,libcpp_vector[CVTerm]] getCVTerms()
Returns the accession string of the term




.. py:method:: RetentionTime.getKeys
   :module: pyopenms.pyopenms_7


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: RetentionTime.getMetaValue
   :module: pyopenms.pyopenms_7


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: RetentionTime.getRT
   :module: pyopenms.pyopenms_7


Cython signature: double getRT()




.. py:method:: RetentionTime.hasCVTerm
   :module: pyopenms.pyopenms_7


Cython signature: bool hasCVTerm(String accession)




.. py:method:: RetentionTime.isMetaEmpty
   :module: pyopenms.pyopenms_7


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: RetentionTime.isRTset
   :module: pyopenms.pyopenms_7


Cython signature: bool isRTset()




.. py:method:: RetentionTime.metaRegistry
   :module: pyopenms.pyopenms_7


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: RetentionTime.metaValueExists
   :module: pyopenms.pyopenms_7


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: RetentionTime.removeMetaValue
   :module: pyopenms.pyopenms_7


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: RetentionTime.replaceCVTerm
   :module: pyopenms.pyopenms_7


Cython signature: void replaceCVTerm(CVTerm & term)
Replaces the specified CV term




.. py:method:: RetentionTime.replaceCVTerms
   :module: pyopenms.pyopenms_7


Cython signature: void replaceCVTerms(libcpp_vector[CVTerm] cv_terms, String accession)




.. py:attribute:: RetentionTime.retention_time_type
   :module: pyopenms.pyopenms_7




.. py:attribute:: RetentionTime.retention_time_unit
   :module: pyopenms.pyopenms_7




.. py:method:: RetentionTime.setCVTerms
   :module: pyopenms.pyopenms_7


Cython signature: void setCVTerms(libcpp_vector[CVTerm] & terms)
Sets the CV terms




.. py:method:: RetentionTime.setMetaValue
   :module: pyopenms.pyopenms_7


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:method:: RetentionTime.setRT
   :module: pyopenms.pyopenms_7


Cython signature: void setRT(double rt)




.. py:attribute:: RetentionTime.software_ref
   :module: pyopenms.pyopenms_7




.. py:class:: SequestInfile
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _SequestInfile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SequestInfile.html




.. py:method:: SequestInfile.addEnzymeInfo
   :module: pyopenms.pyopenms_7


Cython signature: void addEnzymeInfo(libcpp_vector[String] & enzyme_info)
Adds an enzyme to the list and sets is as used




.. py:method:: SequestInfile.getDatabase
   :module: pyopenms.pyopenms_7


Cython signature: String getDatabase()
Returns the used database




.. py:method:: SequestInfile.getEnzymeInfoAsString
   :module: pyopenms.pyopenms_7


Cython signature: String getEnzymeInfoAsString()
Returns the enzyme list as a string




.. py:method:: SequestInfile.getEnzymeName
   :module: pyopenms.pyopenms_7


Cython signature: String getEnzymeName()
Returns the enzyme used for cleavage




.. py:method:: SequestInfile.getEnzymeNumber
   :module: pyopenms.pyopenms_7


Cython signature: size_t getEnzymeNumber()
Returns the enzyme used for cleavage (by means of the number from a list of enzymes)




.. py:method:: SequestInfile.getIonCutoffPercentage
   :module: pyopenms.pyopenms_7


Cython signature: float getIonCutoffPercentage()
Returns the the cutoff of the ratio matching theoretical peaks/theoretical peaks




.. py:method:: SequestInfile.getIonSeriesWeights
   :module: pyopenms.pyopenms_7


Cython signature: String getIonSeriesWeights()
Returns the weights for the a-, b-, c-, d-, v-, w-, x-, y- and z-ion series




.. py:method:: SequestInfile.getMassTypeFragment
   :module: pyopenms.pyopenms_7


Cython signature: bool getMassTypeFragment()
Returns the mass type of the fragments (0 - monoisotopic, 1 - average mass)




.. py:method:: SequestInfile.getMassTypeParent
   :module: pyopenms.pyopenms_7


Cython signature: bool getMassTypeParent()
Returns the mass type of the parent (0 - monoisotopic, 1 - average mass)




.. py:method:: SequestInfile.getMatchPeakAllowedError
   :module: pyopenms.pyopenms_7


Cython signature: size_t getMatchPeakAllowedError()
Returns the number of top abundant peaks that are allowed not to match with a theoretical peak




.. py:method:: SequestInfile.getMatchPeakCount
   :module: pyopenms.pyopenms_7


Cython signature: size_t getMatchPeakCount()
Returns the number of top abundant peaks to match with theoretical ones




.. py:method:: SequestInfile.getMatchPeakTolerance
   :module: pyopenms.pyopenms_7


Cython signature: float getMatchPeakTolerance()
Returns the match peak tolerance




.. py:method:: SequestInfile.getMaxAAPerModPerPeptide
   :module: pyopenms.pyopenms_7


Cython signature: size_t getMaxAAPerModPerPeptide()
Returns the maximum number of amino acids containing the same modification in a peptide




.. py:method:: SequestInfile.getMaxInternalCleavageSites
   :module: pyopenms.pyopenms_7


Cython signature: size_t getMaxInternalCleavageSites()
Returns the maximum number of internal cleavage sites




.. py:method:: SequestInfile.getMaxModsPerPeptide
   :module: pyopenms.pyopenms_7


Cython signature: size_t getMaxModsPerPeptide()
Returns the maximum number of modifications that are allowed in a peptide




.. py:method:: SequestInfile.getModifications
   :module: pyopenms.pyopenms_7




.. py:method:: SequestInfile.getNeutralLossesForIons
   :module: pyopenms.pyopenms_7


Cython signature: String getNeutralLossesForIons()
Returns whether neutral losses are considered for the a-, b- and y-ions




.. py:method:: SequestInfile.getNormalizeXcorr
   :module: pyopenms.pyopenms_7


Cython signature: bool getNormalizeXcorr()
Returns whether normalized xcorr values are displayed




.. py:method:: SequestInfile.getNucleotideReadingFrame
   :module: pyopenms.pyopenms_7


Cython signature: size_t getNucleotideReadingFrame()
Returns the nucleotide reading frame




.. py:method:: SequestInfile.getOutputLines
   :module: pyopenms.pyopenms_7


Cython signature: size_t getOutputLines()
Returns the number of peptides to be displayed




.. py:method:: SequestInfile.getPartialSequence
   :module: pyopenms.pyopenms_7


Cython signature: String getPartialSequence()
Returns the partial sequences (space delimited) that have to occur in the theoretical spectra




.. py:method:: SequestInfile.getPeakMassTolerance
   :module: pyopenms.pyopenms_7


Cython signature: float getPeakMassTolerance()
Returns the peak mass tolerance




.. py:method:: SequestInfile.getPeptideMassUnit
   :module: pyopenms.pyopenms_7


Cython signature: size_t getPeptideMassUnit()
Returns the peptide mass unit




.. py:method:: SequestInfile.getPrecursorMassTolerance
   :module: pyopenms.pyopenms_7


Cython signature: float getPrecursorMassTolerance()
Returns the precursor mass tolerance




.. py:method:: SequestInfile.getPrintDuplicateReferences
   :module: pyopenms.pyopenms_7


Cython signature: bool getPrintDuplicateReferences()
Returns whether all proteins containing a found peptide should be displayed




.. py:method:: SequestInfile.getProteinMassFilter
   :module: pyopenms.pyopenms_7


Cython signature: String getProteinMassFilter()
Returns the protein mass filter (either min and max mass, or mass and tolerance value in percent)




.. py:method:: SequestInfile.getRemovePrecursorNearPeaks
   :module: pyopenms.pyopenms_7


Cython signature: bool getRemovePrecursorNearPeaks()
Returns whether peaks near (15 amu) the precursor peak are removed




.. py:method:: SequestInfile.getResiduesInUpperCase
   :module: pyopenms.pyopenms_7


Cython signature: bool getResiduesInUpperCase()
Returns whether residues are in upper case




.. py:method:: SequestInfile.getSequenceHeaderFilter
   :module: pyopenms.pyopenms_7


Cython signature: String getSequenceHeaderFilter()
Returns the sequences (space delimited) that have to occur, or be absent (preceded by a tilde) in the header of a protein to be considered




.. py:method:: SequestInfile.getShowFragmentIons
   :module: pyopenms.pyopenms_7


Cython signature: bool getShowFragmentIons()
Returns whether fragment ions shall be displayed




.. py:method:: SequestInfile.handlePTMs
   :module: pyopenms.pyopenms_7


Cython signature: void handlePTMs(const String & modification_line, const String & modifications_filename, bool monoisotopic)




.. py:method:: SequestInfile.setDatabase
   :module: pyopenms.pyopenms_7


Cython signature: void setDatabase(const String & database)
Sets the used database




.. py:method:: SequestInfile.setEnzyme
   :module: pyopenms.pyopenms_7


Cython signature: size_t setEnzyme(String enzyme_name)
Sets the enzyme used for cleavage (by means of the number from a list of enzymes)




.. py:method:: SequestInfile.setIonCutoffPercentage
   :module: pyopenms.pyopenms_7


Cython signature: void setIonCutoffPercentage(float ion_cutoff_percentage)
Sets the ion cutoff of the ratio matching theoretical peaks/theoretical peaks




.. py:method:: SequestInfile.setIonSeriesWeights
   :module: pyopenms.pyopenms_7


Cython signature: void setIonSeriesWeights(const String & ion_series_weights)
Sets the weights for the a-, b-, c-, d-, v-, w-, x-, y- and z-ion series




.. py:method:: SequestInfile.setMassTypeFragment
   :module: pyopenms.pyopenms_7


Cython signature: void setMassTypeFragment(bool mass_type_fragment)
Sets the mass type of the fragments (0 - monoisotopic, 1 - average mass)




.. py:method:: SequestInfile.setMassTypeParent
   :module: pyopenms.pyopenms_7


Cython signature: void setMassTypeParent(bool mass_type_parent)
Sets the mass type of the parent (0 - monoisotopic, 1 - average mass)




.. py:method:: SequestInfile.setMatchPeakAllowedError
   :module: pyopenms.pyopenms_7


Cython signature: void setMatchPeakAllowedError(size_t match_peak_allowed_error)
Sets the number of top abundant peaks that are allowed not to match with a theoretical peak




.. py:method:: SequestInfile.setMatchPeakCount
   :module: pyopenms.pyopenms_7


Cython signature: void setMatchPeakCount(size_t match_peak_count)
Sets the number of top abundant peaks to with theoretical ones




.. py:method:: SequestInfile.setMatchPeakTolerance
   :module: pyopenms.pyopenms_7


Cython signature: void setMatchPeakTolerance(float match_peak_tolerance)
Sets the match peak tolerance




.. py:method:: SequestInfile.setMaxAAPerModPerPeptide
   :module: pyopenms.pyopenms_7


Cython signature: void setMaxAAPerModPerPeptide(size_t max_aa_per_mod_per_peptide)
Sets the maximum number of amino acids containing the same modification in a peptide




.. py:method:: SequestInfile.setMaxInternalCleavageSites
   :module: pyopenms.pyopenms_7


Cython signature: void setMaxInternalCleavageSites(size_t max_internal_cleavage_sites)
Sets the maximum number of internal cleavage sites




.. py:method:: SequestInfile.setMaxModsPerPeptide
   :module: pyopenms.pyopenms_7


Cython signature: void setMaxModsPerPeptide(size_t max_mods_per_peptide)
Sets the maximum number of modifications that are allowed in a peptide




.. py:method:: SequestInfile.setNeutralLossesForIons
   :module: pyopenms.pyopenms_7


Cython signature: void setNeutralLossesForIons(const String & neutral_losses_for_ions)
Sets whether neutral losses are considered for the a-, b- and y-ions




.. py:method:: SequestInfile.setNormalizeXcorr
   :module: pyopenms.pyopenms_7


Cython signature: void setNormalizeXcorr(bool normalize_xcorr)
Sets whether normalized xcorr values are displayed




.. py:method:: SequestInfile.setNucleotideReadingFrame
   :module: pyopenms.pyopenms_7


Cython signature: void setNucleotideReadingFrame(size_t nucleotide_reading_frame)
Sets the nucleotide reading frame




.. py:method:: SequestInfile.setOutputLines
   :module: pyopenms.pyopenms_7


Cython signature: void setOutputLines(size_t output_lines)
Sets the number of peptides to be displayed




.. py:method:: SequestInfile.setPartialSequence
   :module: pyopenms.pyopenms_7


Cython signature: void setPartialSequence(const String & partial_sequence)
Sets the partial sequences (space delimited) that have to occur in the theoretical spectra




.. py:method:: SequestInfile.setPeakMassTolerance
   :module: pyopenms.pyopenms_7


Cython signature: void setPeakMassTolerance(float peak_mass_tolerance)
Sets the peak mass tolerance




.. py:method:: SequestInfile.setPeptideMassUnit
   :module: pyopenms.pyopenms_7


Cython signature: void setPeptideMassUnit(size_t peptide_mass_unit)
Sets the peptide mass unit




.. py:method:: SequestInfile.setPrecursorMassTolerance
   :module: pyopenms.pyopenms_7


Cython signature: void setPrecursorMassTolerance(float precursor_mass_tolerance)
Sets the precursor mass tolerance




.. py:method:: SequestInfile.setPrintDuplicateReferences
   :module: pyopenms.pyopenms_7


Cython signature: void setPrintDuplicateReferences(bool print_duplicate_references)
Sets whether all proteins containing a found peptide should be displayed




.. py:method:: SequestInfile.setProteinMassFilter
   :module: pyopenms.pyopenms_7


Cython signature: void setProteinMassFilter(const String & protein_mass_filter)
Sets the protein mass filter (either min and max mass, or mass and tolerance value in percent)




.. py:method:: SequestInfile.setRemovePrecursorNearPeaks
   :module: pyopenms.pyopenms_7


Cython signature: void setRemovePrecursorNearPeaks(bool remove_precursor_near_peaks)
Sets whether peaks near (15 amu) the precursor peak are removed




.. py:method:: SequestInfile.setResiduesInUpperCase
   :module: pyopenms.pyopenms_7


Cython signature: void setResiduesInUpperCase(bool residues_in_upper_case)
Sets whether residues are in upper case




.. py:method:: SequestInfile.setSequenceHeaderFilter
   :module: pyopenms.pyopenms_7


Cython signature: void setSequenceHeaderFilter(const String & sequence_header_filter)
Sets the sequences (space delimited) that have to occur, or be absent (preceded by a tilde) in the header of a protein to be considered




.. py:method:: SequestInfile.setShowFragmentIons
   :module: pyopenms.pyopenms_7


Cython signature: void setShowFragmentIons(bool show_fragments)
Sets whether fragment ions shall be displayed




.. py:method:: SequestInfile.store
   :module: pyopenms.pyopenms_7


Cython signature: void store(const String & filename)


Stores the experiment data in a Sequest input file that can be used as input for Sequest shell execution
-----
:param filename: the name of the file in which the infile is stored into




.. py:class:: SignalToNoiseEstimatorMedianRapid
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _SignalToNoiseEstimatorMedianRapid


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SignalToNoiseEstimatorMedianRapid.html




.. py:method:: SignalToNoiseEstimatorMedianRapid.estimateNoise
   :module: pyopenms.pyopenms_7


- Cython signature: NoiseEstimator estimateNoise(shared_ptr[_Interfaces_Spectrum])
- Cython signature: NoiseEstimator estimateNoise(shared_ptr[_Interfaces_Chromatogram])
- Cython signature: NoiseEstimator estimateNoise(libcpp_vector[double] mz_array, libcpp_vector[double] int_array)




.. py:class:: SimplePairFinder
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _SimplePairFinder


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SimplePairFinder.html
 -- Inherits from ['BaseGroupFinder']




.. py:method:: SimplePairFinder.endProgress
   :module: pyopenms.pyopenms_7


Cython signature: void endProgress()
Ends the progress display




.. py:method:: SimplePairFinder.getDefaults
   :module: pyopenms.pyopenms_7


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: SimplePairFinder.getLogType
   :module: pyopenms.pyopenms_7


Cython signature: LogType getLogType()
Returns the type of progress log being used




.. py:method:: SimplePairFinder.getName
   :module: pyopenms.pyopenms_7


Cython signature: String getName()
Returns the name




.. py:method:: SimplePairFinder.getParameters
   :module: pyopenms.pyopenms_7


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: SimplePairFinder.getProductName
   :module: pyopenms.pyopenms_7


Cython signature: String getProductName()
Returns the name of this module




.. py:method:: SimplePairFinder.getSubsections
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: SimplePairFinder.nextProgress
   :module: pyopenms.pyopenms_7


Cython signature: void nextProgress()
Increment progress by 1 (according to range begin-end)




.. py:method:: SimplePairFinder.registerChildren
   :module: pyopenms.pyopenms_7


Cython signature: void registerChildren()
Register all derived classes here




.. py:method:: SimplePairFinder.run
   :module: pyopenms.pyopenms_7


Cython signature: void run(libcpp_vector[ConsensusMap] & input_maps, ConsensusMap & result_map)




.. py:method:: SimplePairFinder.setLogType
   :module: pyopenms.pyopenms_7


Cython signature: void setLogType(LogType)
Sets the progress log that should be used. The default type is NONE!




.. py:method:: SimplePairFinder.setName
   :module: pyopenms.pyopenms_7


Cython signature: void setName(const String &)
Sets the name




.. py:method:: SimplePairFinder.setParameters
   :module: pyopenms.pyopenms_7


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: SimplePairFinder.setProgress
   :module: pyopenms.pyopenms_7


Cython signature: void setProgress(ptrdiff_t value)
Sets the current progress




.. py:method:: SimplePairFinder.startProgress
   :module: pyopenms.pyopenms_7


Cython signature: void startProgress(ptrdiff_t begin, ptrdiff_t end, String label)




.. py:class:: SiriusAdapterHit
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _SiriusAdapterHit


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::SiriusMzTabWriter_1_1SiriusAdapterHit.html




.. py:attribute:: SiriusAdapterHit.adduct
   :module: pyopenms.pyopenms_7




.. py:attribute:: SiriusAdapterHit.explainedintensity
   :module: pyopenms.pyopenms_7




.. py:attribute:: SiriusAdapterHit.explainedpeaks
   :module: pyopenms.pyopenms_7




.. py:attribute:: SiriusAdapterHit.formula
   :module: pyopenms.pyopenms_7




.. py:attribute:: SiriusAdapterHit.iso_score
   :module: pyopenms.pyopenms_7




.. py:attribute:: SiriusAdapterHit.mass_error_precursor_ppm
   :module: pyopenms.pyopenms_7




.. py:attribute:: SiriusAdapterHit.median_absolute_mass_error_fragment_peaks_ppm
   :module: pyopenms.pyopenms_7




.. py:attribute:: SiriusAdapterHit.median_mass_error_fragment_peaks_ppm
   :module: pyopenms.pyopenms_7




.. py:attribute:: SiriusAdapterHit.precursor_formula
   :module: pyopenms.pyopenms_7




.. py:attribute:: SiriusAdapterHit.rank
   :module: pyopenms.pyopenms_7




.. py:attribute:: SiriusAdapterHit.sirius_score
   :module: pyopenms.pyopenms_7




.. py:attribute:: SiriusAdapterHit.tree_score
   :module: pyopenms.pyopenms_7




.. py:class:: SiriusAdapterRun
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _SiriusAdapterRun


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::SiriusMzTabWriter_1_1SiriusAdapterRun.html




.. py:attribute:: SiriusAdapterRun.identifications
   :module: pyopenms.pyopenms_7




.. py:class:: SpectrumAccessOpenMS
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _SpectrumAccessOpenMS


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SpectrumAccessOpenMS.html
 -- Inherits from ['ISpectrumAccess']




.. py:method:: SpectrumAccessOpenMS.getChromatogramById
   :module: pyopenms.pyopenms_7


Cython signature: shared_ptr[OSChromatogram] getChromatogramById(int id_)
Returns a pointer to a chromatogram at the given id




.. py:method:: SpectrumAccessOpenMS.getChromatogramNativeID
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_utf8_output_string getChromatogramNativeID(int id_)




.. py:method:: SpectrumAccessOpenMS.getNrChromatograms
   :module: pyopenms.pyopenms_7


Cython signature: size_t getNrChromatograms()
Returns the number of chromatograms available




.. py:method:: SpectrumAccessOpenMS.getNrSpectra
   :module: pyopenms.pyopenms_7


Cython signature: size_t getNrSpectra()
Returns the number of spectra available




.. py:method:: SpectrumAccessOpenMS.getSpectraByRT
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[size_t] getSpectraByRT(double RT, double deltaRT)
Returns a vector of ids of spectra that are within RT +/- deltaRT




.. py:method:: SpectrumAccessOpenMS.getSpectrumById
   :module: pyopenms.pyopenms_7


Cython signature: shared_ptr[OSSpectrum] getSpectrumById(int id_)
Returns a pointer to a spectrum at the given string id




.. py:class:: SpectrumAccessOpenMSInMemory
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _SpectrumAccessOpenMSInMemory


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SpectrumAccessOpenMSInMemory.html
 -- Inherits from ['ISpectrumAccess']




.. py:method:: SpectrumAccessOpenMSInMemory.getChromatogramById
   :module: pyopenms.pyopenms_7


Cython signature: shared_ptr[OSChromatogram] getChromatogramById(int id_)
Returns a pointer to a chromatogram at the given id




.. py:method:: SpectrumAccessOpenMSInMemory.getChromatogramNativeID
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_utf8_output_string getChromatogramNativeID(int id_)




.. py:method:: SpectrumAccessOpenMSInMemory.getNrChromatograms
   :module: pyopenms.pyopenms_7


Cython signature: size_t getNrChromatograms()
Returns the number of chromatograms available




.. py:method:: SpectrumAccessOpenMSInMemory.getNrSpectra
   :module: pyopenms.pyopenms_7


Cython signature: size_t getNrSpectra()
Returns the number of spectra available




.. py:method:: SpectrumAccessOpenMSInMemory.getSpectraByRT
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[size_t] getSpectraByRT(double RT, double deltaRT)
Returns a vector of ids of spectra that are within RT +/- deltaRT




.. py:method:: SpectrumAccessOpenMSInMemory.getSpectrumById
   :module: pyopenms.pyopenms_7


Cython signature: shared_ptr[OSSpectrum] getSpectrumById(int id_)
Returns a pointer to a spectrum at the given string id




.. py:class:: SpectrumAccessTransforming
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _SpectrumAccessTransforming


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SpectrumAccessTransforming.html
 -- Inherits from ['ISpectrumAccess']




.. py:method:: SpectrumAccessTransforming.getChromatogramById
   :module: pyopenms.pyopenms_7


Cython signature: shared_ptr[OSChromatogram] getChromatogramById(int id_)
Returns a pointer to a chromatogram at the given id




.. py:method:: SpectrumAccessTransforming.getChromatogramNativeID
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_utf8_output_string getChromatogramNativeID(int id_)




.. py:method:: SpectrumAccessTransforming.getNrChromatograms
   :module: pyopenms.pyopenms_7


Cython signature: size_t getNrChromatograms()
Returns the number of chromatograms available




.. py:method:: SpectrumAccessTransforming.getNrSpectra
   :module: pyopenms.pyopenms_7


Cython signature: size_t getNrSpectra()
Returns the number of spectra available




.. py:method:: SpectrumAccessTransforming.getSpectraByRT
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[size_t] getSpectraByRT(double RT, double deltaRT)
Returns a vector of ids of spectra that are within RT +/- deltaRT




.. py:method:: SpectrumAccessTransforming.getSpectrumById
   :module: pyopenms.pyopenms_7


Cython signature: shared_ptr[OSSpectrum] getSpectrumById(int id_)
Returns a pointer to a spectrum at the given string id




.. py:class:: SpectrumIdentification
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _SpectrumIdentification


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SpectrumIdentification.html
 -- Inherits from ['MetaInfoInterface']




.. py:method:: SpectrumIdentification.addHit
   :module: pyopenms.pyopenms_7


Cython signature: void addHit(IdentificationHit & hit)
Adds a single identification hit to the hits




.. py:method:: SpectrumIdentification.clearMetaInfo
   :module: pyopenms.pyopenms_7


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: SpectrumIdentification.getHits
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[IdentificationHit] getHits()
Returns the identification hits of this spectrum identification




.. py:method:: SpectrumIdentification.getKeys
   :module: pyopenms.pyopenms_7


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: SpectrumIdentification.getMetaValue
   :module: pyopenms.pyopenms_7


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: SpectrumIdentification.isMetaEmpty
   :module: pyopenms.pyopenms_7


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: SpectrumIdentification.metaRegistry
   :module: pyopenms.pyopenms_7


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: SpectrumIdentification.metaValueExists
   :module: pyopenms.pyopenms_7


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: SpectrumIdentification.removeMetaValue
   :module: pyopenms.pyopenms_7


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: SpectrumIdentification.setHits
   :module: pyopenms.pyopenms_7


Cython signature: void setHits(libcpp_vector[IdentificationHit] & hits)
Sets the identification hits of this spectrum identification (corresponds to single peptide hit in the list)




.. py:method:: SpectrumIdentification.setMetaValue
   :module: pyopenms.pyopenms_7


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:class:: StringDataArray
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _StringDataArray


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::DataArrays_1_1StringDataArray.html
 -- Inherits from ['MetaInfoDescription']


 The representation of extra string data attached to a spectrum or chromatogram.




.. py:method:: StringDataArray.clear
   :module: pyopenms.pyopenms_7


Cython signature: void clear()




.. py:method:: StringDataArray.clearMetaInfo
   :module: pyopenms.pyopenms_7


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: StringDataArray.getDataProcessing
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[shared_ptr[DataProcessing]] getDataProcessing()
Returns a reference to the description of the applied processing




.. py:method:: StringDataArray.getKeys
   :module: pyopenms.pyopenms_7


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: StringDataArray.getMetaValue
   :module: pyopenms.pyopenms_7


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: StringDataArray.getName
   :module: pyopenms.pyopenms_7


Cython signature: String getName()
Returns the name of the peak annotations




.. py:method:: StringDataArray.isMetaEmpty
   :module: pyopenms.pyopenms_7


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: StringDataArray.metaRegistry
   :module: pyopenms.pyopenms_7


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: StringDataArray.metaValueExists
   :module: pyopenms.pyopenms_7


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: StringDataArray.push_back
   :module: pyopenms.pyopenms_7


Cython signature: void push_back(String)




.. py:method:: StringDataArray.removeMetaValue
   :module: pyopenms.pyopenms_7


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: StringDataArray.resize
   :module: pyopenms.pyopenms_7


Cython signature: void resize(size_t n)




.. py:method:: StringDataArray.setDataProcessing
   :module: pyopenms.pyopenms_7


Cython signature: void setDataProcessing(libcpp_vector[shared_ptr[DataProcessing]])
Sets the description of the applied processing




.. py:method:: StringDataArray.setMetaValue
   :module: pyopenms.pyopenms_7


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:method:: StringDataArray.setName
   :module: pyopenms.pyopenms_7


Cython signature: void setName(String name)
Sets the name of the peak annotations




.. py:method:: StringDataArray.size
   :module: pyopenms.pyopenms_7


Cython signature: size_t size()




.. py:class:: TargetedExperiment
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _TargetedExperiment


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1TargetedExperiment.html




.. py:method:: TargetedExperiment.addCV
   :module: pyopenms.pyopenms_7


Cython signature: void addCV(CV cv)




.. py:method:: TargetedExperiment.addCompound
   :module: pyopenms.pyopenms_7


Cython signature: void addCompound(Compound rhs)




.. py:method:: TargetedExperiment.addContact
   :module: pyopenms.pyopenms_7


Cython signature: void addContact(Contact contact)




.. py:method:: TargetedExperiment.addExcludeTarget
   :module: pyopenms.pyopenms_7


Cython signature: void addExcludeTarget(IncludeExcludeTarget target)




.. py:method:: TargetedExperiment.addIncludeTarget
   :module: pyopenms.pyopenms_7


Cython signature: void addIncludeTarget(IncludeExcludeTarget target)




.. py:method:: TargetedExperiment.addInstrument
   :module: pyopenms.pyopenms_7


Cython signature: void addInstrument(TargetedExperiment_Instrument instrument)




.. py:method:: TargetedExperiment.addPeptide
   :module: pyopenms.pyopenms_7


Cython signature: void addPeptide(Peptide rhs)




.. py:method:: TargetedExperiment.addProtein
   :module: pyopenms.pyopenms_7


Cython signature: void addProtein(Protein protein)




.. py:method:: TargetedExperiment.addPublication
   :module: pyopenms.pyopenms_7


Cython signature: void addPublication(Publication publication)




.. py:method:: TargetedExperiment.addSoftware
   :module: pyopenms.pyopenms_7


Cython signature: void addSoftware(Software software)




.. py:method:: TargetedExperiment.addSourceFile
   :module: pyopenms.pyopenms_7


Cython signature: void addSourceFile(SourceFile source_file)




.. py:method:: TargetedExperiment.addTargetCVTerm
   :module: pyopenms.pyopenms_7


Cython signature: void addTargetCVTerm(CVTerm cv_term)




.. py:method:: TargetedExperiment.addTransition
   :module: pyopenms.pyopenms_7


Cython signature: void addTransition(ReactionMonitoringTransition transition)




.. py:method:: TargetedExperiment.clear
   :module: pyopenms.pyopenms_7


Cython signature: void clear(bool clear_meta_data)




.. py:method:: TargetedExperiment.containsInvalidReferences
   :module: pyopenms.pyopenms_7


Cython signature: bool containsInvalidReferences()




.. py:method:: TargetedExperiment.getCVs
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[CV] getCVs()




.. py:method:: TargetedExperiment.getCompoundByRef
   :module: pyopenms.pyopenms_7


Cython signature: Compound getCompoundByRef(String ref)




.. py:method:: TargetedExperiment.getCompounds
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[Compound] getCompounds()




.. py:method:: TargetedExperiment.getContacts
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[Contact] getContacts()




.. py:method:: TargetedExperiment.getExcludeTargets
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[IncludeExcludeTarget] getExcludeTargets()




.. py:method:: TargetedExperiment.getIncludeTargets
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[IncludeExcludeTarget] getIncludeTargets()




.. py:method:: TargetedExperiment.getInstruments
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[TargetedExperiment_Instrument] getInstruments()




.. py:method:: TargetedExperiment.getPeptideByRef
   :module: pyopenms.pyopenms_7


Cython signature: Peptide getPeptideByRef(String ref)




.. py:method:: TargetedExperiment.getPeptides
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[Peptide] getPeptides()




.. py:method:: TargetedExperiment.getProteinByRef
   :module: pyopenms.pyopenms_7


Cython signature: Protein getProteinByRef(String ref)




.. py:method:: TargetedExperiment.getProteins
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[Protein] getProteins()




.. py:method:: TargetedExperiment.getPublications
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[Publication] getPublications()




.. py:method:: TargetedExperiment.getSoftware
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[Software] getSoftware()




.. py:method:: TargetedExperiment.getSourceFiles
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[SourceFile] getSourceFiles()




.. py:method:: TargetedExperiment.getTargetCVTerms
   :module: pyopenms.pyopenms_7


Cython signature: CVTermList getTargetCVTerms()




.. py:method:: TargetedExperiment.getTransitions
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[ReactionMonitoringTransition] getTransitions()




.. py:method:: TargetedExperiment.hasCompound
   :module: pyopenms.pyopenms_7


Cython signature: bool hasCompound(String ref)




.. py:method:: TargetedExperiment.hasPeptide
   :module: pyopenms.pyopenms_7


Cython signature: bool hasPeptide(String ref)




.. py:method:: TargetedExperiment.hasProtein
   :module: pyopenms.pyopenms_7


Cython signature: bool hasProtein(String ref)




.. py:method:: TargetedExperiment.setCVs
   :module: pyopenms.pyopenms_7


Cython signature: void setCVs(libcpp_vector[CV] cvs)




.. py:method:: TargetedExperiment.setCompounds
   :module: pyopenms.pyopenms_7


Cython signature: void setCompounds(libcpp_vector[Compound] rhs)




.. py:method:: TargetedExperiment.setContacts
   :module: pyopenms.pyopenms_7


Cython signature: void setContacts(libcpp_vector[Contact] contacts)




.. py:method:: TargetedExperiment.setExcludeTargets
   :module: pyopenms.pyopenms_7


Cython signature: void setExcludeTargets(libcpp_vector[IncludeExcludeTarget] targets)




.. py:method:: TargetedExperiment.setIncludeTargets
   :module: pyopenms.pyopenms_7


Cython signature: void setIncludeTargets(libcpp_vector[IncludeExcludeTarget] targets)




.. py:method:: TargetedExperiment.setInstruments
   :module: pyopenms.pyopenms_7


Cython signature: void setInstruments(libcpp_vector[TargetedExperiment_Instrument] instruments)




.. py:method:: TargetedExperiment.setPeptides
   :module: pyopenms.pyopenms_7


Cython signature: void setPeptides(libcpp_vector[Peptide] rhs)




.. py:method:: TargetedExperiment.setProteins
   :module: pyopenms.pyopenms_7


Cython signature: void setProteins(libcpp_vector[Protein] proteins)




.. py:method:: TargetedExperiment.setPublications
   :module: pyopenms.pyopenms_7


Cython signature: void setPublications(libcpp_vector[Publication] publications)




.. py:method:: TargetedExperiment.setSoftware
   :module: pyopenms.pyopenms_7


Cython signature: void setSoftware(libcpp_vector[Software] software)




.. py:method:: TargetedExperiment.setSourceFiles
   :module: pyopenms.pyopenms_7


Cython signature: void setSourceFiles(libcpp_vector[SourceFile] source_files)




.. py:method:: TargetedExperiment.setTargetCVTerms
   :module: pyopenms.pyopenms_7


Cython signature: void setTargetCVTerms(CVTermList cv_terms)




.. py:method:: TargetedExperiment.setTargetMetaValue
   :module: pyopenms.pyopenms_7


Cython signature: void setTargetMetaValue(String name, DataValue value)




.. py:method:: TargetedExperiment.setTransitions
   :module: pyopenms.pyopenms_7


Cython signature: void setTransitions(libcpp_vector[ReactionMonitoringTransition] transitions)




.. py:method:: TargetedExperiment.sortTransitionsByProductMZ
   :module: pyopenms.pyopenms_7


Cython signature: void sortTransitionsByProductMZ()




.. py:class:: TargetedExperiment_Instrument
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _TargetedExperiment_Instrument


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::TargetedExperimentHelper::RetentionTime::RTUnit_1_1TargetedExperiment_Instrument.html




.. py:method:: TargetedExperiment_Instrument.addCVTerm
   :module: pyopenms.pyopenms_7


Cython signature: void addCVTerm(CVTerm & term)




.. py:method:: TargetedExperiment_Instrument.consumeCVTerms
   :module: pyopenms.pyopenms_7


Cython signature: void consumeCVTerms(Map[String,libcpp_vector[CVTerm]] cv_term_map)




.. py:method:: TargetedExperiment_Instrument.empty
   :module: pyopenms.pyopenms_7


Cython signature: bool empty()




.. py:method:: TargetedExperiment_Instrument.getCVTerms
   :module: pyopenms.pyopenms_7


Cython signature: Map[String,libcpp_vector[CVTerm]] getCVTerms()




.. py:method:: TargetedExperiment_Instrument.getKeys
   :module: pyopenms.pyopenms_7


Cython signature: void getKeys(libcpp_vector[String] & keys)




.. py:method:: TargetedExperiment_Instrument.getKeysAsIntegers
   :module: pyopenms.pyopenms_7


Cython signature: void getKeysAsIntegers(libcpp_vector[unsigned int] & keys)




.. py:method:: TargetedExperiment_Instrument.getMetaValue
   :module: pyopenms.pyopenms_7


- Cython signature: DataValue getMetaValue(unsigned int)
- Cython signature: DataValue getMetaValue(String)




.. py:method:: TargetedExperiment_Instrument.hasCVTerm
   :module: pyopenms.pyopenms_7


Cython signature: bool hasCVTerm(String accession)




.. py:attribute:: TargetedExperiment_Instrument.id
   :module: pyopenms.pyopenms_7




.. py:method:: TargetedExperiment_Instrument.metaValueExists
   :module: pyopenms.pyopenms_7


- Cython signature: bool metaValueExists(String)
- Cython signature: bool metaValueExists(unsigned int)




.. py:method:: TargetedExperiment_Instrument.removeMetaValue
   :module: pyopenms.pyopenms_7


- Cython signature: void removeMetaValue(String)
- Cython signature: void removeMetaValue(unsigned int)




.. py:method:: TargetedExperiment_Instrument.replaceCVTerm
   :module: pyopenms.pyopenms_7


Cython signature: void replaceCVTerm(CVTerm & term)




.. py:method:: TargetedExperiment_Instrument.replaceCVTerms
   :module: pyopenms.pyopenms_7


- Cython signature: void replaceCVTerms(libcpp_vector[CVTerm] cv_terms, String accession)
- Cython signature: void replaceCVTerms(Map[String,libcpp_vector[CVTerm]] cv_term_map)




.. py:method:: TargetedExperiment_Instrument.setCVTerms
   :module: pyopenms.pyopenms_7


Cython signature: void setCVTerms(libcpp_vector[CVTerm] & terms)




.. py:method:: TargetedExperiment_Instrument.setMetaValue
   :module: pyopenms.pyopenms_7


- Cython signature: void setMetaValue(unsigned int, DataValue)
- Cython signature: void setMetaValue(String, DataValue)




.. py:class:: TargetedExperiment_Interpretation
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _TargetedExperiment_Interpretation


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::TargetedExperimentHelper::RetentionTime::RTUnit_1_1TargetedExperiment_Interpretation.html




.. py:method:: TargetedExperiment_Interpretation.addCVTerm
   :module: pyopenms.pyopenms_7


Cython signature: void addCVTerm(CVTerm & term)




.. py:method:: TargetedExperiment_Interpretation.consumeCVTerms
   :module: pyopenms.pyopenms_7


Cython signature: void consumeCVTerms(Map[String,libcpp_vector[CVTerm]] cv_term_map)




.. py:method:: TargetedExperiment_Interpretation.empty
   :module: pyopenms.pyopenms_7


Cython signature: bool empty()




.. py:method:: TargetedExperiment_Interpretation.getCVTerms
   :module: pyopenms.pyopenms_7


Cython signature: Map[String,libcpp_vector[CVTerm]] getCVTerms()




.. py:method:: TargetedExperiment_Interpretation.getKeys
   :module: pyopenms.pyopenms_7


Cython signature: void getKeys(libcpp_vector[String] & keys)




.. py:method:: TargetedExperiment_Interpretation.getKeysAsIntegers
   :module: pyopenms.pyopenms_7


Cython signature: void getKeysAsIntegers(libcpp_vector[unsigned int] & keys)




.. py:method:: TargetedExperiment_Interpretation.getMetaValue
   :module: pyopenms.pyopenms_7


- Cython signature: DataValue getMetaValue(unsigned int)
- Cython signature: DataValue getMetaValue(String)




.. py:method:: TargetedExperiment_Interpretation.hasCVTerm
   :module: pyopenms.pyopenms_7


Cython signature: bool hasCVTerm(String accession)




.. py:attribute:: TargetedExperiment_Interpretation.iontype
   :module: pyopenms.pyopenms_7




.. py:method:: TargetedExperiment_Interpretation.metaValueExists
   :module: pyopenms.pyopenms_7


- Cython signature: bool metaValueExists(String)
- Cython signature: bool metaValueExists(unsigned int)




.. py:attribute:: TargetedExperiment_Interpretation.ordinal
   :module: pyopenms.pyopenms_7




.. py:attribute:: TargetedExperiment_Interpretation.rank
   :module: pyopenms.pyopenms_7




.. py:method:: TargetedExperiment_Interpretation.removeMetaValue
   :module: pyopenms.pyopenms_7


- Cython signature: void removeMetaValue(String)
- Cython signature: void removeMetaValue(unsigned int)




.. py:method:: TargetedExperiment_Interpretation.replaceCVTerm
   :module: pyopenms.pyopenms_7


Cython signature: void replaceCVTerm(CVTerm & term)




.. py:method:: TargetedExperiment_Interpretation.replaceCVTerms
   :module: pyopenms.pyopenms_7


- Cython signature: void replaceCVTerms(libcpp_vector[CVTerm] cv_terms, String accession)
- Cython signature: void replaceCVTerms(Map[String,libcpp_vector[CVTerm]] cv_term_map)




.. py:method:: TargetedExperiment_Interpretation.setCVTerms
   :module: pyopenms.pyopenms_7


Cython signature: void setCVTerms(libcpp_vector[CVTerm] & terms)




.. py:method:: TargetedExperiment_Interpretation.setMetaValue
   :module: pyopenms.pyopenms_7


- Cython signature: void setMetaValue(unsigned int, DataValue)
- Cython signature: void setMetaValue(String, DataValue)




.. py:class:: TargetedExperiment_Modification
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _TargetedExperiment_Modification


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::TargetedExperimentHelper::RetentionTime::RTUnit_1_1TargetedExperiment_Modification.html




.. py:attribute:: TargetedExperiment_Modification.avg_mass_delta
   :module: pyopenms.pyopenms_7




.. py:attribute:: TargetedExperiment_Modification.location
   :module: pyopenms.pyopenms_7




.. py:attribute:: TargetedExperiment_Modification.mono_mass_delta
   :module: pyopenms.pyopenms_7




.. py:attribute:: TargetedExperiment_Modification.unimod_id
   :module: pyopenms.pyopenms_7




.. py:class:: TraMLFile
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _TraMLFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1TraMLFile.html




.. py:method:: TraMLFile.isSemanticallyValid
   :module: pyopenms.pyopenms_7


Cython signature: bool isSemanticallyValid(String filename, StringList & errors, StringList & warnings)


Checks if a file is valid with respect to the mapping file and the controlled vocabulary
-----
:param filename: File name of the file to be checked
:param errors: Errors during the validation are returned in this output parameter
:param warnings: Warnings during the validation are returned in this output parameter




.. py:method:: TraMLFile.load
   :module: pyopenms.pyopenms_7


Cython signature: void load(String filename, TargetedExperiment & id)
Loads a map from a TraML file




.. py:method:: TraMLFile.store
   :module: pyopenms.pyopenms_7


Cython signature: void store(String filename, TargetedExperiment & id)
Stores a map in a TraML file




.. py:class:: TraMLProduct
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _TraMLProduct


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::TargetedExperimentHelper::RetentionTime::RTUnit_1_1TraMLProduct.html
 -- Inherits from ['CVTermList']




.. py:method:: TraMLProduct.addCVTerm
   :module: pyopenms.pyopenms_7


Cython signature: void addCVTerm(CVTerm & term)
Adds a CV term




.. py:method:: TraMLProduct.addConfiguration
   :module: pyopenms.pyopenms_7


Cython signature: void addConfiguration(Configuration configuration)




.. py:method:: TraMLProduct.addInterpretation
   :module: pyopenms.pyopenms_7


Cython signature: void addInterpretation(TargetedExperiment_Interpretation interpretation)




.. py:method:: TraMLProduct.clearMetaInfo
   :module: pyopenms.pyopenms_7


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: TraMLProduct.consumeCVTerms
   :module: pyopenms.pyopenms_7


Cython signature: void consumeCVTerms(Map[String,libcpp_vector[CVTerm]] cv_term_map)
Merges the given map into the member map, no duplicate checking




.. py:method:: TraMLProduct.empty
   :module: pyopenms.pyopenms_7


Cython signature: bool empty()




.. py:method:: TraMLProduct.getCVTerms
   :module: pyopenms.pyopenms_7


Cython signature: Map[String,libcpp_vector[CVTerm]] getCVTerms()
Returns the accession string of the term




.. py:method:: TraMLProduct.getChargeState
   :module: pyopenms.pyopenms_7


Cython signature: int getChargeState()




.. py:method:: TraMLProduct.getConfigurationList
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[Configuration] getConfigurationList()




.. py:method:: TraMLProduct.getInterpretationList
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[TargetedExperiment_Interpretation] getInterpretationList()




.. py:method:: TraMLProduct.getKeys
   :module: pyopenms.pyopenms_7


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: TraMLProduct.getMZ
   :module: pyopenms.pyopenms_7


Cython signature: double getMZ()




.. py:method:: TraMLProduct.getMetaValue
   :module: pyopenms.pyopenms_7


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: TraMLProduct.hasCVTerm
   :module: pyopenms.pyopenms_7


Cython signature: bool hasCVTerm(String accession)




.. py:method:: TraMLProduct.hasCharge
   :module: pyopenms.pyopenms_7


Cython signature: bool hasCharge()




.. py:method:: TraMLProduct.isMetaEmpty
   :module: pyopenms.pyopenms_7


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: TraMLProduct.metaRegistry
   :module: pyopenms.pyopenms_7


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: TraMLProduct.metaValueExists
   :module: pyopenms.pyopenms_7


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: TraMLProduct.removeMetaValue
   :module: pyopenms.pyopenms_7


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: TraMLProduct.replaceCVTerm
   :module: pyopenms.pyopenms_7


Cython signature: void replaceCVTerm(CVTerm & term)
Replaces the specified CV term




.. py:method:: TraMLProduct.replaceCVTerms
   :module: pyopenms.pyopenms_7


Cython signature: void replaceCVTerms(libcpp_vector[CVTerm] cv_terms, String accession)




.. py:method:: TraMLProduct.resetInterpretations
   :module: pyopenms.pyopenms_7


Cython signature: void resetInterpretations()




.. py:method:: TraMLProduct.setCVTerms
   :module: pyopenms.pyopenms_7


Cython signature: void setCVTerms(libcpp_vector[CVTerm] & terms)
Sets the CV terms




.. py:method:: TraMLProduct.setChargeState
   :module: pyopenms.pyopenms_7


Cython signature: void setChargeState(int charge)




.. py:method:: TraMLProduct.setMZ
   :module: pyopenms.pyopenms_7


Cython signature: void setMZ(double mz)




.. py:method:: TraMLProduct.setMetaValue
   :module: pyopenms.pyopenms_7


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:class:: TransitionPQPFile
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _TransitionPQPFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1TransitionPQPFile.html




.. py:method:: TransitionPQPFile.convertPQPToTargetedExperiment
   :module: pyopenms.pyopenms_7


         - Cython signature: void convertPQPToTargetedExperiment(char * filename, TargetedExperiment & targeted_exp, bool legacy_traml_id)


Read in a PQP file and construct a targeted experiment (TraML structure)
-----
:param filename: The input file
:param targeted_exp: The output targeted experiment
:param legacy_traml_id: Should legacy TraML IDs be used (boolean)?
         - Cython signature: void convertPQPToTargetedExperiment(char * filename, LightTargetedExperiment & targeted_exp, bool legacy_traml_id)


Read in a PQP file and construct a targeted experiment (Light transition structure)
-----
:param filename: The input file
:param targeted_exp: The output targeted experiment
:param legacy_traml_id: Should legacy TraML IDs be used (boolean)?




.. py:method:: TransitionPQPFile.convertTSVToTargetedExperiment
   :module: pyopenms.pyopenms_7


- Cython signature: void convertTSVToTargetedExperiment(char * filename, FileType filetype, TargetedExperiment & targeted_exp)
- Cython signature: void convertTSVToTargetedExperiment(char * filename, FileType filetype, LightTargetedExperiment & targeted_exp)




.. py:method:: TransitionPQPFile.convertTargetedExperimentToPQP
   :module: pyopenms.pyopenms_7


Cython signature: void convertTargetedExperimentToPQP(char * filename, TargetedExperiment & targeted_exp)


Write out a targeted experiment (TraML structure) into a PQP file
-----
:param filename: The output file
:param targeted_exp: The targeted experiment




.. py:method:: TransitionPQPFile.convertTargetedExperimentToTSV
   :module: pyopenms.pyopenms_7


Cython signature: void convertTargetedExperimentToTSV(char * filename, TargetedExperiment & targeted_exp)




.. py:method:: TransitionPQPFile.validateTargetedExperiment
   :module: pyopenms.pyopenms_7


Cython signature: void validateTargetedExperiment(TargetedExperiment targeted_exp)




.. py:class:: TwoDOptimization
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`


Cython implementation of _TwoDOptimization


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1TwoDOptimization.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: TwoDOptimization.getDefaults
   :module: pyopenms.pyopenms_7


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: TwoDOptimization.getMZTolerance
   :module: pyopenms.pyopenms_7


Cython signature: double getMZTolerance()
Returns the matching epsilon




.. py:method:: TwoDOptimization.getMaxIterations
   :module: pyopenms.pyopenms_7


Cython signature: unsigned int getMaxIterations()
Returns the maximal number of iterations




.. py:method:: TwoDOptimization.getMaxPeakDistance
   :module: pyopenms.pyopenms_7


Cython signature: double getMaxPeakDistance()
Returns the maximal peak distance in a cluster




.. py:method:: TwoDOptimization.getName
   :module: pyopenms.pyopenms_7


Cython signature: String getName()
Returns the name




.. py:method:: TwoDOptimization.getParameters
   :module: pyopenms.pyopenms_7


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: TwoDOptimization.getSubsections
   :module: pyopenms.pyopenms_7


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: TwoDOptimization.setMZTolerance
   :module: pyopenms.pyopenms_7


Cython signature: void setMZTolerance(double tolerance_mz)
Sets the matching epsilon




.. py:method:: TwoDOptimization.setMaxIterations
   :module: pyopenms.pyopenms_7


Cython signature: void setMaxIterations(unsigned int max_iteration)
Sets the maximal number of iterations




.. py:method:: TwoDOptimization.setMaxPeakDistance
   :module: pyopenms.pyopenms_7


Cython signature: void setMaxPeakDistance(double max_peak_distance)
Sets the maximal peak distance in a cluster




.. py:method:: TwoDOptimization.setName
   :module: pyopenms.pyopenms_7


Cython signature: void setName(const String &)
Sets the name




.. py:method:: TwoDOptimization.setParameters
   :module: pyopenms.pyopenms_7


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: ValueType
   :module: pyopenms.pyopenms_7


   Bases: :py:class:`object`




.. py:attribute:: ValueType.DOUBLE_LIST
   :module: pyopenms.pyopenms_7
   :value: 5




.. py:attribute:: ValueType.DOUBLE_VALUE
   :module: pyopenms.pyopenms_7
   :value: 2




.. py:attribute:: ValueType.EMPTY_VALUE
   :module: pyopenms.pyopenms_7
   :value: 6




.. py:attribute:: ValueType.INT_LIST
   :module: pyopenms.pyopenms_7
   :value: 4




.. py:attribute:: ValueType.INT_VALUE
   :module: pyopenms.pyopenms_7
   :value: 1




.. py:attribute:: ValueType.STRING_LIST
   :module: pyopenms.pyopenms_7
   :value: 3




.. py:attribute:: ValueType.STRING_VALUE
   :module: pyopenms.pyopenms_7
   :value: 0




.. py:method:: ValueType.getMapping
   :module: pyopenms.pyopenms_7




.. py:module:: pyopenms.pyopenms_8




.. py:class:: AASequence
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _AASequence


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1AASequence.html


 Representation of a peptide/protein sequence
 This class represents amino acid sequences in OpenMS. An AASequence
 instance primarily contains a sequence of residues.




.. py:method:: AASequence.empty
   :module: pyopenms.pyopenms_8


Cython signature: bool empty()
Check if sequence is empty




.. py:method:: AASequence.fromString
   :module: pyopenms.pyopenms_8


Cython signature: AASequence fromString(String s)




.. py:method:: AASequence.fromStringPermissive
   :module: pyopenms.pyopenms_8


Cython signature: AASequence fromStringPermissive(String s, bool permissive)




.. py:method:: AASequence.getAAFrequencies
   :module: pyopenms.pyopenms_8




.. py:method:: AASequence.getAverageWeight
   :module: pyopenms.pyopenms_8


- Cython signature: double getAverageWeight()
  Returns the average weight of the peptide


- Cython signature: double getAverageWeight(ResidueType type_, int charge)




.. py:method:: AASequence.getCTerminalModification
   :module: pyopenms.pyopenms_8


Cython signature: const ResidueModification * getCTerminalModification()
Returns a copy of the name C-terminal modification object, or None




.. py:method:: AASequence.getCTerminalModificationName
   :module: pyopenms.pyopenms_8


Cython signature: String getCTerminalModificationName()
Returns the name (ID) of the C-terminal modification, or an empty string if none is set




.. py:method:: AASequence.getFormula
   :module: pyopenms.pyopenms_8


- Cython signature: EmpiricalFormula getFormula()
  Convenience function with ResidueType=Full and charge = 0 by default


- Cython signature: EmpiricalFormula getFormula(ResidueType type_, int charge)




.. py:method:: AASequence.getMZ
   :module: pyopenms.pyopenms_8


- Cython signature: double getMZ(int charge)
  Returns the mass-to-charge ratio of the peptide


- Cython signature: double getMZ(int charge, ResidueType type_)




.. py:method:: AASequence.getMonoWeight
   :module: pyopenms.pyopenms_8


- Cython signature: double getMonoWeight()
  Returns the mono isotopic weight of the peptide


- Cython signature: double getMonoWeight(ResidueType type_, int charge)




.. py:method:: AASequence.getNTerminalModification
   :module: pyopenms.pyopenms_8


Cython signature: const ResidueModification * getNTerminalModification()
Returns a copy of the name N-terminal modification object, or None




.. py:method:: AASequence.getNTerminalModificationName
   :module: pyopenms.pyopenms_8


Cython signature: String getNTerminalModificationName()
Returns the name (ID) of the N-terminal modification, or an empty string if none is set




.. py:method:: AASequence.getPrefix
   :module: pyopenms.pyopenms_8


Cython signature: AASequence getPrefix(size_t index)
Returns a peptide sequence of the first index residues




.. py:method:: AASequence.getResidue
   :module: pyopenms.pyopenms_8


Cython signature: Residue getResidue(size_t index)
Returns the residue at position index




.. py:method:: AASequence.getSubsequence
   :module: pyopenms.pyopenms_8


Cython signature: AASequence getSubsequence(size_t index, unsigned int number)
Returns a peptide sequence of number residues, beginning at position index




.. py:method:: AASequence.getSuffix
   :module: pyopenms.pyopenms_8


Cython signature: AASequence getSuffix(size_t index)
Returns a peptide sequence of the last index residues




.. py:method:: AASequence.has
   :module: pyopenms.pyopenms_8


Cython signature: bool has(Residue residue)
Returns true if the peptide contains the given residue




.. py:method:: AASequence.hasCTerminalModification
   :module: pyopenms.pyopenms_8


Cython signature: bool hasCTerminalModification()
Predicate which is true if the peptide is C-term modified




.. py:method:: AASequence.hasNTerminalModification
   :module: pyopenms.pyopenms_8


Cython signature: bool hasNTerminalModification()
Predicate which is true if the peptide is N-term modified




.. py:method:: AASequence.hasPrefix
   :module: pyopenms.pyopenms_8


Cython signature: bool hasPrefix(AASequence peptide)
Returns true if the peptide has the given prefix




.. py:method:: AASequence.hasSubsequence
   :module: pyopenms.pyopenms_8


Cython signature: bool hasSubsequence(AASequence peptide)
Returns true if the peptide contains the given peptide




.. py:method:: AASequence.hasSuffix
   :module: pyopenms.pyopenms_8


Cython signature: bool hasSuffix(AASequence peptide)
Returns true if the peptide has the given suffix




.. py:method:: AASequence.isModified
   :module: pyopenms.pyopenms_8


Cython signature: bool isModified()
Returns true if any of the residues or termini are modified




.. py:method:: AASequence.setCTerminalModification
   :module: pyopenms.pyopenms_8


- Cython signature: void setCTerminalModification(String modification)
  Sets the C-terminal modification (by lookup in the mod names of the ModificationsDB). Throws if nothing is found (since the name is not enough information to create a new mod)


- Cython signature: void setCTerminalModification(const ResidueModification & mod)
  Sets the C-terminal modification (copies and adds to database if not present)




.. py:method:: AASequence.setCTerminalModificationByDiffMonoMass
   :module: pyopenms.pyopenms_8


Cython signature: void setCTerminalModificationByDiffMonoMass(double diffMonoMass, bool protein_term)
Sets the C-terminal modification by the monoisotopic mass difference it introduces (creates a "user-defined" mod if not present)




.. py:method:: AASequence.setModification
   :module: pyopenms.pyopenms_8


- Cython signature: void setModification(size_t index, const String & modification)
  Sets the modification of the residue at position index. If an empty string is passed replaces the residue with its unmodified version


- Cython signature: void setModification(size_t index, const ResidueModification & modification)
  Sets the modification of AA at index by providing a ResidueModification object. Stricter than just looking for the name and adds the Modification to the DB if not present




.. py:method:: AASequence.setModificationByDiffMonoMass
   :module: pyopenms.pyopenms_8


Cython signature: void setModificationByDiffMonoMass(size_t index, double diffMonoMass)
Modifies the residue at index in the sequence and potentially in the ResidueDB




.. py:method:: AASequence.setNTerminalModification
   :module: pyopenms.pyopenms_8


- Cython signature: void setNTerminalModification(String modification)
  Sets the N-terminal modification (by lookup in the mod names of the ModificationsDB). Throws if nothing is found (since the name is not enough information to create a new mod)


- Cython signature: void setNTerminalModification(const ResidueModification & mod)
  Sets the N-terminal modification (copies and adds to database if not present)




.. py:method:: AASequence.setNTerminalModificationByDiffMonoMass
   :module: pyopenms.pyopenms_8


Cython signature: void setNTerminalModificationByDiffMonoMass(double diffMonoMass, bool protein_term)
Sets the N-terminal modification by the monoisotopic mass difference it introduces (creates a "user-defined" mod if not present)




.. py:method:: AASequence.size
   :module: pyopenms.pyopenms_8


Cython signature: size_t size()
Returns the number of residues




.. py:method:: AASequence.toBracketString
   :module: pyopenms.pyopenms_8


- Cython signature: String toBracketString()
  Create a TPP compatible string of the modified sequence using bracket notation. Uses integer mass by default


- Cython signature: String toBracketString(bool integer_mass)
  Create a TPP compatible string of the modified sequence using bracket notation


- Cython signature: String toBracketString(bool integer_mass, bool mass_delta)
  Create a TPP compatible string of the modified sequence using bracket notation.


- Cython signature: String toBracketString(bool integer_mass, bool mass_delta, libcpp_vector[String] fixed_modifications)
  Create a TPP compatible string of the modified sequence using bracket notation




.. py:method:: AASequence.toString
   :module: pyopenms.pyopenms_8


Cython signature: String toString()
Returns the peptide as string with modifications embedded in brackets




.. py:method:: AASequence.toUniModString
   :module: pyopenms.pyopenms_8


Cython signature: String toUniModString()
Returns the peptide as string with UniMod-style modifications embedded in brackets




.. py:method:: AASequence.toUnmodifiedString
   :module: pyopenms.pyopenms_8


Cython signature: String toUnmodifiedString()
Returns the peptide as string without any modifications




.. py:class:: AccurateMassSearchEngine
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _AccurateMassSearchEngine


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1AccurateMassSearchEngine.html
 -- Inherits from ['DefaultParamHandler', 'ProgressLogger']




.. py:method:: AccurateMassSearchEngine.endProgress
   :module: pyopenms.pyopenms_8


Cython signature: void endProgress()
Ends the progress display




.. py:method:: AccurateMassSearchEngine.getDefaults
   :module: pyopenms.pyopenms_8


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: AccurateMassSearchEngine.getLogType
   :module: pyopenms.pyopenms_8


Cython signature: LogType getLogType()
Returns the type of progress log being used




.. py:method:: AccurateMassSearchEngine.getName
   :module: pyopenms.pyopenms_8


Cython signature: String getName()
Returns the name




.. py:method:: AccurateMassSearchEngine.getParameters
   :module: pyopenms.pyopenms_8


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: AccurateMassSearchEngine.getSubsections
   :module: pyopenms.pyopenms_8


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: AccurateMassSearchEngine.init
   :module: pyopenms.pyopenms_8


Cython signature: void init()




.. py:method:: AccurateMassSearchEngine.nextProgress
   :module: pyopenms.pyopenms_8


Cython signature: void nextProgress()
Increment progress by 1 (according to range begin-end)




.. py:method:: AccurateMassSearchEngine.queryByConsensusFeature
   :module: pyopenms.pyopenms_8


Cython signature: void queryByConsensusFeature(ConsensusFeature cfeat, size_t cf_index, size_t number_of_maps, String ion_mode, libcpp_vector[AccurateMassSearchResult] & results)




.. py:method:: AccurateMassSearchEngine.queryByFeature
   :module: pyopenms.pyopenms_8


Cython signature: void queryByFeature(Feature feature, size_t feature_index, String ion_mode, libcpp_vector[AccurateMassSearchResult] &)




.. py:method:: AccurateMassSearchEngine.queryByMZ
   :module: pyopenms.pyopenms_8


Cython signature: void queryByMZ(double observed_mz, int observed_charge, String ion_mode, libcpp_vector[AccurateMassSearchResult] &, EmpiricalFormula & observed_adduct)




.. py:method:: AccurateMassSearchEngine.run
   :module: pyopenms.pyopenms_8


- Cython signature: void run(FeatureMap &, MzTab &)
- Cython signature: void run(ConsensusMap &, MzTab &)




.. py:method:: AccurateMassSearchEngine.setLogType
   :module: pyopenms.pyopenms_8


Cython signature: void setLogType(LogType)
Sets the progress log that should be used. The default type is NONE!




.. py:method:: AccurateMassSearchEngine.setName
   :module: pyopenms.pyopenms_8


Cython signature: void setName(const String &)
Sets the name




.. py:method:: AccurateMassSearchEngine.setParameters
   :module: pyopenms.pyopenms_8


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: AccurateMassSearchEngine.setProgress
   :module: pyopenms.pyopenms_8


Cython signature: void setProgress(ptrdiff_t value)
Sets the current progress




.. py:method:: AccurateMassSearchEngine.startProgress
   :module: pyopenms.pyopenms_8


Cython signature: void startProgress(ptrdiff_t begin, ptrdiff_t end, String label)




.. py:class:: Adduct
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _Adduct


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1Adduct.html




.. py:method:: Adduct.getAmount
   :module: pyopenms.pyopenms_8


Cython signature: int getAmount()




.. py:method:: Adduct.getCharge
   :module: pyopenms.pyopenms_8


Cython signature: int getCharge()




.. py:method:: Adduct.getFormula
   :module: pyopenms.pyopenms_8


Cython signature: String getFormula()




.. py:method:: Adduct.getLabel
   :module: pyopenms.pyopenms_8


Cython signature: String getLabel()




.. py:method:: Adduct.getLogProb
   :module: pyopenms.pyopenms_8


Cython signature: double getLogProb()




.. py:method:: Adduct.getRTShift
   :module: pyopenms.pyopenms_8


Cython signature: double getRTShift()




.. py:method:: Adduct.getSingleMass
   :module: pyopenms.pyopenms_8


Cython signature: double getSingleMass()




.. py:method:: Adduct.setAmount
   :module: pyopenms.pyopenms_8


Cython signature: void setAmount(int amount)




.. py:method:: Adduct.setCharge
   :module: pyopenms.pyopenms_8


Cython signature: void setCharge(int charge)




.. py:method:: Adduct.setFormula
   :module: pyopenms.pyopenms_8


Cython signature: void setFormula(String formula)




.. py:method:: Adduct.setLogProb
   :module: pyopenms.pyopenms_8


Cython signature: void setLogProb(double log_prob)




.. py:method:: Adduct.setSingleMass
   :module: pyopenms.pyopenms_8


Cython signature: void setSingleMass(double singleMass)




.. py:class:: ArrayWrapperFloat
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`




.. py:class:: AverageLinkage
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _AverageLinkage


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1AverageLinkage.html




.. py:method:: AverageLinkage.getProductName
   :module: pyopenms.pyopenms_8


Cython signature: String getProductName()




.. py:class:: ChargedIndexSet
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _ChargedIndexSet


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ChargedIndexSet.html




.. py:attribute:: ChargedIndexSet.charge
   :module: pyopenms.pyopenms_8




.. py:class:: ChecksumType
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`




.. py:attribute:: ChecksumType.MD5
   :module: pyopenms.pyopenms_8
   :value: 2




.. py:attribute:: ChecksumType.SHA1
   :module: pyopenms.pyopenms_8
   :value: 1




.. py:attribute:: ChecksumType.SIZE_OF_CHECKSUMTYPE
   :module: pyopenms.pyopenms_8
   :value: 3




.. py:attribute:: ChecksumType.UNKNOWN_CHECKSUM
   :module: pyopenms.pyopenms_8
   :value: 0




.. py:method:: ChecksumType.getMapping
   :module: pyopenms.pyopenms_8




.. py:class:: Compomer
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _Compomer


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1Compomer.html




.. py:method:: Compomer.add
   :module: pyopenms.pyopenms_8


Cython signature: void add(Adduct & a, unsigned int side)




.. py:method:: Compomer.getAdductsAsString
   :module: pyopenms.pyopenms_8


- Cython signature: String getAdductsAsString()
  Get adducts with their abundance as compact string for both sides


- Cython signature: String getAdductsAsString(unsigned int side)
  Get adducts with their abundance as compact string (amounts are absolute unless side=BOTH)




.. py:method:: Compomer.getID
   :module: pyopenms.pyopenms_8


Cython signature: size_t getID()
Returns Id which allows unique identification of this compomer




.. py:method:: Compomer.getLabels
   :module: pyopenms.pyopenms_8


Cython signature: StringList getLabels(unsigned int side)
Returns the adduct labels from parameter(side) given. (LEFT or RIGHT)




.. py:method:: Compomer.getLogP
   :module: pyopenms.pyopenms_8


Cython signature: double getLogP()
Returns the log probability




.. py:method:: Compomer.getMass
   :module: pyopenms.pyopenms_8


Cython signature: double getMass()
Mass of all contained adducts




.. py:method:: Compomer.getNegativeCharges
   :module: pyopenms.pyopenms_8


Cython signature: int getNegativeCharges()
Summed negative charges of contained adducts




.. py:method:: Compomer.getNetCharge
   :module: pyopenms.pyopenms_8


Cython signature: int getNetCharge()
Net charge of compomer (i.e. difference between left and right side of compomer)




.. py:method:: Compomer.getPositiveCharges
   :module: pyopenms.pyopenms_8


Cython signature: int getPositiveCharges()
Summed positive charges of contained adducts




.. py:method:: Compomer.getRTShift
   :module: pyopenms.pyopenms_8


Cython signature: double getRTShift()
Returns the log probability




.. py:method:: Compomer.isConflicting
   :module: pyopenms.pyopenms_8


Cython signature: bool isConflicting(Compomer & cmp, unsigned int side_this, unsigned int side_other)




.. py:method:: Compomer.isSingleAdduct
   :module: pyopenms.pyopenms_8


Cython signature: bool isSingleAdduct(Adduct & a, unsigned int side)
Check if Compomer only contains a single adduct on side @p side




.. py:method:: Compomer.removeAdduct
   :module: pyopenms.pyopenms_8


- Cython signature: Compomer removeAdduct(Adduct & a)
  Remove ALL instances of the given adduct


- Cython signature: Compomer removeAdduct(Adduct & a, unsigned int side)




.. py:method:: Compomer.setID
   :module: pyopenms.pyopenms_8


Cython signature: void setID(size_t id)
Sets an Id which allows unique identification of a compomer




.. py:class:: ConsensusIDAlgorithmAverage
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _ConsensusIDAlgorithmAverage


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ConsensusIDAlgorithmAverage.html
 -- Inherits from ['ConsensusIDAlgorithmIdentity']




.. py:method:: ConsensusIDAlgorithmAverage.apply
   :module: pyopenms.pyopenms_8


Cython signature: void apply(libcpp_vector[PeptideIdentification] & ids, size_t number_of_runs)
Calculates the consensus ID for a set of peptide identifications of one spectrum or (consensus) feature




.. py:method:: ConsensusIDAlgorithmAverage.getDefaults
   :module: pyopenms.pyopenms_8


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: ConsensusIDAlgorithmAverage.getName
   :module: pyopenms.pyopenms_8


Cython signature: String getName()
Returns the name




.. py:method:: ConsensusIDAlgorithmAverage.getParameters
   :module: pyopenms.pyopenms_8


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: ConsensusIDAlgorithmAverage.getSubsections
   :module: pyopenms.pyopenms_8


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: ConsensusIDAlgorithmAverage.setName
   :module: pyopenms.pyopenms_8


Cython signature: void setName(const String &)
Sets the name




.. py:method:: ConsensusIDAlgorithmAverage.setParameters
   :module: pyopenms.pyopenms_8


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: ConsensusIDAlgorithmBest
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _ConsensusIDAlgorithmBest


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ConsensusIDAlgorithmBest.html
 -- Inherits from ['ConsensusIDAlgorithmIdentity']




.. py:method:: ConsensusIDAlgorithmBest.apply
   :module: pyopenms.pyopenms_8


Cython signature: void apply(libcpp_vector[PeptideIdentification] & ids, size_t number_of_runs)
Calculates the consensus ID for a set of peptide identifications of one spectrum or (consensus) feature




.. py:method:: ConsensusIDAlgorithmBest.getDefaults
   :module: pyopenms.pyopenms_8


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: ConsensusIDAlgorithmBest.getName
   :module: pyopenms.pyopenms_8


Cython signature: String getName()
Returns the name




.. py:method:: ConsensusIDAlgorithmBest.getParameters
   :module: pyopenms.pyopenms_8


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: ConsensusIDAlgorithmBest.getSubsections
   :module: pyopenms.pyopenms_8


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: ConsensusIDAlgorithmBest.setName
   :module: pyopenms.pyopenms_8


Cython signature: void setName(const String &)
Sets the name




.. py:method:: ConsensusIDAlgorithmBest.setParameters
   :module: pyopenms.pyopenms_8


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: CrossLinkSpectrumMatch
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _CrossLinkSpectrumMatch


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::OPXLDataStructs_1_1CrossLinkSpectrumMatch.html




.. py:attribute:: CrossLinkSpectrumMatch.cross_link
   :module: pyopenms.pyopenms_8




.. py:attribute:: CrossLinkSpectrumMatch.frag_annotations
   :module: pyopenms.pyopenms_8




.. py:attribute:: CrossLinkSpectrumMatch.int_sum
   :module: pyopenms.pyopenms_8




.. py:attribute:: CrossLinkSpectrumMatch.intsum_alpha
   :module: pyopenms.pyopenms_8




.. py:attribute:: CrossLinkSpectrumMatch.intsum_beta
   :module: pyopenms.pyopenms_8




.. py:attribute:: CrossLinkSpectrumMatch.log_occupancy
   :module: pyopenms.pyopenms_8




.. py:attribute:: CrossLinkSpectrumMatch.log_occupancy_alpha
   :module: pyopenms.pyopenms_8




.. py:attribute:: CrossLinkSpectrumMatch.log_occupancy_beta
   :module: pyopenms.pyopenms_8




.. py:attribute:: CrossLinkSpectrumMatch.match_odds
   :module: pyopenms.pyopenms_8




.. py:attribute:: CrossLinkSpectrumMatch.match_odds_alpha
   :module: pyopenms.pyopenms_8




.. py:attribute:: CrossLinkSpectrumMatch.match_odds_beta
   :module: pyopenms.pyopenms_8




.. py:attribute:: CrossLinkSpectrumMatch.matched_linear_alpha
   :module: pyopenms.pyopenms_8




.. py:attribute:: CrossLinkSpectrumMatch.matched_linear_beta
   :module: pyopenms.pyopenms_8




.. py:attribute:: CrossLinkSpectrumMatch.matched_xlink_alpha
   :module: pyopenms.pyopenms_8




.. py:attribute:: CrossLinkSpectrumMatch.matched_xlink_beta
   :module: pyopenms.pyopenms_8




.. py:attribute:: CrossLinkSpectrumMatch.num_iso_peaks_mean
   :module: pyopenms.pyopenms_8




.. py:attribute:: CrossLinkSpectrumMatch.num_iso_peaks_mean_linear_alpha
   :module: pyopenms.pyopenms_8




.. py:attribute:: CrossLinkSpectrumMatch.num_iso_peaks_mean_linear_beta
   :module: pyopenms.pyopenms_8




.. py:attribute:: CrossLinkSpectrumMatch.num_iso_peaks_mean_xlinks_alpha
   :module: pyopenms.pyopenms_8




.. py:attribute:: CrossLinkSpectrumMatch.num_iso_peaks_mean_xlinks_beta
   :module: pyopenms.pyopenms_8




.. py:attribute:: CrossLinkSpectrumMatch.peptide_id_index
   :module: pyopenms.pyopenms_8




.. py:attribute:: CrossLinkSpectrumMatch.percTIC
   :module: pyopenms.pyopenms_8




.. py:attribute:: CrossLinkSpectrumMatch.ppm_error_abs_sum
   :module: pyopenms.pyopenms_8




.. py:attribute:: CrossLinkSpectrumMatch.ppm_error_abs_sum_alpha
   :module: pyopenms.pyopenms_8




.. py:attribute:: CrossLinkSpectrumMatch.ppm_error_abs_sum_beta
   :module: pyopenms.pyopenms_8




.. py:attribute:: CrossLinkSpectrumMatch.ppm_error_abs_sum_linear
   :module: pyopenms.pyopenms_8




.. py:attribute:: CrossLinkSpectrumMatch.ppm_error_abs_sum_linear_alpha
   :module: pyopenms.pyopenms_8




.. py:attribute:: CrossLinkSpectrumMatch.ppm_error_abs_sum_linear_beta
   :module: pyopenms.pyopenms_8




.. py:attribute:: CrossLinkSpectrumMatch.ppm_error_abs_sum_xlinks
   :module: pyopenms.pyopenms_8




.. py:attribute:: CrossLinkSpectrumMatch.ppm_error_abs_sum_xlinks_alpha
   :module: pyopenms.pyopenms_8




.. py:attribute:: CrossLinkSpectrumMatch.ppm_error_abs_sum_xlinks_beta
   :module: pyopenms.pyopenms_8




.. py:attribute:: CrossLinkSpectrumMatch.pre_score
   :module: pyopenms.pyopenms_8




.. py:attribute:: CrossLinkSpectrumMatch.precursor_correction
   :module: pyopenms.pyopenms_8




.. py:attribute:: CrossLinkSpectrumMatch.precursor_error_ppm
   :module: pyopenms.pyopenms_8




.. py:attribute:: CrossLinkSpectrumMatch.precursor_residual_peak_count
   :module: pyopenms.pyopenms_8




.. py:attribute:: CrossLinkSpectrumMatch.precursor_signal_proportion
   :module: pyopenms.pyopenms_8




.. py:attribute:: CrossLinkSpectrumMatch.precursor_target_intensity
   :module: pyopenms.pyopenms_8




.. py:attribute:: CrossLinkSpectrumMatch.precursor_target_peak_count
   :module: pyopenms.pyopenms_8




.. py:attribute:: CrossLinkSpectrumMatch.precursor_total_intensity
   :module: pyopenms.pyopenms_8




.. py:attribute:: CrossLinkSpectrumMatch.rank
   :module: pyopenms.pyopenms_8




.. py:attribute:: CrossLinkSpectrumMatch.scan_index_heavy
   :module: pyopenms.pyopenms_8




.. py:attribute:: CrossLinkSpectrumMatch.scan_index_light
   :module: pyopenms.pyopenms_8




.. py:attribute:: CrossLinkSpectrumMatch.score
   :module: pyopenms.pyopenms_8




.. py:attribute:: CrossLinkSpectrumMatch.total_current
   :module: pyopenms.pyopenms_8




.. py:attribute:: CrossLinkSpectrumMatch.wTIC
   :module: pyopenms.pyopenms_8




.. py:attribute:: CrossLinkSpectrumMatch.wTICold
   :module: pyopenms.pyopenms_8




.. py:attribute:: CrossLinkSpectrumMatch.xcorrc_max
   :module: pyopenms.pyopenms_8




.. py:attribute:: CrossLinkSpectrumMatch.xcorrx_max
   :module: pyopenms.pyopenms_8




.. py:attribute:: CrossLinkSpectrumMatch.xquest_score
   :module: pyopenms.pyopenms_8




.. py:class:: CrossLinksDB
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _CrossLinksDB


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1CrossLinksDB.html




.. py:method:: CrossLinksDB.findModificationIndex
   :module: pyopenms.pyopenms_8


Cython signature: size_t findModificationIndex(const String & mod_name)




.. py:method:: CrossLinksDB.getAllSearchModifications
   :module: pyopenms.pyopenms_8


Cython signature: void getAllSearchModifications(libcpp_vector[String] & modifications)




.. py:method:: CrossLinksDB.getBestModificationByDiffMonoMass
   :module: pyopenms.pyopenms_8


Cython signature: const ResidueModification * getBestModificationByDiffMonoMass(double mass, double max_error, const String residue, TermSpecificity term_spec)




.. py:method:: CrossLinksDB.getModification
   :module: pyopenms.pyopenms_8


- Cython signature: const ResidueModification * getModification(size_t index)
- Cython signature: const ResidueModification * getModification(const String & mod_name)
- Cython signature: const ResidueModification * getModification(const String & mod_name, const String & residue, TermSpecificity term_spec)




.. py:method:: CrossLinksDB.getNumberOfModifications
   :module: pyopenms.pyopenms_8


Cython signature: size_t getNumberOfModifications()




.. py:method:: CrossLinksDB.has
   :module: pyopenms.pyopenms_8


Cython signature: bool has(String modification)




.. py:method:: CrossLinksDB.isInstantiated
   :module: pyopenms.pyopenms_8


Cython signature: bool isInstantiated()




.. py:method:: CrossLinksDB.readFromOBOFile
   :module: pyopenms.pyopenms_8


Cython signature: void readFromOBOFile(const String & filename)




.. py:method:: CrossLinksDB.searchModifications
   :module: pyopenms.pyopenms_8


Cython signature: void searchModifications(libcpp_set[const ResidueModification *] & mods, const String & mod_name, const String & residue, TermSpecificity term_spec)




.. py:method:: CrossLinksDB.searchModificationsByDiffMonoMass
   :module: pyopenms.pyopenms_8


Cython signature: void searchModificationsByDiffMonoMass(libcpp_vector[String] & mods, double mass, double max_error, const String & residue, TermSpecificity term_spec)




.. py:class:: CsiAdapterHit
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _CsiAdapterHit


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::CsiFingerIdMzTabWriter_1_1CsiAdapterHit.html




.. py:attribute:: CsiAdapterHit.adduct
   :module: pyopenms.pyopenms_8




.. py:attribute:: CsiAdapterHit.dbflags
   :module: pyopenms.pyopenms_8




.. py:attribute:: CsiAdapterHit.formula_rank
   :module: pyopenms.pyopenms_8




.. py:attribute:: CsiAdapterHit.inchi
   :module: pyopenms.pyopenms_8




.. py:attribute:: CsiAdapterHit.inchikey2D
   :module: pyopenms.pyopenms_8




.. py:attribute:: CsiAdapterHit.links
   :module: pyopenms.pyopenms_8




.. py:attribute:: CsiAdapterHit.molecular_formula
   :module: pyopenms.pyopenms_8




.. py:attribute:: CsiAdapterHit.name
   :module: pyopenms.pyopenms_8




.. py:attribute:: CsiAdapterHit.pubchemids
   :module: pyopenms.pyopenms_8




.. py:attribute:: CsiAdapterHit.rank
   :module: pyopenms.pyopenms_8




.. py:attribute:: CsiAdapterHit.score
   :module: pyopenms.pyopenms_8




.. py:attribute:: CsiAdapterHit.smiles
   :module: pyopenms.pyopenms_8




.. py:attribute:: CsiAdapterHit.xlogp
   :module: pyopenms.pyopenms_8




.. py:class:: CsvFile
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _CsvFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1CsvFile.html




.. py:method:: CsvFile.addRow
   :module: pyopenms.pyopenms_8


Cython signature: void addRow(const StringList & list)
Add a row to the buffer




.. py:method:: CsvFile.clear
   :module: pyopenms.pyopenms_8


Cython signature: void clear()
Clears the buffer




.. py:method:: CsvFile.getRow
   :module: pyopenms.pyopenms_8


Cython signature: bool getRow(int row, StringList & list)
Writes all items from a row to list




.. py:method:: CsvFile.load
   :module: pyopenms.pyopenms_8


Cython signature: void load(const String & filename, char is_, bool ie_, int first_n)
Loads data from a text file




.. py:method:: CsvFile.store
   :module: pyopenms.pyopenms_8


Cython signature: void store(const String & filename)
Stores the buffer's content into a file




.. py:class:: DRange1
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _DRange1


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1DRange1.html




.. py:method:: DRange1.encloses
   :module: pyopenms.pyopenms_8


Cython signature: bool encloses(DPosition1 & position)




.. py:method:: DRange1.isEmpty
   :module: pyopenms.pyopenms_8


Cython signature: bool isEmpty()




.. py:method:: DRange1.isIntersected
   :module: pyopenms.pyopenms_8


Cython signature: bool isIntersected(DRange1 & range_)




.. py:method:: DRange1.united
   :module: pyopenms.pyopenms_8


Cython signature: DRange1 united(DRange1 other_range)




.. py:class:: DRange2
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _DRange2


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1DRange2.html




.. py:method:: DRange2.isEmpty
   :module: pyopenms.pyopenms_8


Cython signature: bool isEmpty()




.. py:method:: DRange2.isIntersected
   :module: pyopenms.pyopenms_8


Cython signature: bool isIntersected(DRange2 & range_)




.. py:method:: DRange2.united
   :module: pyopenms.pyopenms_8


Cython signature: DRange2 united(DRange2 other_range)




.. py:class:: DRangeIntersection
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`




.. py:attribute:: DRangeIntersection.Disjoint
   :module: pyopenms.pyopenms_8
   :value: 0




.. py:attribute:: DRangeIntersection.Inside
   :module: pyopenms.pyopenms_8
   :value: 2




.. py:attribute:: DRangeIntersection.Intersects
   :module: pyopenms.pyopenms_8
   :value: 1




.. py:method:: DRangeIntersection.getMapping
   :module: pyopenms.pyopenms_8




.. py:class:: Date
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _Date


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1Date.html




.. py:method:: Date.clear
   :module: pyopenms.pyopenms_8


Cython signature: void clear()




.. py:method:: Date.get
   :module: pyopenms.pyopenms_8


Cython signature: String get()




.. py:method:: Date.set
   :module: pyopenms.pyopenms_8


Cython signature: void set(const String & date)




.. py:method:: Date.today
   :module: pyopenms.pyopenms_8


Cython signature: Date today()




.. py:class:: DecoyGenerator
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _DecoyGenerator


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1DecoyGenerator.html




.. py:method:: DecoyGenerator.reversePeptides
   :module: pyopenms.pyopenms_8


Cython signature: AASequence reversePeptides(const AASequence & protein, const String & protease)
Reverses the protein's peptide sequences between enzymatic cutting positions




.. py:method:: DecoyGenerator.reverseProtein
   :module: pyopenms.pyopenms_8


Cython signature: AASequence reverseProtein(const AASequence & protein)
Reverses the protein sequence




.. py:method:: DecoyGenerator.setSeed
   :module: pyopenms.pyopenms_8


Cython signature: void setSeed(uint64_t)




.. py:method:: DecoyGenerator.shufflePeptides
   :module: pyopenms.pyopenms_8


Cython signature: AASequence shufflePeptides(const AASequence & aas, const String & protease, const int max_attempts)
Shuffle the protein's peptide sequences between enzymatic cutting positions, each peptide is shuffled @param max_attempts times to minimize sequence identity




.. py:class:: Deisotoper
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _Deisotoper


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1Deisotoper.html




.. py:method:: Deisotoper.deisotopeAndSingleCharge
   :module: pyopenms.pyopenms_8


Cython signature: void deisotopeAndSingleCharge(MSSpectrum & spectra, double fragment_tolerance, bool fragment_unit_ppm, int min_charge, int max_charge, bool keep_only_deisotoped, unsigned int min_isopeaks, unsigned int max_isopeaks, bool make_single_charged, bool annotate_charge, bool annotate_iso_peak_count, bool use_decreasing_model, unsigned int start_intensity_check, bool add_up_intensity)




.. py:method:: Deisotoper.deisotopeAndSingleChargeDefault
   :module: pyopenms.pyopenms_8


Cython signature: void deisotopeAndSingleChargeDefault(MSSpectrum & spectra, double fragment_tolerance, bool fragment_unit_ppm)




.. py:method:: Deisotoper.deisotopeWithAveragineModel
   :module: pyopenms.pyopenms_8


Cython signature: void deisotopeWithAveragineModel(MSSpectrum & spectrum, double fragment_tolerance, bool fragment_unit_ppm, int number_of_final_peaks, int min_charge, int max_charge, bool keep_only_deisotoped, unsigned int min_isopeaks, unsigned int max_isopeaks, bool make_single_charged, bool annotate_charge, bool annotate_iso_peak_count, bool add_up_intensity)




.. py:class:: Element
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _Element


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1Element.html




.. py:method:: Element.getAtomicNumber
   :module: pyopenms.pyopenms_8


Cython signature: unsigned int getAtomicNumber()
Returns the unique atomic number




.. py:method:: Element.getAverageWeight
   :module: pyopenms.pyopenms_8


Cython signature: double getAverageWeight()
Returns the average weight of the element




.. py:method:: Element.getIsotopeDistribution
   :module: pyopenms.pyopenms_8


Cython signature: IsotopeDistribution getIsotopeDistribution()
Returns the isotope distribution of the element




.. py:method:: Element.getMonoWeight
   :module: pyopenms.pyopenms_8


Cython signature: double getMonoWeight()
Returns the mono isotopic weight of the element




.. py:method:: Element.getName
   :module: pyopenms.pyopenms_8


Cython signature: String getName()
Returns the name of the element




.. py:method:: Element.getSymbol
   :module: pyopenms.pyopenms_8


Cython signature: String getSymbol()
Returns symbol of the element




.. py:method:: Element.setAtomicNumber
   :module: pyopenms.pyopenms_8


Cython signature: void setAtomicNumber(unsigned int atomic_number)
Sets unique atomic number




.. py:method:: Element.setAverageWeight
   :module: pyopenms.pyopenms_8


Cython signature: void setAverageWeight(double weight)
Sets the average weight of the element




.. py:method:: Element.setIsotopeDistribution
   :module: pyopenms.pyopenms_8


Cython signature: void setIsotopeDistribution(IsotopeDistribution isotopes)
Sets the isotope distribution of the element




.. py:method:: Element.setMonoWeight
   :module: pyopenms.pyopenms_8


Cython signature: void setMonoWeight(double weight)
Sets the mono isotopic weight of the element




.. py:method:: Element.setName
   :module: pyopenms.pyopenms_8


Cython signature: void setName(String name)
Sets the name of the element




.. py:method:: Element.setSymbol
   :module: pyopenms.pyopenms_8


Cython signature: void setSymbol(String symbol)
Sets symbol of the element




.. py:class:: EmgGradientDescent
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _EmgGradientDescent


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1EmgGradientDescent.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: EmgGradientDescent.fitEMGPeakModel
   :module: pyopenms.pyopenms_8


- Cython signature: void fitEMGPeakModel(MSChromatogram & input_peak, MSChromatogram & output_peak)
- Cython signature: void fitEMGPeakModel(MSSpectrum & input_peak, MSSpectrum & output_peak)
- Cython signature: void fitEMGPeakModel(MSChromatogram & input_peak, MSChromatogram & output_peak, double left_pos, double right_pos)
- Cython signature: void fitEMGPeakModel(MSSpectrum & input_peak, MSSpectrum & output_peak, double left_pos, double right_pos)




.. py:method:: EmgGradientDescent.getDefaultParameters
   :module: pyopenms.pyopenms_8


Cython signature: void getDefaultParameters(Param &)




.. py:method:: EmgGradientDescent.getDefaults
   :module: pyopenms.pyopenms_8


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: EmgGradientDescent.getName
   :module: pyopenms.pyopenms_8


Cython signature: String getName()
Returns the name




.. py:method:: EmgGradientDescent.getParameters
   :module: pyopenms.pyopenms_8


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: EmgGradientDescent.getSubsections
   :module: pyopenms.pyopenms_8


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: EmgGradientDescent.setName
   :module: pyopenms.pyopenms_8


Cython signature: void setName(const String &)
Sets the name




.. py:method:: EmgGradientDescent.setParameters
   :module: pyopenms.pyopenms_8


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: EmgModel
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _EmgModel


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1EmgModel.html
 -- Inherits from ['InterpolationModel']




.. py:method:: EmgModel.getCenter
   :module: pyopenms.pyopenms_8


Cython signature: double getCenter()
Returns the "center" of the model, particular definition (depends on the derived model)




.. py:method:: EmgModel.getIntensity
   :module: pyopenms.pyopenms_8


Cython signature: double getIntensity(double coord)
Access model predicted intensity at position 'pos'




.. py:method:: EmgModel.getInterpolation
   :module: pyopenms.pyopenms_8


Cython signature: LinearInterpolation getInterpolation()
Returns the interpolation class




.. py:method:: EmgModel.getProductName
   :module: pyopenms.pyopenms_8


Cython signature: String getProductName()
Name of the model




.. py:method:: EmgModel.getScalingFactor
   :module: pyopenms.pyopenms_8


Cython signature: double getScalingFactor()
Returns the interpolation class




.. py:method:: EmgModel.setInterpolationStep
   :module: pyopenms.pyopenms_8


Cython signature: void setInterpolationStep(double interpolation_step)
Sets the interpolation step for the linear interpolation of the model




.. py:method:: EmgModel.setOffset
   :module: pyopenms.pyopenms_8


Cython signature: void setOffset(double offset)
Sets the offset of the model




.. py:method:: EmgModel.setSamples
   :module: pyopenms.pyopenms_8


Cython signature: void setSamples()
Sets sample/supporting points of interpolation wrt params




.. py:method:: EmgModel.setScalingFactor
   :module: pyopenms.pyopenms_8


Cython signature: void setScalingFactor(double scaling)
Sets the scaling factor of the model




.. py:class:: EmpiricalFormula
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _EmpiricalFormula


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1EmpiricalFormula.html




.. py:method:: EmpiricalFormula.calculateTheoreticalIsotopesNumber
   :module: pyopenms.pyopenms_8


Cython signature: double calculateTheoreticalIsotopesNumber()




.. py:method:: EmpiricalFormula.contains
   :module: pyopenms.pyopenms_8


Cython signature: bool contains(EmpiricalFormula ef)
Returns true if all elements from `ef` ( empirical formula ) are LESS abundant (negative allowed) than the corresponding elements of this EmpiricalFormula




.. py:method:: EmpiricalFormula.estimateFromWeightAndComp
   :module: pyopenms.pyopenms_8


Cython signature: bool estimateFromWeightAndComp(double average_weight, double C, double H, double N, double O, double S, double P)
Fills this EmpiricalFormula with an approximate elemental composition for a given average weight and approximate elemental stoichiometry




.. py:method:: EmpiricalFormula.estimateFromWeightAndCompAndS
   :module: pyopenms.pyopenms_8


Cython signature: bool estimateFromWeightAndCompAndS(double average_weight, unsigned int S, double C, double H, double N, double O, double P)
Fills this EmpiricalFormula with an approximate elemental composition for a given average weight, exact number of sulfurs, and approximate elemental stoichiometry




.. py:method:: EmpiricalFormula.getAverageWeight
   :module: pyopenms.pyopenms_8


Cython signature: double getAverageWeight()
Returns the average weight of the formula (includes proton charges)




.. py:method:: EmpiricalFormula.getCharge
   :module: pyopenms.pyopenms_8


Cython signature: ptrdiff_t getCharge()
Returns the total charge




.. py:method:: EmpiricalFormula.getConditionalFragmentIsotopeDist
   :module: pyopenms.pyopenms_8


Cython signature: IsotopeDistribution getConditionalFragmentIsotopeDist(EmpiricalFormula & precursor, libcpp_set[unsigned int] & precursor_isotopes, CoarseIsotopePatternGenerator method)




.. py:method:: EmpiricalFormula.getElementalComposition
   :module: pyopenms.pyopenms_8


Cython signature: libcpp_map[libcpp_string,int] getElementalComposition()
Get elemental composition as a hash {'Symbol' -> NrAtoms}




.. py:method:: EmpiricalFormula.getIsotopeDistribution
   :module: pyopenms.pyopenms_8


- Cython signature: IsotopeDistribution getIsotopeDistribution(CoarseIsotopePatternGenerator)
  Computes the isotope distribution of an empirical formula using the CoarseIsotopePatternGenerator or the FineIsotopePatternGenerator method


- Cython signature: IsotopeDistribution getIsotopeDistribution(FineIsotopePatternGenerator)




.. py:method:: EmpiricalFormula.getMonoWeight
   :module: pyopenms.pyopenms_8


Cython signature: double getMonoWeight()
Returns the mono isotopic weight of the formula (includes proton charges)




.. py:method:: EmpiricalFormula.getNumberOfAtoms
   :module: pyopenms.pyopenms_8


Cython signature: size_t getNumberOfAtoms()
Returns the total number of atoms




.. py:method:: EmpiricalFormula.hasElement
   :module: pyopenms.pyopenms_8


Cython signature: bool hasElement(Element * element)
Returns true if the formula contains the element




.. py:method:: EmpiricalFormula.isCharged
   :module: pyopenms.pyopenms_8


Cython signature: bool isCharged()
Returns true if charge is not equal to zero




.. py:method:: EmpiricalFormula.isEmpty
   :module: pyopenms.pyopenms_8


Cython signature: bool isEmpty()
Returns true if the formula does not contain a element




.. py:method:: EmpiricalFormula.setCharge
   :module: pyopenms.pyopenms_8


Cython signature: void setCharge(ptrdiff_t charge)
Sets the charge




.. py:method:: EmpiricalFormula.toString
   :module: pyopenms.pyopenms_8


Cython signature: String toString()
Returns the formula as a string (charges are not included)




.. py:class:: EnzymaticDigestionLogModel
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _EnzymaticDigestionLogModel


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1EnzymaticDigestionLogModel.html




.. py:method:: EnzymaticDigestionLogModel.digest
   :module: pyopenms.pyopenms_8


Cython signature: void digest(AASequence & protein, libcpp_vector[AASequence] & output)
Performs the enzymatic digestion of a protein




.. py:method:: EnzymaticDigestionLogModel.getEnzymeName
   :module: pyopenms.pyopenms_8


Cython signature: String getEnzymeName()
Returns the enzyme for the digestion




.. py:method:: EnzymaticDigestionLogModel.getLogThreshold
   :module: pyopenms.pyopenms_8


Cython signature: double getLogThreshold()
Returns the threshold which needs to be exceeded to call a cleavage (only for the trained cleavage model on real data)




.. py:method:: EnzymaticDigestionLogModel.peptideCount
   :module: pyopenms.pyopenms_8


Cython signature: size_t peptideCount(AASequence & protein)


Returns the number of peptides a digestion of `protein` would yield under the current enzyme and missed cleavage settings
-----
:param protein: Name of protein




.. py:method:: EnzymaticDigestionLogModel.setEnzyme
   :module: pyopenms.pyopenms_8


Cython signature: void setEnzyme(String name)
Sets the enzyme for the digestion




.. py:method:: EnzymaticDigestionLogModel.setLogThreshold
   :module: pyopenms.pyopenms_8


Cython signature: void setLogThreshold(double threshold)
Sets the threshold which needs to be exceeded to call a cleavage (only for the trained cleavage model on real data). Default is 0.25




.. py:class:: ExperimentalDesign
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _ExperimentalDesign


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ExperimentalDesign.html


 Representation of an experimental design in OpenMS. Instances can be loaded with the ExperimentalDesignFile class




.. py:method:: ExperimentalDesign.fromConsensusMap
   :module: pyopenms.pyopenms_8


Cython signature: ExperimentalDesign fromConsensusMap(ConsensusMap c)




.. py:method:: ExperimentalDesign.fromFeatureMap
   :module: pyopenms.pyopenms_8


Cython signature: ExperimentalDesign fromFeatureMap(FeatureMap f)




.. py:method:: ExperimentalDesign.fromIdentifications
   :module: pyopenms.pyopenms_8


Cython signature: ExperimentalDesign fromIdentifications(libcpp_vector[ProteinIdentification] & proteins)




.. py:method:: ExperimentalDesign.getMSFileSection
   :module: pyopenms.pyopenms_8


Cython signature: libcpp_vector[ExperimentalDesign_MSFileSectionEntry] getMSFileSection()




.. py:method:: ExperimentalDesign.getNumberOfFractionGroups
   :module: pyopenms.pyopenms_8


Cython signature: unsigned int getNumberOfFractionGroups()
Allows to group fraction ids and source files. Return the number of fraction_groups




.. py:method:: ExperimentalDesign.getNumberOfFractions
   :module: pyopenms.pyopenms_8


Cython signature: unsigned int getNumberOfFractions()
Returns the number of fractions (= highest fraction index)




.. py:method:: ExperimentalDesign.getNumberOfLabels
   :module: pyopenms.pyopenms_8


Cython signature: unsigned int getNumberOfLabels()
Returns the number of labels per file




.. py:method:: ExperimentalDesign.getNumberOfMSFiles
   :module: pyopenms.pyopenms_8


Cython signature: unsigned int getNumberOfMSFiles()
Returns the number of MS files (= fractions * fraction_groups)




.. py:method:: ExperimentalDesign.getNumberOfSamples
   :module: pyopenms.pyopenms_8


Cython signature: unsigned int getNumberOfSamples()
Returns the number of samples measured (= highest sample index)




.. py:method:: ExperimentalDesign.getSample
   :module: pyopenms.pyopenms_8


Cython signature: unsigned int getSample(unsigned int fraction_group, unsigned int label)
Returns sample index (depends on fraction_group and label)




.. py:method:: ExperimentalDesign.getSampleSection
   :module: pyopenms.pyopenms_8


Cython signature: ExperimentalDesign_SampleSection getSampleSection()
Returns the Sample Section of the experimental design file




.. py:method:: ExperimentalDesign.isFractionated
   :module: pyopenms.pyopenms_8


Cython signature: bool isFractionated()
Returns whether at least one fraction_group in this experimental design is fractionated




.. py:method:: ExperimentalDesign.sameNrOfMSFilesPerFraction
   :module: pyopenms.pyopenms_8


Cython signature: bool sameNrOfMSFilesPerFraction()
Returns if each fraction number is associated with the same number of fraction_group




.. py:method:: ExperimentalDesign.setMSFileSection
   :module: pyopenms.pyopenms_8


Cython signature: void setMSFileSection(libcpp_vector[ExperimentalDesign_MSFileSectionEntry] msfile_section)




.. py:method:: ExperimentalDesign.setSampleSection
   :module: pyopenms.pyopenms_8


Cython signature: void setSampleSection(ExperimentalDesign_SampleSection sample_section)
Sets the Sample Section of the experimental design file




.. py:class:: ExperimentalDesign_MSFileSectionEntry
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _ExperimentalDesign_MSFileSectionEntry


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ExperimentalDesign_MSFileSectionEntry.html




.. py:attribute:: ExperimentalDesign_MSFileSectionEntry.fraction
   :module: pyopenms.pyopenms_8




.. py:attribute:: ExperimentalDesign_MSFileSectionEntry.fraction_group
   :module: pyopenms.pyopenms_8




.. py:attribute:: ExperimentalDesign_MSFileSectionEntry.label
   :module: pyopenms.pyopenms_8




.. py:attribute:: ExperimentalDesign_MSFileSectionEntry.path
   :module: pyopenms.pyopenms_8




.. py:attribute:: ExperimentalDesign_MSFileSectionEntry.sample
   :module: pyopenms.pyopenms_8




.. py:class:: ExperimentalDesign_SampleSection
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _ExperimentalDesign_SampleSection


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ExperimentalDesign_SampleSection.html




.. py:method:: ExperimentalDesign_SampleSection.getFactorValue
   :module: pyopenms.pyopenms_8


Cython signature: String getFactorValue(unsigned int sample, String & factor)
Returns value of factor for given sample and factor name




.. py:method:: ExperimentalDesign_SampleSection.getFactors
   :module: pyopenms.pyopenms_8


Cython signature: libcpp_set[String] getFactors()
Returns a set of all factors (column names) that were defined for the sample section




.. py:method:: ExperimentalDesign_SampleSection.getSamples
   :module: pyopenms.pyopenms_8


Cython signature: libcpp_set[unsigned int] getSamples()
Returns a set of all samples that are present in the sample section




.. py:method:: ExperimentalDesign_SampleSection.hasFactor
   :module: pyopenms.pyopenms_8


Cython signature: bool hasFactor(String & factor)
Checks whether Sample Section has a specific factor (i.e. column name)




.. py:method:: ExperimentalDesign_SampleSection.hasSample
   :module: pyopenms.pyopenms_8


Cython signature: bool hasSample(unsigned int sample)
Checks whether sample section has row for a sample number




.. py:class:: FASTAEntry
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _FASTAEntry


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1FASTAEntry.html




.. py:attribute:: FASTAEntry.description
   :module: pyopenms.pyopenms_8




.. py:method:: FASTAEntry.headerMatches
   :module: pyopenms.pyopenms_8


Cython signature: bool headerMatches(const FASTAEntry & rhs)




.. py:attribute:: FASTAEntry.identifier
   :module: pyopenms.pyopenms_8




.. py:attribute:: FASTAEntry.sequence
   :module: pyopenms.pyopenms_8




.. py:method:: FASTAEntry.sequenceMatches
   :module: pyopenms.pyopenms_8


Cython signature: bool sequenceMatches(const FASTAEntry & rhs)




.. py:class:: FASTAFile
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _FASTAFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1FASTAFile.html




.. py:method:: FASTAFile.atEnd
   :module: pyopenms.pyopenms_8


Cython signature: bool atEnd()
Boolean function to check if streams is at end of file




.. py:method:: FASTAFile.load
   :module: pyopenms.pyopenms_8


Cython signature: void load(const String & filename, libcpp_vector[FASTAEntry] & data)
Loads a FASTA file given by 'filename' and stores the information in 'data'




.. py:method:: FASTAFile.readNext
   :module: pyopenms.pyopenms_8


Cython signature: bool readNext(FASTAEntry & protein)


Reads the next FASTA entry from file
-----
If you want to read all entries in one go, use load()
-----
:returns: true if entry was read; false if eof was reached
:raises:
    Exception:FileNotFound is thrown if the file does not exists
:raises:
    Exception:ParseError is thrown if the file does not suit to the standard




.. py:method:: FASTAFile.readStart
   :module: pyopenms.pyopenms_8


Cython signature: void readStart(const String & filename)


Prepares a FASTA file given by 'filename' for streamed reading using readNext()
-----
:raises:
    Exception:FileNotFound is thrown if the file does not exists
:raises:
    Exception:ParseError is thrown if the file does not suit to the standard
Reads the next FASTA entry from file
-----
If you want to read all entries in one go, use load()
-----
:returns: true if entry was read; false if eof was reached
:raises:
    Exception:FileNotFound is thrown if the file does not exists
:raises:
    Exception:ParseError is thrown if the file does not suit to the standard




.. py:method:: FASTAFile.store
   :module: pyopenms.pyopenms_8


Cython signature: void store(const String & filename, libcpp_vector[FASTAEntry] & data)
Stores the data given by 'data' at the file 'filename'




.. py:method:: FASTAFile.writeEnd
   :module: pyopenms.pyopenms_8


Cython signature: void writeEnd()
Closes the file (flush). Called implicitly when FASTAFile object does out of scope




.. py:method:: FASTAFile.writeNext
   :module: pyopenms.pyopenms_8


Cython signature: void writeNext(const FASTAEntry & protein)


Stores the data given by `protein`. Call writeStart() once before calling writeNext()
-----
Call writeEnd() when done to close the file!
-----
:raises:
    Exception:UnableToCreateFile is thrown if the process is not able to write to the file (disk full?)




.. py:method:: FASTAFile.writeStart
   :module: pyopenms.pyopenms_8


Cython signature: void writeStart(const String & filename)


Prepares a FASTA file given by 'filename' for streamed writing using writeNext()
-----
:raises:
    Exception:UnableToCreateFile is thrown if the process is not able to write to the file (disk full?)
Stores the data given by `protein`. Call writeStart() once before calling writeNext()
-----
Call writeEnd() when done to close the file!
-----
:raises:
    Exception:UnableToCreateFile is thrown if the process is not able to write to the file (disk full?)




.. py:class:: Feature
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _Feature


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1Feature.html
 -- Inherits from ['UniqueIdInterface', 'RichPeak2D']


 An LC-MS feature
 -----
 The Feature class is used to describe the two-dimensional signal caused by an
 analyte. It can store a charge state and a list of peptide identifications
 (for peptides). The area occupied by the Feature in the LC-MS data set is
 represented by a list of convex hulls (one for each isotopic peak). There is
 also a convex hull for the entire Feature. The model description can store
 the parameters of a two-dimensional theoretical model of the underlying
 signal in LC-MS. Currently, non-peptide compounds are also represented as
 features




.. py:method:: Feature.clearMetaInfo
   :module: pyopenms.pyopenms_8


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: Feature.clearUniqueId
   :module: pyopenms.pyopenms_8


Cython signature: size_t clearUniqueId()
Clear the unique id. The new unique id will be invalid. Returns 1 if the unique id was changed, 0 otherwise




.. py:method:: Feature.encloses
   :module: pyopenms.pyopenms_8


Cython signature: bool encloses(double rt, double mz)


Returns if the mass trace convex hulls of the feature enclose the position specified by `rt` and `mz`
-----
:param rt: Sequence to digest
:param mz: Digestion products




.. py:method:: Feature.ensureUniqueId
   :module: pyopenms.pyopenms_8


Cython signature: size_t ensureUniqueId()
Assigns a valid unique id, but only if the present one is invalid. Returns 1 if the unique id was changed, 0 otherwise




.. py:method:: Feature.getAnnotationState
   :module: pyopenms.pyopenms_8


Cython signature: AnnotationState getAnnotationState()




.. py:method:: Feature.getCharge
   :module: pyopenms.pyopenms_8


Cython signature: int getCharge()




.. py:method:: Feature.getConvexHull
   :module: pyopenms.pyopenms_8


Cython signature: ConvexHull2D getConvexHull()




.. py:method:: Feature.getConvexHulls
   :module: pyopenms.pyopenms_8


Cython signature: libcpp_vector[ConvexHull2D] getConvexHulls()




.. py:method:: Feature.getIntensity
   :module: pyopenms.pyopenms_8


Cython signature: float getIntensity()
Returns the data point intensity (height)




.. py:method:: Feature.getKeys
   :module: pyopenms.pyopenms_8


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: Feature.getMZ
   :module: pyopenms.pyopenms_8


Cython signature: double getMZ()
Returns the m/z coordinate (index 1)




.. py:method:: Feature.getMetaValue
   :module: pyopenms.pyopenms_8


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: Feature.getOverallQuality
   :module: pyopenms.pyopenms_8


Cython signature: float getOverallQuality()
Model and quality methods




.. py:method:: Feature.getPeptideIdentifications
   :module: pyopenms.pyopenms_8


Cython signature: libcpp_vector[PeptideIdentification] getPeptideIdentifications()
Returns a reference to the PeptideIdentification vector




.. py:method:: Feature.getQuality
   :module: pyopenms.pyopenms_8


Cython signature: float getQuality(size_t index)
Returns the quality in dimension c




.. py:method:: Feature.getRT
   :module: pyopenms.pyopenms_8


Cython signature: double getRT()
Returns the RT coordinate (index 0)




.. py:method:: Feature.getSubordinates
   :module: pyopenms.pyopenms_8


Cython signature: libcpp_vector[Feature] getSubordinates()
Returns the subordinate features




.. py:method:: Feature.getUniqueId
   :module: pyopenms.pyopenms_8


Cython signature: size_t getUniqueId()
Returns the unique id




.. py:method:: Feature.getWidth
   :module: pyopenms.pyopenms_8


Cython signature: float getWidth()




.. py:method:: Feature.hasInvalidUniqueId
   :module: pyopenms.pyopenms_8


Cython signature: size_t hasInvalidUniqueId()
Returns whether the unique id is invalid. Returns 1 if the unique id is invalid, 0 otherwise




.. py:method:: Feature.hasValidUniqueId
   :module: pyopenms.pyopenms_8


Cython signature: size_t hasValidUniqueId()
Returns whether the unique id is valid. Returns 1 if the unique id is valid, 0 otherwise




.. py:method:: Feature.isMetaEmpty
   :module: pyopenms.pyopenms_8


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: Feature.isValid
   :module: pyopenms.pyopenms_8


Cython signature: bool isValid(uint64_t unique_id)
Returns true if the unique_id is valid, false otherwise




.. py:method:: Feature.metaRegistry
   :module: pyopenms.pyopenms_8


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: Feature.metaValueExists
   :module: pyopenms.pyopenms_8


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: Feature.removeMetaValue
   :module: pyopenms.pyopenms_8


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: Feature.setCharge
   :module: pyopenms.pyopenms_8


Cython signature: void setCharge(int q)




.. py:method:: Feature.setConvexHulls
   :module: pyopenms.pyopenms_8


Cython signature: void setConvexHulls(libcpp_vector[ConvexHull2D])




.. py:method:: Feature.setIntensity
   :module: pyopenms.pyopenms_8


Cython signature: void setIntensity(float)
Returns the data point intensity (height)




.. py:method:: Feature.setMZ
   :module: pyopenms.pyopenms_8


Cython signature: void setMZ(double)
Returns the m/z coordinate (index 1)




.. py:method:: Feature.setMetaValue
   :module: pyopenms.pyopenms_8


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:method:: Feature.setOverallQuality
   :module: pyopenms.pyopenms_8


Cython signature: void setOverallQuality(float q)
Sets the overall quality




.. py:method:: Feature.setPeptideIdentifications
   :module: pyopenms.pyopenms_8


Cython signature: void setPeptideIdentifications(libcpp_vector[PeptideIdentification] & peptides)
Sets the PeptideIdentification vector




.. py:method:: Feature.setQuality
   :module: pyopenms.pyopenms_8


Cython signature: void setQuality(size_t index, float q)
Sets the quality in dimension c




.. py:method:: Feature.setRT
   :module: pyopenms.pyopenms_8


Cython signature: void setRT(double)
Returns the RT coordinate (index 0)




.. py:method:: Feature.setSubordinates
   :module: pyopenms.pyopenms_8


Cython signature: void setSubordinates(libcpp_vector[Feature])
Returns the subordinate features




.. py:method:: Feature.setUniqueId
   :module: pyopenms.pyopenms_8


Cython signature: void setUniqueId(uint64_t rhs)
Assigns a new, valid unique id. Always returns 1




.. py:method:: Feature.setWidth
   :module: pyopenms.pyopenms_8


Cython signature: void setWidth(float q)




.. py:class:: FeatureFinder
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _FeatureFinder


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1FeatureFinder.html
 -- Inherits from ['ProgressLogger']




.. py:method:: FeatureFinder.endProgress
   :module: pyopenms.pyopenms_8


Cython signature: void endProgress()
Ends the progress display




.. py:method:: FeatureFinder.getLogType
   :module: pyopenms.pyopenms_8


Cython signature: LogType getLogType()
Returns the type of progress log being used




.. py:method:: FeatureFinder.getParameters
   :module: pyopenms.pyopenms_8


Cython signature: Param getParameters(String algorithm_name)
Returns the default parameters for the algorithm with name `algorithm_name`




.. py:method:: FeatureFinder.nextProgress
   :module: pyopenms.pyopenms_8


Cython signature: void nextProgress()
Increment progress by 1 (according to range begin-end)




.. py:method:: FeatureFinder.run
   :module: pyopenms.pyopenms_8


Cython signature: void run(String algorithm_name, MSExperiment & input_map, FeatureMap & feats, Param & param, FeatureMap & seeds)


Executes the FeatureFinder using the given algorithm
-----
There are several constraints for the `input_map`.  They are tested before the algorithm starts.  It must only contain MS 1 level scans and you have to call updateRanges() before passing it to this method
The input map is sorted by RT & m/z if that's not the case
Furthermore we throw an Exception if the data contains negative m/z values,
as this will disturb most algorithms
-----
:param algorithm_name: Name of the feature finding algorithm to use
:param input_map: Input peak map
:param features: Output feature map
:param param: Algorithm parameters
:param seeds: List of seeds to use




.. py:method:: FeatureFinder.setLogType
   :module: pyopenms.pyopenms_8


Cython signature: void setLogType(LogType)
Sets the progress log that should be used. The default type is NONE!




.. py:method:: FeatureFinder.setProgress
   :module: pyopenms.pyopenms_8


Cython signature: void setProgress(ptrdiff_t value)
Sets the current progress




.. py:method:: FeatureFinder.startProgress
   :module: pyopenms.pyopenms_8


Cython signature: void startProgress(ptrdiff_t begin, ptrdiff_t end, String label)




.. py:class:: FeatureGroupingAlgorithm
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _FeatureGroupingAlgorithm


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1FeatureGroupingAlgorithm.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: FeatureGroupingAlgorithm.getDefaults
   :module: pyopenms.pyopenms_8


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: FeatureGroupingAlgorithm.getName
   :module: pyopenms.pyopenms_8


Cython signature: String getName()
Returns the name




.. py:method:: FeatureGroupingAlgorithm.getParameters
   :module: pyopenms.pyopenms_8


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: FeatureGroupingAlgorithm.getSubsections
   :module: pyopenms.pyopenms_8


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: FeatureGroupingAlgorithm.registerChildren
   :module: pyopenms.pyopenms_8


Cython signature: void registerChildren()
Register all derived classes in this method




.. py:method:: FeatureGroupingAlgorithm.setName
   :module: pyopenms.pyopenms_8


Cython signature: void setName(const String &)
Sets the name




.. py:method:: FeatureGroupingAlgorithm.setParameters
   :module: pyopenms.pyopenms_8


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: FeatureGroupingAlgorithm.transferSubelements
   :module: pyopenms.pyopenms_8


Cython signature: void transferSubelements(libcpp_vector[ConsensusMap] maps, ConsensusMap & out)
Transfers subelements (grouped features) from input consensus maps to the result consensus map




.. py:class:: FeatureGroupingAlgorithmKD
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _FeatureGroupingAlgorithmKD


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1FeatureGroupingAlgorithmKD.html
 -- Inherits from ['FeatureGroupingAlgorithm', 'ProgressLogger']




.. py:method:: FeatureGroupingAlgorithmKD.endProgress
   :module: pyopenms.pyopenms_8


Cython signature: void endProgress()
Ends the progress display




.. py:method:: FeatureGroupingAlgorithmKD.getDefaults
   :module: pyopenms.pyopenms_8


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: FeatureGroupingAlgorithmKD.getLogType
   :module: pyopenms.pyopenms_8


Cython signature: LogType getLogType()
Returns the type of progress log being used




.. py:method:: FeatureGroupingAlgorithmKD.getName
   :module: pyopenms.pyopenms_8


Cython signature: String getName()
Returns the name




.. py:method:: FeatureGroupingAlgorithmKD.getParameters
   :module: pyopenms.pyopenms_8


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: FeatureGroupingAlgorithmKD.getProductName
   :module: pyopenms.pyopenms_8


Cython signature: String getProductName()
Returns the product name (for the Factory)




.. py:method:: FeatureGroupingAlgorithmKD.getSubsections
   :module: pyopenms.pyopenms_8


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: FeatureGroupingAlgorithmKD.group
   :module: pyopenms.pyopenms_8


- Cython signature: void group(libcpp_vector[FeatureMap] & maps, ConsensusMap & out)
- Cython signature: void group(libcpp_vector[ConsensusMap] & maps, ConsensusMap & out)




.. py:method:: FeatureGroupingAlgorithmKD.nextProgress
   :module: pyopenms.pyopenms_8


Cython signature: void nextProgress()
Increment progress by 1 (according to range begin-end)




.. py:method:: FeatureGroupingAlgorithmKD.registerChildren
   :module: pyopenms.pyopenms_8


Cython signature: void registerChildren()
Register all derived classes in this method




.. py:method:: FeatureGroupingAlgorithmKD.setLogType
   :module: pyopenms.pyopenms_8


Cython signature: void setLogType(LogType)
Sets the progress log that should be used. The default type is NONE!




.. py:method:: FeatureGroupingAlgorithmKD.setName
   :module: pyopenms.pyopenms_8


Cython signature: void setName(const String &)
Sets the name




.. py:method:: FeatureGroupingAlgorithmKD.setParameters
   :module: pyopenms.pyopenms_8


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: FeatureGroupingAlgorithmKD.setProgress
   :module: pyopenms.pyopenms_8


Cython signature: void setProgress(ptrdiff_t value)
Sets the current progress




.. py:method:: FeatureGroupingAlgorithmKD.startProgress
   :module: pyopenms.pyopenms_8


Cython signature: void startProgress(ptrdiff_t begin, ptrdiff_t end, String label)




.. py:method:: FeatureGroupingAlgorithmKD.transferSubelements
   :module: pyopenms.pyopenms_8


Cython signature: void transferSubelements(libcpp_vector[ConsensusMap] maps, ConsensusMap & out)
Transfers subelements (grouped features) from input consensus maps to the result consensus map




.. py:class:: FeatureGroupingAlgorithmUnlabeled
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _FeatureGroupingAlgorithmUnlabeled


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1FeatureGroupingAlgorithmUnlabeled.html
 -- Inherits from ['FeatureGroupingAlgorithm']




.. py:method:: FeatureGroupingAlgorithmUnlabeled.addToGroup
   :module: pyopenms.pyopenms_8


Cython signature: void addToGroup(int map_id, FeatureMap feature_map)




.. py:method:: FeatureGroupingAlgorithmUnlabeled.getDefaults
   :module: pyopenms.pyopenms_8


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: FeatureGroupingAlgorithmUnlabeled.getName
   :module: pyopenms.pyopenms_8


Cython signature: String getName()
Returns the name




.. py:method:: FeatureGroupingAlgorithmUnlabeled.getParameters
   :module: pyopenms.pyopenms_8


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: FeatureGroupingAlgorithmUnlabeled.getProductName
   :module: pyopenms.pyopenms_8


Cython signature: String getProductName()




.. py:method:: FeatureGroupingAlgorithmUnlabeled.getResultMap
   :module: pyopenms.pyopenms_8


Cython signature: ConsensusMap getResultMap()




.. py:method:: FeatureGroupingAlgorithmUnlabeled.getSubsections
   :module: pyopenms.pyopenms_8


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: FeatureGroupingAlgorithmUnlabeled.group
   :module: pyopenms.pyopenms_8


Cython signature: void group(libcpp_vector[FeatureMap] & maps, ConsensusMap & out)




.. py:method:: FeatureGroupingAlgorithmUnlabeled.registerChildren
   :module: pyopenms.pyopenms_8


Cython signature: void registerChildren()
Register all derived classes in this method




.. py:method:: FeatureGroupingAlgorithmUnlabeled.setName
   :module: pyopenms.pyopenms_8


Cython signature: void setName(const String &)
Sets the name




.. py:method:: FeatureGroupingAlgorithmUnlabeled.setParameters
   :module: pyopenms.pyopenms_8


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: FeatureGroupingAlgorithmUnlabeled.setReference
   :module: pyopenms.pyopenms_8


Cython signature: void setReference(int map_id, FeatureMap map)




.. py:method:: FeatureGroupingAlgorithmUnlabeled.transferSubelements
   :module: pyopenms.pyopenms_8


Cython signature: void transferSubelements(libcpp_vector[ConsensusMap] maps, ConsensusMap & out)
Transfers subelements (grouped features) from input consensus maps to the result consensus map




.. py:class:: GNPSMGFFile
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _GNPSMGFFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1GNPSMGFFile.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: GNPSMGFFile.getDefaults
   :module: pyopenms.pyopenms_8


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: GNPSMGFFile.getName
   :module: pyopenms.pyopenms_8


Cython signature: String getName()
Returns the name




.. py:method:: GNPSMGFFile.getParameters
   :module: pyopenms.pyopenms_8


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: GNPSMGFFile.getSubsections
   :module: pyopenms.pyopenms_8


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: GNPSMGFFile.run
   :module: pyopenms.pyopenms_8


Cython signature: void run(String & consensus_file_path, StringList & mzml_file_paths, String & out)
Export consensus file from default workflow to GNPS MGF format




.. py:method:: GNPSMGFFile.setName
   :module: pyopenms.pyopenms_8


Cython signature: void setName(const String &)
Sets the name




.. py:method:: GNPSMGFFile.setParameters
   :module: pyopenms.pyopenms_8


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: GaussFitResult
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _GaussFitResult


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::Math_1_1GaussFitResult.html




.. py:attribute:: GaussFitResult.A
   :module: pyopenms.pyopenms_8




.. py:method:: GaussFitResult.eval
   :module: pyopenms.pyopenms_8


Cython signature: double eval(double)




.. py:attribute:: GaussFitResult.sigma
   :module: pyopenms.pyopenms_8




.. py:attribute:: GaussFitResult.x0
   :module: pyopenms.pyopenms_8




.. py:class:: GaussFitter
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _GaussFitter


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::Math_1_1GaussFitter.html




.. py:method:: GaussFitter.fit
   :module: pyopenms.pyopenms_8


Cython signature: GaussFitResult fit(libcpp_vector[DPosition2] points)
Fits a Gaussian distribution to the given data points




.. py:method:: GaussFitter.setInitialParameters
   :module: pyopenms.pyopenms_8


Cython signature: void setInitialParameters(GaussFitResult & result)
Sets the initial parameters used by the fit method as initial guess for the Gaussian




.. py:class:: IMSIsotopeDistribution
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _IMSIsotopeDistribution


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::ims::IMSIsotopeDistribution_1_1IMSIsotopeDistribution.html


 Represents a distribution of isotopes restricted to the first K elements
 -----
 Represents a distribution of isotopes of chemical elements as a list
 of peaks each as a pair of mass and abundance. 'IsotopeDistribution'
 unlike 'IsotopeSpecies' has one abundance per a nominal mass.
 Here is an example in the format (mass; abundance %)
 for molecule H2O (values are taken randomly):
 -----
 - IsotopeDistribution
     (18.00221; 99.03 %)
     (19.00334; 0.8 %)
     (20.00476; 0.17 %)
 -----
 - IsotopeSpecies
     (18.00197; 98.012 %)
     (18.00989; 1.018 %)
     (19.00312; 0.683 %)
     (19.00531; 0.117 %)
     (20.00413; 0.134 %)
     (20.00831; 0.036 %)
 -----
 To the sake of faster computations distribution is restricted
 to the first K elements, where K can be set by adjusting size
 'SIZE' of distribution. @note For the elements most abundant in
 living beings (CHNOPS) this restriction is negligible, since abundances
 decrease dramatically in isotopes order and are usually of no interest
 starting from +10 isotope.
 -----
 'IsotopeDistribution' implements folding with other distribution using an
 algorithm described in details in paper:
 Boecker et al. "Decomposing metabolic isotope patterns" WABI 2006. doi: 10.1007/11851561_2
 -----
 Folding with itself is done using Russian Multiplication Scheme




.. py:attribute:: IMSIsotopeDistribution.ABUNDANCES_SUM_ERROR
   :module: pyopenms.pyopenms_8




.. py:attribute:: IMSIsotopeDistribution.SIZE
   :module: pyopenms.pyopenms_8




.. py:method:: IMSIsotopeDistribution.empty
   :module: pyopenms.pyopenms_8


Cython signature: bool empty()
Returns true if the distribution has no peaks, false - otherwise




.. py:method:: IMSIsotopeDistribution.getAbundance
   :module: pyopenms.pyopenms_8


Cython signature: double getAbundance(int i)




.. py:method:: IMSIsotopeDistribution.getAbundances
   :module: pyopenms.pyopenms_8


Cython signature: libcpp_vector[double] getAbundances()
Gets an abundance of isotope 'i'




.. py:method:: IMSIsotopeDistribution.getAverageMass
   :module: pyopenms.pyopenms_8


Cython signature: double getAverageMass()




.. py:method:: IMSIsotopeDistribution.getMass
   :module: pyopenms.pyopenms_8


Cython signature: double getMass(int i)




.. py:method:: IMSIsotopeDistribution.getMasses
   :module: pyopenms.pyopenms_8


Cython signature: libcpp_vector[double] getMasses()
Gets a mass of isotope 'i'




.. py:method:: IMSIsotopeDistribution.getNominalMass
   :module: pyopenms.pyopenms_8


Cython signature: unsigned int getNominalMass()




.. py:method:: IMSIsotopeDistribution.normalize
   :module: pyopenms.pyopenms_8


Cython signature: void normalize()
Normalizes distribution, i.e. scaling abundances to be summed up to 1 with an error




.. py:method:: IMSIsotopeDistribution.setNominalMass
   :module: pyopenms.pyopenms_8


Cython signature: void setNominalMass(unsigned int nominalMass)




.. py:method:: IMSIsotopeDistribution.size
   :module: pyopenms.pyopenms_8


Cython signature: int size()




.. py:class:: IMSIsotopeDistribution_Peak
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _IMSIsotopeDistribution_Peak


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::ims::IMSIsotopeDistribution_1_1IMSIsotopeDistribution_Peak.html




.. py:attribute:: IMSIsotopeDistribution_Peak.abundance
   :module: pyopenms.pyopenms_8




.. py:attribute:: IMSIsotopeDistribution_Peak.mass
   :module: pyopenms.pyopenms_8




.. py:class:: Interfaces()
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`




.. py:attribute:: Interfaces.BinaryDataArray
   :module: pyopenms.pyopenms_8


alias of :py:class:`pyopenms.pyopenms_2._Interfaces_BinaryDataArray`


.. py:attribute:: Interfaces.Chromatogram
   :module: pyopenms.pyopenms_8


alias of :py:class:`pyopenms.pyopenms_2._Interfaces_Chromatogram`


.. py:attribute:: Interfaces.Spectrum
   :module: pyopenms.pyopenms_8


alias of :py:class:`pyopenms.pyopenms_2._Interfaces_Spectrum`


.. py:class:: IonDetector
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _IonDetector


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1IonDetector.html
 -- Inherits from ['MetaInfoInterface']




.. py:attribute:: IonDetector.AcquisitionMode
   :module: pyopenms.pyopenms_8


alias of :py:class:`pyopenms.pyopenms_8.__AcquisitionMode`


.. py:attribute:: IonDetector.Type_IonDetector
   :module: pyopenms.pyopenms_8


alias of :py:class:`pyopenms.pyopenms_8.__Type_IonDetector`


.. py:method:: IonDetector.clearMetaInfo
   :module: pyopenms.pyopenms_8


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: IonDetector.getADCSamplingFrequency
   :module: pyopenms.pyopenms_8


Cython signature: double getADCSamplingFrequency()
Returns the analog-to-digital converter sampling frequency (in Hz)




.. py:method:: IonDetector.getAcquisitionMode
   :module: pyopenms.pyopenms_8


Cython signature: AcquisitionMode getAcquisitionMode()
Returns the acquisition mode




.. py:method:: IonDetector.getKeys
   :module: pyopenms.pyopenms_8


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: IonDetector.getMetaValue
   :module: pyopenms.pyopenms_8


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: IonDetector.getOrder
   :module: pyopenms.pyopenms_8


Cython signature: int getOrder()
Returns the order




.. py:method:: IonDetector.getResolution
   :module: pyopenms.pyopenms_8


Cython signature: double getResolution()
Returns the resolution (in ns)




.. py:method:: IonDetector.getType
   :module: pyopenms.pyopenms_8


Cython signature: Type_IonDetector getType()
Returns the detector type




.. py:method:: IonDetector.isMetaEmpty
   :module: pyopenms.pyopenms_8


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: IonDetector.metaRegistry
   :module: pyopenms.pyopenms_8


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: IonDetector.metaValueExists
   :module: pyopenms.pyopenms_8


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: IonDetector.removeMetaValue
   :module: pyopenms.pyopenms_8


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: IonDetector.setADCSamplingFrequency
   :module: pyopenms.pyopenms_8


Cython signature: void setADCSamplingFrequency(double ADC_sampling_frequency)
Sets the analog-to-digital converter sampling frequency (in Hz)




.. py:method:: IonDetector.setAcquisitionMode
   :module: pyopenms.pyopenms_8


Cython signature: void setAcquisitionMode(AcquisitionMode acquisition_mode)
Sets the acquisition mode




.. py:method:: IonDetector.setMetaValue
   :module: pyopenms.pyopenms_8


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:method:: IonDetector.setOrder
   :module: pyopenms.pyopenms_8


Cython signature: void setOrder(int order)
Sets the order




.. py:method:: IonDetector.setResolution
   :module: pyopenms.pyopenms_8


Cython signature: void setResolution(double resolution)
Sets the resolution (in ns)




.. py:method:: IonDetector.setType
   :module: pyopenms.pyopenms_8


Cython signature: void setType(Type_IonDetector type_)
Sets the detector type




.. py:class:: IsobaricIsotopeCorrector
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _IsobaricIsotopeCorrector


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1IsobaricIsotopeCorrector.html




.. py:method:: IsobaricIsotopeCorrector.correctIsotopicImpurities
   :module: pyopenms.pyopenms_8


- Cython signature: IsobaricQuantifierStatistics correctIsotopicImpurities(ConsensusMap & consensus_map_in, ConsensusMap & consensus_map_out, ItraqEightPlexQuantitationMethod * quant_method)
- Cython signature: IsobaricQuantifierStatistics correctIsotopicImpurities(ConsensusMap & consensus_map_in, ConsensusMap & consensus_map_out, ItraqFourPlexQuantitationMethod * quant_method)
- Cython signature: IsobaricQuantifierStatistics correctIsotopicImpurities(ConsensusMap & consensus_map_in, ConsensusMap & consensus_map_out, TMTSixPlexQuantitationMethod * quant_method)
- Cython signature: IsobaricQuantifierStatistics correctIsotopicImpurities(ConsensusMap & consensus_map_in, ConsensusMap & consensus_map_out, TMTTenPlexQuantitationMethod * quant_method)




.. py:class:: IsotopeCluster
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _IsotopeCluster


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1IsotopeCluster.html




.. py:attribute:: IsotopeCluster.peaks
   :module: pyopenms.pyopenms_8




.. py:attribute:: IsotopeCluster.scans
   :module: pyopenms.pyopenms_8




.. py:class:: IsotopeFitter1D
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _IsotopeFitter1D


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1IsotopeFitter1D.html




.. py:method:: IsotopeFitter1D.getProductName
   :module: pyopenms.pyopenms_8


Cython signature: String getProductName()
Name of the model (needed by Factory)




.. py:class:: KDTreeFeatureMaps
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _KDTreeFeatureMaps


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1KDTreeFeatureMaps.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: KDTreeFeatureMaps.addMaps
   :module: pyopenms.pyopenms_8


- Cython signature: void addMaps(libcpp_vector[FeatureMap] & maps)
  Add `maps` and balance kd-tree


- Cython signature: void addMaps(libcpp_vector[ConsensusMap] & maps)




.. py:method:: KDTreeFeatureMaps.charge
   :module: pyopenms.pyopenms_8


Cython signature: int charge(size_t i)




.. py:method:: KDTreeFeatureMaps.clear
   :module: pyopenms.pyopenms_8


Cython signature: void clear()




.. py:method:: KDTreeFeatureMaps.getDefaults
   :module: pyopenms.pyopenms_8


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: KDTreeFeatureMaps.getName
   :module: pyopenms.pyopenms_8


Cython signature: String getName()
Returns the name




.. py:method:: KDTreeFeatureMaps.getNeighborhood
   :module: pyopenms.pyopenms_8


Cython signature: void getNeighborhood(size_t index, libcpp_vector[size_t] & result_indices, double rt_tol, double mz_tol, bool mz_ppm, bool include_features_from_same_map, double max_pairwise_log_fc)
Fill `result` with indices of all features compatible (wrt. RT, m/z, map index) to the feature with `index`




.. py:method:: KDTreeFeatureMaps.getParameters
   :module: pyopenms.pyopenms_8


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: KDTreeFeatureMaps.getSubsections
   :module: pyopenms.pyopenms_8


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: KDTreeFeatureMaps.intensity
   :module: pyopenms.pyopenms_8


Cython signature: float intensity(size_t i)




.. py:method:: KDTreeFeatureMaps.mapIndex
   :module: pyopenms.pyopenms_8


Cython signature: size_t mapIndex(size_t i)




.. py:method:: KDTreeFeatureMaps.mz
   :module: pyopenms.pyopenms_8


Cython signature: double mz(size_t i)




.. py:method:: KDTreeFeatureMaps.numMaps
   :module: pyopenms.pyopenms_8


Cython signature: size_t numMaps()




.. py:method:: KDTreeFeatureMaps.optimizeTree
   :module: pyopenms.pyopenms_8


Cython signature: void optimizeTree()




.. py:method:: KDTreeFeatureMaps.queryRegion
   :module: pyopenms.pyopenms_8


Cython signature: void queryRegion(double rt_low, double rt_high, double mz_low, double mz_high, libcpp_vector[size_t] & result_indices, size_t ignored_map_index)




.. py:method:: KDTreeFeatureMaps.rt
   :module: pyopenms.pyopenms_8


Cython signature: double rt(size_t i)




.. py:method:: KDTreeFeatureMaps.setName
   :module: pyopenms.pyopenms_8


Cython signature: void setName(const String &)
Sets the name




.. py:method:: KDTreeFeatureMaps.setParameters
   :module: pyopenms.pyopenms_8


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: KDTreeFeatureMaps.size
   :module: pyopenms.pyopenms_8


Cython signature: size_t size()




.. py:method:: KDTreeFeatureMaps.treeSize
   :module: pyopenms.pyopenms_8


Cython signature: size_t treeSize()




.. py:class:: LightMRMTransitionGroupCP
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _MRMTransitionGroup[_MSChromatogram,_LightTransition]


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MRMTransitionGroup[_MSChromatogram,_LightTransition].html




.. py:method:: LightMRMTransitionGroupCP.addChromatogram
   :module: pyopenms.pyopenms_8


Cython signature: void addChromatogram(MSChromatogram chromatogram, String key)




.. py:method:: LightMRMTransitionGroupCP.addFeature
   :module: pyopenms.pyopenms_8


Cython signature: void addFeature(MRMFeature feature)




.. py:method:: LightMRMTransitionGroupCP.addPrecursorChromatogram
   :module: pyopenms.pyopenms_8


Cython signature: void addPrecursorChromatogram(MSChromatogram chromatogram, String key)




.. py:method:: LightMRMTransitionGroupCP.addTransition
   :module: pyopenms.pyopenms_8


Cython signature: void addTransition(LightTransition transition, String key)




.. py:method:: LightMRMTransitionGroupCP.chromatogramIdsMatch
   :module: pyopenms.pyopenms_8


Cython signature: bool chromatogramIdsMatch()




.. py:method:: LightMRMTransitionGroupCP.getBestFeature
   :module: pyopenms.pyopenms_8


Cython signature: MRMFeature getBestFeature()




.. py:method:: LightMRMTransitionGroupCP.getChromatogram
   :module: pyopenms.pyopenms_8


Cython signature: MSChromatogram getChromatogram(String key)




.. py:method:: LightMRMTransitionGroupCP.getChromatograms
   :module: pyopenms.pyopenms_8


Cython signature: libcpp_vector[MSChromatogram] getChromatograms()




.. py:method:: LightMRMTransitionGroupCP.getFeatures
   :module: pyopenms.pyopenms_8


Cython signature: libcpp_vector[MRMFeature] getFeatures()




.. py:method:: LightMRMTransitionGroupCP.getFeaturesMuteable
   :module: pyopenms.pyopenms_8


Cython signature: libcpp_vector[MRMFeature] getFeaturesMuteable()




.. py:method:: LightMRMTransitionGroupCP.getLibraryIntensity
   :module: pyopenms.pyopenms_8


Cython signature: void getLibraryIntensity(libcpp_vector[double] result)




.. py:method:: LightMRMTransitionGroupCP.getPrecursorChromatogram
   :module: pyopenms.pyopenms_8


Cython signature: MSChromatogram getPrecursorChromatogram(String key)




.. py:method:: LightMRMTransitionGroupCP.getPrecursorChromatograms
   :module: pyopenms.pyopenms_8


Cython signature: libcpp_vector[MSChromatogram] getPrecursorChromatograms()




.. py:method:: LightMRMTransitionGroupCP.getTransition
   :module: pyopenms.pyopenms_8


Cython signature: LightTransition getTransition(String key)




.. py:method:: LightMRMTransitionGroupCP.getTransitionGroupID
   :module: pyopenms.pyopenms_8


Cython signature: String getTransitionGroupID()




.. py:method:: LightMRMTransitionGroupCP.getTransitions
   :module: pyopenms.pyopenms_8


Cython signature: libcpp_vector[LightTransition] getTransitions()




.. py:method:: LightMRMTransitionGroupCP.getTransitionsMuteable
   :module: pyopenms.pyopenms_8


Cython signature: libcpp_vector[LightTransition] getTransitionsMuteable()




.. py:method:: LightMRMTransitionGroupCP.hasChromatogram
   :module: pyopenms.pyopenms_8


Cython signature: bool hasChromatogram(String key)




.. py:method:: LightMRMTransitionGroupCP.hasPrecursorChromatogram
   :module: pyopenms.pyopenms_8


Cython signature: bool hasPrecursorChromatogram(String key)




.. py:method:: LightMRMTransitionGroupCP.hasTransition
   :module: pyopenms.pyopenms_8


Cython signature: bool hasTransition(String key)




.. py:method:: LightMRMTransitionGroupCP.isInternallyConsistent
   :module: pyopenms.pyopenms_8


Cython signature: bool isInternallyConsistent()




.. py:method:: LightMRMTransitionGroupCP.setTransitionGroupID
   :module: pyopenms.pyopenms_8


Cython signature: void setTransitionGroupID(String tr_gr_id)




.. py:method:: LightMRMTransitionGroupCP.size
   :module: pyopenms.pyopenms_8


Cython signature: size_t size()




.. py:method:: LightMRMTransitionGroupCP.subset
   :module: pyopenms.pyopenms_8


Cython signature: LightMRMTransitionGroupCP subset(libcpp_vector[libcpp_utf8_string] tr_ids)




.. py:class:: LinearResampler
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _LinearResampler


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1LinearResampler.html
 -- Inherits from ['DefaultParamHandler', 'ProgressLogger']




.. py:method:: LinearResampler.endProgress
   :module: pyopenms.pyopenms_8


Cython signature: void endProgress()
Ends the progress display




.. py:method:: LinearResampler.getDefaults
   :module: pyopenms.pyopenms_8


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: LinearResampler.getLogType
   :module: pyopenms.pyopenms_8


Cython signature: LogType getLogType()
Returns the type of progress log being used




.. py:method:: LinearResampler.getName
   :module: pyopenms.pyopenms_8


Cython signature: String getName()
Returns the name




.. py:method:: LinearResampler.getParameters
   :module: pyopenms.pyopenms_8


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: LinearResampler.getSubsections
   :module: pyopenms.pyopenms_8


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: LinearResampler.nextProgress
   :module: pyopenms.pyopenms_8


Cython signature: void nextProgress()
Increment progress by 1 (according to range begin-end)




.. py:method:: LinearResampler.raster
   :module: pyopenms.pyopenms_8


Cython signature: void raster(MSSpectrum & input)
Applies the resampling algorithm to an MSSpectrum




.. py:method:: LinearResampler.rasterExperiment
   :module: pyopenms.pyopenms_8


Cython signature: void rasterExperiment(MSExperiment & input)
Resamples the data in an MSExperiment




.. py:method:: LinearResampler.setLogType
   :module: pyopenms.pyopenms_8


Cython signature: void setLogType(LogType)
Sets the progress log that should be used. The default type is NONE!




.. py:method:: LinearResampler.setName
   :module: pyopenms.pyopenms_8


Cython signature: void setName(const String &)
Sets the name




.. py:method:: LinearResampler.setParameters
   :module: pyopenms.pyopenms_8


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: LinearResampler.setProgress
   :module: pyopenms.pyopenms_8


Cython signature: void setProgress(ptrdiff_t value)
Sets the current progress




.. py:method:: LinearResampler.startProgress
   :module: pyopenms.pyopenms_8


Cython signature: void startProgress(ptrdiff_t begin, ptrdiff_t end, String label)




.. py:class:: MRMDecoy
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _MRMDecoy


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MRMDecoy.html
 -- Inherits from ['ProgressLogger']




.. py:method:: MRMDecoy.endProgress
   :module: pyopenms.pyopenms_8


Cython signature: void endProgress()
Ends the progress display




.. py:method:: MRMDecoy.findFixedResidues
   :module: pyopenms.pyopenms_8


Cython signature: libcpp_vector[size_t] findFixedResidues(const String & sequence, bool keepN, bool keepC, const String & keep_const_pattern)


Find all residues in a sequence that should not be reversed / shuffled
-----
:param sequence: The amino acid sequence
:param keepN: Whether to keep N terminus constant
:param keepC: Whether to keep C terminus constant
:param keep_const_pattern: A string containing the AA to not change (e.g. 'KRP')




.. py:method:: MRMDecoy.generateDecoys
   :module: pyopenms.pyopenms_8


Cython signature: void generateDecoys(TargetedExperiment & exp, TargetedExperiment & dec, String method, double aim_decoy_fraction, bool switchKR, String decoy_tag, int max_attempts, double identity_threshold, double precursor_mz_shift, double product_mz_shift, double product_mz_threshold, libcpp_vector[String] fragment_types, libcpp_vector[size_t] fragment_charges, bool enable_specific_losses, bool enable_unspecific_losses, int round_decPow)


Generate decoys from a TargetedExperiment
-----
Will generate decoy peptides for each target peptide provided in exp and
write them into the decoy experiment
-----
Valid methods: shuffle, reverse, pseudo-reverse
-----
If theoretical is true, the target transitions will be returned but their
masses will be adjusted to match the theoretical value of the fragment ion
that is the most likely explanation for the product
-----
`mz_threshold` is used for the matching of theoretical ion series to the observed one
-----
To generate decoys with different precursor mass, use the "switchKR" flag
which switches terminal K/R (switches K to R and R to K). This generates
different precursor m/z and ensures that the y ion series has a different
mass. For a description of the procedure, see (supplemental material)
-----
Bruderer et al. Mol Cell Proteomics. 2017. 10.1074/mcp.RA117.000314.




.. py:method:: MRMDecoy.getLogType
   :module: pyopenms.pyopenms_8


Cython signature: LogType getLogType()
Returns the type of progress log being used




.. py:method:: MRMDecoy.nextProgress
   :module: pyopenms.pyopenms_8


Cython signature: void nextProgress()
Increment progress by 1 (according to range begin-end)




.. py:method:: MRMDecoy.setLogType
   :module: pyopenms.pyopenms_8


Cython signature: void setLogType(LogType)
Sets the progress log that should be used. The default type is NONE!




.. py:method:: MRMDecoy.setProgress
   :module: pyopenms.pyopenms_8


Cython signature: void setProgress(ptrdiff_t value)
Sets the current progress




.. py:method:: MRMDecoy.startProgress
   :module: pyopenms.pyopenms_8


Cython signature: void startProgress(ptrdiff_t begin, ptrdiff_t end, String label)




.. py:class:: MRMFP_ComponentGroupParams
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _MRMFP_ComponentGroupParams


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MRMFP_ComponentGroupParams.html




.. py:attribute:: MRMFP_ComponentGroupParams.component_group_name
   :module: pyopenms.pyopenms_8




.. py:attribute:: MRMFP_ComponentGroupParams.params
   :module: pyopenms.pyopenms_8




.. py:class:: MRMFP_ComponentParams
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _MRMFP_ComponentParams


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MRMFP_ComponentParams.html




.. py:attribute:: MRMFP_ComponentParams.component_group_name
   :module: pyopenms.pyopenms_8




.. py:attribute:: MRMFP_ComponentParams.component_name
   :module: pyopenms.pyopenms_8




.. py:attribute:: MRMFP_ComponentParams.params
   :module: pyopenms.pyopenms_8




.. py:class:: MRMFeaturePicker
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _MRMFeaturePicker


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MRMFeaturePicker.html




.. py:class:: MRMTransitionGroupCP
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _MRMTransitionGroup[_MSChromatogram,_ReactionMonitoringTransition]


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MRMTransitionGroup[_MSChromatogram,_ReactionMonitoringTransition].html




.. py:method:: MRMTransitionGroupCP.addChromatogram
   :module: pyopenms.pyopenms_8


Cython signature: void addChromatogram(MSChromatogram chromatogram, String key)




.. py:method:: MRMTransitionGroupCP.addFeature
   :module: pyopenms.pyopenms_8


Cython signature: void addFeature(MRMFeature feature)




.. py:method:: MRMTransitionGroupCP.addPrecursorChromatogram
   :module: pyopenms.pyopenms_8


Cython signature: void addPrecursorChromatogram(MSChromatogram chromatogram, String key)




.. py:method:: MRMTransitionGroupCP.addTransition
   :module: pyopenms.pyopenms_8


Cython signature: void addTransition(ReactionMonitoringTransition transition, String key)




.. py:method:: MRMTransitionGroupCP.chromatogramIdsMatch
   :module: pyopenms.pyopenms_8


Cython signature: bool chromatogramIdsMatch()




.. py:method:: MRMTransitionGroupCP.getBestFeature
   :module: pyopenms.pyopenms_8


Cython signature: MRMFeature getBestFeature()




.. py:method:: MRMTransitionGroupCP.getChromatogram
   :module: pyopenms.pyopenms_8


Cython signature: MSChromatogram getChromatogram(String key)




.. py:method:: MRMTransitionGroupCP.getChromatograms
   :module: pyopenms.pyopenms_8


Cython signature: libcpp_vector[MSChromatogram] getChromatograms()




.. py:method:: MRMTransitionGroupCP.getFeatures
   :module: pyopenms.pyopenms_8


Cython signature: libcpp_vector[MRMFeature] getFeatures()




.. py:method:: MRMTransitionGroupCP.getFeaturesMuteable
   :module: pyopenms.pyopenms_8


Cython signature: libcpp_vector[MRMFeature] getFeaturesMuteable()




.. py:method:: MRMTransitionGroupCP.getLibraryIntensity
   :module: pyopenms.pyopenms_8


Cython signature: void getLibraryIntensity(libcpp_vector[double] result)




.. py:method:: MRMTransitionGroupCP.getPrecursorChromatogram
   :module: pyopenms.pyopenms_8


Cython signature: MSChromatogram getPrecursorChromatogram(String key)




.. py:method:: MRMTransitionGroupCP.getPrecursorChromatograms
   :module: pyopenms.pyopenms_8


Cython signature: libcpp_vector[MSChromatogram] getPrecursorChromatograms()




.. py:method:: MRMTransitionGroupCP.getTransition
   :module: pyopenms.pyopenms_8


Cython signature: ReactionMonitoringTransition getTransition(String key)




.. py:method:: MRMTransitionGroupCP.getTransitionGroupID
   :module: pyopenms.pyopenms_8


Cython signature: String getTransitionGroupID()




.. py:method:: MRMTransitionGroupCP.getTransitions
   :module: pyopenms.pyopenms_8


Cython signature: libcpp_vector[ReactionMonitoringTransition] getTransitions()




.. py:method:: MRMTransitionGroupCP.getTransitionsMuteable
   :module: pyopenms.pyopenms_8


Cython signature: libcpp_vector[ReactionMonitoringTransition] getTransitionsMuteable()




.. py:method:: MRMTransitionGroupCP.hasChromatogram
   :module: pyopenms.pyopenms_8


Cython signature: bool hasChromatogram(String key)




.. py:method:: MRMTransitionGroupCP.hasPrecursorChromatogram
   :module: pyopenms.pyopenms_8


Cython signature: bool hasPrecursorChromatogram(String key)




.. py:method:: MRMTransitionGroupCP.hasTransition
   :module: pyopenms.pyopenms_8


Cython signature: bool hasTransition(String key)




.. py:method:: MRMTransitionGroupCP.isInternallyConsistent
   :module: pyopenms.pyopenms_8


Cython signature: bool isInternallyConsistent()




.. py:method:: MRMTransitionGroupCP.setTransitionGroupID
   :module: pyopenms.pyopenms_8


Cython signature: void setTransitionGroupID(String tr_gr_id)




.. py:method:: MRMTransitionGroupCP.size
   :module: pyopenms.pyopenms_8


Cython signature: size_t size()




.. py:method:: MRMTransitionGroupCP.subset
   :module: pyopenms.pyopenms_8


Cython signature: MRMTransitionGroupCP subset(libcpp_vector[libcpp_utf8_string] tr_ids)




.. py:class:: MSDataStoringConsumer
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _MSDataStoringConsumer


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MSDataStoringConsumer.html


 Consumer class that simply stores the data
 -----
 This class is able to keep spectra and chromatograms passed to it in memory
 and the data can be accessed through getData()




.. py:method:: MSDataStoringConsumer.consumeChromatogram
   :module: pyopenms.pyopenms_8


Cython signature: void consumeChromatogram(MSChromatogram &)




.. py:method:: MSDataStoringConsumer.consumeSpectrum
   :module: pyopenms.pyopenms_8


Cython signature: void consumeSpectrum(MSSpectrum & s)




.. py:method:: MSDataStoringConsumer.getData
   :module: pyopenms.pyopenms_8


Cython signature: MSExperiment getData()




.. py:method:: MSDataStoringConsumer.setExpectedSize
   :module: pyopenms.pyopenms_8


Cython signature: void setExpectedSize(size_t expectedSpectra, size_t expectedChromatograms)
Sets expected size




.. py:method:: MSDataStoringConsumer.setExperimentalSettings
   :module: pyopenms.pyopenms_8


Cython signature: void setExperimentalSettings(ExperimentalSettings & exp)
Sets experimental settings




.. py:class:: MSstatsFile
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _MSstatsFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MSstatsFile.html




.. py:method:: MSstatsFile.storeISO
   :module: pyopenms.pyopenms_8


Cython signature: void storeISO(String & filename, ConsensusMap & consensus_map, ExperimentalDesign & design, StringList & reannotate_filenames, String & bioreplicate, String & condition, String & mixture, String & retention_time_summarization_method)
Store isobaric experiment (MSstatsTMT)




.. py:method:: MSstatsFile.storeLFQ
   :module: pyopenms.pyopenms_8


Cython signature: void storeLFQ(String & filename, ConsensusMap & consensus_map, ExperimentalDesign & design, StringList & reannotate_filenames, bool is_isotope_label_type, String & bioreplicate, String & condition, String & retention_time_summarization_method)
Store label free experiment (MSstats)




.. py:class:: MapAlignmentAlgorithmKD
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _MapAlignmentAlgorithmKD


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MapAlignmentAlgorithmKD.html


 An efficient reference-free feature map alignment algorithm for unlabeled data
 -----
 This algorithm uses a kd-tree to efficiently compute conflict-free connected components (CCC)
 in a compatibility graph on feature data. This graph is comprised of nodes corresponding
 to features and edges connecting features f and f' iff both are within each other's tolerance
 windows (wrt. RT and m/z difference). CCCs are those CCs that do not contain multiple features
 from the same input map, and whose features all have the same charge state
 -----
 All CCCs above a user-specified minimum size are considered true sets of corresponding features
 and based on these, LOWESS transformations are computed for each input map such that the average
 deviation from the mean retention time within all CCCs is minimized




.. py:method:: MapAlignmentAlgorithmKD.addRTFitData
   :module: pyopenms.pyopenms_8


Cython signature: void addRTFitData(KDTreeFeatureMaps & kd_data)
Compute data points needed for RT transformation in the current `kd_data`, add to `fit_data_`




.. py:method:: MapAlignmentAlgorithmKD.fitLOWESS
   :module: pyopenms.pyopenms_8


Cython signature: void fitLOWESS()
Fit LOWESS to fit_data_, store final models in `transformations_`




.. py:method:: MapAlignmentAlgorithmKD.transform
   :module: pyopenms.pyopenms_8


Cython signature: void transform(KDTreeFeatureMaps & kd_data)
Transform RTs for `kd_data`




.. py:class:: MapAlignmentTransformer
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _MapAlignmentTransformer


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MapAlignmentTransformer.html


This class collects functions for applying retention time transformations to data structures




.. py:method:: MapAlignmentTransformer.transformRetentionTimes
   :module: pyopenms.pyopenms_8


- Cython signature: void transformRetentionTimes(MSExperiment &, TransformationDescription &, bool)
  Applies the given transformation to a peak map


- Cython signature: void transformRetentionTimes(FeatureMap &, TransformationDescription &, bool)
  Applies the given transformation to a feature map


- Cython signature: void transformRetentionTimes(ConsensusMap &, TransformationDescription &, bool)
  Applies the given transformation to a consensus map


- Cython signature: void transformRetentionTimes(libcpp_vector[PeptideIdentification] &, TransformationDescription &, bool)
  Applies the given transformation to peptide identifications




.. py:class:: MapConversion
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _MapConversion


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MapConversion.html




.. py:method:: MapConversion.convert
   :module: pyopenms.pyopenms_8


- Cython signature: void convert(uint64_t input_map_index, FeatureMap input_map, ConsensusMap & output_map, size_t n)
- Cython signature: void convert(uint64_t input_map_index, MSExperiment & input_map, ConsensusMap & output_map, size_t n)
- Cython signature: void convert(ConsensusMap input_map, bool keep_uids, FeatureMap & output_map)




.. py:class:: MascotXMLFile
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _MascotXMLFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MascotXMLFile.html
 -- Inherits from ['XMLFile']




.. py:method:: MascotXMLFile.getVersion
   :module: pyopenms.pyopenms_8


Cython signature: String getVersion()
Return the version of the schema




.. py:method:: MascotXMLFile.initializeLookup
   :module: pyopenms.pyopenms_8


Cython signature: void initializeLookup(SpectrumMetaDataLookup & lookup, MSExperiment & experiment, const String & scan_regex)


Initializes a helper object for looking up spectrum meta data (RT, m/z)
-----
:param lookup: Helper object to initialize
:param experiment: Experiment containing the spectra
:param scan_regex: Optional regular expression for extracting information from references to spectra




.. py:method:: MascotXMLFile.load
   :module: pyopenms.pyopenms_8


Cython signature: void load(const String & filename, ProteinIdentification & protein_identification, libcpp_vector[PeptideIdentification] & id_data, SpectrumMetaDataLookup & rt_mapping)


Loads data from a Mascot XML file
-----
:param filename: The file to be loaded
:param protein_identification: Protein identifications belonging to the whole experiment
:param id_data: The identifications with m/z and RT
:param lookup: Helper object for looking up spectrum meta data
:raises:
  Exception: FileNotFound is thrown if the file does not exists
:raises:
  Exception: ParseError is thrown if the file does not suit to the standard




.. py:class:: MetaInfoInterface
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _MetaInfoInterface


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MetaInfoInterface.html


 Interface for classes that can store arbitrary meta information
 (Type-Name-Value tuples).
 -----
 MetaInfoInterface is a base class for all classes that use one MetaInfo
 object as member.  If you want to add meta information to a class, let it
 publicly inherit the MetaInfoInterface.  Meta information is an array of
 Type-Name-Value tuples.
 -----
 Usage:
   k = []
   exp.getKeys(k) # explore available key-value pairs
   exp.getMetaValue("someMetaName")




.. py:method:: MetaInfoInterface.clearMetaInfo
   :module: pyopenms.pyopenms_8


Cython signature: void clearMetaInfo()
Removes all meta values




.. py:method:: MetaInfoInterface.getKeys
   :module: pyopenms.pyopenms_8


Cython signature: void getKeys(libcpp_vector[String] & keys)
Fills the given vector with a list of all keys for which a value is set




.. py:method:: MetaInfoInterface.getMetaValue
   :module: pyopenms.pyopenms_8


Cython signature: DataValue getMetaValue(String)
Returns the value corresponding to a string, or




.. py:method:: MetaInfoInterface.getMetaValues
   :module: pyopenms.pyopenms_8


Cython signature: dict getMetaValues()


Returns all meta values in a Python dictionary.




.. py:method:: MetaInfoInterface.isMetaEmpty
   :module: pyopenms.pyopenms_8


Cython signature: bool isMetaEmpty()
Returns if the MetaInfo is empty




.. py:method:: MetaInfoInterface.metaRegistry
   :module: pyopenms.pyopenms_8


Cython signature: MetaInfoRegistry metaRegistry()
Returns a reference to the MetaInfoRegistry




.. py:method:: MetaInfoInterface.metaValueExists
   :module: pyopenms.pyopenms_8


Cython signature: bool metaValueExists(String)
Returns whether an entry with the given name exists




.. py:method:: MetaInfoInterface.removeMetaValue
   :module: pyopenms.pyopenms_8


Cython signature: void removeMetaValue(String)
Removes the DataValue corresponding to `name` if it exists




.. py:method:: MetaInfoInterface.setMetaValue
   :module: pyopenms.pyopenms_8


Cython signature: void setMetaValue(String, DataValue)
Sets the DataValue corresponding to a name




.. py:method:: MetaInfoInterface.setMetaValues
   :module: pyopenms.pyopenms_8


Cython signature: setMetaValues(dict values)


Sets the meta values given in the Python dictionary.




.. py:class:: MetaboTargetedTargetDecoy
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _MetaboTargetedTargetDecoy


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MetaboTargetedTargetDecoy.html




.. py:method:: MetaboTargetedTargetDecoy.constructTargetDecoyMassMapping
   :module: pyopenms.pyopenms_8


Cython signature: libcpp_vector[MetaboTargetedTargetDecoy_MetaboTargetDecoyMassMapping] constructTargetDecoyMassMapping(TargetedExperiment & t_exp)


Constructs a mass mapping of targets and decoys using the unique m_id identifier
-----
:param t_exp: TransitionExperiment holds compound and transition information used for the mapping




.. py:method:: MetaboTargetedTargetDecoy.generateMissingDecoysByMassShift
   :module: pyopenms.pyopenms_8


Cython signature: void generateMissingDecoysByMassShift(TargetedExperiment & t_exp, libcpp_vector[MetaboTargetedTargetDecoy_MetaboTargetDecoyMassMapping] & mappings, double & mass_to_add)


Generate a decoy for targets where fragmentation tree re-rooting was not possible, by adding a specifiable mass to the target fragments
-----
:param t_exp: TransitionExperiment holds compound and transition information
:param mappings: Map of identifier to target and decoy masses
:param mass_to_add: The maximum number of transitions required per assay




.. py:method:: MetaboTargetedTargetDecoy.resolveOverlappingTargetDecoyMassesByIndividualMassShift
   :module: pyopenms.pyopenms_8


Cython signature: void resolveOverlappingTargetDecoyMassesByIndividualMassShift(TargetedExperiment & t_exp, libcpp_vector[MetaboTargetedTargetDecoy_MetaboTargetDecoyMassMapping] & mappings, double & mass_to_add)


Resolves overlapping target and decoy transition masses by adding a specifiable mass (e.g. CH2) to the overlapping decoy fragment
-----
:param t_exp: TransitionExperiment holds compound and transition information
:param mappings: Map of identifier to target and decoy masses
:param mass_to_add: (e.g. CH2)




.. py:class:: MetaboTargetedTargetDecoy_MetaboTargetDecoyMassMapping
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _MetaboTargetedTargetDecoy_MetaboTargetDecoyMassMapping


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1MetaboTargetedTargetDecoy_MetaboTargetDecoyMassMapping.html




.. py:class:: NoopMSDataWritingConsumer
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _NoopMSDataWritingConsumer


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1NoopMSDataWritingConsumer.html


 Consumer class that perform no operation
 -----
 This is sometimes necessary to fulfill the requirement of passing an
 valid MSDataWritingConsumer object or pointer but no operation is
 required




.. py:method:: NoopMSDataWritingConsumer.addDataProcessing
   :module: pyopenms.pyopenms_8


Cython signature: void addDataProcessing(DataProcessing d)




.. py:method:: NoopMSDataWritingConsumer.consumeChromatogram
   :module: pyopenms.pyopenms_8


Cython signature: void consumeChromatogram(MSChromatogram & c)




.. py:method:: NoopMSDataWritingConsumer.consumeSpectrum
   :module: pyopenms.pyopenms_8


Cython signature: void consumeSpectrum(MSSpectrum & s)




.. py:method:: NoopMSDataWritingConsumer.getNrChromatogramsWritten
   :module: pyopenms.pyopenms_8


Cython signature: size_t getNrChromatogramsWritten()




.. py:method:: NoopMSDataWritingConsumer.getNrSpectraWritten
   :module: pyopenms.pyopenms_8


Cython signature: size_t getNrSpectraWritten()




.. py:method:: NoopMSDataWritingConsumer.setExpectedSize
   :module: pyopenms.pyopenms_8


Cython signature: void setExpectedSize(size_t expectedSpectra, size_t expectedChromatograms)




.. py:method:: NoopMSDataWritingConsumer.setExperimentalSettings
   :module: pyopenms.pyopenms_8


Cython signature: void setExperimentalSettings(ExperimentalSettings & exp)




.. py:class:: OPXL_PreprocessedPairSpectra
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _OPXL_PreprocessedPairSpectra


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::OPXLDataStructs_1_1OPXL_PreprocessedPairSpectra.html




.. py:attribute:: OPXL_PreprocessedPairSpectra.spectra_all_peaks
   :module: pyopenms.pyopenms_8




.. py:attribute:: OPXL_PreprocessedPairSpectra.spectra_linear_peaks
   :module: pyopenms.pyopenms_8




.. py:attribute:: OPXL_PreprocessedPairSpectra.spectra_xlink_peaks
   :module: pyopenms.pyopenms_8




.. py:class:: OSChromatogramMeta
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _OSChromatogramMeta


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenSwath_1_1OSChromatogramMeta.html




.. py:attribute:: OSChromatogramMeta.id
   :module: pyopenms.pyopenms_8




.. py:attribute:: OSChromatogramMeta.index
   :module: pyopenms.pyopenms_8




.. py:class:: OSW_ChromExtractParams
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _OSW_ChromExtractParams


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1OSW_ChromExtractParams.html




.. py:attribute:: OSW_ChromExtractParams.extra_rt_extract
   :module: pyopenms.pyopenms_8




.. py:attribute:: OSW_ChromExtractParams.extraction_function
   :module: pyopenms.pyopenms_8




.. py:attribute:: OSW_ChromExtractParams.im_extraction_window
   :module: pyopenms.pyopenms_8




.. py:attribute:: OSW_ChromExtractParams.min_upper_edge_dist
   :module: pyopenms.pyopenms_8




.. py:attribute:: OSW_ChromExtractParams.mz_extraction_window
   :module: pyopenms.pyopenms_8




.. py:attribute:: OSW_ChromExtractParams.ppm
   :module: pyopenms.pyopenms_8




.. py:attribute:: OSW_ChromExtractParams.rt_extraction_window
   :module: pyopenms.pyopenms_8




.. py:class:: OpenSwathScoring
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _OpenSwathScoring


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1OpenSwathScoring.html




.. py:method:: OpenSwathScoring.getNormalized_library_intensities_
   :module: pyopenms.pyopenms_8


Cython signature: void getNormalized_library_intensities_(libcpp_vector[LightTransition] transitions, libcpp_vector[double] normalized_library_intensity)




.. py:method:: OpenSwathScoring.initialize
   :module: pyopenms.pyopenms_8


Cython signature: void initialize(double rt_normalization_factor, int add_up_spectra, double spacing_for_spectra_resampling, double drift_extra, OpenSwath_Scores_Usage su, libcpp_string spectrum_addition_method)


Initialize the scoring object
-----
Sets the parameters for the scoring
-----
:param rt_normalization_factor: Specifies the range of the normalized retention time space
:param add_up_spectra: How many spectra to add up (default 1)
:param spacing_for_spectra_resampling: Spacing factor for spectra addition
:param su: Which scores to actually compute
:param spectrum_addition_method: Method to use for spectrum addition (valid: "simple", "resample")




.. py:class:: OpenSwath_Scores
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _OpenSwath_Scores


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1OpenSwath_Scores.html




.. py:attribute:: OpenSwath_Scores.bseries_score
   :module: pyopenms.pyopenms_8




.. py:method:: OpenSwath_Scores.calculate_lda_prescore
   :module: pyopenms.pyopenms_8


Cython signature: double calculate_lda_prescore(OpenSwath_Scores scores)




.. py:method:: OpenSwath_Scores.calculate_swath_lda_prescore
   :module: pyopenms.pyopenms_8


Cython signature: double calculate_swath_lda_prescore(OpenSwath_Scores scores)




.. py:attribute:: OpenSwath_Scores.dotprod_score_dia
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores.elution_model_fit_score
   :module: pyopenms.pyopenms_8




.. py:method:: OpenSwath_Scores.get_quick_lda_score
   :module: pyopenms.pyopenms_8


Cython signature: double get_quick_lda_score(double library_corr_, double library_norm_manhattan_, double norm_rt_score_, double xcorr_coelution_score_, double xcorr_shape_score_, double log_sn_score_)




.. py:attribute:: OpenSwath_Scores.intensity
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores.isotope_correlation
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores.isotope_overlap
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores.library_corr
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores.library_dotprod
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores.library_manhattan
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores.library_norm_manhattan
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores.library_rootmeansquare
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores.library_sangle
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores.log_sn_score
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores.manhatt_score_dia
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores.massdev_score
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores.mi_score
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores.ms1_isotope_correlation
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores.ms1_isotope_overlap
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores.ms1_mi_combined_score
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores.ms1_mi_contrast_score
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores.ms1_mi_score
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores.ms1_ppm_score
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores.ms1_xcorr_coelution_combined_score
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores.ms1_xcorr_coelution_contrast_score
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores.ms1_xcorr_coelution_score
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores.ms1_xcorr_shape_combined_score
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores.ms1_xcorr_shape_contrast_score
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores.ms1_xcorr_shape_score
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores.norm_rt_score
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores.normalized_experimental_rt
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores.nr_peaks
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores.raw_rt_score
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores.rt_difference
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores.sn_ratio
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores.sonar_diff
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores.sonar_lag
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores.sonar_rsq
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores.sonar_shape
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores.sonar_sn
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores.sonar_trend
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores.total_xic
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores.weighted_coelution_score
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores.weighted_massdev_score
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores.weighted_mi_score
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores.weighted_xcorr_shape
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores.xcorr_coelution_score
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores.xcorr_shape_score
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores.yseries_score
   :module: pyopenms.pyopenms_8




.. py:class:: OpenSwath_Scores_Usage
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _OpenSwath_Scores_Usage


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1OpenSwath_Scores_Usage.html




.. py:attribute:: OpenSwath_Scores_Usage.use_coelution_score_
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores_Usage.use_dia_scores_
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores_Usage.use_elution_model_score_
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores_Usage.use_intensity_score_
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores_Usage.use_library_score_
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores_Usage.use_mi_score_
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores_Usage.use_ms1_correlation
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores_Usage.use_ms1_fullscan
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores_Usage.use_ms1_mi
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores_Usage.use_nr_peaks_score_
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores_Usage.use_rt_score_
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores_Usage.use_shape_score_
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores_Usage.use_sn_score_
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores_Usage.use_sonar_scores
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores_Usage.use_total_mi_score_
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores_Usage.use_total_xic_score_
   :module: pyopenms.pyopenms_8




.. py:attribute:: OpenSwath_Scores_Usage.use_uis_scores
   :module: pyopenms.pyopenms_8




.. py:class:: ParentPeakMower
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _ParentPeakMower


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1ParentPeakMower.html
 -- Inherits from ['DefaultParamHandler']




.. py:method:: ParentPeakMower.filterPeakMap
   :module: pyopenms.pyopenms_8


Cython signature: void filterPeakMap(MSExperiment & exp)




.. py:method:: ParentPeakMower.filterPeakSpectrum
   :module: pyopenms.pyopenms_8


Cython signature: void filterPeakSpectrum(MSSpectrum & spec)




.. py:method:: ParentPeakMower.filterSpectrum
   :module: pyopenms.pyopenms_8


Cython signature: void filterSpectrum(MSSpectrum & spec)




.. py:method:: ParentPeakMower.getDefaults
   :module: pyopenms.pyopenms_8


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: ParentPeakMower.getName
   :module: pyopenms.pyopenms_8


Cython signature: String getName()
Returns the name




.. py:method:: ParentPeakMower.getParameters
   :module: pyopenms.pyopenms_8


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: ParentPeakMower.getSubsections
   :module: pyopenms.pyopenms_8


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: ParentPeakMower.setName
   :module: pyopenms.pyopenms_8


Cython signature: void setName(const String &)
Sets the name




.. py:method:: ParentPeakMower.setParameters
   :module: pyopenms.pyopenms_8


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:class:: PlainMSDataWritingConsumer
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _PlainMSDataWritingConsumer


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1PlainMSDataWritingConsumer.html




.. py:method:: PlainMSDataWritingConsumer.addDataProcessing
   :module: pyopenms.pyopenms_8


Cython signature: void addDataProcessing(DataProcessing d)


Optionally add a data processing method to each chromatogram and spectrum
-----
The provided DataProcessing object will be added to each chromatogram
and spectrum written to to the mzML file
-----
:param d: The DataProcessing object to be added




.. py:method:: PlainMSDataWritingConsumer.consumeChromatogram
   :module: pyopenms.pyopenms_8


Cython signature: void consumeChromatogram(MSChromatogram & c)




.. py:method:: PlainMSDataWritingConsumer.consumeSpectrum
   :module: pyopenms.pyopenms_8


Cython signature: void consumeSpectrum(MSSpectrum & s)




.. py:method:: PlainMSDataWritingConsumer.getNrChromatogramsWritten
   :module: pyopenms.pyopenms_8


Cython signature: size_t getNrChromatogramsWritten()
Returns the number of chromatograms written




.. py:method:: PlainMSDataWritingConsumer.getNrSpectraWritten
   :module: pyopenms.pyopenms_8


Cython signature: size_t getNrSpectraWritten()
Returns the number of spectra written




.. py:method:: PlainMSDataWritingConsumer.getOptions
   :module: pyopenms.pyopenms_8


Cython signature: PeakFileOptions getOptions()




.. py:method:: PlainMSDataWritingConsumer.setExpectedSize
   :module: pyopenms.pyopenms_8


Cython signature: void setExpectedSize(size_t expectedSpectra, size_t expectedChromatograms)


Set expected size of spectra and chromatograms to be written
-----
These numbers will be written in the spectrumList and chromatogramList
tag in the mzML file. Therefore, these will contain wrong numbers if
the expected size is not set correctly
-----
:param expectedSpectra: Number of spectra expected
:param expectedChromatograms: Number of chromatograms expected




.. py:method:: PlainMSDataWritingConsumer.setExperimentalSettings
   :module: pyopenms.pyopenms_8


Cython signature: void setExperimentalSettings(ExperimentalSettings & exp)


Set experimental settings for the whole file
-----
:param exp: Experimental settings to be used for this file (from this
and the first spectrum/chromatogram, the class will deduce most of
the header of the mzML file)




.. py:method:: PlainMSDataWritingConsumer.setOptions
   :module: pyopenms.pyopenms_8


Cython signature: void setOptions(PeakFileOptions opt)




.. py:class:: PrecursorIonSelection
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _PrecursorIonSelection


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1PrecursorIonSelection.html
 -- Inherits from ['DefaultParamHandler']




.. py:attribute:: PrecursorIonSelection.PrecursorIonSelection_Type
   :module: pyopenms.pyopenms_8


alias of :py:class:`pyopenms.pyopenms_8.__PrecursorIonSelection_Type`


.. py:method:: PrecursorIonSelection.getDefaults
   :module: pyopenms.pyopenms_8


Cython signature: Param getDefaults()
Returns the default parameters




.. py:method:: PrecursorIonSelection.getLPSolver
   :module: pyopenms.pyopenms_8


Cython signature: SOLVER getLPSolver()




.. py:method:: PrecursorIonSelection.getMaxScore
   :module: pyopenms.pyopenms_8


Cython signature: double getMaxScore()




.. py:method:: PrecursorIonSelection.getName
   :module: pyopenms.pyopenms_8


Cython signature: String getName()
Returns the name




.. py:method:: PrecursorIonSelection.getNextPrecursors
   :module: pyopenms.pyopenms_8


         - Cython signature: void getNextPrecursors(FeatureMap & features, FeatureMap & next_features, unsigned int number)


Returns features with highest score for MS/MS
-----
:param features: FeatureMap with all possible precursors
:param next_features: FeatureMap with next precursors
:param number: Number of features to be reported
         - Cython signature: void getNextPrecursors(libcpp_vector[int] & solution_indices, libcpp_vector[IndexTriple] & variable_indices, libcpp_set[int] & measured_variables, FeatureMap & features, FeatureMap & new_features, unsigned int step_size, PSLPFormulation & ilp)




.. py:method:: PrecursorIonSelection.getParameters
   :module: pyopenms.pyopenms_8


Cython signature: Param getParameters()
Returns the parameters




.. py:method:: PrecursorIonSelection.getSubsections
   :module: pyopenms.pyopenms_8


Cython signature: libcpp_vector[String] getSubsections()




.. py:method:: PrecursorIonSelection.rescore
   :module: pyopenms.pyopenms_8


Cython signature: void rescore(FeatureMap & features, libcpp_vector[PeptideIdentification] & new_pep_ids, libcpp_vector[ProteinIdentification] & prot_ids, PrecursorIonSelectionPreprocessing & preprocessed_db, bool check_meta_values)


Change scoring of features using peptide identifications from all spectra
-----
:param features: FeatureMap with all possible precursors
:param new_pep_ids: Peptide identifications
:param prot_ids: Protein identifications
:param preprocessed_db: Information from preprocessed database
:param check_meta_values: True if the FeatureMap should be checked for the presence of required meta values




.. py:method:: PrecursorIonSelection.reset
   :module: pyopenms.pyopenms_8


Cython signature: void reset()




.. py:method:: PrecursorIonSelection.setLPSolver
   :module: pyopenms.pyopenms_8


Cython signature: void setLPSolver(SOLVER solver)




.. py:method:: PrecursorIonSelection.setMaxScore
   :module: pyopenms.pyopenms_8


Cython signature: void setMaxScore(double & max_score)




.. py:method:: PrecursorIonSelection.setName
   :module: pyopenms.pyopenms_8


Cython signature: void setName(const String &)
Sets the name




.. py:method:: PrecursorIonSelection.setParameters
   :module: pyopenms.pyopenms_8


Cython signature: void setParameters(Param & param)
Sets the parameters




.. py:method:: PrecursorIonSelection.simulateRun
   :module: pyopenms.pyopenms_8


Cython signature: void simulateRun(FeatureMap & features, libcpp_vector[PeptideIdentification] & pep_ids, libcpp_vector[ProteinIdentification] & prot_ids, PrecursorIonSelectionPreprocessing & preprocessed_db, String path, MSExperiment & experiment, String precursor_path)


Simulate the iterative precursor ion selection
-----
:param features: FeatureMap with all possible precursors
:param new_pep_ids: Peptide identifications
:param prot_ids: Protein identifications
:param preprocessed_db: Information from preprocessed database
:param step_size: Number of MS/MS spectra considered per iteration
:param path: Path to output file




.. py:method:: PrecursorIonSelection.sortByTotalScore
   :module: pyopenms.pyopenms_8


Cython signature: void sortByTotalScore(FeatureMap & features)
Sort features by total score




.. py:class:: RNPxlModificationMassesResult
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _RNPxlModificationMassesResult


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1RNPxlModificationMassesResult.html




.. py:class:: RNPxlModificationsGenerator
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _RNPxlModificationsGenerator


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1RNPxlModificationsGenerator.html




.. py:method:: RNPxlModificationsGenerator.initModificationMassesRNA
   :module: pyopenms.pyopenms_8


Cython signature: RNPxlModificationMassesResult initModificationMassesRNA(StringList target_nucleotides, StringList nt_groups, libcpp_set[char] can_xl, StringList mappings, StringList modifications, String sequence_restriction, bool cysteine_adduct, int max_length)




.. py:class:: RNaseDB
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _RNaseDB


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1RNaseDB.html




.. py:method:: RNaseDB.getAllNames
   :module: pyopenms.pyopenms_8


Cython signature: void getAllNames(libcpp_vector[String] & all_names)




.. py:method:: RNaseDB.getEnzyme
   :module: pyopenms.pyopenms_8


Cython signature: const DigestionEnzymeRNA * getEnzyme(const String & name)




.. py:method:: RNaseDB.getEnzymeByRegEx
   :module: pyopenms.pyopenms_8


Cython signature: const DigestionEnzymeRNA * getEnzymeByRegEx(const String & cleavage_regex)




.. py:method:: RNaseDB.hasEnzyme
   :module: pyopenms.pyopenms_8


Cython signature: bool hasEnzyme(const String & name)




.. py:method:: RNaseDB.hasRegEx
   :module: pyopenms.pyopenms_8


Cython signature: bool hasRegEx(const String & cleavage_regex)




.. py:class:: RealMassDecomposer
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _RealMassDecomposer


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::ims_1_1RealMassDecomposer.html




.. py:method:: RealMassDecomposer.getNumberOfDecompositions
   :module: pyopenms.pyopenms_8


Cython signature: uint64_t getNumberOfDecompositions(double mass, double error)


Gets a number of all decompositions for amass with an error
allowed. It's similar to thegetDecompositions(double,double) function
but less space consuming, since doesn't use container to store decompositions
-----
:param mass: Mass to be decomposed
:param error: Error allowed between given and result decomposition
:returns: Number of all decompositions for a given mass and error




.. py:class:: Ribonucleotide
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _Ribonucleotide


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS::Ribonucleotide_1_1Ribonucleotide.html




.. py:method:: Ribonucleotide.getAvgMass
   :module: pyopenms.pyopenms_8


Cython signature: double getAvgMass()
Returns average mass of the ribonucleotide




.. py:method:: Ribonucleotide.getBaselossFormula
   :module: pyopenms.pyopenms_8


Cython signature: EmpiricalFormula getBaselossFormula()
Returns sum formula after loss of the nucleobase




.. py:method:: Ribonucleotide.getCode
   :module: pyopenms.pyopenms_8


Cython signature: String getCode()
Returns the short name




.. py:method:: Ribonucleotide.getFormula
   :module: pyopenms.pyopenms_8


Cython signature: EmpiricalFormula getFormula()
Returns the empirical formula of the residue




.. py:method:: Ribonucleotide.getHTMLCode
   :module: pyopenms.pyopenms_8


Cython signature: String getHTMLCode()
Returns the HTML (RNAMods) code




.. py:method:: Ribonucleotide.getMonoMass
   :module: pyopenms.pyopenms_8


Cython signature: double getMonoMass()
Returns monoisotopic mass of the ribonucleotide




.. py:method:: Ribonucleotide.getName
   :module: pyopenms.pyopenms_8


Cython signature: String getName()
Returns the name of the ribonucleotide




.. py:method:: Ribonucleotide.getNewCode
   :module: pyopenms.pyopenms_8


Cython signature: String getNewCode()
Returns the new code




.. py:method:: Ribonucleotide.getOrigin
   :module: pyopenms.pyopenms_8


Cython signature: char getOrigin()
Returns the code of the unmodified base (e.g., "A", "C", ...)




.. py:method:: Ribonucleotide.getTermSpecificity
   :module: pyopenms.pyopenms_8


Cython signature: TermSpecificityNuc getTermSpecificity()
Returns the terminal specificity




.. py:method:: Ribonucleotide.isModified
   :module: pyopenms.pyopenms_8


Cython signature: bool isModified()
True if the ribonucleotide is a modified one




.. py:method:: Ribonucleotide.setAvgMass
   :module: pyopenms.pyopenms_8


Cython signature: void setAvgMass(double avg_mass)
Sets average mass of the ribonucleotide




.. py:method:: Ribonucleotide.setBaselossFormula
   :module: pyopenms.pyopenms_8


Cython signature: void setBaselossFormula(EmpiricalFormula formula)
Sets sum formula after loss of the nucleobase




.. py:method:: Ribonucleotide.setCode
   :module: pyopenms.pyopenms_8


Cython signature: void setCode(String code)
Sets the short name




.. py:method:: Ribonucleotide.setFormula
   :module: pyopenms.pyopenms_8


Cython signature: void setFormula(EmpiricalFormula formula)
Sets empirical formula of the ribonucleotide (must be full, with N and C-terminus)




.. py:method:: Ribonucleotide.setHTMLCode
   :module: pyopenms.pyopenms_8


Cython signature: void setHTMLCode(String html_code)
Sets the HTML (RNAMods) code




.. py:method:: Ribonucleotide.setMonoMass
   :module: pyopenms.pyopenms_8


Cython signature: void setMonoMass(double mono_mass)
Sets monoisotopic mass of the ribonucleotide




.. py:method:: Ribonucleotide.setName
   :module: pyopenms.pyopenms_8


Cython signature: void setName(String name)
Sets the name of the ribonucleotide




.. py:method:: Ribonucleotide.setNewCode
   :module: pyopenms.pyopenms_8


Cython signature: void setNewCode(String code)
Sets the new code




.. py:method:: Ribonucleotide.setOrigin
   :module: pyopenms.pyopenms_8


Cython signature: void setOrigin(char origin)
Sets the code of the unmodified base (e.g., "A", "C", ...)




.. py:method:: Ribonucleotide.setTermSpecificity
   :module: pyopenms.pyopenms_8


Cython signature: void setTermSpecificity(TermSpecificityNuc term_spec)
Sets the terminal specificity




.. py:class:: SIDE
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`




.. py:attribute:: SIDE.BOTH
   :module: pyopenms.pyopenms_8
   :value: 2




.. py:attribute:: SIDE.LEFT
   :module: pyopenms.pyopenms_8
   :value: 0




.. py:attribute:: SIDE.RIGHT
   :module: pyopenms.pyopenms_8
   :value: 1




.. py:method:: SIDE.getMapping
   :module: pyopenms.pyopenms_8




.. py:class:: SiriusMSFile
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _SiriusMSFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SiriusMSFile.html




.. py:method:: SiriusMSFile.store
   :module: pyopenms.pyopenms_8


Cython signature: void store(MSExperiment & spectra, const String & msfile, FeatureMapping_FeatureToMs2Indices & feature_mapping, bool feature_only, int isotope_pattern_iterations, bool no_mt_info, libcpp_vector[SiriusMSFile_CompoundInfo] & v_cmpinfo)




.. py:class:: SiriusMSFile_AccessionInfo
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _SiriusMSFile_AccessionInfo


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SiriusMSFile_AccessionInfo.html




.. py:class:: SiriusMSFile_CompoundInfo
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _SiriusMSFile_CompoundInfo


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SiriusMSFile_CompoundInfo.html




.. py:class:: SourceFile
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _SourceFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SourceFile.html




.. py:method:: SourceFile.getChecksum
   :module: pyopenms.pyopenms_8


Cython signature: String getChecksum()
Returns the file's checksum




.. py:method:: SourceFile.getChecksumType
   :module: pyopenms.pyopenms_8


Cython signature: ChecksumType getChecksumType()
Returns the checksum type




.. py:method:: SourceFile.getFileSize
   :module: pyopenms.pyopenms_8


Cython signature: float getFileSize()
Returns the file size in MB




.. py:method:: SourceFile.getFileType
   :module: pyopenms.pyopenms_8


Cython signature: String getFileType()
Returns the file type




.. py:method:: SourceFile.getNameOfFile
   :module: pyopenms.pyopenms_8


Cython signature: String getNameOfFile()
Returns the file name




.. py:method:: SourceFile.getNativeIDType
   :module: pyopenms.pyopenms_8


Cython signature: String getNativeIDType()
Returns the native ID type of the spectra




.. py:method:: SourceFile.getNativeIDTypeAccession
   :module: pyopenms.pyopenms_8


Cython signature: String getNativeIDTypeAccession()
Returns the nativeID of the spectra




.. py:method:: SourceFile.getPathToFile
   :module: pyopenms.pyopenms_8


Cython signature: String getPathToFile()
Returns the file path




.. py:method:: SourceFile.setChecksum
   :module: pyopenms.pyopenms_8


Cython signature: void setChecksum(String, ChecksumType)
Sets the file's checksum




.. py:method:: SourceFile.setFileSize
   :module: pyopenms.pyopenms_8


Cython signature: void setFileSize(float)
Sets the file size in MB




.. py:method:: SourceFile.setFileType
   :module: pyopenms.pyopenms_8


Cython signature: void setFileType(String)
Sets the file type




.. py:method:: SourceFile.setNameOfFile
   :module: pyopenms.pyopenms_8


Cython signature: void setNameOfFile(String)
Sets the file name




.. py:method:: SourceFile.setNativeIDType
   :module: pyopenms.pyopenms_8


Cython signature: void setNativeIDType(String)
Sets the native ID type of the spectra




.. py:method:: SourceFile.setNativeIDTypeAccession
   :module: pyopenms.pyopenms_8


Cython signature: void setNativeIDTypeAccession(const String & accesssion)
Sets the native ID of the spectra




.. py:method:: SourceFile.setPathToFile
   :module: pyopenms.pyopenms_8


Cython signature: void setPathToFile(String)
Sets the file path




.. py:class:: SpectrumAccessQuadMZTransforming
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _SpectrumAccessQuadMZTransforming


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1SpectrumAccessQuadMZTransforming.html
 -- Inherits from ['SpectrumAccessTransforming']




.. py:method:: SpectrumAccessQuadMZTransforming.getChromatogramById
   :module: pyopenms.pyopenms_8


Cython signature: shared_ptr[OSChromatogram] getChromatogramById(int id_)
Returns a pointer to a chromatogram at the given id




.. py:method:: SpectrumAccessQuadMZTransforming.getChromatogramNativeID
   :module: pyopenms.pyopenms_8


Cython signature: libcpp_utf8_output_string getChromatogramNativeID(int id_)




.. py:method:: SpectrumAccessQuadMZTransforming.getNrChromatograms
   :module: pyopenms.pyopenms_8


Cython signature: size_t getNrChromatograms()
Returns the number of chromatograms available




.. py:method:: SpectrumAccessQuadMZTransforming.getNrSpectra
   :module: pyopenms.pyopenms_8


Cython signature: size_t getNrSpectra()
Returns the number of spectra available




.. py:method:: SpectrumAccessQuadMZTransforming.getSpectraByRT
   :module: pyopenms.pyopenms_8


Cython signature: libcpp_vector[size_t] getSpectraByRT(double RT, double deltaRT)
Returns a vector of ids of spectra that are within RT +/- deltaRT




.. py:method:: SpectrumAccessQuadMZTransforming.getSpectrumById
   :module: pyopenms.pyopenms_8


Cython signature: shared_ptr[OSSpectrum] getSpectrumById(int id_)
Returns a pointer to a spectrum at the given string id




.. py:class:: SwathMap
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _SwathMap


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenSwath_1_1SwathMap.html




.. py:attribute:: SwathMap.center
   :module: pyopenms.pyopenms_8




.. py:method:: SwathMap.getSpectrumPtr
   :module: pyopenms.pyopenms_8




.. py:attribute:: SwathMap.lower
   :module: pyopenms.pyopenms_8




.. py:attribute:: SwathMap.ms1
   :module: pyopenms.pyopenms_8




.. py:method:: SwathMap.setSpectrumPtr
   :module: pyopenms.pyopenms_8




.. py:attribute:: SwathMap.upper
   :module: pyopenms.pyopenms_8




.. py:class:: TermSpecificityNuc
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`




.. py:attribute:: TermSpecificityNuc.ANYWHERE
   :module: pyopenms.pyopenms_8
   :value: 0




.. py:attribute:: TermSpecificityNuc.FIVE_PRIME
   :module: pyopenms.pyopenms_8
   :value: 1




.. py:attribute:: TermSpecificityNuc.NUMBER_OF_TERM_SPECIFICITY
   :module: pyopenms.pyopenms_8
   :value: 3




.. py:attribute:: TermSpecificityNuc.THREE_PRIME
   :module: pyopenms.pyopenms_8
   :value: 2




.. py:method:: TermSpecificityNuc.getMapping
   :module: pyopenms.pyopenms_8




.. py:class:: TransformationModelLinear
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _TransformationModelLinear


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1TransformationModelLinear.html
 -- Inherits from ['TransformationModel']




.. py:method:: TransformationModelLinear.checkDatumRange
   :module: pyopenms.pyopenms_8


Cython signature: double checkDatumRange(const double & datum, const double & datum_min, const double & datum_max)
Check that the datum is within the valid min and max bounds




.. py:method:: TransformationModelLinear.checkValidWeight
   :module: pyopenms.pyopenms_8


Cython signature: bool checkValidWeight(const String & weight, libcpp_vector[String] & valid_weights)
Check for a valid weighting function string




.. py:method:: TransformationModelLinear.evaluate
   :module: pyopenms.pyopenms_8


Cython signature: double evaluate(double value)




.. py:method:: TransformationModelLinear.getDefaultParameters
   :module: pyopenms.pyopenms_8


Cython signature: void getDefaultParameters(Param &)




.. py:method:: TransformationModelLinear.getParameters
   :module: pyopenms.pyopenms_8


Cython signature: Param getParameters()




.. py:method:: TransformationModelLinear.getValidXWeights
   :module: pyopenms.pyopenms_8


Cython signature: libcpp_vector[String] getValidXWeights()
Returns a list of valid x weight function stringss




.. py:method:: TransformationModelLinear.getValidYWeights
   :module: pyopenms.pyopenms_8


Cython signature: libcpp_vector[String] getValidYWeights()
Returns a list of valid y weight function strings




.. py:method:: TransformationModelLinear.invert
   :module: pyopenms.pyopenms_8


Cython signature: void invert()




.. py:method:: TransformationModelLinear.unWeightData
   :module: pyopenms.pyopenms_8


Cython signature: void unWeightData(libcpp_vector[TM_DataPoint] & data)
Unweight the data by the given weight function




.. py:method:: TransformationModelLinear.unWeightDatum
   :module: pyopenms.pyopenms_8


Cython signature: double unWeightDatum(double & datum, const String & weight)
Apply the reverse of the weighting function to the data




.. py:method:: TransformationModelLinear.weightData
   :module: pyopenms.pyopenms_8


Cython signature: void weightData(libcpp_vector[TM_DataPoint] & data)
Weight the data by the given weight function




.. py:method:: TransformationModelLinear.weightDatum
   :module: pyopenms.pyopenms_8


Cython signature: double weightDatum(double & datum, const String & weight)
Weight the data according to the weighting function




.. py:class:: XQuestResultXMLFile
   :module: pyopenms.pyopenms_8


   Bases: :py:class:`object`


Cython implementation of _XQuestResultXMLFile


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1XQuestResultXMLFile.html
 -- Inherits from ['XMLFile']




.. py:method:: XQuestResultXMLFile.getMaxScore
   :module: pyopenms.pyopenms_8


Cython signature: double getMaxScore()
Returns maximum score among the hits in the file




.. py:method:: XQuestResultXMLFile.getMinScore
   :module: pyopenms.pyopenms_8


Cython signature: double getMinScore()
Returns minimum score among the hits in the file




.. py:method:: XQuestResultXMLFile.getNumberOfHits
   :module: pyopenms.pyopenms_8


Cython signature: int getNumberOfHits()
Returns the total number of hits in the file




.. py:method:: XQuestResultXMLFile.getVersion
   :module: pyopenms.pyopenms_8


Cython signature: String getVersion()
Return the version of the schema




.. py:method:: XQuestResultXMLFile.load
   :module: pyopenms.pyopenms_8


Cython signature: void load(const String & filename, libcpp_vector[PeptideIdentification] & pep_ids, libcpp_vector[ProteinIdentification] & prot_ids)


Load the content of the xquest.xml file into the provided data structures
-----
:param filename: Filename of the file which is to be loaded
:param pep_ids: Where the spectra with identifications of the input file will be loaded to
:param prot_ids: Where the protein identification of the input file will be loaded to




.. py:method:: XQuestResultXMLFile.store
   :module: pyopenms.pyopenms_8


Cython signature: void store(const String & filename, libcpp_vector[ProteinIdentification] & poid, libcpp_vector[PeptideIdentification] & peid)
Stores the identifications in a xQuest XML file




.. py:method:: XQuestResultXMLFile.writeXQuestXMLSpec
   :module: pyopenms.pyopenms_8


         - Cython signature: void writeXQuestXMLSpec(const String & out_file, const String & base_name, OPXL_PreprocessedPairSpectra preprocessed_pair_spectra, libcpp_vector[libcpp_pair[size_t,size_t]] spectrum_pairs, libcpp_vector[libcpp_vector[CrossLinkSpectrumMatch]] all_top_csms, MSExperiment spectra)


Writes spec.xml output containing matching peaks between heavy and light spectra after comparing and filtering
-----
:param out_file: Path and filename for the output file
:param base_name: The base_name should be the name of the input spectra file without the file ending. Used as part of an identifier string for the spectra
:param preprocessed_pair_spectra: The preprocessed spectra after comparing and filtering
:param spectrum_pairs: Indices of spectrum pairs in the input map
:param all_top_csms: CrossLinkSpectrumMatches, from which the IDs were generated. Only spectra with matches are written out
:param spectra: The spectra, that were searched as a PeakMap. The indices in spectrum_pairs correspond to spectra in this map
         - Cython signature: void writeXQuestXMLSpec(const String & out_file, const String & base_name, libcpp_vector[libcpp_vector[CrossLinkSpectrumMatch]] all_top_csms, MSExperiment spectra)


Writes spec.xml output containing spectra for visualization. This version of the function is meant to be used for label-free linkers
-----
:param out_file: Path and filename for the output file
:param base_name: The base_name should be the name of the input spectra file without the file ending. Used as part of an identifier string for the spectra
:param all_top_csms: CrossLinkSpectrumMatches, from which the IDs were generated. Only spectra with matches are written out
:param spectra: The spectra, that were searched as a PeakMap




.. py:module:: pyopenms.python_extras




.. py:class:: SimpleOpenMSSpectraFactory()
   :module: pyopenms.python_extras


   Bases: :py:class:`object`




.. py:method:: SimpleOpenMSSpectraFactory.getSpectrumAccessOpenMSPtr(exp)
   :module: pyopenms.python_extras
   :staticmethod:




.. py:module:: pyopenms.qt_version_info




.. py:module:: pyopenms.sysinfo




.. py:class:: SysInfo
   :module: pyopenms.sysinfo


   Bases: :py:class:`_ctypes.Structure`




.. py:attribute:: SysInfo.bufferram
   :module: pyopenms.sysinfo


Structure/Union member




.. py:attribute:: SysInfo.freehigh
   :module: pyopenms.sysinfo


Structure/Union member




.. py:attribute:: SysInfo.freeram
   :module: pyopenms.sysinfo


Structure/Union member




.. py:attribute:: SysInfo.freeswap
   :module: pyopenms.sysinfo


Structure/Union member




.. py:attribute:: SysInfo.loads
   :module: pyopenms.sysinfo


Structure/Union member




.. py:attribute:: SysInfo.mem_unit
   :module: pyopenms.sysinfo


Structure/Union member




.. py:attribute:: SysInfo.padding
   :module: pyopenms.sysinfo
   :value: 0




.. py:attribute:: SysInfo.procs
   :module: pyopenms.sysinfo


Structure/Union member




.. py:attribute:: SysInfo.sharedram
   :module: pyopenms.sysinfo


Structure/Union member




.. py:attribute:: SysInfo.totalhigh
   :module: pyopenms.sysinfo


Structure/Union member




.. py:attribute:: SysInfo.totalram
   :module: pyopenms.sysinfo


Structure/Union member




.. py:attribute:: SysInfo.totalswap
   :module: pyopenms.sysinfo


Structure/Union member




.. py:attribute:: SysInfo.uptime
   :module: pyopenms.sysinfo


Structure/Union member




.. py:function:: free_mem()
   :module: pyopenms.sysinfo




.. py:module:: pyopenms.version




.. py:module:: pyopenms


Python bindings to the OpenMS C++ library.


The pyOpenMS package contains Python bindings for a large part of the OpenMS
library (http://www.open-ms.de) for mass spectrometry based proteomics. It thus
provides providing facile access to a feature-rich, open-source algorithm
library for mass-spectrometry based proteomics analysis. These Python bindings
allow raw access to the data-structures and algorithms implemented in OpenMS,
specifically those for file access (mzXML, mzML, TraML, mzIdentML among
others), basic signal processing (smoothing, filtering, de-isotoping and
peak-picking) and complex data analysis (including label-free, SILAC, iTRAQ and
SWATH analysis tools).


For further documentation, please see https://pyopenms.readthedocs.io


Please cite:


