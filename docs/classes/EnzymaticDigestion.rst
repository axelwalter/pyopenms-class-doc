EnzymaticDigestion
==================

.. py:class:: EnzymaticDigestion


   Bases: :py:class:`object`


Cython implementation of _EnzymaticDigestion


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1EnzymaticDigestion.html


   Class for the enzymatic digestion of proteins
   -----
   Digestion can be performed using simple regular expressions, e.g. [KR] | [^P] for trypsin.
   Also missed cleavages can be modeled, i.e. adjacent peptides are not cleaved
   due to enzyme malfunction/access restrictions. If n missed cleavages are allowed, all possible resulting
   peptides (cleaved and uncleaved) with up to n missed cleavages are returned.
   Thus no random selection of just n specific missed cleavage sites is performed.




.. py:attribute:: EnzymaticDigestion.Specificity


alias of :py:class:`pyopenms.pyopenms_5.__Specificity`


.. py:method:: EnzymaticDigestion.digestUnmodified


Cython signature: size_t digestUnmodified(StringView sequence, libcpp_vector[StringView] & output, size_t min_length, size_t max_length)


Performs the enzymatic digestion of an unmodified sequence
-----
By returning only references into the original string this is very fast
-----
:param sequence: Sequence to digest
:param output: Digestion products
:param min_length: Minimal length of reported products
:param max_length: Maximal length of reported products (0 = no restriction)
:returns: Number of discarded digestion products (which are not matching length restrictions)




.. py:method:: EnzymaticDigestion.getEnzymeName


Cython signature: String getEnzymeName()
Returns the enzyme for the digestion




.. py:method:: EnzymaticDigestion.getMissedCleavages


Cython signature: size_t getMissedCleavages()
Returns the number of missed cleavages for the digestion




.. py:method:: EnzymaticDigestion.getSpecificity


Cython signature: Specificity getSpecificity()
Returns the specificity for the digestion




.. py:method:: EnzymaticDigestion.getSpecificityByName


Cython signature: Specificity getSpecificityByName(String name)
Returns the specificity by name. Returns SPEC_UNKNOWN if name is not valid




.. py:method:: EnzymaticDigestion.isValidProduct


Cython signature: bool isValidProduct(String sequence, int pos, int length, bool ignore_missed_cleavages)


Boolean operator returns true if the peptide fragment starting at position `pos` with length `length` within the sequence `sequence` generated by the current enzyme
-----
Checks if peptide is a valid digestion product of the enzyme, taking into account specificity and the MC flag provided here
-----
:param protein: Protein sequence
:param pep_pos: Starting index of potential peptide
:param pep_length: Length of potential peptide
:param ignore_missed_cleavages: Do not compare MC's of potential peptide to the maximum allowed MC's
:returns: True if peptide has correct n/c terminals (according to enzyme, specificity and missed cleavages)




.. py:method:: EnzymaticDigestion.setEnzyme


Cython signature: void setEnzyme(DigestionEnzyme * enzyme)
Sets the enzyme for the digestion




.. py:method:: EnzymaticDigestion.setMissedCleavages


Cython signature: void setMissedCleavages(size_t missed_cleavages)
Sets the number of missed cleavages for the digestion (default is 0). This setting is ignored when log model is used




.. py:method:: EnzymaticDigestion.setSpecificity


Cython signature: void setSpecificity(Specificity spec)
Sets the specificity for the digestion (default is SPEC_FULL)




