RNaseDigestion
==============

.. py:class:: RNaseDigestion


   Bases: :py:class:`object`


Cython implementation of _RNaseDigestion


Documentation is available at http://www.openms.de/current_doxygen/html/classOpenMS_1_1RNaseDigestion.html
 -- Inherits from ['EnzymaticDigestion']


   Class for the enzymatic digestion of RNA
   -----
   Usage:
       from pyopenms import *
       oligo = NASequence.fromString("pAUGUCGCAG");
       -
       dig = RNaseDigestion()
       dig.setEnzyme("RNase_T1")
       -
       result = []
       dig.digest(oligo, result)
       for fragment in result:
         print (fragment)




.. py:method:: RNaseDigestion.digest


       - Cython signature: void digest(NASequence & rna, libcpp_vector[NASequence] & output)
       - Cython signature: void digest(NASequence & rna, libcpp_vector[NASequence] & output, size_t min_length, size_t max_length)


Performs the enzymatic digestion of a (potentially modified) RNA
-----
:param rna: Sequence to digest
:param output: Digestion productsq
:param min_length: Minimal length of reported products
:param max_length: Maximal length of reported products (0 = no restriction)
:returns: Number of discarded digestion products (which are not matching length restrictions)
       - Cython signature: void digest(IdentificationData & id_data)
       - Cython signature: void digest(IdentificationData & id_data, size_t min_length, size_t max_length)


Performs the enzymatic digestion of all RNA parent molecules in IdentificationData (id_data)
-----
:param id_data: IdentificationData object which includes sequences to digest
:param min_length: Minimal length of reported products
:param max_length: Maximal length of reported products (0 = no restriction)
:returns: Number of discarded digestion products (which are not matching length restrictions)




.. py:method:: RNaseDigestion.digestUnmodified


Cython signature: size_t digestUnmodified(StringView sequence, libcpp_vector[StringView] & output, size_t min_length, size_t max_length)


Performs the enzymatic digestion of an unmodified sequence
-----
By returning only references into the original string this is very fast
-----
:param sequence: Sequence to digest
:param output: Digestion products
:param min_length: Minimal length of reported products
:param max_length: Maximal length of reported products (0 = no restriction)
:returns: Number of discarded digestion products (which are not matching length restrictions)




.. py:method:: RNaseDigestion.getEnzymeName


Cython signature: String getEnzymeName()
Returns the enzyme for the digestion




.. py:method:: RNaseDigestion.getMissedCleavages


Cython signature: size_t getMissedCleavages()
Returns the number of missed cleavages for the digestion




.. py:method:: RNaseDigestion.getSpecificity


Cython signature: Specificity getSpecificity()
Returns the specificity for the digestion




.. py:method:: RNaseDigestion.getSpecificityByName


Cython signature: Specificity getSpecificityByName(String name)
Returns the specificity by name. Returns SPEC_UNKNOWN if name is not valid




.. py:method:: RNaseDigestion.isValidProduct


Cython signature: bool isValidProduct(String sequence, int pos, int length, bool ignore_missed_cleavages)


Boolean operator returns true if the peptide fragment starting at position `pos` with length `length` within the sequence `sequence` generated by the current enzyme
-----
Checks if peptide is a valid digestion product of the enzyme, taking into account specificity and the MC flag provided here
-----
:param protein: Protein sequence
:param pep_pos: Starting index of potential peptide
:param pep_length: Length of potential peptide
:param ignore_missed_cleavages: Do not compare MC's of potential peptide to the maximum allowed MC's
:returns: True if peptide has correct n/c terminals (according to enzyme, specificity and missed cleavages)




.. py:method:: RNaseDigestion.setEnzyme


- Cython signature: void setEnzyme(String name)
  Sets the enzyme for the digestion (by name)


- Cython signature: void setEnzyme(DigestionEnzyme * enzyme)
  Sets the enzyme for the digestion




.. py:method:: RNaseDigestion.setMissedCleavages


Cython signature: void setMissedCleavages(size_t missed_cleavages)
Sets the number of missed cleavages for the digestion (default is 0). This setting is ignored when log model is used




.. py:method:: RNaseDigestion.setSpecificity


Cython signature: void setSpecificity(Specificity spec)
Sets the specificity for the digestion (default is SPEC_FULL)




